function f2(a3) {
    new Uint8Array(1024);
    return 256;
}
Uint8ClampedArray.toString = f2;
new Uint8ClampedArray(256);
new BigInt64Array(24);
const v13 = Uint8Array?.constructor;
try { new v13(Uint8ClampedArray); } catch (e) {}
new Uint8Array(4);
-9223372036854775807n | -9223372036854775807n;
-(-30326n);
function F24() {
    if (!new.target) { throw 'must be called with new'; }
    this.length = F24;
    const v26 = this?.propertyIsEnumerable;
    try { new v26(-30326n); } catch (e) {}
    this.a = this;
    3872 >>> 3872;
    try {
        this.a = 3872;
    } catch(e30) {
    }
}
const v31 = new F24();
const t25 = [[]];
delete t25[0];
const v35 = new F24();
v35.length;
new F24();
62324 & 62324;
4294967295 * 4294967295;
function F43(a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    function f48(a49) {
        new BigInt64Array(4095);
        new Uint8Array(255);
        new Uint16Array(2);
    }
    Object.defineProperty(a47, "f", { writable: true, set: f48 });
    try { new a46(); } catch (e) {}
    a47.f = a47;
    try {
        this.b = a46;
    } catch(e60) {
    }
}
new F43(4294967295, F24, v31);
new F43(62324, F43, v35);
const v64 = Symbol.toPrimitive;
const o66 = {
    [v64]() {
    },
};
