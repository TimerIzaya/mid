class C3 {
    constructor(a5, a6) {
        a6 = a5;
        a5[927655969] = a5;
        a5 - a6;
        -1241622467 && a6;
        let v13 = -1241622467 >> -151.21558104346298;
        Math.round(2.2250738585072014e-308);
        (-1241622467) ** -1241622467;
        --v13;
        v13 ^ -1241622467;
    }
}
const v18 = new C3(-29324, -151.21558104346298);
new C3(-151.21558104346298, v18);
const v20 = new C3(12463, C3);
const o21 = {
};
try { Reflect.defineProperty(o21, o21, -29324); } catch (e) {}
const v26 = new Uint8ClampedArray(3);
for (let v27 = 0; v27 < 5; v27++) {
    v26[v27] = v20;
}
for (let [v30] of "bnxIi") {
}
([Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818]).includes(...[-1000.0,-2.2250738585072014e-308,511.99933163650917,-386.8372768814137,Infinity]);
function F35() {
    if (!new.target) { throw 'must be called with new'; }
}
class C37 extends F35 {
}
const v39 = new Date(Date);
function F40(a42) {
    if (!new.target) { throw 'must be called with new'; }
    const v43 = this.constructor;
    try { new v43(); } catch (e) {}
    this.f = v39;
}
const v45 = new F40();
new F40(v45);
new BigInt64Array(3866);
let v52 = 1000000000000.0;
class C53 {
    b = -142.577867451237;
    [v52] = -142.577867451237;
    #m(a55) {
        const v57 = Symbol.toPrimitive;
        const o79 = {
            [v57]() {
                let v59 = Math;
                const v61 = ++v52;
                const v62 = v52 ** v52;
                v59 & (15462 ** 15462);
                +Infinity;
                (15462 || 1000000000000.0) + -142.577867451237;
                v59--;
                +v52;
                v59.log(v61);
                v59.sin(v62);
                try {
                    Symbol("toDateString");
                } catch(e78) {
                }
                return -142.577867451237;
            },
        };
        return this;
    }
}
new Uint32Array(0);
new Uint16Array(3);
const v90 = [256,54026];
-2 | -2;
!-2;
Math.hypot(v90);
