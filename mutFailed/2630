function f3() {
    return 4294967295;
}
function f4(a5, a6) {
    const o13 = {
        ...-128,
        [a6](a8, a9, a10, a11) {
            const t7 = super[a9];
            t7[a8] = a8;
            return a10;
        },
        "h": a6,
        "g": a5,
        "a": 268435439,
        "e": a6,
        "f": a5,
        "d": -128,
    };
    return o13;
}
f4(268435439, 4294967295);
f4(-128, 268435439);
f4(-128, 4294967295);
new Float64Array(4096);
1925 + 1925;
new Float32Array(1925);
const v26 = new Uint32Array(2594);
try { v26.filter(268435439); } catch (e) {}
~-1;
class C33 {
    static 7;
    static [-1] = "string";
    #n(a35) {
        a35 = this;
        a35.e >>>= -35417;
        const o39 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o39);
        return this;
    }
}
const v41 = new C33();
const v42 = v41?.constructor;
try { new v42(); } catch (e) {}
Array();
const v48 = Array();
9.187362692894364 - 9.187362692894364;
class C51 {
    static 9 = 9.187362692894364;
}
C51[9] = C51;
for (const v52 in C51) {
}
class C53 {
    #e;
    static {
        function f55(a56, a57) {
            return a56;
        }
        f55.prototype = f55;
        const o64 = {
            o(a59) {
                try { a59.propertyIsEnumerable(Float64Array); } catch (e) {}
                gc.e = gc;
                const o62 = {
                };
                return gc(o62);
            },
        };
        try { o64.o(-1); } catch (e) {}
        Uint32Array.name = Uint32Array;
        const o67 = {
        };
        o67.h = o67;
        const v69 = new Proxy(Uint32Array, o67);
        const t77 = "o";
        t77[0] = "o";
        o64["o"](o64, Uint32Array, "o", "o", v69);
        const v72 = super[this];
        try { v72.join(-4096, -4096, v72); } catch (e) {}
        const o74 = {
        };
        const v75 = /LD/vds;
        v75.flags;
        [v75,1000.0];
    }
    static f;
    m(a80, a81) {
        const o82 = {
        };
        const o85 = {
        };
        const v87 = new Proxy(Uint8Array, o85);
        v87.d = v87;
        new Proxy(this, o82);
        class C93 {
        }
        function f94() {
            let v95 = 1000000000000.0;
            v95--;
            class C98 {
            }
            new C98();
            const v100 = new C98();
            [C93,C98];
            [257828.6336153492,v100];
            [v100];
            class C104 extends C33 {
            }
            function f105(a106, a107) {
                return -4096;
            }
            Set.toString = f105;
            Set.constructor(Set);
            v48.constructor;
        }
        const v111 = "string" && -4096;
        +a81;
        Math.sqrt(v111);
        a80--;
        -509886178 << -509886178;
        return this;
    }
}
try { C53.constructor(9.187362692894364); } catch (e) {}
const v117 = new C33();
const v118 = v117?.constructor;
try { new v118(); } catch (e) {}
const v120 = new C53();
const v121 = v120?.__lookupSetter__;
try { new v121(Uint32Array); } catch (e) {}
new C53();
try { new WeakSet(); } catch (e) {}
const v131 = new WeakSet();
const v132 = v131.constructor;
try { v132.bind(-4096); } catch (e) {}
class C134 extends v132 {
}
Uint16Array.length = Uint16Array;
const v137 = new Uint16Array(512);
class C139 {
}
try { new C139(); } catch (e) {}
function F141(a143, a144) {
    if (!new.target) { throw 'must be called with new'; }
}
new Float32Array(v137);
1024 + 1024;
try { ("WKgh").italics(); } catch (e) {}
16 >> 16;
Int8Array.d = Int8Array;
255 !== 255;
let v163 = -2;
v163++;
try {
} catch(e166) {
    function f167(a168) {
        return Uint32Array;
    }
}
