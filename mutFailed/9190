const v1 = new Set();
function F2(a4) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v1;
    } catch(e5) {
        const v8 = [601759695];
        const v9 = [1073741824,1073741823,1376142744,1073741825];
        function f10(a11, a12, a13, a14) {
            function f15() {
                const o19 = {
                    toString(a17, a18) {
                        return a11;
                    },
                };
                o19.toString();
                const o28 = {
                    [-4294967297n](a22, a23, a24, a25) {
                        eval();
                    },
                };
                return o28;
            }
            f15();
            v8[Symbol.isConcatSpreadable] = a13;
            a11 = e5;
            a11 = F2;
            try { ("").charCodeAt(Map); } catch (e) {}
            eval(a14);
            %OptimizeFunctionOnNextCall(f15);
            try { v9["find"](..."find", a14, ...v8, ...v9); } catch (e) {}
            return a13;
        }
    }
    try {
        this.g = Set;
    } catch(e38) {
    }
    function F40(a42, a43) {
        if (!new.target) { throw 'must be called with new'; }
        const v44 = this.constructor;
        try { new v44("-268435456"); } catch (e) {}
        a42.prototype;
    }
    try {
        this.c = Set;
        function f48() {
            eval("");
            return -128;
        }
    } catch(e52) {
    }
}
const v53 = new F2(Set);
const v54 = new F2(Set);
new F2(Set);
class C56 extends F2 {
    10 = v54;
    p(a58, a59, a60, a61) {
        let v62;
        try { v62 = new a58(a58, this, a60); } catch (e) {}
        [891351.7498323463,1000000000.0,-1.0,-888175.6554961524,0.8718005510207083];
        [-6.910419865160533e+307,2.2250738585072014e-308,6.537684429706439e+307,1.1833571177235216e+308,0.36423902043392165];
        [0.17599055956781495,-207.05756765110368,-Infinity,-Infinity,-1.0,1000000000.0];
        return v62;
    }
    3622927351;
    static [Set] = Set;
    static [v1] = v53;
    #a;
}
const v66 = new C56();
new C56();
new C56();
let v70 = "match";
const o72 = {
};
new Proxy(F2, o72);
v70 /= "IY2";
const v77 = [];
Reflect.apply(v1.clear, v66, v77);
-47748 & -47748;
~-5;
1.3321728400849283e+308 << Reflect;
gc();
