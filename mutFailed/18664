function f0() {
}
function f2() {
    return undefined;
}
for (let v3 = 0; v3 < 25; v3++) {
    const v4 = [601759695];
    const v5 = [1073741824,1073741823,1376142744,1073741825];
    function f6(a7, a8, a9, a10) {
        a7 >>> a7;
        a9[3];
        ("find").codePointAt(v5);
        try { v5["find"](..."find", a10, ...v4); } catch (e) {}
        return a10;
    }
    for (let v16 = 0; v16 < 10; v16++) {
        f6(v16, v16, v5);
    }
}
class C18 extends f2 {
    static #f;
    constructor(a20, a21) {
        super();
        [-653943372,8,1073741824,-1763410678];
        [-9007199254740992,57638,-536870912];
        [4096,128];
        a20 ** f2;
    }
    [undefined];
    #h;
    static g = f2;
    static #c;
}
const v26 = new C18(C18, C18);
const v27 = new C18(f2, v26, C18);
function f30(a31, a32) {
    const v33 = ("DaoN3").startsWith(0);
    function F34() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v36 = [-1.7602408547300875e+307,-5.0,6.800823572256861e+306,-1000000000000.0,2.2250738585072014e-308,681.5038956878516,-1.5358312952840025e+308,2.220446049250313e-16];
    function F37() {
        if (!new.target) { throw 'must be called with new'; }
        this.g = this;
        function F39(a41, a42, a43) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.g = a41;
            } catch(e44) {
            }
            try {
                this.b = 0;
            } catch(e45) {
            }
            try {
                this.d = this;
            } catch(e46) {
            }
        }
        new F39(f2, f2, a32);
        const v48 = new F39(v33, v36, F34);
        new F39(v48, v48, v33);
    }
    const v51 = new F37();
    const v53 = new WeakSet();
    class C54 {
        static n(a56) {
            let v55 = this;
            --v55;
            v51.h = v53;
            function f59(a60, a61) {
                const o63 = {
                    get g() {
                        return a61;
                    },
                };
                const v66 = new BigInt64Array(5);
                function f67() {
                    return v66;
                }
            }
            for (let v68 = 0; v68 < 60; v68++) {
            }
            return -9007199254740992n;
        }
        static get c() {
            eval();
        }
        constructor(a75) {
            function* f76(a77, a78) {
                yield* v36;
                return a77;
            }
        }
        static #a;
        /*
        constructor(a80, a81) {
            try {
                false || false;
                a80.fuck(false, this);
            } catch(e85) {
                const v86 = e85?.constructor;
                try { new v86(a81); } catch (e) {}
                function f88() {
                    new Int8Array(1073741823);
                }
            }
        }
        */
        static #c = F37;
        #b = F37;
        #f;
        7 = v51;
        h;
    }
    const v92 = new C54();
    v92[7] = v92;
    return "DaoN3";
}
const v93 = new C18(f0, v27);
const v96 = new BigUint64Array(9, undefined, v26);
new Int32Array(2, v93, v93, v96);
new BigInt64Array(132);
function f103() {
    const v105 = this.DataView;
    try { new v105(); } catch (e) {}
    const v108 = ("I").localeCompare();
    const v109 = [1000000.0,0.218433446981681,-5.0,-919787.2036172998,872389.6270716691];
    function f111() {
        function f112(a113) {
            return Uint8ClampedArray;
        }
        Reflect.construct(f112, [Uint8ClampedArray], Uint8ClampedArray);
        return Uint8ClampedArray;
    }
    const v118 = [v108];
    const v120 = Reflect.apply(v109.pop, v108, v118);
    ~65537;
    class C126 extends f103 {
    }
    function f127(a128, a129, a130, a131) {
        const v133 = arguments.constructor;
        try { new v133(); } catch (e) {}
        const o135 = {
        };
        class C136 {
            static a;
            static {
                this >> this;
                this[6];
            }
            static m(a141) {
                gc();
            }
        }
        try {
            class C144 {
                3 = v120;
            }
            new C144();
            new C144();
            new C144();
            C136();
        } catch(e149) {
        }
        return arguments;
    }
    const v150 = new Int32Array(48342);
    for (const v151 of v150) {
        const v154 = new Date();
        v154.getHours();
        typeof 522675525n;
    }
}
function F160(a162, a163, a164) {
    if (!new.target) { throw 'must be called with new'; }
}
const v165 = new F160();
v165.toString = Array;
f103();
new BigUint64Array(C18);
new Date();
const o174 = {
    "execution": "async",
    "type": "minor",
};
gc(o174);
function f176() {
    let v178 = ("Vre").codePointAt(132);
    const v180 = v178 * v178--;
    const v181 = v180 / v180;
    v181 ^ v181;
    return v181;
}
%OptimizeFunctionOnNextCall(f176);
const v183 = new Int16Array();
try { v183.fill(-55149n); } catch (e) {}
const v186 = ([13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2])[4];
new Int32Array();
new Date(Date);
for (let v191 = 0; v191 < 100; v191++) {
}
v186 | v186;
f103();
f103();
