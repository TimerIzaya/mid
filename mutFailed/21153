const v0 = [462.40515612537206,Infinity,1.0404818338489904e+308,0.0,1.4973945563470565e+308,-8.834377960967508e+307,-56.04027895838067,610759.1702074045];
const v1 = [-2.4252278422968887,2.0];
const v2 = [-922735.3066420559,1.0,3.0,-1000000.0,NaN];
const v3 = [10000];
try { v3.map(v0); } catch (e) {}
const v5 = [65536,49200,17698,2127792536];
const v6 = [2146689547,13,2147483648,-15,-4294967297,56311,65536,536870889];
function f7() {
    try { v6.values(); } catch (e) {}
    function f9(a10, a11, a12, a13) {
        return a13;
    }
    return f9;
}
v6.toString = f7;
try { v6.toString(); } catch (e) {}
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    a17.toString = f7;
    try { a17.reduce(v0); } catch (e) {}
    try { a18.sort(a19); } catch (e) {}
    try {
        this.g = a20;
    } catch(e23) {
    }
    try {
        this.e = a20;
    } catch(e24) {
    }
}
const v25 = new F15(v0, v5, v2, v2);
v25.reduce = v5;
v25.g = v25;
new F15(v25, v0, v1, v6);
const v27 = new F15(v2, v2, v6, v5);
function f28(a29) {
    let v30 = -1073741824n;
    v1.e = v30--;
    return v5;
}
v27.toString = f28;
class C32 extends F15 {
    #h = v0;
    [v27];
    static [v0];
    1;
    static m(a34, a35, a36) {
        new Int16Array(3324);
        new Uint32Array(1795);
        new Int8Array(16);
        return a36;
    }
}
new C32();
new C32();
new C32();
2147483649n < 2147483649n;
47248n ^ 47248n;
const v55 = [-9007199254740990,-1024,256,-64592,45766,-10,-7];
let v57;
try { v57 = v55["some"](); } catch (e) {}
const v58 = delete v57?.[1062];
!v58;
for (let v60 = 0; v60 < 5; v60++) {
    function f61() {
        return v58.__proto__;
    }
    const v64 = f61()?.toString;
    try { new v64(); } catch (e) {}
    %OptimizeFunctionOnNextCall(f61);
}
