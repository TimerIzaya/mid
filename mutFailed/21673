for (let i4 = 0, i5 = 10;
    (() => {
        const v6 = i4 < i5;
        class C7 {
        }
        function f8(a9, a10, a11, a12) {
            a10.bind();
            const v14 = a9 / a9;
            v14 % v14;
            return v14;
        }
        f8(i5, C7);
        %OptimizeFunctionOnNextCall(f8);
        return v6;
    })();
    i4--, i5--) {
    i4++;
}
Uint8ClampedArray.d = Uint8ClampedArray;
const v30 = new Uint8ClampedArray(2);
const v31 = v30?.constructor;
("async").lastIndexOf();
const v35 = new Float32Array(-9007199254740990);
const v37 = new Int32Array(v35);
v37.fill();
try { new v31(Uint8ClampedArray, -1073741824, 512); } catch (e) {}
new BigInt64Array(0);
const v45 = new BigInt64Array(128);
try { v45.toSorted(v45); } catch (e) {}
function f47(a48, a49, a50, a51) {
    const v52 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v53 = [601759695];
    const v54 = [1073741824,1073741823,1376142744,1073741825];
    function f56(a57, a58, a59, a60) {
        function f62() {
            const o69 = {
                "e": -4294967295,
                ..."Vre",
                valueOf(a67, a68) {
                },
                ..."Vre",
                4: "Vre",
                "c": -268435456,
                5: -4294967295,
                6: -268435456,
            };
            return o69;
        }
        f62();
        %OptimizeFunctionOnNextCall(f62);
        let v72;
        try { v72 = v54["find"](..."find", a60, ...v53, ...v54, ...522675525n); } catch (e) {}
        v72 <= a59;
        return arguments;
    }
    f56(v53, v52, 522675525n, v52, 522675525n);
    f56(v53, 2, false, 2);
    Int8Array.d = Int8Array;
    const v78 = new Int8Array();
    const v79 = v78.buffer;
    v79.g = v79;
    return Int8Array;
}
%PrepareFunctionForOptimization(f47);
f47();
const v83 = new Date(-9223372036854775807);
const v84 = v83.constructor;
try { new v84(); } catch (e) {}
%OptimizeFunctionOnNextCall(f47);
const v86 = f47();
const v89 = new Int8Array(520);
for (let v90 = 0; v90 < 5; v90++) {
    v89.indexOf(v90);
}
try { v86.of(); } catch (e) {}
