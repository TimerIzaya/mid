const v1 = new Set();
const v2 = [407370.1640053473,0.36268269939970577,-1.0,0.9563992589402126,0.7285628915020091,-780.7529802276729,-598.9635806202447,-4.039273901449314,-5.0];
[4.0,0.3661029739897743,0.3731888894722486,-1.7976931348623157e+308,-1.7976931348623157e+308,Infinity,2.0773407814921327,-5.0,-262.45985404468763];
const v4 = [1000.0,-395.5184786163326,0.8308665242537603,-6.513990481521812,3.0,-1.0,-509.4502693763827];
class C8 extends Set {
    constructor(a10, a11, a12) {
        super(v4);
        function f13() {
            return C8;
        }
    }
    d;
    #p(a15, a16, a17) {
        v1[this] &&= a17;
        function f18(a19, a20, a21, a22) {
            new Uint16Array(-273133395);
            new Int16Array(122);
            const v32 = new BigInt64Array(a17);
            const v35 = Math.pow(-0.9451092977674964, a15);
            Object.defineProperty(v2, 927, { configurable: true, enumerable: true, get: f18, set: a16 });
            const v38 = new Array(1024);
            for (let v39 = 0; v39 < 32; v39++) {
                v38[C8 + v39] = a16;
            }
            a16 ^ a15;
            const v43 = -a17;
            try { v32.copyWithin(v43, a22, v35); } catch (e) {}
            Math[5] ||= a21;
            -536870912 || a17;
            return Uint16Array;
        }
        f18(a17, this, 10000, 0);
        return C8;
    }
}
new C8(127, 10000, v2);
new C8(127, 10000, v2);
new C8(127, 127, v2);
const v58 = new TypeError(51);
v58.indexOf(51);
