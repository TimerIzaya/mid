let v4 = -128;
const v6 = [];
const v9 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v10 = 0; v10 < 5; v10++) {
    function f11() {
        const v13 = Array();
        v13.unshift();
        try {
            v9.forEach(Float64Array);
        } catch(e16) {
        }
        [];
        function F19(a21) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C22 extends F19 {
        }
        const v23 = new C22();
        v23.valueOf = Array;
        const o30 = {
            set g(a25) {
            },
            [v13](a27, a28, a29) {
            },
        };
        for (const v31 in o30) {
            try { v6.flat(4096); } catch (e) {}
            v23.valueOf(v31);
        }
        v4 %= -268435456;
    }
    f11();
    %OptimizeFunctionOnNextCall(f11);
}
function f39() {
    function f40(a41, a42) {
        a42(f40);
        return f40;
    }
    new Promise(f40);
    return f40;
}
for (let v48 = 0; v48 < 25; v48++) {
    Array(36862);
}
new Uint8Array(v4);
new BigUint64Array(36169);
new Uint8Array(913);
const v59 = [];
function f60() {
    const t50 = [];
    t50[6] = 4294967295;
    const o65 = {
        set b(a64) {
        },
        "arguments": v59,
    };
    return o65;
}
f60();
const v69 = new Uint8Array(3521);
for (let v70 = 0; v70 < 25; v70++) {
}
const v72 = 139837843 in v59;
const v74 = 0 <= 0;
const v76 = new Int8Array(0);
for (const v77 in v76) {
    0 ^ v74;
    Object.defineProperty(v59, v59, { writable: true, configurable: true, enumerable: true, value: v72 });
    v59[129] = v77;
}
v69["lastIndexOf"](719458366);
