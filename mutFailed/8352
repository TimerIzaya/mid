let v4 = 9.076248904425327e+307;
v4--;
let v6 = 1e-15;
const v9 = Symbol.search;
const t4 = 1000000.0;
t4[v9] = 1000000.0;
v6 >>= v6;
1000000.0 >> v9;
7 >>> 7;
let v14 = -9007199254740991n;
v14--;
const v18 = [];
let v19;
try { v19 = v18.slice(1000000.0, 1000000.0); } catch (e) {}
function F20() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v18;
    } catch(e22) {
    }
}
const v23 = new F20();
const v24 = new F20();
v24.d = v24;
const v25 = new F20();
function f26(a27, a28) {
    const o52 = {
        "h": v25,
        199: f26,
        "b": F20,
        "a": v18,
        n(a30, a31, a32) {
            try { v19(a28, 1000000.0, a31); } catch (e) {}
            v23[Symbol.replace];
            const v38 = Symbol.iterator;
            const o47 = {
                [v38]() {
                    let v40 = 10;
                    const o46 = {
                        next() {
                            v40--;
                            const v44 = v40 == 0;
                            const o45 = {
                                "done": v44,
                                "value": v40,
                            };
                            return o45;
                        },
                    };
                    return o46;
                },
            };
            try {
            } catch(e51) {
            }
        },
    };
}
new Int8Array(1000);
