function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = a5;
}
function f6(a7, a8) {
}
function f9(a10, a11, a12, a13) {
    const o14 = {
    };
    return a12;
}
function F15(a17) {
    if (!new.target) { throw 'must be called with new'; }
    const o18 = {
        "preventExtensions": f9,
        "setPrototypeOf": f6,
    };
    new Proxy(this, this);
    new BigUint64Array(0);
    new Int32Array(4096);
    new Uint8Array(1250);
    const v30 = this?.constructor;
    try { new v30(); } catch (e) {}
}
new Float32Array(255);
const v37 = new Uint32Array(3);
const v40 = new Int32Array(222);
Math.sinh(222);
const v48 = new Uint32Array(3);
const v51 = new Map();
Object.defineProperty(v40, 1, { writable: true, configurable: true, get: f9, set: f6 });
try { v48.join(Uint32Array, ..."9223372036854775807", v37, ...Uint32Array, 18244n, f9); } catch (e) {}
function f56(a57) {
    return a57;
}
Object.defineProperty(v51, "g", { configurable: true, enumerable: true, get: f56, set: Uint32Array });
Math.log1p();
-"copyWithin";
+(-1073741824);
const v66 = 1073741824 * "copyWithin";
Math.abs("copyWithin");
v66 && -674511.1395561927;
