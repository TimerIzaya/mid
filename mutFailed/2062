class C2 {
}
C2?.constructor;
const v5 = this.DataView;
try { new v5(C2); } catch (e) {}
class C8 {
    static #c;
    static p(a10, a11) {
        try {
            this.#c = 0n;
        } catch(e12) {
        }
        return a11;
    }
    static #b;
    set b(a14) {
    }
    static {
        try { this(); } catch (e) {}
        const v19 = this[Symbol.hasInstance];
        v19.name = v19;
    }
    static valueOf(a21) {
        if (this >= 10000n) {
        } else {
            new Float64Array(1633);
            const v31 = new Float64Array(2534);
            v31[257] = 1;
            new Float32Array(-2147483648);
            const v36 = [723200.4184824808,-1000.0,-523437.54204506474,-964793.6675249395];
            for (let v37 = 0; v37 < 20; v37++) {
                let [,v38,...v39] = v36;
            }
            ([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](gc);
            new Proxy(589);
        }
        return a21;
    }
}
new C8();
BigInt64Array.length;
try { new BigInt64Array(WeakSet); } catch (e) {}
function F52(a54) {
    if (!new.target) { throw 'must be called with new'; }
    new.target.d = new.target;
}
try { new F52(this); } catch (e) {}
const v63 = new C8();
const v64 = v63?.constructor;
try { new v64(); } catch (e) {}
new C8();
/\11a\fb\nc\rd\te\vf/is;
const v68 = /a?(?<=)[x]IT3/vdis;
v68.unicodeSets = v68;
const v69 = /k/uims;
function f70() {
    return v69;
}
5 + 5;
("object").normalize("NFD");
9007199254740990 + 9007199254740990;
9007199254740990 | -9007199254740990;
new Int32Array(Int32Array);
let v82 = -1073741824n;
v82++;
const v85 = [16,v82];
const o87 = {
    "maxByteLength": 3035,
};
try {
    ArrayBuffer.prototype = ArrayBuffer;
    1000 >> 1000;
    const o91 = {
        "maxByteLength": 1000,
    };
    new ArrayBuffer(16, o91);
} catch(e93) {
}
const v94 = v85.flat(16);
v94[1] = v94;
const v96 = new Int8Array(5);
try { v96.lastIndexOf(v5); } catch (e) {}
gc.arguments = gc;
const v100 = new gc(3828);
const v101 = v100?.__defineSetter__;
try { new v101(F52, F52); } catch (e) {}
-512;
new Uint8ClampedArray(512);
("of").replaceAll("of");
