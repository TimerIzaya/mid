const v3 = [-15,324053870,-49081,324053870,324053870];
[-15,-49081,[v3,324053870,-15,-49081],324053870,v3];
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    const o14 = {
        [-352741132]: -352741132,
        set b(a13) {
        },
        "b": 2.220446049250313e-16,
    };
    try {
        new Float64Array(Float64Array);
        o14.b = -9007199254740991;
        Math.atan2(9, 5);
        Symbol.toPrimitive;
        function f24() {
            return f24;
        }
        this.g = a8;
    } catch(e25) {
    }
    try {
        this.h = -49081;
        function f26(a27) {
            function f29(a30) {
            }
            this.onmessage = f29;
            return f26;
        }
    } catch(e31) {
    }
}
new F6(-15, -49081);
new F6(324053870, -49081);
new F6(324053870, -15);
const v37 = new Int8Array(11);
function f38() {
    const v41 = Float64Array.of();
    const v43 = new Date(Date);
    v43.setFullYear(v41, 3811);
    return Date;
}
v37[Symbol.toPrimitive] = f38;
const v49 = new BigUint64Array(127);
const v52 = new Int8Array(3);
function f53() {
    const o66 = {
        "d": 268435440,
        n(a58, a59) {
            return 268435440;
        },
        get c() {
        },
        "a": 4.0,
        __proto__: "cJ",
        "h": "cJ",
        "f": Int8Array,
        "c": 4.0,
        [v37]: 3,
        4: 4.0,
        ...v37,
        valueOf(a62) {
            const o63 = {
                __proto__: this,
            };
        },
        "c": "cJ",
        set e(a65) {
        },
        ...v52,
        ...v49,
    };
    return o66;
}
const v67 = f53();
const v68 = f53();
const v69 = f53();
const v71 = new Uint16Array();
const v74 = new Int32Array();
class C75 {
    static #d = -2;
    constructor(a77, a78) {
        try {
            v71.#d += v74;
        } catch(e79) {
            e79.toString();
        }
    }
}
C75.constructor = Symbol;
C75.constructor;
[v69,v67,v68,v68];
const o85 = {
    "maxByteLength": 4096,
};
const v87 = new SharedArrayBuffer(8, o85);
new Int8Array(v87);
function f91() {
    return 2147483648n;
}
for (let v92 = 0; v92 < 100; v92++) {
    Math.random();
}
const v97 = new Float32Array(4061);
const v98 = v97.indexOf();
for (const v101 in [1000.0,-1000.0,0.4309916776051478,1000000.0,-1.0,-560.6262021777798,NaN,3.0]) {
    Math.tan(-23394);
}
gc();
[];
const v107 = [-54486,11,9007199254740991,268435456,536870912,1073741823,255,1073741824,-2147483648,-3];
const v108 = [65535];
new Set();
function F111(a113, a114, a115) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e116) {
    }
    try {
        function f117(a118, a119, a120) {
            function f122(a123) {
                a123 instanceof F111;
            }
            this.onmessage = f122;
            v74[Float32Array];
        }
        const v128 = ["function",v108,"function"];
        const o129 = {
            "arguments": v128,
            "type": "function",
        };
        new Worker(f117, o129);
    } catch(e131) {
    }
    this.a = a114;
}
function F132(a134, a135) {
    if (!new.target) { throw 'must be called with new'; }
    function f136(a137) {
        try { new a137(a137, a137, a134, a137); } catch (e) {}
        function F139(a141, a142, a143) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = a141;
            } catch(e144) {
            }
            try {
                this.b = a143;
            } catch(e145) {
            }
        }
        return v98;
    }
    this.toString = f136;
    const v146 = this.constructor;
    try { new v146(v107, this); } catch (e) {}
    ++a135;
}
new F132(F132);
const v151 = new Int8Array(520);
const v153 = new Uint8ClampedArray();
const v154 = v153.toReversed();
const v156 = [v154,v154];
Reflect.apply(v151.includes, v151, v156);
