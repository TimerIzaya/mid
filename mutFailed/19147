function f0() {
    -9513n != 1;
    function F4(a6, a7) {
        if (!new.target) { throw 'must be called with new'; }
        const v8 = this.constructor;
        v8.caller;
        try { new v8(this, F4, F4); } catch (e) {}
    }
    const o28 = {
        __proto__: -1,
        [-1]: -1e-15,
        "h": -1,
        set g(a15) {
            [3.0];
            [-1.0,Infinity];
            [339.32788200725395,-0.0];
        },
        get d() {
            const v20 = [268435440,8,7,1073741824,2147483647,70520590,-9223372036854775807,129,268435439,-1147002105];
            v20.concat(v20);
            const v24 = new Float64Array(64);
            return v24;
            delete this[35];
            try {
                this.g = -1;
            } catch(e27) {
            }
            return -1e-15;
        },
    };
    return f0;
}
const v29 = f0();
const v30 = f0();
const v31 = f0();
function f32() {
    return v29;
}
class C33 extends f32 {
    static get b() {
        const v35 = C33--;
        for (const v37 of "I") {
            v37.a %= v37;
        }
        Float32Array.constructor;
        new Int16Array(5);
        Math.tan();
        function F49(a51) {
            if (!new.target) { throw 'must be called with new'; }
            const v52 = this.constructor;
            try { new v52(); } catch (e) {}
            this.g = 257;
            this.g = -1;
            this.h = a51;
        }
        class C54 extends F49 {
            [6];
        }
        new C54();
        new v30(4096);
        function f60(a61, a62, a63) {
            const o86 = {
                n(a65, a66) {
                    class C75 extends Int32Array {
                    }
                    function F81() {
                        if (!new.target) { throw 'must be called with new'; }
                    }
                    class C84 {
                        static get b() {
                        }
                    }
                    return a62;
                },
            };
            return a63;
        }
        new Float64Array(244);
        return v35;
    }
}
try { new C33(); } catch (e) {}
new C33();
const v91 = new C33();
v91.name = v91;
const v92 = new C33();
let v94 = 1972880941;
v94--;
2.43730749637135 >>> 2.43730749637135;
let v100 = 1000000000000.0;
v100--;
function f103() {
    function f104(a105) {
        return f104;
    }
    class C109 {
        constructor(a111) {
            ("valueOf").localeCompare(a111, "valueOf");
        }
    }
    new C109("c");
    Reflect.construct(f104, [Uint8ClampedArray], Uint8ClampedArray);
    return Uint8ClampedArray;
}
%PrepareFunctionForOptimization(f103);
const v116 = v91();
try { v116(); } catch (e) {}
%OptimizeFunctionOnNextCall(f103);
const v118 = v92();
try { v118.toString(); } catch (e) {}
try { Math.tan(2.43730749637135); } catch (e) {}
let v122 = 536870912;
let v123 = 536870912;
Math.fround(v122);
const v125 = v123--;
v125 !== v125;
Math.hypot(v123);
const v128 = v31 + v125;
const v130 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
for (let i133 = 0, i134 = 10; i133 < i134; i134--) {
    const t120 = v130.constructor;
    t120(-1.0);
}
v122--;
v125 | v128;
