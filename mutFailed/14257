const v4 = new WeakSet();
const v7 = new Uint8ClampedArray(751);
const t2 = "127";
t2[116] = 8;
let v9;
try {
const t0 = 751;
v9 = t0(..."127", ..."cause", ..."J", ..."127", ...v4);
} catch (e) {}
new BigInt64Array(8);
const v17 = new BigUint64Array(3);
function f18(a19) {
    for (const v23 of Array(4087)) {
    }
    return BigInt64Array;
}
v17.toString = f18;
const o26 = {
    [v17]: 8,
    "h": "J",
    "b": BigInt64Array,
    "c": v4,
    "e": 22137n,
    "maxByteLength": 257,
};
const v28 = new ArrayBuffer(203, o26);
function f29(a30) {
    const v34 = new Set();
    function F35(a37, a38) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = a37;
        } catch(e39) {
        }
        try {
        } catch(e40) {
        }
        if (a38 >= Uint8ClampedArray) {
        }
        try {
        } catch(e42) {
        }
        try {
            const v43 = v34[this];
            try {
                new F35(v43, -268435456n);
            } catch(e46) {
            }
            this.b = Set;
        } catch(e47) {
        }
    }
    new F35(2, v34);
    return v7;
}
Object.defineProperty(v28, "constructor", { writable: true, configurable: true, value: f29 });
const v49 = v28.slice();
function* f50(a51, a52, a53, a54) {
    try {
        v49.valueOf = v9;
    } catch(e55) {
    }
    yield WeakSet;
    return v49;
}
f50("J", 22137n, 22137n, BigInt64Array);
