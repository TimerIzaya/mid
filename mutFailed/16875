new Uint16Array(4);
function f4(a5, a6, a7, a8) {
    const v9 = a7++;
    v9 << v9;
    a5 &&= Uint8ClampedArray;
}
for (let v11 = 0; v11 < 500; v11++) {
    f4();
}
new BigUint64Array(4);
const v19 = new Uint32Array();
const v20 = v19[40];
for (let v21 = 0; v21 < 25; v21++) {
    try { v20(); } catch (e) {}
}
new Int8Array(16);
[512,1576610880,-7769,13,27890];
const v26 = [46134,-53378,-46941,638766980];
const v27 = [-42446,32683,129,-20007,268435456,129,-4294967296,-65536];
new BigInt64Array(129);
const v33 = new Float64Array(5);
new Float64Array(v33);
let [,v36,...v37] = [723200.4184824808,-1000.0,-523437.54204506474,-964793.6675249395];
new BigUint64Array(255);
function F43(a45, a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
}
class C48 {
}
for (let v49 = 0; v49 < 5; v49++) {
    const v50 = v49 + v49;
    function f51() {
        const v52 = f51 % C48;
        new F43(v52, v50, v52);
        for (const v57 of Array(4087)) {
        }
        return f51;
    }
    f51();
}
new Int8Array(5);
const v63 = new BigUint64Array();
v63[3408] = v26;
new v27();
Reflect.construct(Uint8Array, v27);
function F68(a70) {
    if (!new.target) { throw 'must be called with new'; }
    const v71 = this?.constructor;
    const o80 = {
        [-4294967297n](a74, a75, a76, a77) {
            eval();
        },
    };
    try { new v71(); } catch (e) {}
    try {
        this.f = 145253519;
    } catch(e82) {
    }
}
const v83 = new F68();
new F68(v83);
const o86 = {
};
o86.execution;
gc();
