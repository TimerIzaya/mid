let v0 = 4;
new BigInt64Array(v0);
16 << 16;
const v6 = new Int8Array(16);
const v9 = new BigInt64Array(128);
class C10 {
    n(a12, a13, a14) {
        -v9;
        !v0;
        let v19 = ~128;
        ~128;
        v0--;
        +v0;
        v19++;
        return 16;
    }
}
new C10();
const v25 = new C10();
new C10();
function f27() {
    const o33 = {
        8: 0.043152456200264866,
        get a() {
            this[8];
            Math.acos(0.043152456200264866);
        },
    };
    return o33;
}
const v34 = f27();
v6();
function F37(a39, a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    a40[8];
    this.d = 257;
    this.h = a40;
    function f44(a45, a46, a47, a48) {
        Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: 16 });
        v25[4] = arguments;
        return f44;
    }
}
F37.caller = F37;
const v50 = new F37(Int8Array, v34);
function f52(a53, a54, a55) {
    function f57(a58) {
    }
    this[1] = a55;
}
Worker.e = Worker;
try { ("function").split("function", F37); } catch (e) {}
const v62 = [v50];
const o63 = {
    "arguments": v62,
    "type": "function",
};
const v64 = new Worker(f52, o63);
try { v64.terminateAndWait(); } catch (e) {}
