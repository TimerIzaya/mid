const v0 = [];
const v1 = [536870912,-38415,536870912];
const v2 = [-24923,-19422,-35681,81183426,3,-2,4,-1];
const v3 = [-2147483648,-1358841695];
class C4 {
    constructor(a6, a7) {
        const v8 = super[this];
        const v10 = new WeakMap();
        v3.toLocaleString(...a7, v10, ...v1, v8);
        let [v12] = v2;
        super[this];
        try {
            v1.length = 0;
        } catch(e15) {
        }
    }
    6;
    static [v1] = v2;
}
const v16 = new C4(v0, v3);
new C4(v1, v16);
new C4(v0, v1);
[1.7681634116318046e+308,-1.2192081878869132];
[5.0,1000000000.0,-28.362431122924704,-1000000.0,-393689.81006374315,-1e-15,1000000000.0,1.7976931348623157e+308,865177.0685809727,-1000000000000.0];
[NaN,-27025.198693724,1.7976931348623157e+308,-6.756743684355162,-1000.0,-554178.0625033295];
class C32 {
    static 7;
    static [-1] = "string";
    #n(a34) {
        a34 = this;
        a34.e >>>= -35417;
        const o38 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o38);
        return this;
    }
}
new C32();
Array();
const v45 = Array();
class C47 {
    static 9 = 9.187362692894364;
}
for (const v48 in C47) {
}
class C49 {
    #e;
    static {
        function f51(a52, a53) {
            return a52;
        }
        const o59 = {
            o(a55) {
                const o57 = {
                };
                return gc(o57);
            },
        };
        const o61 = {
        };
        const v63 = new Proxy(Uint32Array, o61);
        o59["o"](o59, Uint32Array, "o", "o", v63);
        const v66 = super[this];
        try { v66.join(-4096, -4096, v66); } catch (e) {}
        const o68 = {
        };
        [/LD/vds,1000.0];
    }
    static f;
    m(a73, a74) {
        const o75 = {
        };
        const o78 = {
        };
        const v80 = new Proxy(Uint8Array, o78);
        v80.d = v80;
        new Proxy(this, o75);
        class C86 {
        }
        function f87() {
            let v88 = 1000000000000.0;
            v88--;
            class C91 {
            }
            new C91();
            const v93 = new C91();
            [C86,C91];
            [257828.6336153492,v93];
            [v93];
            class C97 extends C32 {
            }
            function f98(a99, a100) {
                return -4096;
            }
            Set.toString = f98;
            Set.constructor(Set);
            v45.constructor;
        }
        const v104 = "string" && -4096;
        +a74;
        Math.sqrt(v104);
        class C111 {
            static ["22307"] = "AanB8";
            b;
        }
        new C111();
        new C111();
        const v121 = [34352,4,-9223372036854775808,1092764849,-2147483647,-1162070362,-4294967297,8,-591755449];
        new Uint16Array(v121);
        Symbol.hasInstance;
        const o127 = {
            "execution": "async",
            "type": "minor",
        };
        gc();
        class C130 {
            #n(a132, a133) {
                let v135;
                try { v135 = a133["matchAll"](1000000000000.0, 128, this); } catch (e) {}
                const t121 = "matchAll";
                t121[9] = 128;
                v135?.[1726887188];
                return this;
            }
            static b = 1000000000000.0;
            static #e;
            #b = 128;
        }
        new C130();
        new C130();
        new C130();
        function f143() {
            Math.expm1(3375);
            const v149 = new Float64Array(64);
            v149[5] = v121;
            [v149,v121];
        }
        const v151 = [-1539,1,12];
        function f152() {
            return f152;
        }
        function f153(a154, a155) {
            const o156 = {
                [a154]: v151,
            };
            return a154;
        }
        f153(f153);
        f153();
        f153(f152);
        new f143();
        a73--;
        -509886178 << -509886178;
        return this;
    }
}
new C32();
new C49();
new C49();
const v172 = new WeakSet();
class C174 extends v172.constructor {
}
const v177 = new Uint16Array(512);
class C179 {
}
function F180(a182, a183) {
    if (!new.target) { throw 'must be called with new'; }
}
new Float32Array(v177);
