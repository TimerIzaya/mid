let v2 = -14n;
function f6(a7, a8, a9) {
    const o29 = {
        [a9](a11, a12, a13) {
            v2 ^= v2;
            return v2;
        },
        65536: 2147483648n,
        set a(a15) {
            function F16(a18, a19, a20) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.d = a7;
                } catch(e21) {
                }
                try {
                    this.a = a8;
                } catch(e22) {
                }
            }
            new F16(v2, -1n, -536870912n);
            new F16(a9, -536870912n, this);
            new F16(-1n, a8, f6);
            this[2147483647n] <<= a8;
        },
        "a": a8,
    };
    return o29;
}
const v30 = f6(2147483647n, -536870912n, 2147483647n);
const v31 = f6(-536870912n, v30, 257n);
f6(-1n, v31, -536870912n);
function F35() {
    if (!new.target) { throw 'must be called with new'; }
    function F37() {
        if (!new.target) { throw 'must be called with new'; }
        for (let v39 = 0; v39 < 25; v39++) {
            const v40 = [601759695];
            const v41 = [1073741824,1073741823,1376142744,1073741825];
            function f42(a43, a44, a45, a46) {
                Math.cos(-1073741824);
                try { v41["find"](..."find", a46, ...v40, ...v41); } catch (e) {}
                return v39;
            }
            for (let v52 = 0; v52 < 5; v52++) {
                Object.defineProperty(v40, "length", { writable: true, enumerable: true, value: v30 });
                try {
                    this.__proto__ = v31;
                } catch(e56) {
                }
                f42();
            }
        }
    }
    new F37();
}
new F35();
function F61(a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    new BigInt64Array(1091060517);
}
const v68 = new F61(F61, F61);
new F61(F61, v68);
class C70 {
}
function f71() {
    const v73 = ("D")[0];
    const v74 = v73.substring();
    return v74.charCodeAt(v30, v73, v74);
}
%PrepareFunctionForOptimization(f71);
f71();
-5.0 - -536870912n;
Math.cos(-2147483648);
const v86 = -1073741824 & -1000000.0;
Math.floor(NaN);
NaN * v86;
%OptimizeFunctionOnNextCall(f71);
f71();
