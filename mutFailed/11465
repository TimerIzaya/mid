const v5 = Array(8);
function f6() {
    return f6;
}
const v7 = f6?.apply;
try { v7(8, v5); } catch (e) {}
const v10 = /(?=.)ha\nb\bc/gum;
const v11 = v5.length;
try { ("resizable").m("resizable", v11, Map, v10); } catch (e) {}
new Uint32Array(8);
function F16() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v18 = 0; v18 < 1000; v18++) {
        const v20 = "p" + v18;
        v20.fontcolor();
        this[v20] = v18;
    }
}
new Uint16Array(2878);
class C28 extends Int8Array {
    [12];
}
new Float64Array(16);
function f31() {
    function f32() {
        const v34 = new ArrayBuffer(ArrayBuffer, ArrayBuffer);
        return v34;
    }
    return "function";
}
function F37(a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = a40;
    for (let v42 = 0; v42 < 5; v42++) {
    }
    this.g = 4;
}
const v46 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray);
for (let v47 = 0; v47 < 5; v47++) {
    function f48() {
        new Uint8ClampedArray(-65535n, 268435441n, ..."symbol", f48);
        try {
            v10.d = 268435441n;
        } catch(e53) {
        }
        const v54 = /W(jy2)/udy;
        for (let v55 = 0; v55 < 5; v55++) {
            v55 === v54;
        }
        const o57 = {
        };
        const o64 = {
            __proto__: v46,
            "execution": "symbol",
            "a": v46,
            "d": "a",
            /*
            __proto__: v5,
            */
            [v54](a59, a60, a61, a62) {
                super.test();
            },
            4: v47,
        };
        function f65() {
            const o67 = {
                "c": Array,
            };
            const t68 = o67.c;
            new t68();
            for (const v72 of Array(4087, Array, Array)) {
                v72 | v72;
            }
            return f65;
        }
        f65();
        return f48;
    }
    f48();
    %OptimizeFunctionOnNextCall(f48);
}
