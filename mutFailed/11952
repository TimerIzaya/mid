function f1() {
    const o7 = {
        valueOf() {
            this.d >>>= RangeError;
            Object.defineProperty(this, "d", { get: RangeError, set: RangeError });
            return -2.2250738585072014e-308;
        },
        "f": false,
        "c": false,
        "b": false,
    };
    return o7;
}
f1();
f1();
f1();
new Uint8Array(1000);
new Uint32Array(-57724);
new BigInt64Array(8);
class C23 {
    constructor(a25) {
        let v26;
        try { v26 = this.isInteger(a25, -2147483649, -7.693050480934223, a25, a25); } catch (e) {}
        function F27(a29, a30, a31) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = this;
            } catch(e32) {
            }
            try {
                this.c = a25;
            } catch(e33) {
            }
        }
        const v34 = new F27(F27, -1.7976931348623157e+308, v26);
        new F27(v34, -1.7976931348623157e+308, 8, -57724, v34);
    }
}
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
}
const v42 = new F36();
try { v42(); } catch (e) {}
let v44 = 1694258170;
do {
    v44++;
} while (v44 < -65537)
