Uint8ClampedArray * Uint8ClampedArray;
const v3 = [];
class C4 {
    constructor(a6, a7, a8) {
        function f9(a10, a11, a12) {
            v3.copyWithin();
            try {
                f9(-268435456, 0.6683462416314783, [-268435456]);
            } catch(e18) {
            }
            const v19 = this >> -268435456;
            v19 >> this;
            return -v19;
        }
        f9(this, this, a6);
    }
}
try { C4.call(Uint8ClampedArray); } catch (e) {}
new Uint8ClampedArray(2302);
0 * 0;
const v28 = new Int8Array(0);
try { v28.entries(); } catch (e) {}
new BigUint64Array(7);
const v35 = -1.3874695914798123e+308 & -1.3874695914798123e+308;
const v37 = [0.09625845130830724,-1e-15,0.40226168662621953];
const v38 = [-700765.6455759181,-1.0,-1e-15,238.56580086181475,-6.99438605118472e+307,0.8641795299038513,1000000000000.0,0.6448161003466354];
const v39 = [-1.7976931348623157e+308,585278.7631767453,-1.0,-2.0];
function f40(a41, a42) {
    try {
        v37.f = v35;
    } catch(e43) {
    }
    return Int8Array;
}
v39.toString = f40;
try { v39.toString(); } catch (e) {}
4294967297 - 4294967297;
Array.e = Array;
2124 >> 2124;
const v52 = Array();
function f53(a54, a55, a56, a57) {
    a54 - a54;
    a55.g = a55;
    a56 / a56;
    const o60 = {
        [-9007199254740991]: 512,
        [a56]: v38,
        "b": a54,
    };
    o60[4294967297] = o60;
}
f53.g = -1.3874695914798123e+308;
f53(4294967297, f53, 4294967297, 2124);
f53(2124, v39, v37, v39);
new Uint16Array(52);
const v68 = new Uint32Array(2128);
function f69() {
    return f53;
}
Object.defineProperty(v68, "toString", { writable: true, configurable: true, get: f69 });
for (let v70 = 0; v70 < 100; v70++) {
    f53(512, v68, v68, v52);
}
for (let v72 = 0; v72 < 32; v72++) {
    v72 + v72;
}
