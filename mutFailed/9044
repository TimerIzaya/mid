const o1 = {
    __proto__: 16,
};
const v4 = new Uint8ClampedArray(104);
v4.toLocaleString();
0 == 268435440n;
function F10() {
    if (!new.target) { throw 'must be called with new'; }
}
new F10();
new Float64Array(16);
const v16 = new Uint16Array(1000);
Math.fround();
function F20() {
    if (!new.target) { throw 'must be called with new'; }
}
const v22 = new F20();
try {
} catch(e24) {
}
let v26 = 1000000000000.0;
new Uint16Array(12, -4294967296, v26--);
new Float32Array(129);
const v32 = [Float32Array,v16,v16];
const v33 = [v16,v32];
[v4,Uint16Array,v32,v33,Uint16Array];
class C35 {
}
new Float64Array(6);
-9223372036854775808n / -9223372036854775808n;
function f41(a42, a43, a44, a45) {
    Object.defineProperty(arguments, 4, { writable: true, enumerable: true, value: -9524 });
    arguments[4] = arguments;
    return v33;
}
const v47 = new Float64Array();
function f48(a49, a50) {
    const v51 = a50?.species;
    a50?.constructor;
    return v51;
}
function f54() {
    const o59 = {
        [-1000000.0]: v22,
        set e(a58) {
        },
    };
    return f54;
}
%PrepareFunctionForOptimization(f48);
f48(Math.exp(-1697 | -1982743944), v47);
%OptimizeFunctionOnNextCall(f48);
Math();
const o67 = {
};
new Float64Array(159);
const t56 = 0;
const v72 = new t56();
try { BigUint64Array.apply(v72, 1); } catch (e) {}
