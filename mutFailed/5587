const v3 = [10508,-1450641010];
const v4 = [268435439,v3,268435439,-1450641010];
v4[3];
[-1450641010,v3,v4,-1450641010];
try { ("undefined").strike(); } catch (e) {}
const v12 = [-1450641010,10508,"setUTCDate",-1450641010];
["setUTCDate",false];
[-1450641010,"E",false,v3];
try { new BigUint64Array(v12, 2799, 2799); } catch (e) {}
const v20 = new BigUint64Array(2799);
const o21 = {
};
const v22 = o21.constructor;
const v23 = v22?.fromEntries;
try { new v23(v22); } catch (e) {}
v22(2799).toExponential(v20);
class C28 {
    static {
        const v30 = this.name;
        v30[2] = v30;
        const v32 = this.toString().lastIndexOf(v30);
        v32 / v32;
    }
}
C28.d = C28;
function f34() {
    return f34;
}
const v35 = f34();
function F36() {
    if (!new.target) { throw 'must be called with new'; }
    const v38 = this?.constructor;
    try { new v38(); } catch (e) {}
    try {
        this.d = -65536;
    } catch(e41) {
    }
    try {
        this.b = -65536;
    } catch(e42) {
    }
    try {
        this.e = -65536;
    } catch(e43) {
    }
}
F36.length;
const v45 = new F36();
v45.d = v45;
const v46 = new F36();
v46.e = v46;
new F36();
[4294967297,-9,-9007199254740990,-43006,4294967297,2147483649,-9007199254740990,7,536870888,-16];
[9];
const v50 = [256,9007199254740991,-2147483649,2];
class C51 {
    static e;
    16 = v50;
    e = F36;
    constructor(a53, a54) {
        try {
            false || false;
            a53.fuck(false, this);
        } catch(e58) {
            const v59 = e58?.constructor;
            try { new v59("undefined"); } catch (e) {}
        }
    }
}
try { new C51(10508, "setUTCDate"); } catch (e) {}
const v62 = new C51(v46, v45);
WeakSet.prototype = WeakSet;
const v64 = new WeakSet();
try { v64.delete("E"); } catch (e) {}
const v66 = v64[v62];
try { v66(); } catch (e) {}
const o68 = {
};
try { new Proxy(v45, v35); } catch (e) {}
%VerifyType(Proxy());
let v72 = 0;
for (let i = 0; i < 5; i++) {
    for (let v73 = 0; v73 < 5; v73++) {
        try { ("p").indexOf(v35); } catch (e) {}
        let v76;
        try { v76 = ("p").fontcolor(v73); } catch (e) {}
        try { v76.split(v76, v46); } catch (e) {}
        "p" + v73;
    }
    v72++;
}
