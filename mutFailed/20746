let v5 = -2147483648;
function f6() {
    return 1838857274;
}
function f7(a8, a9, a10, a11) {
    a8 >>> a8;
    a9 >>> a9;
    const o23 = {
        set c(a15) {
            try { a15(a9, 12); } catch (e) {}
            -8;
            ++v5;
            Math.sqrt(8);
        },
        "a": 1838857274,
    };
    o23.a <<= a8[Symbol.search];
    a8.__proto__;
    const v28 = o23?.constructor;
    try { new v28(a10); } catch (e) {}
    return o23;
}
let v30;
try { v30 = f7(-1939678852, -1585983066, -1939678852, f6); } catch (e) {}
const v31 = f7(-1585983066, -1939678852, -1939678852, v5);
f7(1105299012, -1939678852, -1585983066, 1105299012);
f7(1838857274, v5, 1838857274, 1105299012);
for (let v34 = 0; v34 < 10; v34++) {
    v34 - v34;
    const v38 = /(?:a*)+q(?<a>.)/guds;
    try { v38.toString(); } catch (e) {}
    for (let [i49, i50] = (() => {
            const v43 = Symbol.asyncIterator;
            v30[v43] = v43;
            Object.defineProperty(v38, 1073741824, { writable: true, get: eval, set: eval });
            try { v31["getUTCSeconds"](v30, v38); } catch (e) {}
            try { eval.bind(0); } catch (e) {}
            eval();
            return [0, 10];
        })();
        i49 < i50;
        i50--) {
        for (let v57 = 0; v57 < 25; v57++) {
            const v59 = v38.constructor.$4;
            try { v59.charCodeAt(i49); } catch (e) {}
        }
    }
}
