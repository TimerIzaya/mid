const v3 = ["__proto__"];
[[v3,v3,"bigint",v3,"oY4"]];
[6.873414183967199];
const v7 = [-339906.4811411048,452.41095316561496,200.02213983113302,-2.220446049250313e-16,-8.530990680672145e+307,NaN,-2.2250738585072014e-308,347.9459112861166];
const v8 = v7?.values;
try { new v8(); } catch (e) {}
const v11 = ([0.5109155498612239,1000000000000.0,-0.0])?.find;
try { new v11("__proto__"); } catch (e) {}
class C13 {
    get e() {
        this["__proto__"];
        this == v7 ? this : v7;
        return this;
    }
    static ["oY4"];
    #f;
    static 1518;
    f;
}
new C13();
const v20 = new C13();
v20.f;
const v22 = new C13();
for (let v23 = 0; v23 < 5; v23++) {
    function f25() {
        let v28 = 1864489360 << ("c").toLowerCase();
        const v29 = v28--;
        v29 * v29;
        return v29;
    }
    Uint8ClampedArray.h = Uint8ClampedArray;
    const v39 = new Uint8ClampedArray(16);
    v39[10] = v39;
    const v41 = -1322;
    v41 >>> v41;
    const v44 = new Uint8ClampedArray(1322);
    const v45 = v44[315];
    function F46(a48, a49, a50, a51) {
        if (!new.target) { throw 'must be called with new'; }
        const v52 = this?.constructor;
        try { new v52(a48, C13, v22, C13); } catch (e) {}
        a48 === a48;
        try {
            this.a = "536870889";
        } catch(e55) {
        }
        try {
            this.b = a51;
        } catch(e56) {
        }
    }
    new F46(1073741824n, 1073741824n, 257n, "6");
    const v58 = new F46(1073741824n, 257n, 257n, v41);
    const v59 = new F46(v45, 257n, 257n, "536870889");
    BigUint64Array.e = BigUint64Array;
    const v62 = new BigUint64Array(6);
    v62[0] = v62;
    3768 >>> 3768;
    const v67 = new BigInt64Array(4046);
    const v68 = v67[123];
    v68 <= v68;
    let v71 = -115;
    v71--;
    function f74(a75, a76) {
        a76 >>> a76;
        a75++;
        a76 + a76;
        const v80 = a75++;
        const v81 = v80 >> v80;
        v81 << v81;
        try {
            v58.toString = a76;
        } catch(e83) {
        }
        Object.defineProperty(v59, v59, { configurable: true, enumerable: true, get: f74 });
        let o85 = {
            "d": a75,
            ...a75,
            get e() {
                return a76;
            },
        };
        [,...o85] = v67;
        a76[4046];
        3035 >> 3035;
        const o90 = {
            "maxByteLength": 3035,
        };
        512 ^ 512;
        new ArrayBuffer();
        const v95 = new Float32Array();
        try { v95.entries(); } catch (e) {}
        return 115;
    }
    f74(4046, 3768);
    let v99;
    try { v99 = Uint8ClampedArray.bind(f74); } catch (e) {}
    v99.length = v99;
    f25();
    %OptimizeFunctionOnNextCall(f25);
}
