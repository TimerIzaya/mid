const v4 = -16;
const v6 = new Int16Array(16);
const t2 = -1;
const v9 = new t2(129);
const v12 = new v4(1647);
v12[1528];
try { ("SkJcE").match(16); } catch (e) {}
try { ("function").toLowerCase(); } catch (e) {}
function f19() {
    ("-536870912").normalize;
    const v22 = ("-536870912").g;
    const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    for (let v26 = 0; v26 < 5; v26++) {
        const v28 = new Map();
        function F29(a31) {
            if (!new.target) { throw 'must be called with new'; }
            const v32 = this.constructor;
            try { new v32(a31); } catch (e) {}
            a31.size;
            this.h = Map;
        }
        new F29(v28);
        const v36 = new F29(v28);
        function f37() {
            try {
                v25.forEach();
            } catch(e39) {
                e39.a = e39;
            }
            const v41 = Symbol.toPrimitive;
            v41.description;
            for (let v43 = 0; v43 < 5; v43++) {
                function F46(a48, a49, a50, a51) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v52 = v36.constructor;
                    try { new v52(a48, a48); } catch (e) {}
                    a49.isPrototypeOf();
                }
                new F46("HkAXC", "toStringTag");
            }
            Symbol.for();
            return v41;
        }
        f37();
        %OptimizeFunctionOnNextCall(f37);
    }
    const v58 = new Uint16Array(209);
    v58[145] = v22;
}
try {
    v6.b = v9;
} catch(e59) {
}
const v61 = new Int8Array();
const v64 = v61.buffer.slice(2147483648);
const v65 = [140693.55968437064,-1.1852842353837545,1.7976931348623157e+308,0.2891882798796017,1000000.0,-405533.57654950966,-476160.9672552756,-1.2913968641498632e+308,-1.7976931348623157e+308,1000000.0];
v65[9] = v65;
[0.0,2.439947332797196];
const v67 = [3.554050204802966,2.0,-0.9893540922478827,835.4687088452995,1.0,-1000000000000.0,537.8799696886636,-129821.05993193889];
const t57 = "Z";
t57[0] = "Z";
const v71 = v67 <= "Z";
v71 || v71;
const v74 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
try { v74.unshift(-1); } catch (e) {}
function f76(a77) {
    a77 ^ a77;
    return 36002;
}
f76.e = f76;
function f79(a80, a81) {
    try { a80(a80); } catch (e) {}
    a81.length = a81;
    return f76;
}
const v84 = new Promise(f79);
v84[v74] += 36002;
BigInt64Array.length;
new BigInt64Array(1000);
const v91 = new BigUint64Array(127);
try { v91.findIndex(v71); } catch (e) {}
try { (-9007199254740992).log2(-9007199254740992); } catch (e) {}
class C96 extends f19 {
}
for (const v97 in C96) {
}
let v100 = 10;
v100--;
for (;
    (() => {
        const v102 = v100--;
        v102 & v102;
        return v102;
    })();
    ) {
}
class C105 {
}
try { C105.toString(); } catch (e) {}
function* f107(a108, a109) {
}
new Int8Array(268435456);
for (let v112 = 0; v112 < 10; v112++) {
    const v115 = Float64Array.of();
    try { v115.forEach(3811); } catch (e) {}
    const v118 = new Date();
    v118.setFullYear() & v64;
    36862 + 36862;
    Array();
}
