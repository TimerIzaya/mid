function f0() {
}
let v3 = -2147483648;
v3--;
const v6 = /(?:a*)+q(?<a>.)/guds;
v6.compile(1);
("-1073741824").localeCompare(v3);
const v10 = [-991034.5596759731,179.71649176762253,115582.55190338776,-1000000.0];
v10[2];
async function f13(a14, a15) {
    'use strict';
    a15[9] = v10;
    return -21133.120743932668;
}
Int32Array.length;
const v18 = new Int32Array(1);
v18[0] = v18;
const v20 = Array(v18);
try { v20.findLastIndex("-1073741824"); } catch (e) {}
const v24 = URIError(Float64Array);
v24.message = v24;
new BigInt64Array(16);
new Uint16Array(1790);
class C32 extends Map {
}
const v33 = new C32();
try { v33.get(v6); } catch (e) {}
function f35(a36, a37, a38, a39) {
    v33.get(a37);
    for (let v41 = 0; v41 < 5; v41++) {
        const v43 = new Int16Array(Int16Array, Int16Array, Int16Array);
        const v45 = v43["subarray"]();
        function f46() {
            return v45;
        }
        -v41;
    }
    return v33;
}
const v48 = f35();
try { v48.set(C32, v48); } catch (e) {}
function f51(a52, a53, a54, a55) {
}
new Int8Array();
function f58(a59) {
    function F60(a62) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v63 = new F60(F60);
    try {
        function f64(a65, a66, a67) {
            let v68 = 0;
            do {
                const o69 = {
                };
                o69.h = v63;
                const o70 = {
                };
                v68++;
            } while (v68 < 7)
            return f64(a67, v63);
        }
        f64();
    } catch(e76) {
    }
    return a59;
}
f58();
f58();
function f79(a80, a81, a82) {
    const o107 = {
        toString(a84, a85, a86) {
            a81 < this;
            return super[a82];
        },
        get d() {
            const v90 = [1073741824,1073741823,1376142744,1073741825];
            function f91(a92, a93, a94, a95) {
                function f96() {
                    const v98 = Math.expm1(a93);
                    const v99 = Math.tanh();
                    const v100 = Math.hypot(a94, Math);
                    try {
                        v90.findLast(a94);
                    } catch(e102) {
                    }
                    const o103 = {
                        [v99]: v98,
                    };
                    return v100;
                }
                f96();
                eval(a95);
                %OptimizeFunctionOnNextCall(f96);
                return f91;
            }
            return this;
        },
    };
    return o107;
}
class C109 {
    constructor(a111, a112) {
        const o113 = {
            __proto__: a112,
        };
        o113[a112] = o113;
    }
}
const v114 = new C109();
const v115 = new C109(-1000000000.0, v114);
const v116 = new C32(-1000000000.0, v115);
v114.c = v116;
const v117 = f79();
v117.d;
f79(f79, v117, f79);
%OptimizeFunctionOnNextCall(f79);
const v121 = new Uint8ClampedArray(64);
v121.includes(64);
