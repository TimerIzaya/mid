const v3 = [412.90840757223964];
let v4;
try { v4 = v3.sort(v3); } catch (e) {}
const v5 = [NaN,400106.9091008785];
const v6 = v5[1];
const v7 = [-1000000000.0,1000000000000.0];
let v8;
try { v8 = v7.entries(); } catch (e) {}
class C9 {
    static {
        try { this.call(1000000000000.0); } catch (e) {}
        try { new this(); } catch (e) {}
        [278131018,-9007199254740992];
        [18491];
        const v15 = [-4294967297,536870912,-4294967296,-1490609306,65536,268435439];
        try { v15.fill(v7); } catch (e) {}
    }
    static [v8] = 1000000000000.0;
    [-1.0232027525332089e+308] = v5;
    static #b = v5;
    [1000000000000.0];
    #h = v5;
}
const v17 = new C9();
v17[1000000000000] = v17;
v17[1000000000000];
const v19 = new C9();
v19[1000000000000] = v19;
const v20 = v19[1000000000000];
try { v20.splice(v6, 1000000000000.0); } catch (e) {}
const v22 = new C9();
function F23() {
    if (!new.target) { throw 'must be called with new'; }
    const v25 = this?.constructor;
    try { new v25(); } catch (e) {}
    -9223372036854775808 === -9223372036854775808;
}
F23.caller = F23;
const v29 = new F23();
v29.length = v4;
const v30 = new F23();
const v32 = v30?.constructor.prototype;
try { new v30(); } catch (e) {}
const v34 = new F23();
v34.length;
const v36 = v34?.__defineGetter__;
try { new v36(v22, v34); } catch (e) {}
try { ("8").codePointAt(v17); } catch (e) {}
const t48 = "function";
t48[1] = "function";
class C42 extends "number" {
    b = "number";
    set g(a44) {
        let v43 = this;
        ({"c":a44,"d":v43,} = v7);
    }
    static {
        v32.e = this;
        const v46 = super[this];
        ("function").substring(v46, this, v46, "function", "8", this);
        super.c;
        try {
            v29.f = v46;
        } catch(e49) {
        }
    }
}
