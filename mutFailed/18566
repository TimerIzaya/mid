function f3(a4, a5) {
    function f6() {
        return a5;
    }
    function f7(a8) {
        new Map();
    }
    Object.defineProperty(a4, "sup", { configurable: true, get: f6, set: f7 });
    try { a4.sup(); } catch (e) {}
    try { a5.replaceAll("bigint", f3); } catch (e) {}
    const o24 = {
        ["h"](a14, a15) {
            super.f = "bigint";
            return this;
        },
        "g": a4,
        "e": "256",
        65535: "h",
        o(a17, a18) {
            this instanceof this;
            const v21 = ["h"];
            return Reflect.apply(("256").repeat, "h", v21);
        },
    };
    o24[Symbol.toPrimitive] = f3;
    return o24;
}
const v27 = f3("h", "256");
const v28 = f3("bigint", "256");
v28[Symbol.toPrimitive] = f3;
const v31 = f3("256", "h");
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    function f38(a39, a40) {
        function F41(a43, a44) {
            if (!new.target) { throw 'must be called with new'; }
            a44--;
        }
        return a39;
    }
    a35[Symbol.toPrimitive] = f38;
    a36.toString = Symbol;
    a35[65535];
    try {
        this.h = a36;
    } catch(e49) {
    }
    try {
        this.c = a34;
    } catch(e50) {
    }
}
F32[Symbol.toPrimitive] = f3;
new F32(v27, v28, v27, "h");
const v54 = new F32(v28, v28, v28, "256");
v54.b = v54;
const v55 = new F32(v31, v31, v27, "bigint");
function f56(a57, a58, a59, a60) {
    Object.defineProperty(a57, 0, { writable: true, value: v28 });
    a57[0];
    a58[0] = a58;
    const v62 = a59?.__lookupSetter__;
    try { new v62(f56); } catch (e) {}
    a60.e = a60;
    const o71 = {
        "f": F32,
        __proto__: "bigint",
        1493509639: f3,
        "g": v31,
        "d": v28,
        201: v31,
        toString(a65, a66) {
            F32 += F32;
            ++a58;
            new f3(a60, a60);
            a65[Symbol.iterator] = "bigint";
            return "bigint";
        },
    };
    function f72(a73) {
        return "cause";
    }
    o71.valueOf = f72;
    return o71;
}
const v77 = f56?.constructor;
try { new v77(v28); } catch (e) {}
const v79 = f56("h", "h", v28, f56);
v79.replaceAll = "h";
v79[1493509639];
const v81 = f56(v28, "h", v28, v79);
v81[Symbol.toPrimitive] = Symbol;
f56(v81, "256", "256", v55);
function f85() {
}
f85[Symbol.toPrimitive] = f3;
const v88 = /a\sc?/gdi;
function f89(a90) {
    let v91 = 0;
    class C93 {
        #b = v91;
        g = 1.1408591040999836e+308;
        static {
            this.e = this;
            const v98 = v91++;
            -v98;
            ~v91;
            Math.log10(44149);
            const v102 = 44149 + v91;
            v102 >> v102;
            Math.fround(v98);
        }
    }
    const v105 = new C93();
    return v105;
}
v88[Symbol.toPrimitive] = f89;
const v108 = /xe+/gudimsy;
const v109 = /i(?<a>(?<b>(?<c>(?<d>.).).).)/gvisy;
let v113 = -1582101658 / -1582101658;
v113++;
let v117;
try { v117 = ("YPzzJ").toLocaleUpperCase(); } catch (e) {}
const v119 = ("1")?.slice;
function f120() {
    return Symbol;
}
Object.defineProperty(v119, "constructor", { writable: true, configurable: true, get: f120 });
const v121 = v119?.constructor;
try { new v121(f85); } catch (e) {}
try { new v119(2, 2); } catch (e) {}
1236059864 ^ 1236059864;
1236059864 + 1236059864;
const v127 = [];
try { v127.splice(v81, v81); } catch (e) {}
const t135 = [v127];
const v130 = delete t135[0];
!v130;
!v130;
let v133 = 129;
v133 ^ v133;
v133++;
const v136 = ("1")[0];
const v137 = v136.substring(v133);
try { v137.fontsize(v88); } catch (e) {}
function f141() {
    function f142(a143) {
        return 9569;
    }
    class C144 extends f142 {
        #a;
        static g;
    }
    try { ("cJ").search(f141); } catch (e) {}
    const o157 = {
        "d": 268435440,
        "a": v108,
        [v136](a150, a151, a152) {
            Object.defineProperty(v109, v130, { enumerable: true, value: -1707622606 });
            return 4.0;
        },
        "b": v137,
        __proto__: "cJ",
        "f": "cJ",
        ..."cJ",
        8: f141,
        "g": 268435440,
        "e": f141,
        "h": "cJ",
        valueOf(a154) {
            const o155 = {
                __proto__: this,
                2261555780: "cJ",
            };
            super.toStringTag;
            return this;
        },
        "c": "cJ",
    };
}
f141[Symbol.search] = f120;
try { f141(); } catch (e) {}
const v161 = f141();
const v162 = f141();
const v163 = f141();
const v164 = [v163,v161,v162,v162];
const v165 = [v127];
let v166;
try { v166 = v165.reduce(9569); } catch (e) {}
const v167 = [v163,v165,v165,v164];
v167.g = v117;
const v168 = v167?.reduce;
try { new v168(-9007199254740990); } catch (e) {}
const v170 = [-54486,11,9007199254740991,268435456,536870912,1073741823,255,1073741824,-2147483648,-3];
const v171 = v170?.reverse;
try { new v171(); } catch (e) {}
const v173 = [2033313755,-16,16,16,-24747,6,256];
const v174 = [65535];
new Set();
function F177(a179, a180, a181) {
    if (!new.target) { throw 'must be called with new'; }
    const v182 = a179?.values;
    try { new v182(); } catch (e) {}
    a181.g = a181;
    const v184 = this?.__defineGetter__;
    v184.length = v184;
    try { new v184(v108, F177); } catch (e) {}
    let v186;
    try { v186 = a180.entries(); } catch (e) {}
    try { v186.next(); } catch (e) {}
    this.f = a180;
}
try { F177.bind(v166); } catch (e) {}
F177.prototype;
new F177(v164, v174, v167);
const v191 = new F177(v173, v164, v174);
v191.length = v191;
v191.length = v191;
[9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
function F193(a195, a196) {
    if (!new.target) { throw 'must be called with new'; }
    const v197 = this.constructor;
    try { v197.toString(); } catch (e) {}
    try { new v197(v170, this); } catch (e) {}
}
new Uint8ClampedArray(268435440);
