function f0() {
}
-8.70695799614973 <= -8.70695799614973;
-23915n | -23915n;
function f9() {
    return 1486171159n;
}
268435456n !== 268435456n;
const v17 = [-9223372036854775808];
v17[0];
[1000,9007199254740990,4,-4294967296,-1911934186,5,-1686];
let v20 = 5;
v20--;
new Uint8ClampedArray(v20);
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    const v28 = this?.constructor;
    try { new v28(this, a27); } catch (e) {}
    this.c = a26;
}
const v30 = [-16,-2,-56243,65535,268435439,17491,-65535,4294967296];
-57761n === -57761n;
const v35 = [-65535n,-65535n,-10n];
const v36 = [v35,-10n,-65535n];
const v37 = [v30,-65535n,v30,-57761n];
[-10n,-10n,-10n];
[[v37,-57761n,v17,v35,-65535n],v37,v36,v35];
const v41 = [3.836595330454784e+307,-1.1402235194805368e+308];
try { v41.groupToMap(-23915n); } catch (e) {}
const v43 = [991.721527488573,-290835.2265090322];
try {
    v41.a = 2499;
} catch(e45) {
}
const v46 = [-1.0,-1000000.0,-6.453134415503834e+307,-2.2250738585072014e-308,1e-15,-228003.00463890494,1.9400411482062907,-197.7029619198281,Infinity];
try { WeakMap.call(v46); } catch (e) {}
const v49 = /(?:a*)+q(?<a>.)/guds;
function f50(a51) {
    const o55 = {
        set b(a53) {
        },
        get d() {
            return a51;
        },
        __proto__: v49,
    };
    o55.d = o55;
    return o55;
}
f50(v49);
const v57 = new WeakMap();
9 >>> 9;
try { ("g").fontcolor(v35); } catch (e) {}
const v64 = v57.slice(9, "g").normalize();
try { v64.substring(v43, WeakMap); } catch (e) {}
class C66 {
    constructor(a68, a69) {
        a69.sup(v64, "-1723624938").toLocaleLowerCase();
    }
}
try { C66.propertyIsEnumerable(263120751n); } catch (e) {}
const v73 = /\p{Script_Extensions=Greek}\118/gms;
function f74(a75, a76, a77, a78) {
    const o84 = {
        [v73](a80, a81, a82, a83) {
        },
    };
}
class C85 {
}
C85.d = C85;
[-1024,536870889,65536,65536];
const o87 = {
};
o87.b = o87;
function f88() {
    gc(256, gc);
    function* f92(a93) {
    }
    const o96 = {
        toString() {
        },
        n() {
        },
    };
}
f88();
function f98() {
    function f99(a100) {
        try {
            const o101 = {
            };
        } catch(e102) {
        }
    }
    try {
    } catch(e103) {
    }
}
f98.arguments = f98;
const v104 = (a105, a106, a107, a108) => {
    function F109(a111, a112, a113, a114) {
        if (!new.target) { throw 'must be called with new'; }
    }
};
