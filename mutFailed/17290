[];
/(ab|cde)/guim;
const v2 = /V2}/imy;
/xyz{0,1}?/uiy;
new Int32Array(3124);
const v12 = new Uint32Array(174);
let v13 = 1018;
v13++;
Float32Array.BYTES_PER_ELEMENT = Float32Array;
const v16 = new Float32Array(v13);
v16[55];
const o19 = {
};
o19.c = o19;
class C20 {
}
const v21 = new C20();
v21 << -1557853178;
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = F25;
}
const v29 = F25?.bind;
try { new v29(o19); } catch (e) {}
const v31 = new F25();
const v32 = new F25();
new F25("function", v31);
let v34 = 4096;
v34--;
const v36 = new Float32Array();
const v37 = v36?.constructor;
try { new v37(v2, v2, Uint32Array); } catch (e) {}
class C39 {
    static {
        try { new this(); } catch (e) {}
        let v42;
        try { v42 = new this(); } catch (e) {}
        const v43 = v42?.constructor;
        try { new v43(); } catch (e) {}
        for (let v45 = 0; v45 < 10; v45++) {
            v45 % v45;
            function f47() {
                return v45;
            }
            const v48 = [601759695];
            const v49 = [1073741824,1073741823,1376142744,1073741825];
            v49[1];
            522675525n === 522675525n;
            function f53(a54, a55, a56, a57) {
                f47();
                "find" == "find";
                let v61;
                try { v61 = v49["find"](..."find", a57, ...v48, ...v49, ...522675525n); } catch (e) {}
                const v62 = v61 <= a56;
                v62 && v62;
                v62 && v62;
            }
            f53.length = f53;
            for (let v65 = 0; v65 < 10; v65++) {
                f53();
            }
        }
        const v68 = ("object").__proto__?.trimRight;
        try { v68(); } catch (e) {}
    }
}
257 & 257;
new Uint16Array(257);
try { new Uint32Array(v32, Uint32Array, F25); } catch (e) {}
new Uint32Array(129);
new WeakSet();
const v82 = new Uint32Array(1024);
v82[486] = v82;
let v83 = 9;
v83++;
new Float64Array(3124);
159 >>> 159;
const v90 = new Uint32Array(1024);
const v91 = v90?.constructor;
try { new v91(v12, v2, v90); } catch (e) {}
function f93(a94) {
    function f96(a97) {
        try { a94.valueOf(a97, Uint32Array, WeakSet, a97, this); } catch (e) {}
    }
    this.onmessage = f93;
}
const v101 = ["function"];
const o102 = {
    "arguments": v101,
    "type": "function",
};
const v103 = new Worker(f93, o102);
try { v103.terminateAndWait(); } catch (e) {}
