const v0 = /a[bc]dlWma+?/guis;
const v1 = /4\p{Nd}/my;
const v2 = /(?:a*)*/udy;
6n << 6n;
function F7(a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = v0;
    a11--;
    try {
        this.d = v0;
    } catch(e13) {
    }
    try {
        this.e = a9;
    } catch(e14) {
    }
}
const v15 = new F7(v0, 1865244618n, -2147483649n);
const v16 = new F7(v2, -2147483649n, 6n);
function f17() {
    class C19 {
        #a = 1453;
        1073741825;
    }
    return F7;
}
Object.defineProperty(v16, "valueOf", { writable: true, configurable: true, enumerable: true, value: f17 });
v16.d;
Math.trunc(4294967297);
Math.asin(20907);
const v26 = Math.cos(20907);
-v16;
const v28 = !4294967297;
const v29 = new F7(v1, -2147483649n, 6n);
10 % 10;
const v33 = new Float32Array(10);
const v34 = v33?.constructor;
function f35() {
    return v16;
}
Object.defineProperty(v34, 0, { writable: true, configurable: true, enumerable: true, get: f35 });
try { new v34(v28, v28, v15); } catch (e) {}
%VerifyType(1865244618n);
let [] = v33;
try { v29["reduceRight"](v16, v1, v1, v15, v26); } catch (e) {}
v29[-1];
new Uint8ClampedArray(5);
Object.defineProperty(Float32Array, 2, { configurable: true, value: 5 });
const v45 = new Float32Array(128);
try { v45.reverse(); } catch (e) {}
16 * 16;
Int16Array[1] = 16;
new Int16Array(Int16Array);
const v53 = new Int8Array(0);
let v54;
try { v54 = v53.lastIndexOf(16); } catch (e) {}
v54 >>> v54;
try { new Uint8Array(Float32Array, v45, v45); } catch (e) {}
Uint8Array.e = v53;
Uint8Array.e = Uint8Array;
const v59 = new Uint8Array(257);
const v60 = [Int16Array,v59,16,16,16];
try { v60.lastIndexOf(v29); } catch (e) {}
[Int8Array,v53,[v60]];
-1000000000.0 - -1000000000.0;
948737.12760097 >> 948737.12760097;
-2.2250738585072014e-308;
const v72 = 2.2250738585072014e-308 + 2.2250738585072014e-308;
v72 / v72;
let v74 = 135.68951961804942;
let v75 = v74++;
v75--;
const v79 = new Int16Array(2183);
Uint8Array.e = 2.2250738585072014e-308;
Uint8Array.e = Uint8Array;
const v82 = new Uint8Array(255);
const v83 = v82?.with;
try { new v83(1865244618n, 1865244618n); } catch (e) {}
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v87 = new Int16Array(8);
try { parseFloat(16); } catch (e) {}
async function f90(a91, a92, a93) {
    a92 >>> a92;
    a93 ^ a93;
    const v96 = delete v87[-1000000000.0];
    v96 && v96;
    let [v98,v99,...v100] = v79;
    try { v100.toLocaleString(); } catch (e) {}
    let v102 = v79[5];
    v102--;
    await v99;
    return Uint8Array;
}
const v106 = +-36313;
v106 === v106;
const v108 = -36313 + v74;
~v108;
v106 || (v74 / v108);
