new Float64Array(4002);
BigUint64Array.e = 4002;
const v5 = new BigUint64Array(1000);
new BigInt64Array(79);
Date.toString = Date;
new Date();
const v12 = [v5,BigInt64Array,BigUint64Array,[Float64Array],1000];
[v12,Date,v12,1000];
function F14() {
    if (!new.target) { throw 'must be called with new'; }
    this.toString = Date;
    try {
        this.c = -65537;
    } catch(e17) {
    }
    try {
        this.g = -65537;
    } catch(e18) {
    }
}
const v19 = new F14();
let v20 = new F14();
function f21() {
    return Float64Array == F14 ? Float64Array : F14;
}
v20.valueOf = f21;
const v24 = new F14();
function f25() {
    return Date;
}
Object.defineProperty(v24, "toString", { writable: true, enumerable: true, get: f25 });
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = a28;
    try {
        this.f = v24;
        new BigUint64Array(v5, v20 /= v24);
    } catch(e34) {
    }
    try {
        this.e = v24;
    } catch(e35) {
    }
}
const v36 = new F26(v20, v24);
v36.toString = f25;
const v37 = v36?.constructor;
try { new v37(F26, v24); } catch (e) {}
new F26(v24, v24);
new F26(v24, v19);
let v44 = 591114.0785999324;
const v45 = v44++;
v45 & v45;
const v48 = [v44,v44,v44];
4 | 4;
function F51() {
    if (!new.target) { throw 'must be called with new'; }
    const v53 = this?.__defineGetter__;
    try { new v53(v19, 11n); } catch (e) {}
    let v55;
    try { v55 = this.toString(this, F51, F51, this); } catch (e) {}
    try { v55.trimStart(); } catch (e) {}
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    let v60;
    try { v60 = Date.toString(F51, 9223372036854775807); } catch (e) {}
    Date();
    function f64() {
        return v55;
    }
    function f65(a66) {
        --a66;
    }
    Object.defineProperty(Uint32Array, 2, { writable: true, configurable: true, get: f64, set: f65 });
    let v68;
    try { v68 = new Uint32Array(Uint32Array, Uint32Array, 4); } catch (e) {}
    v68[Symbol.replace] = f21;
    try { v68.findIndex(v60); } catch (e) {}
    Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
    const v72 = new Uint32Array(5);
    let v73;
    try { v73 = v72.reduce(Date); } catch (e) {}
    try { v73.replaceAll(v68, v73); } catch (e) {}
    const v77 = new Set(v48);
    try { v77.forEach(v19); } catch (e) {}
    const v79 = v77?.add;
    try { new v79(v68); } catch (e) {}
    let v82;
    try { v82 = ("delete").blink(); } catch (e) {}
    v82[4] = v82;
    const v83 = v77["delete"](839612.5677247904);
    v83 || v83;
    const v85 = v83 || v83;
    v85 || v85;
    const v87 = v85 && v85;
    !v87;
    19793 >>> 19793;
    const o91 = {
    };
    o91.b = o91;
    o91.e = 19793;
    try { new Array(9223372036854775807); } catch (e) {}
    let v95;
    try { v95 = ("getPrototypeOf").blink(); } catch (e) {}
    v95[28];
    let v97;
    try { v97 = v95.strike(v44); } catch (e) {}
    try { v97.replace(19793, v36); } catch (e) {}
    -1.7976931348623157e+308 - -1.7976931348623157e+308;
    class C101 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C102 extends C101 {
        ["getPrototypeOf"] = C101;
    }
    C102.e = v60;
    try { new C102(); } catch (e) {}
    try { new C102(); } catch (e) {}
    C102.e = C102;
    const v105 = new C102();
    v105.constructor = f64;
    const v106 = v105?.getPrototypeOf;
    try { v106(); } catch (e) {}
    let v108;
    try { v108 = new v106(); } catch (e) {}
    function f109() {
        return v48;
    }
    v108.constructor = f109;
    const v113 = v108?.constructor;
    try { new v113(); } catch (e) {}
    const v115 = v105.constructor;
    let v116;
    try { v116 = new v115(F51, v87); } catch (e) {}
    const v117 = v116?.getPrototypeOf;
    try { new v117(); } catch (e) {}
    const v119 = Array(19793);
    for (const v120 of v119) {
    }
    const v121 = [v119,v119,v119,v119,v119];
    v121.g = v121;
    let v122;
    try { v122 = v121.includes(839612.5677247904); } catch (e) {}
    v122 || v122;
    const v124 = v122 && v122;
    v124 || v124;
    Object.defineProperty(BigUint64Array, "e", { writable: true, configurable: true, enumerable: true, value: BigUint64Array });
    BigUint64Array.e = BigUint64Array;
    const v127 = new BigUint64Array();
    try { v127.reduceRight(v48); } catch (e) {}
    for (let v129 = 0; v129 < 5; v129++) {
        v129 >> v129;
    }
    ([[v121,v121,v121]])[0];
}
const v134 = new F51();
v134.constructor = Date;
v134?.constructor;
function f136() {
    const o137 = {
    };
    const o138 = {
    };
    try {
        const o139 = {
        };
    } catch(e140) {
    }
    return undefined;
}
const o141 = {
    "apply": f136,
};
