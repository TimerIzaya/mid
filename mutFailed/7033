let v5 = -1024;
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
}
const v12 = new F6();
const v13 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v14 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
function F16(a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
}
class C20 {
}
const v22 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v23 = [601759695];
function f25(a26, a27, a28, a29) {
    function f30() {
        let v33 = Float64Array;
        const v35 = Array();
        function f36() {
            return f30;
        }
        function f37(a38) {
            return F16;
        }
        Object.defineProperty(v35, 0, { configurable: true, enumerable: true, get: f36, set: f37 });
        v35.unshift(v5);
        const v41 = new Set();
        function F42(a44, a45) {
            if (!new.target) { throw 'must be called with new'; }
            F42(a45, v41);
        }
        v33 = a27;
        const v47 = v13.length;
        try {
            v13.forEach(v33);
        } catch(e49) {
        }
        const v50 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        class C52 {
        }
        const v53 = new C52();
        try {
            v53.__proto__ = F16;
            const v54 = [];
            class C55 {
            }
            function* f56(a57, a58) {
                yield* v54;
                return v54;
            }
        } catch(e59) {
        }
        const v60 = Symbol.toPrimitive;
        const o66 = {
            toString(a62, a63) {
                const v64 = a29 && v33;
                a62 *= v60;
                return v64 <= v50;
            },
        };
        const o87 = {
            "c": -4294967297n,
            [522675525n](a69, a70) {
            },
            "c": v23,
            valueOf(a72, a73) {
                return F42;
            },
            [-4294967297n](a75, a76, a77, a78) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v22,
            ...v12,
            [v60]() {
            },
            "type": C20,
            ..."Vre",
            valueOf(a81, a82) {
            },
            ..."Vre",
            4: "Vre",
            toString(a84, a85, a86) {
                return v13;
            },
            5: -4294967295,
            6: -268435456,
        };
        new Float32Array(1334);
        v5 %= -268435456;
        new Uint32Array(v14, v47, v60);
        try {
            new Float64Array(127);
        } catch(e95) {
        }
        new Float64Array(3);
        new Uint16Array(2);
    }
    const v102 = f30();
    %OptimizeFunctionOnNextCall(f30);
    return v102;
}
new Float64Array(10);
const v104 = [-1e-15,-2.0,4.0];
const v105 = [795.4751676913663,916.0660535964746,692.8569144836281,9.930092247719177,0.13324776174156971];
const v106 = [-5.0,-2.0,-1.5942587568933252e+308,1.0730723170600494e+307,0.0,-2.2250738585072014e-308,-446.9921213911738];
class C107 {
    [v106] = v105;
    static #c;
    #o(a109, a110) {
        Symbol.search;
    }
    set e(a114) {
        this[this] = v104;
        SharedArrayBuffer();
        Uint8ClampedArray();
    }
}
const v121 = new C107();
class C122 extends C107 {
    constructor(a124, a125, a126) {
        super();
        class C128 extends v121.constructor {
            static #a = this;
            static [v105] = this;
        }
    }
    4294967295;
}
const v132 = ("undefined").localeCompare("undefined", "symbol", "undefined");
const v133 = [];
[v133,v133,v133,v133];
new BigInt64Array(13);
new Uint16Array(3225);
const v142 = [];
class C143 {
}
const v144 = new C143();
function F146(a148, a149, a150, a151) {
    if (!new.target) { throw 'must be called with new'; }
    const v152 = this?.constructor;
    try { new v152(a149, v142, -1263139894, a149); } catch (e) {}
    const v154 = a151?.constructor;
    try { new v154(v144); } catch (e) {}
}
new Int8Array(2);
class C160 {
}
v132.normalize();
function f162(a163, a164, a165) {
    'use strict';
    return a163;
}
const v168 = new Int32Array(2917);
v168["lastIndexOf"](10);
const v172 = new C160();
const v173 = new C160();
const v174 = [v173,v172];
const v175 = [Infinity,-686.9856326146617,0.47369378110968274,-7.24289104755818];
v175.includes(...v175);
for (let v177 = 0; v177 < 5; v177++) {
}
let {"c":v179,"g":v180,"length":v181,} = "size";
function F182(a184, a185, a186, a187) {
    if (!new.target) { throw 'must be called with new'; }
    a184.unshift(v172);
}
new F182(v174);
new F182(v174);
