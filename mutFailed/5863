function F6(a8, a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 574.8113187769941;
    } catch(e11) {
    }
    try {
        ("c").normalize();
        function F14() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v17 = new F14();
        v17[Symbol.toPrimitive] = gc;
        this.b = Infinity;
    } catch(e20) {
    }
    try {
        this.g = a9;
    } catch(e21) {
    }
}
const v22 = new F6(Infinity, -7787, Infinity);
const v23 = new F6(574.8113187769941, -2, v22);
const v24 = new F6(-1.7976931348623157e+308, -2, -1.7976931348623157e+308);
const v26 = new Uint8ClampedArray();
const v28 = new BigUint64Array();
const v29 = /anVXYFzN(x)(x)(x)\3/gvdms;
try { v28.reduceRight(v29); } catch (e) {}
const v31 = [v24,7471,v24,v24];
const v32 = [v22,v24];
[F6,-1.7976931348623157e+308];
function F34(a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a37;
    } catch(e39) {
    }
    try {
        this.h = a36;
    } catch(e40) {
    }
}
new F34(v22, -2, -2);
new F34(v22, 7471, -7787);
new F34(v23, v23, 7471);
class C47 {
    static [v26];
    static {
    }
    n(a50) {
        this[a50] = 7471;
    }
    c = -261.99102172609366;
    ["localeCompare"];
    static [v24];
    toString(a52, a53) {
        function f55(a56, a57, a58) {
            const v61 = new Uint32Array(a58);
            new Int16Array([v61], v61);
            function f66(a67) {
                a57[5] ||= this;
            }
            this.onmessage = f66;
            const v70 = new SharedArrayBuffer(35);
            new BigUint64Array(v70);
        }
        do {
            function F73(a75, a76, a77, a78) {
                if (!new.target) { throw 'must be called with new'; }
                new Date();
                const v83 = -7 - -7;
                const v85 = new Uint8Array(4096);
                v85.includes(v83);
                const o89 = {
                    valueOf(a88) {
                        return 7471;
                    },
                };
                try {
                    this.a = "localeCompare";
                } catch(e90) {
                }
            }
        } while (0 < 6)
    }
}
const v93 = new C47();
new v32();
const v95 = new C47();
function F96(a98, a99) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e100) {
    }
    try {
    } catch(e101) {
    }
}
const v102 = new F96(C47, v31);
const v105 = new Float64Array(147);
const o109 = {
    p(a107, a108) {
        super.a = C47;
        return Uint8ClampedArray;
    },
    "maxByteLength": -2,
};
function f110() {
    return f110;
}
Math.atan2([], -40875);
try { new C47(...-1.0, v102, v93, v95, F96, ...v105); } catch (e) {}
const o116 = {
};
