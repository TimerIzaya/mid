class C3 {
    constructor(a5) {
        try {
            this.f = a5;
        } catch(e6) {
        }
        const t6 = [-65317,-58155,536870889,976,536870889];
        t6[2] = 13;
        function F9() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                const o14 = {
                    "maxByteLength": 1000,
                };
                new ArrayBuffer(10000, o14);
            } catch(e16) {
            }
        }
        Reflect.construct(a5, [a5,Reflect,Reflect], a5);
    }
    valueOf(a21) {
        const o22 = {
        };
        try {
            o22.f = this;
        } catch(e23) {
        }
        try {
            const o24 = {
            };
            o24.f = this;
            o24.g = a21;
        } catch(e25) {
        }
        try {
            const o26 = {
            };
            o26.f = this;
            o26.g = a21;
            o26.d = a21;
        } catch(e27) {
        }
        try {
            const o28 = {
            };
            o28.f = this;
            o28.g = a21;
            o28.e = 0.07974897152253235;
        } catch(e29) {
        }
        const v32 = new Float32Array(2427);
        new Uint8Array(v32);
        return 0.6297051633365477;
    }
}
new C3(536870889);
const v36 = new C3(C3);
const v37 = new C3(v36);
function f41(a42, a43) {
    const o75 = {
        81: a42,
        n() {
            return this;
        },
        toString(a46, a47, a48) {
            super[v37];
            return a43;
        },
        "a": 536870889,
        "c": 256,
        "h": v37,
        1: a42,
        __proto__: C3,
        set d(a51) {
            for (let i54 = 0, i55 = 10; i54 < i55; i54++, i55--) {
                ("major")?.then;
                const v67 = 1896665525 >>> 1896665525;
                Math.atan2(v67, v67);
                new Int8Array(268435456);
                const o73 = {
                    "execution": "async",
                    "type": "major",
                };
                gc(o73);
            }
        },
    };
    return o75;
}
f41(256, 256);
f41(536870889, 256);
f41(536870889, 256);
([Float32Array])["concat"]().pop();
