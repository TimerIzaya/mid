const v2 = new Int32Array(1263);
let [v3,v4] = v2;
const v5 = v4++;
v3 = 1263;
let v6;
try { v6 = v2.findIndex(v4, v4); } catch (e) {}
const v7 = typeof v6;
("function")?.small;
try { new Int32Array(); } catch (e) {}
!(v7 === "function");
const v15 = new Int8Array(8);
v15[5];
function f18(a19, a20, a21) {
    function f23(a24) {
        %VerifyType(v4);
    }
    this.onmessage = f23;
    new Array(1024);
}
("function")[1];
const v31 = [1263,f18,2187];
const o32 = {
    "arguments": v31,
    "type": 2187,
};
const v33 = new Worker(f18, Int8Array);
const v34 = v33?.__lookupSetter__;
try { new v34("function"); } catch (e) {}
new Uint32Array(2187);
function F38(a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    a41[7] = a41;
    try {
        this.f = a41;
    } catch(e43) {
    }
    try {
        this.c = a41;
    } catch(e44) {
    }
    try {
        this.h = v15;
    } catch(e45) {
    }
}
const v46 = new F38(F38, v15, v2);
const v47 = new F38(Uint32Array, v15, v46);
function f48() {
    v15[Int8Array] = f48;
    try {
        v31.lastIndexOf("function", 64);
    } catch(e51) {
    }
    return f48;
}
try { v5(); } catch (e) {}
new F38(v15, v47, Int32Array);
new WeakMap();
const v58 = [-21696350,-6,2,9007199254740991];
([-539523665])[0];
function F61(a63, a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    const v66 = this?.__defineGetter__;
    try { new v66(-2.2250738585072014e-308, -2.2250738585072014e-308); } catch (e) {}
    a64 / a64;
    268435440 >>> 268435440;
    const v72 = new Float32Array(this, a65, a65);
    const v74 = new Uint8Array(268435440);
    new Uint8ClampedArray(129);
    v74[6] = v72;
}
try { new F61(v6, v3, v6); } catch (e) {}
const v79 = new F61(v58, -1000000000000.0, -2.2250738585072014e-308);
const v80 = v79?.constructor;
try { new v80(f18, v79, v6); } catch (e) {}
new F61();
