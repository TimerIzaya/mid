const v0 = [257,-2147483649,0];
const v1 = [806708344,-128,9,7,1514143929,1967254376];
[-868692135,-41843,12,-525202295];
const v3 = [536870887,-1314597871,1247685076,1007727974,268435456,2147483649];
[-644778719,37573,-1332496471,-14231,-48693,1073741824,16,65535,4096,-1];
const v5 = [-2,4];
class C6 {
    static {
        v0 && v0;
        const v9 = this[0];
        try { v9(v3); } catch (e) {}
        const o13 = {
            "maxByteLength": 3516,
        };
        const v15 = new SharedArrayBuffer(3516, o13);
        new BigUint64Array(v15);
    }
}
const v18 = new C6();
const v19 = new C6();
const v20 = new C6();
const v21 = [C6,v5,v20,v19,v3];
[v20,v18,v0,v5];
[v3];
new Date();
function f26(a27) {
}
const v28 = f26(f26);
f26();
const v31 = new Set();
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
}
new F32(v28);
const v39 = new Proxy(v21, v31);
v39.hasOwnProperty();
try {
    v1.d = v19;
} catch(e41) {
    for (let [v42,v43] of v19) {
    }
}
for (let v44 = 0; v44 < 25; v44++) {
    const v45 = [601759695];
    const v46 = [1073741824,1073741823,1376142744,1073741825];
    function f47(a48, a49, a50, a51) {
        try { v46["find"](..."find", a51, ...v45); } catch (e) {}
        const v54 = [Set];
        [v54,v54,v44];
        v45 || f26;
    }
    for (let v57 = 0; v57 < 5; v57++) {
        f47();
    }
}
