class C3 {
    get b() {
        this & this;
        var b = ("arguments").__proto__;
        return "uUrU";
    }
    constructor(a8) {
        class C9 {
            #f = a8;
            ["arguments"] = a8;
        }
        new C9();
        new C9();
        new C9();
    }
}
const v13 = new C3(369932994);
let v14 = new C3(v13);
const v15 = new C3("uUrU");
const v21 = new Int16Array(16);
const v24 = new Int16Array(6);
const v26 = [1.671431195240198e+308,2.0];
try { v24("undefined"); } catch (e) {}
const v30 = ("undefined")[Symbol.asyncIterator];
369932994 > v30;
[1.0,-1.5583796317284629e+308,3.0,-2.220446049250313e-16,-4.0,1.2599896964472166e+308,0.06705020496316594];
const v33 = [522.1907442556922,1.0854260985048695e+308,3.071234354635923,-3.7542566787039996e+307,-4.0,-1.0,395080.72081790515,-1000000.0,-58775.11747788766];
let v34;
try { v34 = ("arguments").indexOf(v14); } catch (e) {}
const t29 = "uUrU";
t29[v15] = C3;
"-53373" && v24;
const v36 = new Int16Array(v33);
new Uint16Array(0);
function F42() {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = -(-7);
    v45 ** v45;
}
function F47(a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = ("arguments")[8];
    v14 **= v51;
    v30[4] = a49;
    try { v34(...v26, v51, a50, ...v24, v14, ...v36); } catch (e) {}
    let [...v53] = v21;
    const v54 = this.constructor;
    try { new v54(v54, F42, F47, this, v54); } catch (e) {}
    new F42();
}
new F47(F42, F42);
