function f6(a7) {
    const o8 = {
        ...a7,
        6: 1073741823,
    };
    return 256;
}
const v14 = new Int16Array(2872);
try {
    v14.length = 4;
} catch(e16) {
}
const v21 = -4294967296n * 9007199254740991n;
function F22(a24) {
    if (!new.target) { throw 'must be called with new'; }
    a24 ^ a24;
}
new F22(v21);
let v27 = [-4.0];
const v28 = [-65536,-128,v27];
const v29 = [v28,-4.0,v28,v28,-128];
const o36 = {
    set b(a32) {
        function f33(a34) {
            return f33;
        }
        class C35 extends f33 {
        }
    },
};
let v37 = -1000000.0;
function F39() {
    if (!new.target) { throw 'must be called with new'; }
    ("of").replaceAll("of");
    const v44 = new Int32Array(656290945);
    for (const v45 of v44) {
        const o48 = {
            "maxByteLength": 1293466293,
        };
        new SharedArrayBuffer(1796, o48);
    }
    this.c = F39;
    this.c = -4294967295;
}
const v53 = +1000000.0;
v27 <<= v28;
const v57 = ~v53;
const v58 = Math.cos(v37, -4.0, v27);
--v37;
~-84214.3454606221;
const v62 = ([-9007199254740992,9007199254740992,5,-65535,255,54003,-9007199254740991,4294967297,-55194,-110051879]).keys();
const v64 = [1840677197,-43868];
const v65 = new Int8Array(-65536);
for (const v66 in v65) {
    Object.defineProperty(v64, v66, { configurable: true, value: v62 });
}
Math.pow(v53, 1753884400);
const v68 = new F39();
const v69 = new F39();
const v70 = new F39();
v70.b = v70;
v29[v57] &= v58;
delete v70?.resizable;
const v74 = v68.replace;
%VerifyType(v74);
try { new v74(1753884400, -8, v37, -8, v58, -632985807); } catch (e) {}
function F76(a78, a79, a80) {
    if (!new.target) { throw 'must be called with new'; }
    const v81 = this?.constructor;
    try { new v81(this, F76, a80); } catch (e) {}
    const t70 = a80?.constructor;
    new t70();
}
new F76(v70, v69, v70);
function F86() {
    if (!new.target) { throw 'must be called with new'; }
}
function F88(a90, a91) {
    if (!new.target) { throw 'must be called with new'; }
}
