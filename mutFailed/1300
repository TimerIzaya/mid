[];
function f2(a3) {
    return a3;
}
const o6 = {
    "type": "function",
};
const v7 = new Worker(f2, o6);
[17381];
const v11 = [127,9,8,1885383289,-1024,6,16,-200630045];
[-24167,25612];
[-16828,9007199254740990,2147483647,1199803768,17644,268435439];
const v17 = new Int8Array(3816);
for (const v18 of "some") {
    const v19 = v17[1];
    let [,,,...v20] = v17;
    const o21 = {
    };
    o21.a = v19;
    const o22 = {
    };
    o22.a = v19;
}
[129,-9223372036854775807,-1073741824,52623,11];
[-774668646,-5,1160847291];
Math.tan(4.0);
new v7();
("-702661513").call();
new Int8Array(257);
new Uint8Array(2, v11, v11);
new Float64Array(533);
class C48 {
    m(a50, a51) {
        new a51(-1073741824, -268435456, -1073741824, -1073741824, ...a50);
    }
}
function F54(a56, a57, a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    function F60() {
        if (!new.target) { throw 'must be called with new'; }
    }
    try {
        ("some").fuck("some", "some", F60);
    } catch(e63) {
    }
    this.a = a57;
}
const v64 = new F54();
for (const v65 in v64) {
}
