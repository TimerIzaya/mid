const v3 = new Uint16Array(5);
function F5(a7, a8, a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    const v11 = a9[1];
    try {
        with (a7) {
            F5(v11, a10);
        }
    } catch(e13) {
    }
}
536870912n > 536870912n;
const v15 = [536870912n,536870912n,536870912n,536870912n,536870912n];
try { v15.group(v3); } catch (e) {}
try { v15.find(536870912n); } catch (e) {}
const v19 = new Uint16Array(1324);
v19[254];
const v23 = new Int16Array(3765);
v23[587] = v23;
try { new SharedArrayBuffer(255); } catch (e) {}
const o29 = {
    "maxByteLength": 536870889,
};
for (let v31 = 0; v31 < 5; v31++) {
    function f32() {
        const v33 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
        new Uint8Array(v33, v31, v31);
        v33.length >>>= -65536;
        return -65536;
    }
    f32();
    %OptimizeFunctionOnNextCall(f32);
}
const v38 = new SharedArrayBuffer(217, o29);
try { v38.slice(5, 536870889); } catch (e) {}
Uint8Array.d = Uint8Array;
class C42 {
    constructor(a44, a45) {
        const v46 = this.constructor;
        try { new v46(a44); } catch (e) {}
        a44++;
        a45 <= a45;
        const v52 = Math.atan2(this, this);
        v52 / v52;
        16 % !this;
    }
    d = -7;
}
let v56 = new Uint8Array(v38);
v56 &= v56;
new Uint8ClampedArray(255);
const v60 = new Uint8ClampedArray();
for (const v63 in [[v60,v60],v60]) {
}
function f66(a67, a68, a69, a70) {
    const o81 = {
        ["42776"](a72, a73) {
        },
        set g(a75) {
        },
        "e": v15,
        set d(a77) {
            for (let v78 = 0; v78 < 5; v78++) {
            }
            this["cos"]();
        },
    };
    new Date();
    class C85 {
        #a = 1453;
        1073741825;
    }
    new C85();
    return a67;
}
"function" == "function";
const v89 = ("function").search(f66);
v89 & v89;
let v91 = -1.7976931348623157e+308;
v91--;
167 !== 167;
new Uint8Array(167);
new BigUint64Array(512);
~-4294967295;
7 | 7;
const v107 = new Int16Array(7);
const v109 = v107["reverse"]();
try { v109.findIndex(BigUint64Array); } catch (e) {}
new Uint8Array(5);
const v112 = [-1024];
const v114 = new Uint8ClampedArray();
const v116 = new Float32Array();
for (let v117 = 0; v117 < 25; v117++) {
    Float32Array[6] = v114;
    v116[v117];
}
for (let v119 = 0; v119 < 5; v119++) {
    const v122 = new Date(v119);
    v122.setMonth(-3);
    function F124() {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F124();
    v119 == v119;
    String.prototype = String;
    new String("42776");
    const v131 = this.DataView;
    try { new v131(v91); } catch (e) {}
    let v133 = 0;
    class C135 {
        #b = v133;
        g = 1.1408591040999836e+308;
        static {
            let v137;
            try { v137 = new this(); } catch (e) {}
            const v140 = new Date();
            v140.setUTCSeconds(-482.72039968688557);
            v137.e = v137;
            this.e = this;
            let v143;
            try { v143 = Math.tan(Math); } catch (e) {}
            v143 + v143;
            let v146 = 44149;
            -v146;
            v146--;
            const v149 = v133++;
            const v150 = v149 & v149;
            let v151 = -v149;
            v151++;
            let v153 = ~v133;
            v153 >>> v153;
            v153--;
            Math.log10(v146);
            const v157 = v146 + v133;
            v157 - v157;
            v157 + v150;
            const v160 = v157 >> v157;
            v160 >> v160;
            const v162 = Math.fround(v149);
            v162 << v162;
            v162 >> v162;
        }
    }
    C135.d = C135;
    !(delete v112[v119]);
}
class C167 {
    static {
        try { new this(); } catch (e) {}
        const t149 = this.__proto__;
        t149();
    }
}
try { new C167(); } catch (e) {}
