const v0 = [302052.9481536902,-1000000000.0,0.0,1000000.0,-806.4790294384645,1.7175958143839057e+308,3.0];
const v1 = [-1000000000000.0,6.136396823412186e+307,-1.4982382598508546e+308,1.5337658778278335e+308,4.0,-7.609072389694304e+307];
function f2() {
    v1 <= v1;
    function F4(a6, a7, a8) {
        if (!new.target) { throw 'must be called with new'; }
        a6[4294967295] = a6;
    }
    F4.prototype;
    return F4;
}
v1[Symbol.toPrimitive] = f2;
const v12 = [8.42744198952531,0.7203032908493583,-2.0,-0.0,2.342991719362317,-1e-15,-5.215933400013152e+307];
class C13 {
    static #d;
    static get d() {
        const v15 = super.b;
        const v17 = Symbol.split;
        v15[v17];
        return v17;
    }
    p(a20) {
        v1[9] = v1;
        a20["copyWithin"](...a20, ..."copyWithin", ..."copyWithin", ...v1, ..."copyWithin", this);
        return this;
    }
}
const v23 = new C13();
const v24 = new C13();
new C13();
function f26() {
    return v1;
}
class C27 {
    static get d() {
        const v29 = delete C13[0];
        const v32 = 1046613209 << v29;
        Math.acos(1046613209);
        v29 | v32;
        ~v29;
        return v24;
    }
    static 16 = v1;
    static h = C13;
    static #h = C13;
}
const v36 = new C27();
const v37 = new C27();
const v38 = new C27();
class C39 {
    static 16;
    static valueOf(a41, a42, a43, a44) {
        super.f = a42;
        return v23;
    }
    static [v12] = v0;
    constructor(a46, a47, a48) {
        let v45 = this;
        v12[2051175681] = v12;
        C13[v1] = a48;
        super[v37] = v45 = a48;
        try {
            new C13();
        } catch(e50) {
        }
    }
}
new C39(v12, v12, v23);
const v52 = new C39(v1, v36, v36);
new C39(v38, v52, v52);
const v56 = new Uint32Array();
v56[Symbol.toPrimitive] = gc;
v56[545] = v56;
