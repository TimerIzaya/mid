function F4(a6, a7, a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    const v10 = this.constructor;
    const v11 = [1630629478,9,2034969337];
    for (let v12 = 0; v12 < 10; v12++) {
        v11.__proto__;
    }
    Math.log2(0);
    try { new v10(a6, -1.0, a9, a9); } catch (e) {}
    a7 - a7;
    a9 ^ a9;
    try {
        this.g = a8;
    } catch(e19) {
        function f20(a21) {
        }
        let v22 = 10;
        for (; v22--;) {
        }
    }
    try {
        -1 in [-1];
        this.b = -65537n;
    } catch(e27) {
    }
}
const v28 = new WeakMap();
new Int32Array(1325);
new BigUint64Array(3);
Math.sinh(128);
-15 >> 8798;
new Float64Array(1);
class C44 {
}
const v45 = new C44();
function f46(a47, a48, a49) {
    const o51 = {
        get b() {
            return C44;
        },
        127: v45,
    };
    return f46;
}
%PrepareFunctionForOptimization(f46);
new Float64Array();
const v55 = /ORS+/gvds;
const o60 = {
    m(a57) {
        super[-4.0] = delete v55[2];
        return -4.0;
    },
};
function f64() {
    v28.e;
    ("h").split(65535);
    return BigUint64Array;
}
Uint8ClampedArray[Symbol.toPrimitive] = f64;
const v72 = [-2.14860426829137,-9.58586124400876,2.0,2.2250738585072014e-308,0.0,-3.0,Infinity,-317.1953498647964,2.0];
class C73 extends Int16Array {
    [v72];
}
const v75 = new Int32Array();
class C76 {
    static #p(a78) {
        return a78;
    }
}
function f79() {
    return Int32Array;
}
Object.defineProperty(v75, Uint8ClampedArray, { get: f79, set: f79 });
