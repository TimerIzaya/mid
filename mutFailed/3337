function f0() {
    const o4 = {
        "c": "E",
        "d": -604857573,
        ..."E",
        [1.3672083339119502e+308]: "E",
        536870888: "E",
        "a": 1.3672083339119502e+308,
        ..."E",
        "f": "E",
        "b": -604857573,
        __proto__: "E",
        "g": 1.3672083339119502e+308,
    };
    return o4;
}
const v5 = f0();
const v6 = f0();
const v7 = f0();
v7.b = v7;
function F11(a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    a14[536870888];
    try {
        const v17 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
        const v18 = [256,64];
        function f20(a21, a22, a23) {
            const o34 = {
                ..."-669555958",
                "e": v18,
                "c": v17,
                __proto__: a23,
                toString(a25, a26, a27, a28) {
                    a23 instanceof a25;
                    try { a28.trimEnd(); } catch (e) {}
                    return "-1024";
                },
            };
            return a22;
        }
        this.b = a14;
    } catch(e35) {
    }
    try {
        this.e = "UTC";
    } catch(e36) {
    }
    try {
        this.c = f0;
        try { ("async").valueOf(); } catch (e) {}
        const o39 = {
            "execution": "async",
        };
        const v40 = [601759695];
        const v41 = [1073741824,1073741823,1376142744,1073741825];
        function f43(a44, a45, a46, a47) {
            try { a44.copyWithin(522675525n, o39); } catch (e) {}
            a46 - a46;
            const v51 = arguments.toString();
            function f52() {
                ("Vre").fixed("Vre");
                const o69 = {
                    [522675525n](a57, a58) {
                    },
                    ..."Vre",
                    valueOf(a60, a61) {
                        return this;
                    },
                    ...v40,
                    ..."Vre",
                    valueOf(a63, a64) {
                        return a44;
                    },
                    ..."Vre",
                    4: "Vre",
                    toString(a66, a67, a68) {
                        return v51;
                    },
                    5: -4294967295,
                };
                o69.valueOf();
                return f43;
            }
            f52();
            const v73 = new Int8Array();
            const v75 = v73.buffer.slice();
            try { v75.transferToFixedLength(); } catch (e) {}
            %OptimizeFunctionOnNextCall(f52);
            let v78;
            try { v78 = v41["find"](..."find", a47, ...v40, ...v41, ...522675525n); } catch (e) {}
            return v78;
        }
        for (let v79 = 0; v79 < 5; v79++) {
            f43(v40, v79, v79, v41);
        }
        f43(f43, 522675525n, f43, v41);
    } catch(e82) {
    }
}
try { new F11(f0, f0, "0l3uO"); } catch (e) {}
const t100 = "UTC";
const v84 = new t100(v5, v7, "UTC");
v84.b;
const v86 = new F11(v7, v5, "nl", v84, "UTC");
v86.e;
new F11(v6, v7, "nl");
208 & 208;
const v92 = new v86(208);
BigInt64Array.length;
new BigInt64Array();
for (const v96 of v92) {
    -0.043152456200264866;
    const o102 = {
        8: 0.043152456200264866,
        get a() {
            Math.acos(0.043152456200264866);
        },
    };
    o102[8] = o102;
    for (let v103 = 0; v103 < 5; v103++) {
        v96["global" + v103] = v103;
    }
    const v107 = [-3.0];
    const v109 = ("function")?.toUpperCase;
    try { new v109(); } catch (e) {}
    const v111 = [181.0767075529559,v107];
    const o112 = {
        "arguments": v111,
        "type": "function",
    };
}
const v114 = new Float64Array();
try { v114.reduceRight(208); } catch (e) {}
