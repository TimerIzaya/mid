function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 65536;
    } catch(e3) {
    }
    try {
        this.d = 65536;
    } catch(e4) {
    }
    try {
        this.b = 65536;
    } catch(e5) {
    }
}
new F0();
const v7 = new F0();
let v8 = new F0();
class C9 extends F0 {
    static get c() {
        const v11 = v7 <= this;
        if (v11) {
            F0 * v11;
        } else {
            c = v8;
        }
        return v7;
    }
    #p(a14, a15) {
        v8 = this;
        try {
            new F0();
        } catch(e17) {
        }
        return v8;
    }
}
C9.length = C9;
new C9();
const v19 = new C9();
v19.d = v19;
new C9();
Uint16Array.prototype;
new Uint16Array(3624);
64 & 64;
new Float64Array(64);
new Int8Array(2953);
class C35 {
    get b() {
        const v37 = ("B")[21];
        try {
            this.e = "B";
        } catch(e38) {
        }
        return v37;
    }
    static [2.0];
    static #g;
    g = "d";
}
const v39 = new C35();
v39.g = v39;
const v40 = new C35();
const v41 = new C35();
const v44 = new Uint8Array(7);
function f45() {
    "size" && "boolean";
    return v41;
}
v44[Symbol.toPrimitive] = f45;
v44[6] = v44;
const v53 = new BigInt64Array(1221);
let v56 = new Uint8ClampedArray(5);
function f57(a58, a59) {
    const v61 = new BigUint64Array();
    function f62(a63, a64, a65) {
        return v61;
    }
    return BigUint64Array;
}
v56.valueOf = f57;
v56[2] = v56;
try { v40(1221, v40, "d", v41); } catch (e) {}
const o67 = {
    __proto__: v44,
    "h": v44,
    "a": v53,
};
try { Math.log(o67); } catch (e) {}
Math.clz32(-53409);
const v73 = -53409 % v56;
const v74 = --v56;
v74 | v74;
const v76 = -1000.0 && v73;
v76 - v76;
