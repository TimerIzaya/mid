const v0 = [2.1148888532246737e+307,756891.3363006059,-1e-15,-2.220446049250313e-16,-1e-15,-5.148879119061112];
const v1 = [-4.0];
const v2 = [2.2250738585072014e-308,306.65212198121185,-2.6738039733524];
class C3 {
    c = v1;
    static f = v0;
    constructor(a5) {
        function f6(a7, a8) {
            function* f9(a10) {
                return f9;
            }
            return a5;
        }
        a5.toString = f6;
        try { a5.forEach(C3); } catch (e) {}
        super[v1] = a5;
        Int8Array.BYTES_PER_ELEMENT;
        const v15 = new Int8Array(3590);
        v15[813];
        try { new Int8Array(C3, v15, Int8Array); } catch (e) {}
        const v20 = new Int8Array(2274);
        v20[1835];
        const v24 = new Uint8Array(16);
        v24[5];
    }
}
function f26() {
    function f27(a28) {
        return a28;
    }
    class C29 extends f27 {
        static h;
    }
    return C29;
}
C3[Symbol.iterator] = f26;
C3.length;
const v33 = new C3(v0);
v33.c = v33;
const v34 = new C3(v0);
const v35 = new C3(v1);
function f36(a37, a38) {
    a38.c = a38;
    const o55 = {
        "b": a37,
        toString(a40, a41, a42) {
            return this;
        },
        "arguments": v1,
        set f(a44) {
            a38[a37] = v34;
            function F45(a47, a48, a49, a50) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.f = a50;
                } catch(e51) {
                }
            }
            const v52 = new F45(v35, a37, v1, F45);
            new F45(v2, a44, v2, a37);
            new F45(v52, a44, v0, C3);
        },
        ...C3,
    };
    return o55;
}
f36(v34, v33);
f36(v33, v33);
f36(v34, v35);
new Uint8ClampedArray(1721);
Int16Array.valueOf = f36;
Int16Array.prototype = Int16Array;
const v64 = new Int16Array(5);
try { v64.copyWithin(Int16Array, Int16Array); } catch (e) {}
new Int32Array(129);
const v70 = [-1679361633,-1679361633,-1679361633];
try { v70.map(129); } catch (e) {}
for (let i = 0; i < 5; i++) {
    Object.defineProperty(v70, 130, { value: -1679361633 });
}
