const v0 = [-4.0,1.0,6.510803349017465,7.500616576920006,0.33314738527396603,3.0];
const v1 = [-732.1122037949772,-274471.8626165689,5.0,-Infinity,-2.2250738585072014e-308];
const v2 = [2.36024849394836,675098.1831689232,-0.0,0.8775207483230842,-1.0,-2.2250738585072014e-308,1.895926798220156];
6691 & 6691;
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    const v10 = this.constructor;
    try { new v10(); } catch (e) {}
    Math.acosh();
}
new F6(F6, F6);
new Int8Array();
Reflect.ownKeys();
("minor").fontcolor([]);
1073741825 >>> 1073741825;
const v24 = ~1073741825;
v24 - v24;
const v26 = [2.220446049250313e-16];
let v27;
try { v27 = v26.slice(v0, v2); } catch (e) {}
const v28 = v27?.findLast;
try { new v28(v27); } catch (e) {}
const v30 = [3.0,-2.2250738585072014e-308,0.7330638084836147];
try { v30.reduce(v30); } catch (e) {}
const v32 = [1000000.0,0.0,0.0];
v32[1];
function F34(a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this?.toLocaleString;
    try { new v39(); } catch (e) {}
    a36 | a36;
    a38[0] = a38;
    ~a36;
    try { a37.some(a36); } catch (e) {}
    a38[3];
    try {
        this.h = a37;
    } catch(e45) {
        let v46 = e45.__proto__;
        v46 = e45;
        let v47;
        try { v47 = e45.p(); } catch (e) {}
        v47 * a36;
        let [v49,v50,,...v51] = v32;
    }
    try {
        this.d = v32;
    } catch(e52) {
    }
    try {
        this.f = a38;
    } catch(e53) {
        const v54 = e53 >>> e53;
        const v55 = v32[0];
        let v56;
        try { v56 = new a38(this, v55); } catch (e) {}
        try { this.m(v54, v26); } catch (e) {}
        try { new a36(6691, a37, a36, v56, a37); } catch (e) {}
    }
}
const v59 = new F34(536870912, v30, v2);
v59.d;
const v61 = new F34(6691, v32, v0);
const v62 = new F34(6691, v59, v26);
[v61,1073741825,v62];
const v64 = [v1,6691];
const v65 = [v64,6691,v30,1073741825];
try { v65.with(v64, v64); } catch (e) {}
function f72() {
    return f72;
}
new Uint8Array(268435440);
try { BigUint64Array.from(v61); } catch (e) {}
let v77;
try { v77 = BigUint64Array.of(); } catch (e) {}
try { v77.set(v65); } catch (e) {}
256 | 256;
256 >>> 256;
const v83 = new Float32Array(256);
v83[194] = v83;
const v84 = (a85, a86, a87) => {
    v2[v62];
    return a86;
};
1000000.0 - 1000000.0;
6 === 6;
256 !== 6;
v83[5] ||= 6;
