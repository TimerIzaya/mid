function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a5;
    } catch(e6) {
    }
    try {
        this.b = 5.0;
    } catch(e7) {
    }
    if (a5) {
        try {
            const o8 = {
            };
            this.fuck(o8, 1000000.0, this, this);
        } catch(e10) {
        }
    } else {
    }
    try {
        this.g = a5;
    } catch(e12) {
    }
}
const v13 = new F3(1000000.0);
const v14 = new F3(5.0);
const v15 = new F3(5.0);
class C16 {
    static {
        try {
            this.c = this;
        } catch(e18) {
        }
    }
    [v13];
    get f() {
        function F20(a22, a23, a24, a25) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = v13;
            } catch(e26) {
            }
        }
        const v27 = new F20(this, 5.0, v15, v15);
        new F20(v14, 5.0, v15, v13);
        new F20(v27, 1000000.0, v13, v27);
        return 5.0;
    }
    toString(a31, a32, a33) {
        [-119409139];
        [2147483648,364254693];
        [256,1640602682,2147483649,9223372036854775807,-683146825,54641];
        return F3;
    }
    [F3] = v13;
}
new C16();
let v38 = new C16();
new C16();
[8,1073741825,6,3,-16,2147483649,10099,2147483647,-1024];
[7,-9007199254740990,6,1,1];
const v42 = [7,-18159,268435439,536870889,-2147483647];
class C43 {
}
const v44 = new C43();
const v45 = new C43();
const v46 = [v45,v44];
function F47(a49, a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    a49.unshift(v44);
}
new F47(v46);
Math.exp(v42);
Math.atan(v42);
--v38;
new F47(v46);
try {
    new C16();
} catch(e63) {
}
~v45;
