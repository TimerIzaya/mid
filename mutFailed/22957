const v1 = new WeakSet();
const v3 = new WeakMap();
function f4(a5) {
    for (const v6 in a5) {
    }
    return v1;
}
Symbol.iterator = Symbol;
const v8 = Symbol.iterator;
Object.defineProperty(v3, v8, { configurable: true, value: f4 });
let v9 = 2175;
v9--;
~v9;
-v9;
BigUint64Array.e = v8;
BigUint64Array.e = BigUint64Array;
BigUint64Array.e = BigUint64Array;
const v14 = new BigUint64Array(v9);
const v15 = v14[797];
v15 / v15;
Uint8ClampedArray.prototype = Uint8ClampedArray;
const v19 = new Uint8ClampedArray(713);
v19[10];
try { new Float32Array(v3, v3, 3837); } catch (e) {}
const v24 = new Float32Array(3837);
try { v24.sort(v8); } catch (e) {}
try { ("p").strike(); } catch (e) {}
const t27 = "l1Ph";
t27[2] = "l1Ph";
const t29 = "l1Ph";
t29[1] = "l1Ph";
const t31 = "-4294967295";
t31[9] = "-4294967295";
const v30 = [];
const v31 = [v30,v30,v30,v30];
const v32 = [v31,v31,v31];
function f33() {
    return v32;
}
let v34;
try { v34 = f33.apply(v9, v19); } catch (e) {}
try { v34.lastIndexOf(3837); } catch (e) {}
%OptimizeFunctionOnNextCall(f33);
const v36 = f33();
try { v36.toString(); } catch (e) {}
