function f1() {
    function f2(a3) {
        a3[2302277530] = Set;
        return a3?.[127];
    }
    return f2;
}
Object.defineProperty(Set, Symbol.iterator, { writable: true, configurable: true, enumerable: true, get: f1 });
new Set();
class C8 extends Set {
    e;
    static set h(a10) {
        new Float64Array(7);
        new BigUint64Array(7);
        new Float64Array(8);
    }
}
const v20 = new C8();
new C8();
new C8();
new BigInt64Array(127);
new Float64Array(Float64Array);
new Float64Array(Set);
const v40 = [-1000000000000.0,Infinity,1.0,-Infinity,1.7976931348623157e+308,5.968300367511291e+307,-2.220446049250313e-16,-3.0,9.510254036543073e+307,5.0];
const v41 = [1.7976931348623157e+308,-1000000000.0,-2.2250738585072014e-308,NaN,-1.9873060550779815,-576168.7100780082,2.220446049250313e-16,2.2250738585072014e-308];
[-131.14557671807358,v40,v40,1e-15];
[4.0,0.2037963153987472];
const v47 = [v41,-131.14557671807358,4.0];
const v48 = [0.0,-1000.0,2.557943047142931];
[-2.2250738585072014e-308,1e-15,0.0,-3.0,2.220446049250313e-16,1000000000000.0,-386.72889766700735,4.359327317391378];
[-7.507772096903578,-1000000000.0,1.7976931348623157e+308,-1000.0,818.7357625649829,-Infinity,-1e-15,692817.4776436412,1e-15,-2.2250738585072014e-308];
for (let v55 = 0; v55 < 5; v55++) {
    try {
        v48.valueOf = v55;
    } catch(e56) {
    }
}
const v63 = [256,54026];
v63.toString = Symbol;
-2 | -2;
!-2;
Math.hypot(v63);
const o74 = {
    "execution": "async",
    "type": "minor",
};
const v76 = new Int16Array(2183);
new Uint8Array(255);
const v82 = new Int16Array(8);
async function f84(a85, a86, a87) {
    delete v82[-1000000000.0];
    let [v89,v90,...v91] = v76;
    v76[5];
    await v90;
}
parseFloat("minor");
class C96 {
    constructor(a98, a99, a100, a101) {
        this[Symbol.toPrimitive] = Symbol;
        this[this] = a101;
    }
}
function f104(a105) {
    try {
        new C8();
    } catch(e107) {
    }
    return a105;
}
C96[Symbol.toPrimitive] = f104;
const v110 = new C96(-1.461653635104799e+308, -1.461653635104799e+308, -1.0, -5.0);
function F111(a113, a114, a115) {
    if (!new.target) { throw 'must be called with new'; }
    function f116() {
        return v47 > Int16Array ? v47 : Int16Array;
    }
    this.toString = f116;
    a114[Symbol.toPrimitive] = f84;
    const v121 = (2.2250738585072014e-308).constructor;
    try { new v121(C96, -1.0); } catch (e) {}
    const v123 = a114.constructor;
    try { new v123(a114, v110, this, a113); } catch (e) {}
}
new F111(2.2250738585072014e-308, v110);
new F111(-9.59045000403769, v20);
new F111(-3.0, C96);
