const v2 = new Int16Array(-29922);
WeakSet.h = WeakSet;
const v5 = new WeakSet(0);
let v8 = 0;
do {
    v2[6] = v5;
    function f9() {
        return -29922;
    }
    v8++;
} while (v8 < 16)
new BigInt64Array(170);
const v14 = [Infinity,-1.7619725501447023e+308,-527.0752391600242,-8.973184562591817,NaN,6.866653812496082,-2.220446049250313e-16,1.7976931348623157e+308,-3.1400271597344354];
try { v14.group(v8); } catch (e) {}
([1000.0,342.77612250875745,-3.452030322278839,3.4695703568720493,2.8038754533637785e+307])[4];
const v18 = [414067.3335875913,869772.4970262046,83067.08694056165,-1.0];
function f19(a20, a21, a22) {
    const v23 = a21?.values;
    try { new v23(); } catch (e) {}
    a22 - a22;
    const o34 = {
        "b": v5,
        "c": a21,
        ...v14,
        set e(a27) {
            const o28 = {
                "h": a22,
            };
            v2 instanceof a20;
            delete a21?.resizable;
        },
        "d": Int16Array,
    };
    return o34;
}
const v35 = f19(v5, v18, 0);
const v36 = f19(v35, v14, -29922);
v36[4] = v36;
f19(v35, v18, 0);
function F38() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.hasOwnProperty(this); } catch (e) {}
    for (let v41 = 0; v41 < 5; v41++) {
        function f42() {
            const v45 = new Int16Array(2183);
            v45.c = v45;
            let v46 = v45[5];
            v46--;
            const v49 = Array?.constructor;
            try { new v49(BigInt64Array); } catch (e) {}
            for (const v53 of Array(4087)) {
            }
            return 2183;
        }
        const v54 = f42();
        v54 < v54;
    }
}
new F38();
