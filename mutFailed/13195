Uint8ClampedArray.BYTES_PER_ELEMENT;
new Uint8ClampedArray(6);
const v12 = new Uint32Array(3);
try { v12.join(v12); } catch (e) {}
0.7899559058375023 >= 0.7899559058375023;
let v17 = -1e-15;
1926675396n << 1926675396n;
-1919670812n > -1919670812n;
class C24 {
    static #n(a26, a27, a28, a29) {
        a28.e |= a28;
        super.d = a26;
        return this;
    }
    n(a31, a32) {
        const t15 = "9007199254740992";
        t15["255"] &= 7;
        class C38 {
            static #p(a40) {
                function f41(a42) {
                    return a42;
                }
                class C43 extends f41 {
                    static [-1] = 8;
                    static [a40];
                    static #m(a45) {
                    }
                    valueOf(a47, a48, a49, a50) {
                        super[this] = f41;
                    }
                    static 268435441;
                }
                const v51 = [];
                const v53 = /[a-zA-Z0-9]/gvisy;
                const v54 = /abc?/gvmy;
                v54[-2] ^= v53;
                v54.exec("Q8F");
                const t36 = "Q8F";
                t36[2078209647] = v51;
                return a40;
            }
            [0.028957958839558873];
            static {
                for (let v60 = 0; v60 < 32; v60++) {
                }
            }
            static 2147483648 = C38;
            static #g;
            #a;
        }
        v17 = a32;
        const v63 = (a64, a65, a66, a67) => {
            'use strict';
            return a64;
        };
        function F68() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                new F68();
                /Ckza\Wb?/vis;
                /Ma\W+/gudm;
            } catch(e73) {
            }
        }
        v17[this] = 12;
        a32[2205312982] = 0.7899559058375023;
        super[this] = a32;
        return 0.7899559058375023;
    }
    set g(a77) {
    }
    static 268435441;
    static e;
    static 6;
}
const v78 = `
    -(255n || 255n);
`;
eval.name;
/[.ma\Sc]/vdimsy.exec(Int16Array);
gc();
eval(v78);
const v89 = new C24();
v89.g = v89;
const v90 = new C24();
v90.h = -1.2013590182343721e+308;
new Int8Array(1000);
class C94 {
}
try { new C94(); } catch (e) {}
let v96 = new C94();
class C97 extends C94 {
    o(a99, a100) {
        v96 %= this;
        %VerifyType(super.g);
    }
}
C97.name = C97;
const v108 = new C97();
const v109 = v108?.constructor;
try { new v109(); } catch (e) {}
function f111(a112, a113, a114) {
    const o121 = {
        toString(a116, a117, a118, a119) {
            return v108 * a119;
        },
    };
    return f111;
}
new C24();
const v125 = v90.h;
v125 == v125;
for (let v127 = 0; v127 < 100; v127++) {
}
2.220446049250313e-16 >>> 2.220446049250313e-16;
class C130 {
}
C130.constructor;
gc();
const v137 = new Uint16Array(994);
v137.BYTES_PER_ELEMENT = v137;
const v138 = [];
try { v138.findLast(v137); } catch (e) {}
Symbol.isConcatSpreadable;
const v143 = v138["concat"]("concat");
try { v143.map(v143); } catch (e) {}
const v146 = new Uint16Array(2878);
v146.length = v146;
function f147(a148, a149, a150, a151) {
    a151 >>> a151;
    function f153() {
        const o170 = {
            valueOf(a155, a156) {
                try { this.valueOf(Uint16Array, this); } catch (e) {}
                function F158(a160, a161) {
                    if (!new.target) { throw 'must be called with new'; }
                    this.hasOwnProperty(a155, a161, a155);
                    a160 >= a160;
                    const v164 = this.constructor;
                    try { new v164(); } catch (e) {}
                }
                class C166 extends F158 {
                }
                C166.name;
                new C166();
                new C166();
                return F158;
            },
        };
        try { o170.hasOwnProperty(a151); } catch (e) {}
        o170.valueOf();
        return a150;
    }
    f153.prototype;
    f153();
    f153();
    return a151;
}
for (let v176 = 0; v176 < 5; v176++) {
    f147(f147, v176, v176, v176);
}
%PrepareFunctionForOptimization(f147);
const v178 = f147(f147, f147, f147, f147);
%OptimizeFunctionOnNextCall(f147);
f147(v178, f147, v178, v178);
