new Uint16Array(1682);
const v5 = new Float64Array(2);
function f6(a7) {
    for (let v10 = 0; v10 < 100; v10++) {
    }
    return v5;
}
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    function f17(a18) {
        try {
            this.length = 2;
        } catch(e20) {
        }
        return a18;
    }
    this.constructor = f17;
    a15 - a15;
    const v22 = this.constructor;
    try { new v22(F12); } catch (e) {}
    this.a <<= 4096;
}
F12[Symbol.toPrimitive] = f6;
const v27 = new F12(F12, F12, F12);
v27[Symbol.toPrimitive] = f6;
new F12(v27, v27, v27);
function f33() {
    return 1682;
}
Object.defineProperty(Float32Array, 2, { writable: true, configurable: true, enumerable: true, get: f33 });
const v34 = new Float32Array(Float32Array);
function f35(a36, a37, a38, a39) {
    a36[1];
    a37--;
    a36[0] = a36;
    a37 <= a37;
    function f44(a45) {
        [WeakSet];
    }
    Object.defineProperty(arguments, 1, { writable: true, set: f44 });
    arguments[1] = arguments;
    const v48 = arguments?.__lookupGetter__;
    v48.constructor = f44;
    try { v48.constructor(); } catch (e) {}
    let v50;
    try { v50 = v48(v48, f35, a37, arguments); } catch (e) {}
    return v50;
}
for (let v51 = 0; v51 < 10; v51++) {
    f35(v34);
}
new Uint32Array(3);
class C56 extends Uint8Array {
    constructor(a58, a59) {
        a58[1] = Float64Array;
        super(a58);
    }
}
[705992.8995233711,-1000000000.0,0.7259253542913499,1000000.0,-2.2250738585072014e-308,-1.3505291311149439e+307];
[570267.0583565657,NaN,2.0,6.148697520232929,-1000000.0,-1.0,0.0,-841220.0540171391,-1.7976931348623157e+308];
[-8.602532977034805,-4.0,7.095255186725929];
function f65(a66, a67, a68, a69) {
    arguments[2] = arguments;
    function f71() {
        const o72 = {
            __proto__: a68,
        };
        o72.f;
        o72[0] = o72;
        return o72.valueOf(a69);
    }
    f71();
    %OptimizeFunctionOnNextCall(f71);
    return a67;
}
const v76 = new Uint8Array(255);
function f77() {
}
Float32Array[Symbol.iterator] = f6;
const v82 = new Float32Array();
const v84 = new Uint8Array(v82, Uint8Array, Uint8Array);
v82[-1e-15] = Uint8ClampedArray;
class C87 extends Float32Array {
    constructor(a89, a90, a91) {
        a91[0] = a89;
        super(a91);
    }
}
new C87(1, v84, Float32Array);
const v95 = Array();
v95[3] = C56;
v95.pop();
new Int16Array(v76);
