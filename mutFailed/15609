function f3(a4) {
    const o10 = {
        __proto__: -4294967295,
        "g": -21067,
        1: a4,
        set a(a6) {
            super[-1.0] = a6;
        },
        "h": a4,
        "c": -4294967295,
    };
    function f11() {
        const v15 = 255 + f3;
        255 ** 65536;
        Math.cos(v15);
        Math.sinh(65536);
        return a4;
    }
    o10[Symbol.toPrimitive] = f11;
    return o10;
}
const v21 = f3(-21067);
const v22 = f3(-4294967295);
const v23 = f3(-21067);
Object.defineProperty(v23, "toString", { writable: true, value: f3 });
function f27(a28, a29) {
    const o32 = {
        get e() {
            const v31 = new f3(-21067);
            return v31;
        },
        11: v21,
        "c": v22,
        9: -21067,
        [v23]: a28,
        "a": 4294967297,
        ...a29,
        [-9060]: -4294967295,
    };
    return o32;
}
f27(v22, f3);
f27(v22, 523448113);
f27(v21, -21067);
function F36() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F36;
    try {
        this.h = -2;
    } catch(e39) {
    }
    try {
        this.c = -2;
    } catch(e40) {
    }
    try {
        this.f = -2;
    } catch(e41) {
    }
}
new F36();
new F36();
new F36();
new Uint32Array(16);
Int8Array.toString = f27;
const v50 = new Int8Array(2);
v50[Int8Array] = v50;
new Float64Array(571);
const v56 = new Uint8Array(10);
new Float64Array(2713);
const v62 = new Int32Array(16);
const v65 = new Uint8Array(9);
function F66(a68, a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        class C72 extends Float64Array {
        }
        new C72();
        new Uint32Array(10);
        this.c = v65;
    } catch(e76) {
    }
    try {
        this.e = v62;
        const v85 = new Uint8ClampedArray(16);
        v85[10] = v85;
        const v87 = -1322;
        v85["536870889"] = "536870889";
        try {
            new Uint8ClampedArray(v56);
        } catch(e89) {
        }
        const v91 = new Uint8ClampedArray(1322);
        let v92 = v91[315];
        function F93(a95, a96, a97, a98) {
            if (!new.target) { throw 'must be called with new'; }
            this.a = this;
            try {
                this.a = "536870889";
            } catch(e99) {
            }
            try {
                this.b = a98;
            } catch(e100) {
            }
        }
        new F93(1073741824n, 1073741824n, 257n, "6");
        const v102 = new F93(1073741824n, 257n, 257n, v87);
        const v103 = new F93(v92, 257n, 257n, "536870889");
        new BigUint64Array(6);
        3768 >>> 3768;
        const v111 = new BigInt64Array(4046);
        const v112 = [];
        try { v112.with(); } catch (e) {}
        for (let v114 = 0; v114 < 5; v114++) {
        }
        const v116 = new Uint8Array();
        const o117 = {
            ...v116,
        };
        v111[123];
        -115;
        function f122(a123, a124) {
            const v125 = [2.220446049250313e-16,4.688311165693396,-4.0];
            v125[8] = a68;
            v125[8];
            -2147483648 ^ 8.868704382732872e+307;
            a123++;
            a124 + a124;
            const v132 = a123++;
            v132 >> v132;
            try {
                v102.toString = a124;
            } catch(e134) {
            }
            Object.defineProperty(v103, v103, { configurable: true, enumerable: true, get: f122 });
            let o136 = {
                "d": a123,
                ...a123,
                get e() {
                    return a124;
                },
            };
            [,...o136] = v111;
            a124[4046];
            const o140 = {
                "maxByteLength": 3035,
                __proto__: 8.868704382732872e+307,
            };
            o140.n = v103;
            const v142 = v92--;
            v91[v142] ||= v142;
            try { o140.n(Int8Array, Worker); } catch (e) {}
            new ArrayBuffer();
            new Float32Array();
            return 115;
        }
        f122(4046, 3768);
        try { Uint8ClampedArray.bind(f122); } catch (e) {}
    } catch(e151) {
    }
}
new F66(9, 16, 16);
const v156 = new Int16Array(2);
v156.lastIndexOf(2.220446049250313e-16);
