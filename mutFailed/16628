function f0() {
}
const v2 = new Set();
const v4 = new Set();
function F5(a7) {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.toPrimitive] = f0;
    try {
        this.c = a7;
    } catch(e10) {
    }
    try {
        this.e = v4;
        const v12 = new Date();
        v12.toLocaleDateString();
        class C14 {
            constructor(a16, a17) {
            }
        }
    } catch(e19) {
    }
    try {
        this.h = f0;
    } catch(e20) {
    }
}
const v21 = new F5(v4);
const v22 = new F5(v21);
const v23 = new F5(F5);
class C24 {
    constructor(a26, a27, a28) {
        [v2,v22,Set,v21];
        [a26,[v23],v23];
    }
    static 16;
    h;
    3016 = v22;
    static 2498411761 = Set;
    [v21];
}
new C24(F5, v22, v23);
new C24(v21, f0, v21);
new C24(v22, v22, v21);
class C38 {
    static get h() {
        const o43 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o43);
        return 268435441;
    }
}
const v45 = new C38();
function f46() {
    return f0;
}
function f47(a48) {
    new Uint16Array(108);
}
Object.defineProperty(v45, "toString", { writable: true, enumerable: true, get: f46, set: f47 });
const v52 = new C38();
const v53 = new C38();
class C56 extends C38 {
    3;
    [v52] = v45;
    ["256"] = v45;
    static #toString(a58, a59, a60) {
        try { a58("256", v53, a58, a60); } catch (e) {}
        Math.atan(16);
        a59 ^ 16;
        return Math.abs(16);
    }
}
new C56();
const v68 = new C56();
const v69 = new C56();
v69.toString = f0;
v69 & v45;
if (v68 <= v53) {
    new Uint8ClampedArray(75);
    new Int16Array(6);
    new BigInt64Array(1821);
} else {
    new C56();
}
