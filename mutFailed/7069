new Float64Array(50);
const v5 = new BigUint64Array(3236);
const v8 = new Float64Array(6);
function f9() {
}
class C11 {
    valueOf(a13) {
        try {
            f9();
        } catch(e15) {
        }
        return this;
    }
    static {
        let v16 = this;
        try { v16.call(6); } catch (e) {}
        v16[2769597849] = v16;
        v16 &= v16;
        C11[7] = v16;
        super.h = -13676;
        super.e ||= 6;
        const v18 = C11.__proto__;
        try { v18.call(-13676); } catch (e) {}
        try {
            v16.length = 1;
        } catch(e21) {
        }
    }
}
[1000000000000.0,0.5078639201258308,-1000.0,-2.0];
[2.2250738585072014e-308,0.9270321339051487,-5.0,0.7948815867899199,0.24977936391529443,-4.0];
const v24 = [685.5994519209523,562.1024041930364,500892.7768896271,-5.0,-161.3783022269089,Infinity,31.432688603662427,-0.0,53253.45462854719];
function f25() {
    return v8;
}
v8.includes(Float32Array);
("boolean").split("toString");
function F37(a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = "Rh";
    } catch(e41) {
    }
}
let v42 = new F37("m", 50);
const v43 = new F37();
const v46 = Array(19793);
[v46,v46,v46];
function* f48(a49, a50, a51, a52) {
    return a50;
}
v42 = v43;
v42[536870887] = v24;
v5[v42] = "jP";
const v56 = new Uint32Array();
const o85 = {
    o(a58) {
        delete v56[5];
        const v60 = new Uint8ClampedArray();
        v60[("jP").toPrimitive];
        try {
        const t0 = 65536n;
        t0(65536n);
        } catch (e) {}
        Reflect.construct(Map, [Array], Uint8ClampedArray);
        super["268435441"] = Map;
        try {
            Reflect.__proto__ = Reflect;
        } catch(e72) {
        }
        try {
            new Map("268435441");
        } catch(e74) {
        }
        const o75 = {
        };
        try {
            Array.g = o75;
        } catch(e76) {
        }
        try {
        } catch(e77) {
            eval("");
        }
        let v82 = gc(o75);
        v82 <<= "m";
    },
};
const o87 = {
};
o87.getPrototypeOf = o87;
const v89 = new Proxy(Uint32Array, o87);
function f91(a92, a93) {
    return a93[3];
}
new ArrayBuffer();
o85["o"](o85, Uint32Array, "o", "o", v89);
new BigUint64Array(1);
gc();
new Uint8Array(64);
const t100 = Array(3398);
t100.length = 1;
