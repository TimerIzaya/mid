function f0() {
    const o7 = {
        "a": f0,
        9: 457430.385304119,
        toString(a5) {
            const o6 = {
                9: a5,
                ...this,
                [a5]: 457430.385304119,
            };
            return this;
        },
    };
    return o7;
}
f0();
const v9 = f0();
f0();
const v11 = [-268435456,-1746];
const v12 = [10000,1471360277];
try { v12.fill(f0); } catch (e) {}
const v14 = [4096];
let v15;
try { v15 = v14.filter(v9); } catch (e) {}
const v17 = new Set();
try { v17.add(v12); } catch (e) {}
/(?<a>.)\k<a>/guds;
const v20 = /m(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\11VraNU/dis;
v20.sticky = v20;
const v21 = /[^123]a[a-z]*/vdiy;
v21.b = Set;
v21.b = v21;
class C26 {
    static 7;
    static [-1] = "string";
    #n(a28) {
        a28 = this;
        a28.e >>>= -35417;
        const o32 = {
            "execution": "sync",
            "type": "major",
        };
        Object(o32);
        return this;
    }
}
new C26();
-4096 < -4096;
const v39 = Array();
const v40 = Array();
9.187362692894364 > 9.187362692894364;
class C43 {
    static 9 = 9.187362692894364;
}
for (const v44 in C43) {
}
class C45 {
    #e;
    static {
        function f47() {
            return Array;
        }
        function f48(a49) {
            function f50() {
                return a49;
            }
        }
        Object.defineProperty(this, Symbol.toPrimitive, { writable: true, get: f47, set: f48 });
        function f53(a54, a55) {
            return a54;
        }
        const o61 = {
            o(a57) {
                const o59 = {
                };
                o59.h = o59;
                return gc(o59);
            },
        };
        try { o61.o(f0); } catch (e) {}
        Uint32Array[Symbol.toPrimitive] = Symbol;
        const o66 = {
        };
        o66.cause = C26;
        o66.a = o66;
        const v68 = new Error(Uint32Array, o66);
        o61["o"](o61, Uint32Array, "o", "o", v68);
        const v71 = super[this];
        try { v71.join(-4096, -4096, v71); } catch (e) {}
        const o73 = {
        };
        o73.f = o73;
        /LD/vds.ignoreCase;
        1000.0 >> 1000.0;
        [C43,1000.0];
    }
    static f;
    m(a80, a81) {
        const o82 = {
        };
        const o85 = {
        };
        const v87 = new Proxy(Uint8Array, o85);
        v87.d = v87;
        new Proxy(this, o82);
        class C93 {
        }
        function f94() {
            C26--;
            class C98 {
            }
            new C98();
            const v100 = new a81();
            [C93,C98];
            [257828.6336153492,v100,v11,v14];
            [v100];
            class C104 extends C26 {
            }
            function f105(a106, a107) {
                return -4096;
            }
            Set.toString = f105;
            Set.n(Set);
            v40.constructor;
        }
        const v111 = "string" && -4096;
        +a81;
        Set.sqrt(v111);
        a80--;
        -509886178 << -509886178;
        return this;
    }
}
try { new C45(); } catch (e) {}
const v117 = new C26();
const v118 = v117?.constructor;
try { new v118(); } catch (e) {}
const v120 = new C45();
const v121 = v120?.__lookupSetter__;
try { new v121(v14); } catch (e) {}
new C45();
-65537n;
function f131() {
    function f132() {
        v39["unshift"]();
        return "unshift";
    }
    return f132;
}
Object.defineProperty(WeakSet, "toString", { writable: true, configurable: true, enumerable: true, get: f131 });
const v135 = new WeakSet();
function f136() {
    new WeakMap();
    return WeakMap;
}
v135.constructor = f136;
try { v135.delete(v120); } catch (e) {}
const v140 = v135.constructor;
function f141(a142) {
    try { Array.of(a142, a142, v15, a142); } catch (e) {}
    new Int16Array(4018);
    new Int32Array(255);
    new Uint8ClampedArray(148);
    return 148;
}
v140.toString = f141;
const v153 = v140?.toString;
try { new v153(); } catch (e) {}
class C155 extends v140 {
}
const v158 = new Uint16Array(512);
class C160 {
}
function F161(a163, a164) {
    if (!new.target) { throw 'must be called with new'; }
}
new Float32Array(v158);
