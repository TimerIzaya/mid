const v1 = new Map();
const v2 = [Map,Map,v1,Map];
const v3 = [v2,Map,v2,Map,v1];
let v4 = -2147483648n;
class C6 {
    static m(a8) {
        ({"a":C6,"h":v4,} = this);
    }
}
const v9 = new C6();
const v10 = new C6();
class C11 {
}
const o12 = {
};
o12.b = v9;
const o13 = {
};
Object.defineProperty(o13, "b", { writable: true, value: v10 });
const v14 = new C11();
let v15;
try { v15 = v14.constructor(); } catch (e) {}
try {
    v3.toString = v4;
} catch(e16) {
}
const v20 = new C11();
const v21 = v20.__lookupGetter__;
let v22;
try { v22 = v21(); } catch (e) {}
const v23 = new C11();
const v24 = v23.constructor;
new v24(C6, v15, C11, o12);
const v28 = new Float32Array();
let v29;
try { v29 = v28.forEach(v22, v10); } catch (e) {}
const v32 = new BigUint64Array();
let v33;
try { v33 = v32.filter(v24); } catch (e) {}
v2 >>> v9;
try { v24(v32, 246, 64n, 0n); } catch (e) {}
class C39 {
}
const v40 = new C39();
const v41 = v40.__lookupGetter__;
try { v41(); } catch (e) {}
v29[15] = o13;
let {"f":v43,...v44} = v40;
0n + C39;
const o48 = {
    "maxByteLength": 8,
};
const v50 = new SharedArrayBuffer(8, o48);
new Uint32Array(v50);
function f53(a54) {
    return a54;
}
const v55 = v40.constructor;
new v55(v22);
const v57 = new C39();
v57.propertyIsEnumerable(v55, v33, o13);
const v59 = new C39();
const t62 = v59.constructor;
const v61 = new t62();
const v62 = /[\11]/gm;
v62.e = v62;
const v63 = /a(?!bbb|bb)c/vi;
Object.defineProperty(v63, "toString", { value: f53 });
const v64 = v63.toString;
const v65 = new v64(BigUint64Array, 246, C6, v63, v64);
const v66 = v65.__lookupGetter__;
try { v66(); } catch (e) {}
const v69 = new Uint16Array(C11);
const v70 = v69[1];
v70 & v70;
const v74 = new Int32Array(v61, 31, 560);
v74[30];
function f76() {
    return Int32Array;
}
const v77 = f76();
v77.e = v77;
const t82 = f76().e;
new t82();
[v2,v3];
const v89 = ["bpkzx","bpkzx","bpkzx"];
const v91 = "bpkzx" * [v89,v89,v89];
try {
    v89.length = v91;
} catch(e92) {
}
