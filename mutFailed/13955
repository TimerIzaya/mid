function f2(a3, a4) {
    %VerifyType(a4);
    const v5 = a3++;
    v5 >> v5;
    return a4;
}
Uint8ClampedArray.toString = f2;
new Uint8ClampedArray(4010);
Int8Array[1] = ~4;
let v11;
try { v11 = new Int8Array(Int8Array, Uint8ClampedArray, 4); } catch (e) {}
new Int8Array(4);
new Float64Array(9);
Int8Array[Symbol.split] = f2;
const v20 = new Int8Array(2848);
v20[1837];
const v24 = Float32Array?.constructor;
try { new v24(Uint8ClampedArray); } catch (e) {}
new Float32Array(713);
Object.defineProperty(BigInt64Array, "constructor", { writable: true, configurable: true, value: f2 });
const v29 = BigInt64Array.constructor;
try { new v29(4010); } catch (e) {}
function f33() {
    const v34 = delete v11?.[-2];
    try {
        f2(v34, "e");
    } catch(e37) {
    }
    return v34;
}
Uint8Array.toString = f33;
const v40 = Symbol.isConcatSpreadable;
const v41 = v40.description;
try { v41.matchAll(4010); } catch (e) {}
const v43 = v41.fontsize(Uint8Array);
try { v43.split(Int8Array, v40); } catch (e) {}
v43.trimStart(Array);
const v46 = Array(670);
try { v46.groupToMap(v29); } catch (e) {}
Uint32Array.e = 670;
Uint32Array.e = Uint32Array;
const v49 = new Uint32Array(255);
v49[245] = v49;
536870887 == 536870887;
function f53(a54) {
    return 4n;
    return v11;
}
WeakMap.valueOf = f53;
for (let v56 = 0; v56 < 25; v56++) {
    const v57 = [601759695];
    const v58 = [1073741824,1073741823,1376142744,1073741825];
    function f59(a60, a61, a62, a63) {
        -a60;
        a63.arguments;
        try { v58["find"](..."find", a63, ...v57, ...v58); } catch (e) {}
        const v68 = WeakMap / 536870887;
        v68 + v68;
    }
    for (let v70 = 0; v70 < 5; v70++) {
        f59(v56, v57, 536870887, f59);
    }
}
