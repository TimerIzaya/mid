let v2 = -826296036;
v2 = 3;
try {
    const t3 = 3;
    t3.g = 3;
} catch(e3) {
}
class C4 {
    10 = 257;
    get d() {
        let v6;
        try { v6 = this(this, 257, 257, this); } catch (e) {}
        switch (this) {
            default:
                Object.defineProperty(v6, 3, { value: v6 });
                let v7;
                try { v7 = v6.n(); } catch (e) {}
                let v8;
                try { v8 = new v7(v7); } catch (e) {}
                let v9;
                try { v9 = v8(v8, v2); } catch (e) {}
                try { v9.toString(this, v2, v7); } catch (e) {}
                try {
                    this.fuck("symbol", "symbol", v9);
                } catch(e13) {
                }
                break;
        }
        return v6;
    }
    a;
    2630;
    static #g = 3;
    #d;
}
let v14;
try { v14 = C4.apply(v2, 3); } catch (e) {}
const v15 = new C4();
const v16 = new C4();
let v17 = new C4();
v17[2630];
const v19 = [v2,v2];
const v20 = [v16,3,v2,v16,v19];
const v21 = [v17,v17,C4];
let v22;
try { v22 = v21.findLastIndex(v2); } catch (e) {}
try { v15.fill(v14, v14, C4, v2); } catch (e) {}
v22?.f;
function F28(a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    const v33 = this?.constructor;
    try { new v33(v19, v21, 3); } catch (e) {}
    try {
        this.f = a31;
    } catch(e35) {
    }
    try {
        this.e = a31;
    } catch(e36) {
        v17 = C4;
        v17[1073741823];
    }
}
const v41 = new F28(3, v20, v20);
const v42 = new F28(3, v19, v21);
const v43 = new F28(257, v21, v21);
v43.h = v22;
v43.h;
Uint32Array.h = Uint32Array;
const v47 = new Uint32Array(13);
for (const v48 in v47) {
    const v49 = v48[0];
    v42 > v49;
    v17 = v41;
    v49 instanceof v49;
    +C4;
    const o56 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o56);
    var h = v48;
}
