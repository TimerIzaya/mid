const v0 = [-0.0,9.706631899234205e+306];
const v1 = [6.63371052222141,672.7669225817308];
const v2 = [2.220446049250313e-16,0.5206106763693408,0.20972972776517196,1000000.0];
const v3 = [-1e-15,-6.086411053158969];
let v4 = [-3.3279461369542602,1e-15,1.7976931348623157e+308,1.0,0.08753034271831084,6.203724636163689e+307];
const v5 = [4.0,3.0];
class C6 {
    static [v0];
    constructor(a8, a9, a10, a11) {
        try { a10.map(a11); } catch (e) {}
        try { a8.forEach(a10, a11); } catch (e) {}
        const o14 = {
            __proto__: a8,
            ...v0,
        };
        for (let v15 = 0; v15 < 32; v15++) {
            v2["p" + v15] = v15;
        }
    }
    static 6;
}
const v18 = new C6(v4, v2, v5, v0);
let v19;
try { v19 = v18.valueOf(); } catch (e) {}
try { v19.toString(); } catch (e) {}
const v21 = C6.a;
try { Math.acos(Math); } catch (e) {}
const v24 = Math.expm1(Math);
v24 - v24;
function F26() {
    if (!new.target) { throw 'must be called with new'; }
    const v28 = this?.__lookupGetter__;
    try { new v28(this); } catch (e) {}
    try {
        this.g = -3;
    } catch(e31) {
    }
    try {
        this.f = -3;
    } catch(e32) {
    }
}
const v33 = new F26();
v3.d = v33;
v4 = v21;
const v34 = C6 % v5;
const v35 = v34 % v34;
10 * 10;
const v40 = new C6(v5, v18, C6, v4);
const v41 = v40?.constructor;
try { new v41(v0, v2, v1, v0); } catch (e) {}
const v43 = new C6(v4, v2, v40, v4);
try { v43.__defineSetter__(v21, v34); } catch (e) {}
const v45 = [v1,v5,v1];
try { v45.sort(v45); } catch (e) {}
[v5,v1,v0,[C6,v3]];
[59910,-31171,2135412584,-7,518129454,12,-536870912,-12,-8];
let v50 = 10;
for (; v50--;) {
    v5.length <<= v4;
}
[-7,536870912,-42906,1843275962,268435439,1162541274,-1062433328,14,-9223372036854775808];
const v53 = v1.length;
v53 ^ v53;
255 * 255;
try { new BigUint64Array(BigUint64Array, 27056, 27056); } catch (e) {}
const v60 = new BigUint64Array(255);
try {
const t0 = 1073741825n;
t0();
} catch (e) {}
const v65 = [-57461,-128,-1218023460,1073741824,1360262987,536870889,-11,0];
try { v65.values(); } catch (e) {}
const v69 = new Int32Array();
try { v69.entries(); } catch (e) {}
try {
    const t76 = null;
    t76.valueOf = v69;
} catch(e72) {
    const v73 = e72.message;
    v60[0] /= v35;
    v21[v2] = v73;
    for (let v74 = 0; v74 < 100; v74++) {
        gc();
    }
    try { v73.toString(); } catch (e) {}
    const v77 = v73.search(v73);
    v77 - v77;
}
