let v0 = 511;
const v2 = new Uint32Array(v0);
const v5 = new Uint8Array(127);
function f6() {
    function f7(a8, a9) {
        v0 = a8;
        Math.fround(Math);
        return a8;
    }
    return f7;
}
function f12(a13) {
    ("D")[0].lastIndexOf("D");
}
Object.defineProperty(v5, Symbol.toPrimitive, { writable: true, get: f6, set: f12 });
v5[106] = v5;
Int16Array.e = v0;
const v21 = new Int16Array(156);
class C22 extends Int16Array {
    set h(a24) {
        super.buffer |= a24;
        try {
            v5.filter(a24);
        } catch(e26) {
        }
    }
    e;
    valueOf(a28, a29, a30, a31) {
        [] = this;
        a31 = v21;
        try {
            class C32 {
            }
            new C32();
            Date.constructor = Date;
            v2.__proto__ = this;
        } catch(e35) {
        }
        return a29;
    }
}
C22.e = C22;
const v36 = new C22();
try { v36.values(); } catch (e) {}
Object.defineProperty(Float32Array, 1, { value: Float32Array });
Float32Array[1] = -1e-15;
new Uint32Array([1000000000000.0]);
new C22();
const v45 = new C22();
try { v45.find(v45); } catch (e) {}
function F47() {
    if (!new.target) { throw 'must be called with new'; }
}
function F49() {
    if (!new.target) { throw 'must be called with new'; }
}
function F51(a53, a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    try { a54.call(); } catch (e) {}
    for (let v58 = 0; v58 < 50; v58++) {
    }
}
try { new F47(); } catch (e) {}
-64n;
class C65 {
    toString(a67, a68, a69, a70) {
        let [] = "undefined";
    }
}
try { F47(..."function", 64n, 0, ...1000000000000.0); } catch (e) {}
