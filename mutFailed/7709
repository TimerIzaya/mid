class C3 {
    static get g() {
        try {
            const v5 = [601759695];
            const v6 = [1073741824,1073741823,1376142744,1073741825];
            function f7(a8, a9, a10, a11) {
                function f12() {
                    v6.forEach(a9);
                }
                new Int8Array();
                for (let v16 = 0; v16 < 5; v16++) {
                }
                try { v6["find"](..."find", a11, ...v5, ...v6); } catch (e) {}
            }
            this.__proto__ = this;
        } catch(e19) {
        }
        return 2;
    }
    [-1205866050] = -10;
    static #h = 2;
    [2];
}
const v20 = new C3();
const v21 = new C3();
new C3();
const v24 = new BigUint64Array();
const t27 = [v24];
t27[65536] %= 256;
class C27 extends 2 {
    static #f = v21;
    static #a;
    #n(a29, a30) {
        const v31 = this.g;
        const v32 = [601759695];
        const v33 = [1073741824,1073741823,1376142744,1073741825];
        ("find").codePointAt(v33);
        try { v33["find"](..."find", v20, ...v32); } catch (e) {}
        return v31;
    }
    [-10] = -1205866050;
    [v20];
    static d = 2;
    [v21];
}
new C27();
const v38 = new C27();
const v39 = new C27();
class C43 {
    static #m(a45, a46) {
        return a46;
        ("QQcMj").normalize("NFKD");
        return a45?.[179];
    }
    ["valueOf"] = "valueOf";
    b;
    13;
}
C43.name = "valueOf";
const v51 = new v39();
const v52 = new C43();
const v53 = new C43();
const v56 = new Uint16Array();
const v58 = new Int32Array();
class C59 {
    static #d = 2;
    constructor(a61, a62) {
        try {
            v56.#d += v58;
        } catch(e63) {
            e63.toString();
        }
    }
}
const t74 = C59.constructor;
t74(255);
v53[13] = v53;
const v67 = [0.602038268284836,-1.7976931348623157e+308,-4.211494269917182,-939259.7989376923,0.02623941368615268];
const v68 = [2.220446049250313e-16,-2.220446049250313e-16,-1000.0];
try { v38.entries(); } catch (e) {}
const v70 = [-1000000000.0,4.0,-9.792130726362629];
function F71(a73, a74, a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
    try { C3.valueOf(); } catch (e) {}
    try { a73.toString(); } catch (e) {}
    a76[1];
    try {
        this.b = v52;
    } catch(e80) {
    }
    try {
        this.h = a75;
    } catch(e81) {
    }
    try {
        this.c = v67;
    } catch(e82) {
    }
}
F71.e = F71;
new F71(v70, v68, -1.7560623034267127e+308, v70);
const v84 = new F71(v67, v68, -1.7560623034267127e+308, v52);
v84.e = v84;
new F71(v67, v70, v51, -1.7560623034267127e+308);
const v87 = new BigUint64Array();
function F88() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v90 = 0;
        let v91 = 0;
        while (0 - 0, v91 < 0) {
            for (let v95 = 0; v95 < 5; v95++) {
            }
            v91++;
        }
        do {
            try { v87.entries(); } catch (e) {}
            const v99 = v90++;
            v99 >>> v99;
        } while ((() => {
                function F102(a104) {
                    if (!new.target) { throw 'must be called with new'; }
                    const o106 = {
                        "b": 1e-15,
                    };
                    delete o106.b;
                }
                return v90 < 5;
            })())
    } catch(e109) {
    }
}
try { new F88(); } catch (e) {}
new F88();
