-9007199254740990n << 2147483649n;
[4494,536870889,-772675306];
const v8 = [-1073741824];
let v9;
try { v9 = v8.group(95566733); } catch (e) {}
[-4294967297,9007199254740990,-256,828007021,-268435456,-4096,10000,-2,-10666396];
try { ("2").fixed(); } catch (e) {}
class C15 {
}
const v16 = new C15();
const v17 = v16?.__defineGetter__;
let v18;
try { v18 = new v17(2147483649n, 2147483649n); } catch (e) {}
Uint32Array.name = Uint32Array;
new Uint32Array(C15);
try { v18.entries(); } catch (e) {}
const v23 = [601759695];
const v24 = [1073741824,1073741823,1376142744,1073741825];
522675525n & 522675525n;
function f27(a28, a29, a30, a31) {
    let v32;
    try { v32 = new a28(C15, C15, C15); } catch (e) {}
    ~v32;
    function f34() {
        let v36;
        try { v36 = ("Vre").link("Vre"); } catch (e) {}
        const t26 = "Vre";
        t26[1] = "Vre";
        try { Math.expm1(Math); } catch (e) {}
        Number.isNaN(a31);
        Math.expm1();
        const v42 = Math.tanh();
        Number.isNaN(v42);
        const v45 = Math.hypot();
        Float64Array.BYTES_PER_ELEMENT = Float64Array;
        const v48 = new Int8Array(Int8Array);
        v48.buffer;
        try {
            v24.findLast();
        } catch(e51) {
            const v52 = e51?.constructor;
            try { new v52(v16); } catch (e) {}
            v52();
        }
        const o68 = {
            [522675525n](a56, a57) {
            },
            "c": v23,
            1073741824: v36,
            __proto__: v9,
            9: v16,
            [2n](a59, a60, a61, a62) {
            },
            valueOf(a64, a65, a66, a67) {
                super.c **= v45;
                return f34;
            },
            4: "Vre",
        };
        return v42;
    }
    const v69 = f34?.constructor;
    try { new v69(a28); } catch (e) {}
    f34();
    eval();
    %OptimizeFunctionOnNextCall(f34);
    return 2147483649n;
}
for (let v74 = 0; v74 < 5; v74++) {
    f27(Uint32Array, 522675525n, v74, v23);
}
