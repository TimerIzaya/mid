const v0 = /[a\Sa+b*]/gud;
const v1 = /PBq/y;
const v2 = /[a-zA-Z0-9](?<=a)/vdimy;
function f6(a7, a8, a9, a10) {
    function f12() {
        const o13 = {
            84: arguments,
        };
        return a8;
    }
    f12();
    %OptimizeFunctionOnNextCall(f12);
    return a9;
}
class C15 {
    constructor(a17, a18, a19) {
        v0.flags /= 1024;
    }
    static {
        this[1073741824];
        class C26 {
        }
        class C27 {
        }
        const v28 = new C27();
        const v29 = v28.constructor;
        try { v29(v29, C27); } catch (e) {}
        new Int16Array(129);
        new Int8Array(3);
        new Uint8Array(2826);
    }
}
const v39 = new C15(v0, -237977.42613446387, v1);
new C15(v2, -237977.42613446387, v39);
const v41 = new C15(v0, 0.28382727252598594, v39);
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a45;
    } catch(e46) {
    }
}
new F42(v1, 0.28382727252598594);
new F42(v41, 1.0);
new F42(v39, -237977.42613446387);
for (let v50 = 0; v50 < 5; v50++) {
    function f51() {
        return Promise.reject(Promise);
    }
    f51();
    for (let i57 = 0, i58 = 10;
        (() => {
            const v59 = i57 < i58;
            const v62 = new BigUint64Array(3375);
            let [v63,,v64,...v65] = v62;
            v65[1190] = v65;
            v63--;
            return v59;
        })();
        i57++) {
    }
    %OptimizeFunctionOnNextCall(f51);
}
