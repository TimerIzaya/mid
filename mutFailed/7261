const v0 = [-961145.548008953,1.7976931348623157e+308,1.7976931348623157e+308,-1e-15,870.2384298977554];
const v1 = [4.0,-1e-15,-68.39496033298406,-1000.0,0.2649832904028925,2.220446049250313e-16,1000.0,730036.0202525056,-2.220446049250313e-16,-214.40984787322395];
[-Infinity,-935.4200364546618,2.2250738585072014e-308,-1000000.0,0.06138024249507035,Infinity];
function f6(a7, a8, a9) {
    const o19 = {
        10: v0,
        3384: a9,
        [618.5608939936171](a11, a12) {
            const v13 = async (a14, a15) => {
                try {
                    this.length = 2094116983;
                } catch(e17) {
                }
                await this;
                return a7;
            };
            return this;
        },
    };
    return o19;
}
f6(v1, 618.5608939936171, 618.5608939936171);
f6(f6, -1000000.0, f6(618.5608939936171, 618.5608939936171, 618.5608939936171));
const t21 = 618.5608939936171;
new t21(180);
const v28 = new BigUint64Array(3358);
new Float64Array(Float64Array);
function f32() {
    const o46 = {
        toString(a34, a35) {
            function F36(a38, a39, a40, a41) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.f |= a35;
                    a35.c;
                } catch(e43) {
                    e43.stack;
                    Object.defineProperty(a34, 0, { writable: true, get: f32 });
                }
            }
            new F36(this, a34, this, f32);
            return F36;
        },
    };
    return o46;
}
const v47 = f32();
function f48(a49) {
    f32();
    try { a49(f32, v28); } catch (e) {}
    return -1000000.0;
}
v47[Symbol.toPrimitive] = f48;
const v54 = f32();
const v55 = f32();
try { v55.toString(f32, v54); } catch (e) {}
try { ("1p").split(v47); } catch (e) {}
