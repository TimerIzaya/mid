function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = ~a5;
    const v7 = this?.__defineGetter__;
    try { new v7(a5, 1.0); } catch (e) {}
    a5 & a5;
    try {
        v6.d = a5;
    } catch(e10) {
    }
    try {
        this.a = a5;
    } catch(e11) {
    }
    try {
        this.b = 1.0;
    } catch(e12) {
    }
}
F3.a = F3;
F3.e = F3;
new F3(51136.26883010892);
const v14 = new F3(51136.26883010892);
new F3(-0.0);
v14.b;
[4096,-9007199254740990,-40418,9007199254740992,-1607894347,256,-9223372036854775808,424458778,-9223372036854775807];
const v18 = [-65537,1,9007199254740991,-39302];
function f19(a20, a21) {
    const v22 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
    const v24 = Symbol.toPrimitive;
    const o30 = {
        toString(a26, a27) {
            const v28 = a21 && v24;
            a26 *= v24;
            v28 <= v22;
        },
    };
    return a20;
}
v18.toString = f19;
const v31 = [536870889,-677447076,-3,-35360,20212];
try { v31.with(v18, v18); } catch (e) {}
const v33 = [739270195,-9,1073741824,0,-4096,-126585529,7,2033468836,-4294967296,943685800];
let v34;
try { v34 = v33.fill(f19); } catch (e) {}
try { v34.every(v14); } catch (e) {}
[56914,129,-13314];
const v37 = [1645296933,57829,5,6,268435440,28584,7,-4294967297,4];
v37.g = v37;
const v39 = f19.toLocaleUpperCase();
v39[3] = v39;
