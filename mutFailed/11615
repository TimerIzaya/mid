class C3 {
    #c = -404660.6877308998;
    b = -1.2464287492981007e+308;
    constructor(a5) {
    }
    static {
        [];
        try {
            super.setInt8();
        } catch(e9) {
        }
    }
    ["-9223372036854775807"];
    static #h;
    toString(a11, a12) {
        const t15 = this.constructor;
        new t15();
        -this;
    }
    set c(a17) {
    }
    d;
    #g = -1.2464287492981007e+308;
    static 3888;
    static set h(a22) {
        if (a22 !== this) {
            ("-9223372036854775807")[5];
            const v27 = new Set();
            function F28(a30, a31) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.d = a30;
                } catch(e32) {
                    for (let [v33,v34] of a30) {
                    }
                }
                try {
                    const v35 = v27[this];
                    ([WeakSet])[1];
                    new F28(v35, -268435456n);
                } catch(e40) {
                }
            }
        } else {
            const t44 = "-9223372036854775807";
            delete t44[this];
        }
    }
    /*
    constructor(a43, a44) {
    }
    */
}
const v45 = new C3();
new C3();
class C47 {
    constructor(a49) {
        function f50() {
            function f51(a52) {
                for (let v53 = 0; v53 < 32; v53++) {
                    C47["p" + v53] = v53;
                }
                return a49;
            }
            return f51;
        }
        Object.defineProperty(this, "constructor", { writable: true, enumerable: true, get: f50 });
        const v56 = this.constructor;
        try { new v56(); } catch (e) {}
        super.e;
    }
    #toString(a60, a61) {
        return typeof a61 != "string";
    }
}
class C65 extends C47 {
    #d;
}
new C65();
new C3();
function F71(a73, a74, a75) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a75;
    } catch(e76) {
    }
    try {
        this.h = a73;
    } catch(e77) {
    }
}
new F71(v45, C3, F71);
new F71(v45, 4294967295n, v45);
new F71(v45, 9n, 9n);
-1 in [-1];
const v85 = new Date();
v85.toLocaleDateString();
%OptimizeFunctionOnNextCall(Date);
let v87 = 0;
v87++;
