/Wi/u;
/[aLafoo[z]*]/umy;
/(?:a*)*/gumsy;
new Date();
function f6(a7) {
}
const v9 = new Map();
function F11() {
    if (!new.target) { throw 'must be called with new'; }
    const v14 = Date.toString();
    const v16 = v14[23].trimRight;
    const v17 = v16.toString;
    try { v17(); } catch (e) {}
    try { v16(); } catch (e) {}
    const v20 = v14.replaceAll();
    v20[30] = v20;
    const v22 = new Uint32Array();
    v22[2] = v22;
    const v23 = v22[2];
    const v25 = new Set();
    let v26;
    try { v26 = v25.add(); } catch (e) {}
    class C27 {
    }
    const v29 = Array();
    for (let v30 = 0; v30 < 5; v30++) {
        const v31 = v29.includes;
        try { v31(); } catch (e) {}
        const v35 = new BigInt64Array(2325);
        for (const v36 in v35) {
        }
    }
    v26.keys();
    const v38 = v25.add;
    v38.g = v38;
    const v40 = v25["delete"]();
    const v41 = v40 || v40;
    const v42 = v41 || v41;
    const v43 = v42 && v42;
    const v44 = v41 && v41;
    const v45 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    try {
        v29.forEach(f6, v45);
    } catch(e47) {
    }
    const v48 = v44 || v44;
    const v49 = v48 || v48;
    v49 && v49;
    const o51 = {
    };
    const v52 = new Array();
    v52[0];
    const v55 = ("getPrototypeOf").blink();
    const v56 = v55[28];
    const v57 = v56.strike();
    v57.split(v57, v43);
    const v59 = v55.strike();
    const v60 = v59.search;
    try { v60.call(); } catch (e) {}
    const v62 = v59.replace();
    try { v62.slice(4, v9); } catch (e) {}
    class C64 {
    }
    let v65;
    try { v65 = C64(); } catch (e) {}
    v65?.hasOwnProperty;
    class C67 extends C64 {
        ["getPrototypeOf"] = C64;
    }
    const v68 = new C67();
    const t70 = v68.constructor;
    new t70();
    const t72 = v68.constructor;
    new t72();
    const v73 = new C67();
    const t75 = v73.constructor;
    new t75();
    const t77 = v73.getPrototypeOf;
    new t77();
    const v79 = BigUint64Array.of();
    try { v79.entries(); } catch (e) {}
    const v82 = Uint8Array.length;
    v82 + v82;
    const v84 = new C67();
    const v85 = v84.getPrototypeOf;
    const v86 = v85.toString();
    try { v86.italics(); } catch (e) {}
    const v88 = new v85();
    const v89 = v88.getPrototypeOf;
    v89 % v89;
    const t89 = v84.getPrototypeOf;
    const v92 = new t89();
    v92.getPrototypeOf = v92;
    const v93 = new C67();
    const v94 = v93.getPrototypeOf;
    let v95;
    try { v95 = v94(); } catch (e) {}
    try { v95.toString(); } catch (e) {}
    const v97 = v93.getPrototypeOf;
    let v98;
    try { v98 = v97(); } catch (e) {}
    const v99 = v98?.constructor;
    try { v99.call(v56); } catch (e) {}
    let v101;
    try { v101 = v99(); } catch (e) {}
    try { v101.__defineSetter__(v23); } catch (e) {}
    const v103 = v93.constructor;
    try { v103(F11, v44); } catch (e) {}
    for (const v106 of Array()) {
    }
}
new F11();
new F11();
new Float32Array(2379);
new Float32Array(213);
new Float32Array(10);
function F117(a119, a120) {
    if (!new.target) { throw 'must be called with new'; }
    const v121 = this.constructor;
    let v122;
    try { v122 = new v121(F117, v121, F117, F117); } catch (e) {}
    const v124 = v122 >>> 38445;
    38445 >> v122;
    let v126 = v124 * v124;
    v126--;
}
const v128 = new F117(F117, F117);
new F117(F117, v128);
