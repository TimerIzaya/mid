const v0 = [];
new Int16Array(3694);
const v6 = new BigInt64Array(1312);
new BigUint64Array(64);
class C10 extends BigUint64Array {
    static #a = v6;
    static #m(a12, a13, a14) {
        const v18 = [v0];
        v18.fill();
        v18.toLocaleString();
        Array(1000);
        let v24 = a12 * BigInt64Array;
        Math.fround(58706);
        v24--;
        +BigInt64Array;
        Math.cosh(58706);
        return 58706;
    }
    f;
    static #h = BigInt64Array;
    e;
    [1312];
    static #d;
    o(a30, a31, a32, a33) {
    }
}
new C10();
const v35 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f36(a37, a38, a39, a40) {
    a39?.constructor;
    const v42 = /(?:a*)+q(?<a>.)/guds;
    function f43(a44) {
        const v45 = v35.constructor;
        v45(v45);
        a44.constructor.$2;
    }
    for (let [i54, i55] = (() => {
            function f50(a51, a52) {
            }
            return [0, 10];
        })();
        (() => {
            const v56 = i54 < i55;
            !v56;
            return v56;
        })();
        i55--) {
        for (let v63 = 0; v63 < 25; v63++) {
            f43(v42);
        }
    }
    function f65() {
    }
    return f65;
}
new C10();
new C10();
const v69 = new Int8Array();
v69.buffer.slice();
function F74() {
    if (!new.target) { throw 'must be called with new'; }
}
const v76 = new F74();
const v77 = new F74();
let v82;
try {
const t0 = "object";
v82 = t0(v76, "number", F74);
} catch (e) {}
function f83(a84) {
    return v82;
}
class C85 extends f83 {
    [v77] = "E";
    [v76] = -14n;
    268435441 = -14n;
}
new Uint8Array(268435440);
new Uint32Array(186);
