class C3 {
    static set d(a5) {
        try {
            super.n(a5, -1430468654, this);
        } catch(e7) {
        }
    }
    static [0.5790005900547852];
    static [-1e-15];
    static f = -1e-15;
    static 536870888 = 0.5790005900547852;
}
try { new C3(); } catch (e) {}
new C3();
const v10 = new C3();
const v11 = v10?.constructor;
try { new v11(); } catch (e) {}
new C3();
class C14 {
    static #f = C3;
    toString(a16, a17, a18) {
        a16 &&= a17;
        let v21 = ~a17;
        const v22 = v21--;
        v22 + a16;
        Math.acos(a17 || v22);
        return v21;
    }
}
C14.length;
new C14();
const v28 = new C14();
const v29 = v28?.constructor;
let v30;
try { v30 = new v29(); } catch (e) {}
const v31 = new C14();
try { v31.isPrototypeOf(-1430468654); } catch (e) {}
[-246307.25252652215];
[0.7731808577486943,1000000000.0,-1000000000000.0,-5.027249683239967e+307,-1000000000000.0,-0.09330881686411452];
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this?.constructor;
    try { new v39(this, this); } catch (e) {}
}
const v41 = new F35();
v41.b = v41;
class C42 extends v30 {
}
new C42();
for (let v44 = 0; v44 < 10; v44++) {
    function F45(a47, a48) {
        if (!new.target) { throw 'must be called with new'; }
        const v49 = this?.__lookupGetter__;
        try { new v49(a48); } catch (e) {}
        a47 + a47;
        const v52 = a48?.b;
        try { new v52(); } catch (e) {}
        this.c = a48;
    }
    const v54 = new F45(v44, F45);
    v54.e = F45;
    new F45();
}
