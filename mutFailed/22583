new Float32Array(115);
const v5 = new BigInt64Array(128);
v5[44];
Float64Array.length;
new Float64Array(555);
[5.0];
[0.2778729086001164,0.04567666645192592,4.0,851107.0814215029,-8.676858795659722];
[-1000000000.0,-844312.2987488118];
const v14 = /(J5a{0,1}?)/y;
class C15 {
    static {
        this.g = this;
        for (let v17 = 0; v17 < 25; v17++) {
            v17--;
            const v19 = [601759695];
            const v20 = [1073741824,1073741823,1376142744,1073741825];
            function f21(a22, a23, a24, a25) {
                a23--;
                ~a23;
                try { a22(); } catch (e) {}
                const v29 = a24 << a24;
                const v30 = v29 % v29;
                v30 / v30;
                function f32() {
                    return a22;
                }
                f32.name = f32;
                const v34 = new Int8Array();
                try { v34.entries(); } catch (e) {}
                BigUint64Array.length;
                const v39 = BigUint64Array * 536870887;
                let v40 = v39 - v39;
                v40++;
                const v42 = v39 ** v39;
                Number.NaN;
                try { Number(v14); } catch (e) {}
                const v46 = Number.isNaN(v42);
                v46 || v46;
                const v49 = v34.buffer.__defineGetter__;
                try { v49(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f32);
                let v52;
                try { v52 = v20["find"](..."find", a25, ...v19); } catch (e) {}
                return v52;
            }
            for (let v53 = 0; v53 < 5; v53++) {
                f21(this, v53);
            }
        }
    }
}
C15.length = C15;
