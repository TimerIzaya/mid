function f0() {
}
class C1 extends f0 {
    static [f0] = f0;
    static 1 = f0;
    constructor() {
        super();
        const v3 = new f0();
        let v4;
        try { v4 = this.p(v3, v3, v3, v3); } catch (e) {}
        let v6 = -2147483649;
        function F7() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v9 = [601759695];
        const v10 = [1073741824,1073741823,1376142744,1073741825];
        try { v10["find"](..."find", v6, ...v9, ...v10, ...522675525n); } catch (e) {}
        Math.acos(v4);
        Math.trunc(v4);
        return v6;
        for (let v18 = 0; v18 < 5; v18++) {
            C1["p" + v18] = v18;
        }
        v6 & v4;
        for (let v22 = 0; v22 < 5; v22++) {
            f0();
        }
        const t27 = -0.0;
        t27.f = -0.0;
        return arguments;
        v3 >>> ++v6;
    }
}
const v27 = new C1();
new C1();
new C1();
/(?<!)/gvdy;
/kIo/vdi;
const v32 = /(?<!a)/vdims;
class C33 {
    e;
    static p(a35, a36) {
        const o43 = {
            "get": f0,
            "ownKeys": f0,
            get f() {
                class C38 {
                }
            },
            [v32](a40) {
                try {
                    super.m(this);
                } catch(e42) {
                }
                return v32;
            },
            "preventExtensions": f0,
            "setPrototypeOf": f0,
        };
        const v45 = new Proxy(v27, o43);
        return v45;
    }
    #f = f0;
    static #d = f0;
}
new C33();
new C33();
[Math.atanh("Vre")];
[] > 8n;
new C33();
function f59() {
    const v61 = new Set();
    return v61.clear();
}
%PrepareFunctionForOptimization(f59);
f59();
%OptimizeFunctionOnNextCall(f59);
f59();
