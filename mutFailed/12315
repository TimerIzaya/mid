class C3 {
    static {
        let v6;
        try { v6 = this["toString"](-1.0); } catch (e) {}
        try { v6(0.668200484372443); } catch (e) {}
        const t5 = "toString";
        t5["toString"] = 1e-15;
    }
    static get h() {
        try {
            super.valueOf(this, 1e-15, 0.668200484372443, this, -1.0);
        } catch(e10) {
        }
        class C12 {
            constructor(a14, a15) {
                new Uint16Array(a14);
            }
        }
        this.__proto__;
        return this;
    }
}
new C3();
new C3();
new C3();
new Uint8ClampedArray(9);
function f24(a25, a26, a27) {
    'use strict';
    return a25;
}
const v29 = [2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614];
try { v29.find(512); } catch (e) {}
const v32 = new Set(v29);
try { v32.add(v32); } catch (e) {}
new BigUint64Array();
class C40 {
}
const v41 = new C40();
const v42 = new C40();
const v43 = new C40();
function f44(a45, a46) {
    const o52 = {
        "h": v41,
        [v42](a48, a49, a50) {
            super[-9223372036854775807];
        },
        [a46]: v41,
        __proto__: C40,
        "c": 9,
    };
    return o52;
}
f44(Uint16Array, v43);
new Uint8ClampedArray(129);
function f59(a60, a61, a62, a63) {
    return a61;
}
const v64 = f59();
let v65 = -4294967297n;
v65++;
const v68 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v69 = [601759695];
function f71(a72, a73, a74, a75) {
    function f77(a78) {
        return a78;
    }
    Object.defineProperty(arguments, "toString", { enumerable: true, value: f77 });
    function f79() {
        let v82 = -268435456;
        v82--;
        const o95 = {
            "c": v65,
            [522675525n](a85, a86) {
            },
            "maxByteLength": -128,
            "c": v69,
            "b": -4294967295,
            ...-48404n,
            __proto__: -128,
            get d() {
                return v65;
            },
            "e": v82,
            "maxByteLength": -4294967295,
            "arguments": v68,
            ...v69,
            "type": "Vre",
            ..."Vre",
            valueOf(a89, a90) {
            },
            "c": v82,
            "type": "Vre",
            "type": "Vre",
            toString(a92, a93, a94) {
                return a93;
            },
            5: -4294967295,
            6: v82,
        };
        try { o95.valueOf(); } catch (e) {}
        return v69;
    }
    f79();
    Int8Array.a = Int8Array;
    Math.log1p(a75);
    try { Reflect.defineProperty(Reflect, a72, v29); } catch (e) {}
    try { new Int8Array(a73); } catch (e) {}
    Int8Array.a = Int8Array;
    const v104 = new Int8Array(v29, a73);
    let v105;
    try { v105 = v104.findIndex(v64); } catch (e) {}
    const v106 = v104.buffer;
    function f107(a108) {
        return f107;
    }
    f107.constructor = f59;
    const v109 = f107.constructor;
    try { v109(); } catch (e) {}
    v106.constructor = f107;
    v106.slice();
    %OptimizeFunctionOnNextCall(f79);
    let v113;
    try { v113 = ("find").strike(v105, v109, arguments, Int8Array); } catch (e) {}
    let v114;
    try { v114 = v113.match(v68, a75); } catch (e) {}
    const o115 = {
    };
    o115.e = v68;
    o115.e = a73;
    const o116 = {
    };
    o116.g = v114;
    o116.g = v65;
    try {
        let o117 = {
        };
        function f118(a119) {
            o117 = a119;
            return a119;
        }
        Object.defineProperty(o117, "g", { set: f118 });
        o117.e = a73;
    } catch(e120) {
    }
    try {
        const o121 = {
        };
        function f122(a123) {
            return o121;
        }
        Object.defineProperty(o121, "g", { writable: true, set: f122 });
    } catch(e124) {
    }
    try { v29["find"](..."find", a75, ...v69, ...v29, ...522675525n); } catch (e) {}
    return -128;
}
new Int32Array(255);
for (let v127 = 0; v127 < 5; v127++) {
    function f128() {
        class C130 {
        }
        const v131 = new C130();
        v131.constructor;
        const v134 = new Int16Array(255);
        v134.lastIndexOf();
        const v136 = Symbol.for();
        const o137 = {
            [v136]: f128,
        };
        const v138 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        for (let v139 = 0; v139 < 5; v139++) {
            function f140() {
                try {
                    v138.forEach();
                } catch(e142) {
                    e142.message;
                    const v144 = e142.constructor();
                    const o145 = {
                        "execution": v144,
                    };
                }
                return f140;
            }
            f140.call(v138, f140, v138, f140);
            %OptimizeFunctionOnNextCall(f140);
        }
        return f128;
    }
    f128();
    %OptimizeFunctionOnNextCall(f128);
}
