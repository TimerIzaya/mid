const v0 = [-1024,-24489,20715,-2,-536870912,-4096,7];
const v1 = [-12,9223372036854775807,-14];
[-6,11,1073741825,0,865740125,-29881,-2147483647,-9007199254740992,-10];
const v7 = new Reflect();
let v8;
try { v8 = v7.keys(); } catch (e) {}
const v9 = [v7,"-44718",v0];
const v10 = [v8];
try { v10.slice(v10, v1); } catch (e) {}
[v10];
new Uint8ClampedArray(Uint8ClampedArray);
try { new v8("-44718", v9, "-44718"); } catch (e) {}
new Int8Array(128);
class C23 {
    static get h() {
        const o28 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o28);
        return 268435441;
    }
}
C23.name;
const v31 = new C23();
const v32 = new C23();
const v33 = v32.__proto__;
const v34 = new C23(v33, v33, v33);
try { ("symbol").small(); } catch (e) {}
class C38 extends C23 {
    3;
    [v32] = v31;
    ["256"] = v31;
    static #toString(a40, a41, a42) {
        try { a40("256", v34, a40, a42); } catch (e) {}
        Math.atan(16);
        a41 ^ 16;
        return Math.abs(16);
    }
}
try { new C38(); } catch (e) {}
new C38();
const v51 = new C38();
v51[256];
const v53 = new C38();
v53[256];
v53 & v31;
if (v51 <= "symbol") {
    75 >>> 75;
    new Uint8ClampedArray(75);
    new Int16Array(6);
    1821 >>> 1821;
    C38.d = BigInt64Array;
    new BigInt64Array(1821);
} else {
    new C38();
}
new Uint8Array(4);
function f73() {
    return f73;
}
f73.length = f73;
const v74 = [-3,257];
class C75 extends f73 {
    static #n(a77, a78, a79) {
        Object.defineProperty(a79, 10, { writable: true, configurable: true, enumerable: true, set: f73 });
    }
}
try { new C75(); } catch (e) {}
const v81 = new Int8Array();
try { v81.toReversed(); } catch (e) {}
try { v81.finally(v74, f73, f73); } catch (e) {}
