let v3 = 3239;
v3 << v3;
v3--;
const v7 = new Float64Array(v3);
v7[2228] = v7;
let v8 = 2;
const v9 = v8--;
v9 !== v9;
v9 - v9;
new Uint8Array(v8);
3000 >>> 3000;
BigUint64Array.name;
new BigUint64Array(3000);
107 >>> 107;
new Uint8Array(107);
125 >>> 125;
new BigInt64Array(125);
512 - 512;
const v30 = new Int16Array(512);
v30[308] = v30;
class C34 {
    #b = 26507;
    static [26507];
    static get a() {
        super[this] = 26507;
        try {
            arguments.#b <<= arguments;
        } catch(e38) {
        }
        return SharedArrayBuffer;
    }
}
C34[26507] = C34;
const v39 = new C34();
const v40 = v39?.constructor;
try { new v40(); } catch (e) {}
const v42 = v39?.constructor;
let v43;
try { v43 = new v42(); } catch (e) {}
const v44 = v43?.constructor;
try { new v44(); } catch (e) {}
const v46 = v39?.constructor;
v46[26507] = v46;
try { v46(); } catch (e) {}
let v48;
try { v48 = new v46(); } catch (e) {}
try { v48.toLocaleString(); } catch (e) {}
const v50 = v48?.constructor;
try { new v50(); } catch (e) {}
try { new v50(); } catch (e) {}
const v53 = v39?.constructor;
try { new v53(); } catch (e) {}
const v55 = v53[26507];
v55 ^ v55;
v53.name = v53;
let v57;
try { v57 = new v53(); } catch (e) {}
v57.__proto__ = v57;
const v58 = v57?.constructor;
try { new v58(); } catch (e) {}
let v60;
try { v60 = new v58(); } catch (e) {}
const v61 = v60?.constructor;
try { new v61(); } catch (e) {}
Int16Array[26507];
let v64;
try { v64 = new v58(); } catch (e) {}
const v65 = v64?.constructor;
let v66;
try { v66 = new v65(); } catch (e) {}
const v67 = v66?.constructor;
try { new v67(); } catch (e) {}
new C34();
const v70 = new C34();
try { v70.constructor(); } catch (e) {}
const v72 = [536870888,-536870912,-1292028157,-35163,1073741825,1126124502,-1269619973,1000,-128,9];
try { v72.findLastIndex(C34); } catch (e) {}
[-9007199254740991,22341,65537];
const v75 = [9007199254740990,2147483647,-9223372036854775808];
Date.d = Date;
const v77 = new Date();
try { v77.setUTCMonth(BigInt64Array, v77); } catch (e) {}
let v79;
try { v79 = v77.getUTCHours(); } catch (e) {}
v79 - v79;
try { v77.valueOf(); } catch (e) {}
const v82 = v77?.getHours;
try { v82(); } catch (e) {}
let v84;
try { v84 = new v8(); } catch (e) {}
let v85;
try { v85 = v77.setUTCSeconds(v84, v70); } catch (e) {}
v85 ^ v85;
const v87 = v85++;
let v88 = v87 >>> v87;
v88--;
-v87;
for (let v91 = 0; v91 < 5; v91++) {
    -4046;
    const v97 = new BigInt64Array(4046);
    let v98 = undefined;
    const v99 = v98++;
    v99 * v99;
    v99 + v99;
    Number.isNaN(v99 + v99);
    %VerifyType(4046);
    v70[v75];
    v70[undefined] = v77;
    try {
        v97.g = v98;
    } catch(e106) {
    }
    const v107 = v99 >> v99;
    const v108 = v107 >> v107;
    -v108;
    const v110 = v108 / v108;
    const v111 = v110 >> v110;
    v111 >> v111;
    const v113 = v70 >>> v107;
    v113 + v113;
    v113 % v113;
    let v116 = v113 % v113;
    ~v116;
    const v118 = v116--;
    v118 >> v118;
    const o120 = {
    };
    o120.d = o120;
    o120.h = o120;
    o120.e = o120;
    for (let [i124, i125] = (() => {
            10 - 10;
            return [0, 10];
        })();
        (() => {
            const v126 = v57 / i124;
            let v127 = v126 >>> v126;
            v127--;
            const v129 = i125 << i125;
            const v130 = v129 - v129;
            v130 >>> v130;
            const v132 = i124 < i125;
            3375 * 3375;
            try { BigUint64Array.apply(v39, BigUint64Array); } catch (e) {}
            return v132;
        })();
        i124 == i124, i124++) {
        i124 >>> i124;
    }
}
