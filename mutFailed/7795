class C3 {
    get b() {
        this in this;
        try { ("JbyK").localeCompare("JbyK"); } catch (e) {}
        return this;
    }
    static #n(a8, a9) {
        function f10(a11) {
            return a9;
        }
        class C12 extends f10 {
            ["toStringTag"] = a9;
            static #e;
            #h = f10;
        }
        return "toStringTag";
    }
}
const v13 = new C3();
const v14 = new C3();
function f15(a16) {
    try { Symbol.keyFor(Symbol); } catch (e) {}
    return v14;
}
v14[Symbol.toPrimitive] = f15;
const v21 = new C3();
function f22(a23, a24, a25) {
    const o38 = {
        m(a27, a28) {
            new Int32Array(1979);
            new BigInt64Array(3063);
            new Float32Array(127);
            return a25;
        },
        ["JbyK"]: a24,
        "b": v21,
        "h": -974509.5958479184,
    };
    return o38;
}
const v39 = f22(v21, v13, v14);
const v40 = f22(v39, v21, v21);
f22(v39, v40, v40);
const v42 = [-9223372036854775807,-32706,257,9,-23705,9007199254740990,-16801,-57620,-207650968,1073741823];
[-9223372036854775808];
[128,6,1024,4096,25098,-142731813,2147483647,-7];
class C45 extends f22 {
    #m(a47, a48, a49, a50) {
        try {
            C3.#m();
        } catch(e52) {
        }
        return a50;
    }
    [v13] = "toStringTag";
    a = v42;
    [v14] = v39;
    g;
    f;
    d = v39;
    10;
    38 = "JbyK";
}
new C45();
new C45();
new C45();
function f56() {
}
new Int8Array();
new Float32Array(1000);
new Uint8Array(58);
function F66() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v70 = Array(19793);
        function f71() {
            return v39;
        }
        Object.defineProperty(v70, 331, { get: f71 });
        for (const v72 of v70) {
        }
        const v73 = [v70,v70,v70];
        new BigUint64Array();
        const v77 = [];
        Object.defineProperty(v77, 65536, { writable: true, configurable: true, value: v77 });
        for (let v78 = 0; v78 < 50; v78++) {
        }
        v77[65536] %= 256;
        [v73,v73,v73];
        const v80 = [];
        v80.valueOf = f15;
        Uint16Array.valueOf = Array;
        v80 >= Uint16Array;
    } catch(e83) {
    }
}
new F66();
new F66();
