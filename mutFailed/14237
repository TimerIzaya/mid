function F0() {
    if (!new.target) { throw 'must be called with new'; }
    class C4 {
        static {
            Object.defineProperty(this, -30745, { writable: true, enumerable: true, value: this });
        }
    }
    try {
        this.d = 12;
    } catch(e6) {
    }
    try {
        const v7 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        const v9 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v10 = [601759695];
        function f12() {
            try {
                v7.forEach(12);
            } catch(e16) {
                e16.f = e16;
            }
            const v17 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            const o23 = {
                toString(a19, a20) {
                    (12 && 12) <= v17;
                    return 12;
                },
            };
            let v24 = -268435456;
            v24++;
            const o45 = {
                "c": -4294967297n,
                [522675525n](a27, a28) {
                },
                "c": v10,
                valueOf(a30, a31) {
                    return this;
                },
                [-4294967297n](a33, a34, a35, a36) {
                },
                "maxByteLength": -4294967295,
                "arguments": v9,
                ..."Vre",
                valueOf(a38, a39) {
                    return a39;
                },
                get f() {
                    const t47 = -30745;
                    t47[3] >>= -4294967295;
                    return "Vre";
                },
                "type": "Vre",
                4: "Vre",
                "type": "Vre",
                toString(a42, a43, a44) {
                    return "Vre";
                },
                5: -4294967295,
                6: v24,
            };
            return F0;
        }
        this.h = 12;
    } catch(e46) {
    }
    try {
        this.c = 12;
    } catch(e47) {
    }
}
const v48 = new F0();
const v49 = new F0();
new F0();
new Float32Array(2);
new Float32Array(13);
const v58 = v49.trim();
v48.pop();
const o60 = {
};
o60[522675525];
new Uint8Array(4);
new Float32Array();
function f66(a67, a68, a69, a70) {
    let v71;
    try { v71 = a68.apply(a70, a68); } catch (e) {}
    return v71;
}
const o73 = {
    "execution": "async",
};
function f74() {
    const o75 = {
    };
    o75.__defineGetter__;
    const t93 = [-4294967296];
    t93.length = 257;
    const t96 = /F((((.).).).)[Ia*b]/v;
    t96[Math] = -2.6653538746432233;
    try { new v58(v58); } catch (e) {}
    return f74;
}
for (let v84 = 0; v84 < 5; v84++) {
    f74();
    %OptimizeFunctionOnNextCall(f74);
}
function F86(a88) {
    if (!new.target) { throw 'must be called with new'; }
    const v89 = this.constructor;
    try { new v89(); } catch (e) {}
    try {
        class C94 {
            static {
                function f96(a97, a98, a99, a100) {
                }
                for (let v101 = 0; v101 < 5; v101++) {
                    f96(this, v101, v101);
                }
            }
            static #g = -1000000000000.0;
        }
        function f103(a104, a105, a106, a107) {
            const v109 = new Int8Array(a106);
            Math.round();
            function f113(a114, a115, a116) {
                return f113;
            }
            const v119 = new Int32Array(2528);
            v119[0] %= -1073741824;
            v109.buffer;
        }
        const v121 = new Int32Array(12);
        for (const v122 in v121) {
        }
    } catch(e123) {
    }
}
function f124(a125, a126) {
    return Math.tanh("1");
}
new Date(5);
class C134 {
}
function F135(a137, a138, a139) {
    if (!new.target) { throw 'must be called with new'; }
    a137 - a137;
    a138 == a138;
    5 >>> a137;
    a138 - a138;
    const v144 = this.constructor;
    try { new v144(a139, C134); } catch (e) {}
    a137 % a137;
}
f124(f124(), f124);
new F86();
