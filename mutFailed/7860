function f0() {
    const v3 = -Infinity;
    const o15 = {
        "d": -1418,
        "h": v3,
        __proto__: -1418,
        "a": -1418,
        [v3](a5, a6) {
            try {
                a6?.d;
            } catch(e11) {
                typeof e11 === "string";
            }
            return a5;
        },
    };
    return -1418;
}
f0();
const v17 = f0();
const v18 = f0();
/[a-zA-Z0-9]/gdmy;
const v23 = /[a-zA-Z0-9]/uims;
/E[\0]/gvsy;
const v25 = [-9223372036854775807n,v17,v17];
Uint8ClampedArray.prototype;
const v30 = new Int16Array([10,829820207,16,-4294967296,-9007199254740992,-65535,-2147483648,1024]);
const v31 = [-1073741824n,v25,-9223372036854775807n];
[v18,-1073741824n,v31,9007199254740990n,v31];
v23.constructor;
try { Float64Array.from(null); } catch (e) {}
const v38 = new Uint16Array();
const v41 = new Int32Array();
class C42 {
    static #d = -2;
    constructor(a44, a45) {
        try {
            v38.#d += v41;
        } catch(e46) {
            e46.toString();
        }
    }
}
new C42();
const v52 = [];
const v54 = v30?.constructor;
v54.d = v54;
const v56 = new Uint8ClampedArray(-2);
class C57 {
    [Uint8ClampedArray] = v41;
    static valueOf(a59, a60, a61) {
        new a61();
    }
    static a = v56;
}
const v63 = new C57();
const v64 = new C57();
function f65() {
    function f67(a68) {
        this.c = v63;
    }
    v64[2147483647] = v41 << this;
}
const v70 = new Float64Array(v52);
v52[Symbol.iterator] = v70;
let v73 = -10n;
v73++;
function F76(a78, a79, a80, a81) {
    if (!new.target) { throw 'must be called with new'; }
    const v82 = this.constructor;
    try { new v82(this, a81, this); } catch (e) {}
    a80++;
    a80 >>>= F76;
    const v87 = Int32Array - 127;
    v87 / 127;
    Math.atan2(v87, v87);
}
