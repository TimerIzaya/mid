new Float64Array(129);
new Float64Array(8);
new Int16Array(543);
[-268435456,7,-5,1,536870889,1073741824,9007199254740992,-16,-65536,-1807293322];
[9223372036854775807,-2,4294967295,-949851178,65537];
const v11 = [536870888,6,-4294967296,5625,-51604,2087377273,65536,-28051];
const v12 = [-5.313470018522258e+306];
function f13() {
    let v14 = -22872n;
    const v15 = v14--;
    function f16(a17, a18, a19, a20) {
        let v21 = -6.50438168344124;
        v21 **= v21;
        const o29 = {
            [v15](a23, a24, a25, a26) {
                eval(a18);
            },
        };
        return o29;
    }
    return v11;
}
v12.valueOf = f13;
function F30(a32, a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    function f36() {
        function f37(a38) {
            this[-1] = v11;
            return Symbol.toPrimitive;
        }
        return f37;
    }
    Object.defineProperty(this, "constructor", { writable: true, enumerable: true, get: f36 });
    const v41 = this.constructor;
    try { new v41(); } catch (e) {}
    try {
        v12 & 12620;
    } catch(e45) {
    }
    for (let v46 = 0; v46 < 5; v46++) {
        function f48() {
            let v51 = 1864489360 << ("c").toLowerCase();
            return v51--;
        }
        f48();
        %OptimizeFunctionOnNextCall(f48);
    }
}
new F30();
new F30();
