const v2 = new Uint8Array(16);
const v4 = 8 !== 8;
const o8 = {
    valueOf() {
        const v6 = v2[this];
        try {
            v6.d = v2;
        } catch(e7) {
        }
        return 16;
    },
};
v4 && v4;
function f11(a12) {
    const v13 = [];
    class C15 {
        p(a17, a18) {
            "-1210238113" - v13;
        }
    }
    return C15;
}
const v21 = Symbol.toPrimitive;
Int16Array[v21] = f11;
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v22 = new Int16Array(8);
try { v22.findIndex(v2); } catch (e) {}
const v26 = new Int32Array(8);
const v27 = v26[6];
const v28 = v27 & v27;
const v29 = [v26,v2];
v29.g = v29;
const v30 = [Int32Array,Int32Array,8,v29];
const v31 = [16,v29,v30,v30];
function f32(a33) {
    function f34(a35, a36) {
        a36?.__lookupGetter__;
        a36?.constructor;
        return f34;
    }
    return v21;
}
v31.constructor = f32;
const v39 = v31?.constructor;
try { new v39(v22); } catch (e) {}
class C41 {
    o(a43, a44) {
        const o48 = {
            "execution": "sync",
            "type": "minor",
        };
        return gc(o48);
    }
    static [Int16Array];
    static a;
}
C41.name;
const v51 = new C41();
Object.defineProperty(v51, "constructor", { writable: true, enumerable: true, value: f11 });
const v52 = v51?.constructor;
try { new v52(); } catch (e) {}
const v54 = new C41();
v54.constructor = f32;
const v55 = v54?.constructor;
v55.d = v55;
try { new v55(); } catch (e) {}
const v57 = new C41();
v57.constructor = f32;
const v58 = v57?.constructor;
try { new v58(); } catch (e) {}
const v60 = [601759695];
function f61(a62, a63, a64, a65) {
    -a63;
    a64++;
    a63 >> a63;
    a64 - a64;
    arguments.valueOf = f61;
    arguments[2] = arguments;
    function f71() {
        const o72 = {
            __proto__: a64,
        };
        const v73 = o72.valueOf();
        try { v73.isPrototypeOf(v73); } catch (e) {}
        v73[1] = v73;
        return v73;
    }
    const v75 = f71();
    v75[6] = v28;
    v75[1] = v75;
    v75[2] = v75;
    gc.e = v75;
    gc.e = gc;
    gc();
    v75[6] = v75;
    %OptimizeFunctionOnNextCall(f71);
    return gc;
}
for (let v78 = 0; v78 < 5; v78++) {
    f61(v60, v78, v78);
}
