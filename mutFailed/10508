function f3() {
    return 33343;
}
const v4 = [257,536870889,-9007199254740991,-32545,-713851408,103271613,-256,-33034];
const v5 = [868982684,-8,-664731524,9007199254740991,-14];
v5.p21 = v5;
for (let v6 = 0; v6 < 32; v6++) {
    const v8 = "p" + v6;
    v8[1] = v8;
    v5[v8] = v6;
}
const v9 = [4,-59251,38621,63657,268435439,2147483647,1,-50802,129,56274];
function f10() {
    return f3;
}
function f11(a12) {
    ("valueOf").localeCompare();
}
Object.defineProperty(v9, "constructor", { writable: true, configurable: true, get: f10, set: f11 });
let v15;
try { v15 = v9.map(f3); } catch (e) {}
v9.g = v9;
~10;
const v19 = new Float64Array(10);
let v20;
try { v20 = v19.toReversed(); } catch (e) {}
v20[Symbol.toPrimitive] = f10;
16 % 16;
const v26 = /\xf0\x9f\x92\xa9[\c1](F\qs*)?/imsy;
const v27 = /\u0060/gudmsy;
const v28 = /J/gvdy;
v27[v26] = f3;
v4[v28] |= v20;
const v29 = new Int16Array(16);
v29[11];
-5;
const v34 = new Uint8ClampedArray(5);
v34[3] = v34;
const v35 = v34[4];
v35 - v35;
function F37(a39) {
    if (!new.target) { throw 'must be called with new'; }
    const v40 = this?.__defineSetter__;
    try { new v40(f3, v4); } catch (e) {}
    try { this.propertyIsEnumerable(f3); } catch (e) {}
}
const v43 = new F37(F37);
v43.v39 = v15;
const v44 = v43?.constructor;
try { new v44(-16); } catch (e) {}
const v46 = v43.propertyIsEnumerable();
const v47 = v46 && v46;
v47 && v47;
with (v43) {
    try { v46(); } catch (e) {}
}
