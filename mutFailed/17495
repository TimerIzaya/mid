class C3 {
    toString(a5) {
        new Set();
        function f8() {
            return Set;
        }
        return Set;
    }
    129 = -10;
    [-10];
}
new C3();
new C3();
const v11 = new C3();
[8.610949490038069e+307,419299.31955738785,0.2850328750379527,2.220446049250313e-16,1000.0];
[3.705901834353334,5.683917679876727,1000000000000.0,-852385.6117415698,-2.3026054740231627];
[824.361653552138,-1.6950938037772982e+308,1000000.0,0.3627038669216458];
const v16 = Array.length;
const v17 = Array(v16);
const v18 = /lZ\1(a)/gvm;
v18.c = v11;
v18.c = v18;
const v19 = /a\sh/gums;
const v20 = /(p(?:ab))/gdis;
v20[Symbol.iterator] = Array;
v20.b = v20;
const v24 = new Int8Array();
v24.c = v24;
const v26 = new Uint8Array();
let v27 = 128;
v27++;
const v30 = Uint8Array == 248;
const v31 = v30 && v30;
const v32 = v31 || v31;
new Int8Array(v26);
v17.valueOf = Array;
const v35 = new Uint16Array();
const v36 = v35[171];
let v37;
try { v37 = v18.test(v27); } catch (e) {}
v37 = v17;
v24[2861875614];
v16.f ||= 248;
let v42 = -v36;
v42++;
Math.sqrt(v42);
248 ** v36;
let v46 = 0;
v46++;
const v48 = new Int8Array(v20);
v48.byteOffset;
-6.515712503710309e+307 >>> -6.515712503710309e+307;
function f53(a54, a55, a56, a57) {
    v24.c = a55;
    return 248;
}
const v58 = f53(Int8Array, v48, Uint16Array, v32);
v58 >> v58;
const v60 = f53(v46, v19);
try { v60.compile(v27, v16); } catch (e) {}
let v64 = -5.0;
function f65() {
    const o69 = {
        toString(a67) {
            return [-2.0,-1000000.0,-Infinity,0.03714003700223023,-1.0];
        },
    };
    return o69;
}
const v70 = 0.41428636270946406 ^ v64;
v70 - v70;
let v72 = ++v64;
v72--;
const v74 = -197236662 && 0.41428636270946406;
let v75 = v74 + v74;
class C76 {
}
class C77 {
}
try { ("1O6N").localeCompare("bigint", "1O6N"); } catch (e) {}
v75--;
const v82 = Math.round();
v82 % v82;
let v84 = 6;
const v85 = v84++;
const v87 = new Map();
function f88(a89, a90) {
    function F91(a93, a94, a95) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C96 {
    }
    for (let v97 = 0; v97 < 5; v97++) {
        const v98 = v97 + v97;
        function f99() {
            const v100 = f99 % C96;
            new F91(v100, v98, v100);
            for (const v105 of Array(4087)) {
            }
            return f99;
        }
        f99();
    }
    return v74;
}
v87.constructor = f88;
class C108 extends v87.constructor {
}
class C109 {
}
const o110 = {
};
const v111 = new C109();
function f112() {
    Math[Symbol.species];
    return Uint8Array;
}
v111.toString = f112;
const v117 = new Set();
v117.values();
v117[v111];
const v122 = new Float64Array(5);
const v123 = new Float64Array(v122);
v122 ** v123;
const v125 = new C109();
const v126 = v125.constructor;
let v127;
try { v127 = v126(); } catch (e) {}
function f128(a129, a130) {
    const t129 = [-3.0];
    t129[2] = 3.0;
    class C135 {
    }
    const v136 = new C135();
    function f137(a138, a139, a140, a141) {
        const o155 = {
            "e": v136,
            ...a138,
            toString(a143, a144, a145) {
                a139 << a139;
                1477525529 << 1477525529;
                ++a139;
                return f137;
            },
            "d": a138,
            [v136]: a141,
            "g": 579720983,
            256: "getInt32",
            set b(a154) {
            },
            "b": a140,
            ...v136,
            "f": a140,
            "c": C135,
        };
        return o155;
    }
    f137(f137());
    const v159 = new Float64Array(v127);
    const o164 = {
        [v111](a161, a162, a163) {
        },
    };
    return v159;
}
%OptimizeFunctionOnNextCall(f128);
f128(v85, Int8Array);
