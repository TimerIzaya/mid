class C3 {
    a = "clear";
    #o(a5) {
        try {
            super.log(a5, this, 0.5055346611119498, this);
        } catch(e7) {
        }
        return this;
    }
    static #g = "clear";
    static [1000];
    #h;
    #b;
}
C3[1000] = C3;
new C3();
new C3();
const v10 = new C3();
v10.a = v10;
-28393 >>> -28393;
let v16;
try { v16 = Array.call(v10); } catch (e) {}
try { v16.findLast("clear"); } catch (e) {}
class C18 extends Array {
}
let v19;
try { v19 = new C18(); } catch (e) {}
function f20() {
    return f20;
}
function f21() {
    return f20;
}
class C22 extends C3 {
    #f;
    static p(a24, a25, a26, a27) {
        function f29() {
        }
        new Int8Array();
        let v32 = 536870888;
        ++v32;
        const v35 = [];
        function F36(a38, a39, a40, a41) {
            if (!new.target) { throw 'must be called with new'; }
            a38.strike();
            const v43 = this.constructor;
            try { new v43(a41, v35, a39, a41); } catch (e) {}
            a26[2];
        }
        return a26;
    }
    p(a48, a49) {
        super[this] = a49;
        try {
            new C3();
        } catch(e51) {
        }
        return a48;
    }
}
new v19();
const v53 = new C3();
v53.b = v53;
f20();
%PrepareFunctionForOptimization(f20);
f20();
f20();
%OptimizeMaglevOnNextCall(f20);
f20();
const v58 = new C22();
const v59 = v58?.constructor;
let v60;
try { v60 = new v59(); } catch (e) {}
class C61 {
    constructor(a63) {
        const v64 = v58?.__defineGetter__;
        let v65;
        try { v65 = new v64(0.5055346611119498, C18); } catch (e) {}
        a63.e = v65;
        a63.e = a63;
        for (let v66 = 0; v66 < 32; v66++) {
            for (let v67 = 0; v67 < 5; v67++) {
                const v68 = v67 >> v60;
                v68 * v68;
                function f70() {
                    return v67;
                }
            }
            const v72 = v60?.call;
            try { new v72(Array); } catch (e) {}
            const o74 = {
            };
            o74.h = o74;
            gc(o74);
        }
    }
}
C61.d = C61;
let v76;
try { v76 = C61.toString(); } catch (e) {}
try { v76.localeCompare(f20); } catch (e) {}
new C61(C61);
const v79 = new C61(C61);
v79.length = v79;
v79.length = v79;
const v80 = new C61(v79);
const v81 = v80?.constructor;
try { new v81(v80); } catch (e) {}
const v83 = v80.constructor;
const v84 = v83?.e;
try { new v84(v10); } catch (e) {}
new v83(v79);
