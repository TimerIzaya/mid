function f0() {
}
/(?:ab){4,7}(x)(x)(x)\1*NSs+/gvdmy;
/VYa?/vdimsy;
/Ba+/gudi;
new BigInt64Array(0);
new Uint8ClampedArray(3);
new Int16Array(109);
const v13 = [0.0,-6.342688296098643e+307,2.0];
class C15 {
    constructor(a17) {
        const o20 = {
            "execution": "async",
            "type": "minor",
        };
        const o21 = {
        };
        const v23 = new Proxy(a17, o21);
        [v23.map(Array),-4294967295];
        new Int16Array(3);
        for (let [i37, i38] = (() => {
                const v33 = new Uint32Array(0, 0, 10);
                const t1 = v33.constructor;
                const v35 = new t1();
                v35.reverse();
                return [0, 10];
            })();
            i37 < i38;
            i38--) {
        }
        function F45(a47, a48) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v49 = new F45();
        const v52 = new Float32Array();
        for (let v53 = 0; v53 < 25; v53++) {
            function f54(a55, a56, a57, a58) {
                a55[2];
                a55[0] = a55;
                const v60 = a56 == a56;
                v60 && v60;
                const v63 = arguments?.__lookupGetter__;
                v63.length = v63;
                try { v63(v63, f54); } catch (e) {}
                try { undefined(v52, undefined); } catch (e) {}
                return f54;
            }
            for (let v67 = 0; v67 < 10; v67++) {
                f54(v52);
            }
        }
        %VerifyType(v49 instanceof -24894);
    }
}
new C15(v13);
[-1073741824,-1073741824,-1073741824,-1073741824];
const v74 = new BigUint64Array();
function F75() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v77 = 0;
        let v78 = 0;
        while ((() => {
                const v80 = v78 < 0;
                !v80;
                return v80;
            })()) {
            for (let v82 = 0; v82 < 5; v82++) {
            }
            v78++;
        }
        do {
            try { v74.entries(); } catch (e) {}
            v77++;
        } while (v77 < 5)
        new F75();
    } catch(e90) {
    }
}
