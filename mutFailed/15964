const v2 = new Float64Array(256);
const v5 = new Uint8Array(152);
try { v5.set(v2); } catch (e) {}
function F9(a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    function f14(a15, a16) {
        NaN !== NaN;
        class C19 {
        }
        try { C19.apply(1.7976931348623157e+308); } catch (e) {}
        const v22 = new Float64Array();
        return v22.values().next();
    }
    %PrepareFunctionForOptimization(f14);
    f14();
    %OptimizeFunctionOnNextCall(f14);
    f14();
}
new F9();
try { Uint8Array.from(Uint8Array); } catch (e) {}
const v29 = new Uint8Array(133);
class C30 {
}
try {
    const t24 = null;
    t24.valueOf = v2;
} catch(e32) {
    e32.stack;
}
v29[14] = v29;
class C34 extends Float64Array {
    set d(a36) {
        v5["includes"](a36 >>= Uint8Array == a36, 256);
    }
    static #b = Float64Array;
    static [Uint8Array];
    constructor(a41) {
        function f42() {
        }
        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f42 });
    }
    static h;
    static 7;
}
C34.length;
new C34();
new C34();
new C34();
const v47 = [10000];
function f51() {
    const o72 = {
        m(a53) {
            Object.defineProperty([-7,-18455], "toString", { value: Array });
            ([-729574.8782662717,NaN,NaN,1.4631545214551755e+308,771.103726894627,54.21198698191802]).map;
            class C58 {
            }
            const v62 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray, Uint8ClampedArray);
            function f63() {
                const o64 = {
                    __proto__: v62,
                    4: 152,
                };
                return f63;
            }
            new Int8Array(3938);
            "p" || 152;
            class C68 {
            }
            for (let v69 = 0; v69 < 25; v69++) {
            }
        },
    };
    o72.m();
}
f51();
f51();
const v76 = new Float32Array(v47);
const v77 = v76?.lastIndexOf;
try { new v77(v2); } catch (e) {}
