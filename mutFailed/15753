function f3() {
    return f3;
}
const t3 = f3.constructor;
t3("string", "string", -812862.2972101797);
const v7 = [-9,37486];
v7[1] = v7;
const v8 = [51322,831941506,-1566317710,1024,-529432951,-9007199254740992,-8];
let v9;
try { v9 = v8.reverse(); } catch (e) {}
try { v9.fill(v7); } catch (e) {}
const v11 = [65537,148015475,536870889,536870912,8,9007199254740992,-65537,1030,-28619,-268435456];
const v12 = [-9007199254740991,-39854,128,65536,-1003986072,2147483649];
const v13 = [-1024];
v13[0] = v13;
let v14;
try { v14 = v13.reverse(); } catch (e) {}
[1000000.0,1000000.0,1000000.0];
new Int8Array();
const v20 = new Float64Array();
delete v20[-1.5286188982640463e+308];
try { v14.includes(-1000000.0); } catch (e) {}
v14.g = v14;
const v24 = [-8,-1014956440];
try { v24.group(v14); } catch (e) {}
function F26(a28, a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    try { a29.map(v24); } catch (e) {}
    try { a30.reduce(a31); } catch (e) {}
    const v34 = this?.propertyIsEnumerable;
    v34.name;
    try { new v34(a30); } catch (e) {}
    let v37;
    try { v37 = a30.toString(); } catch (e) {}
    try { v37.trimStart(); } catch (e) {}
    let v39 = a28 + a28;
    v39++;
    try { a29.findLastIndex(a30); } catch (e) {}
    const v42 = a30?.values;
    try { v42.toString(); } catch (e) {}
    try { new v42(); } catch (e) {}
    try {
        this.f = v12;
    } catch(e45) {
    }
}
const v46 = new F26(-1000000.0, v13, v12, 0.34210651406345893);
v46.b = v46;
Float64Array(3n);
const v50 = [-2,1024];
function F51(a53, a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v57 = 0; v57 < 100; v57++) {
        for (let v58 = 0; v58 < 5; v58++) {
            function f59() {
                return v58;
            }
        }
        Array / v50.length;
    }
}
const v62 = new F51();
new F51(F51, v50, v62, v62);
v46.length = v46;
const v64 = new F26(-812862.2972101797, v12, v7, -1000000.0);
let v65;
try { v65 = v64.toString(); } catch (e) {}
try { v65.codePointAt(v11); } catch (e) {}
let v67;
try { v67 = v65.replaceAll(v13, v8); } catch (e) {}
v67[349] = v67;
const v68 = new F26(-1000000.0, v13, v24, -812862.2972101797);
class C69 {
}
let v70 = 0;
v70++;
const v74 = new Date(5);
v74.setMilliseconds(5);
function f76(a77, a78, a79, a80) {
    a77 & a77;
    a80 | a80;
    let v83;
    try { v83 = a78.at(v65); } catch (e) {}
    try { v83.map(v68); } catch (e) {}
    a79.g = a79;
    let v85 = a80 >> a80;
    v85--;
    const v87 = a77 + a77;
    v87 - v87;
    const o94 = {
        "d": 0.34210651406345893,
        [v11]: a77,
        [v24]: v8,
        set f(a90) {
            v8[0] = -812862.2972101797;
            super.d = a77;
            const o91 = {
            };
            new Proxy(v24, o91);
        },
        "b": v8,
        1000: a79,
        "a": a78,
        "e": -1000000.0,
    };
    try { o94.toString(); } catch (e) {}
    o94[1000] = o94;
    const v96 = o94[1000];
    v96[1000] = v96;
    return o94;
}
const v97 = f76(-1000000.0, v13, v24, -1000000.0);
v97[1000] = v97;
f76(0.34210651406345893, v24, v8, -1000000.0);
const v99 = f76(0.34210651406345893, v11, v7, -812862.2972101797);
v99.h = v99;
for (let v102 = 0; v102 < 25; v102++) {
    const v103 = [601759695];
    v103[0];
    const v105 = [1073741824,1073741823,1376142744,1073741825];
    function f106(a107, a108, a109, a110) {
        try { a108.groupToMap(f106); } catch (e) {}
        a107 * a107;
        a109 + a109;
        a110.g = a110;
        let v115;
        try { v115 = ("find").blink(); } catch (e) {}
        v115[10] = v115;
        try { v105["find"](..."find", a110, ...v103, ...v105); } catch (e) {}
        const v117 = WeakMap / 536870887;
        v117 >>> v117;
    }
    for (let v119 = 0; v119 < 5; v119++) {
        -v119;
        f106(v102, v103, 536870887, f106);
    }
}
function f122(a123) {
    return WeakMap;
}
C69.toString = f122;
class C124 {
}
const v125 = new C124();
v125.constructor;
