const v0 = [-1000.0,-0.0,-7.1870906566403665,-0.0,-5.0,-5.0,NaN,88844.72792904056,-1.9380277912468843e+306];
const v1 = [-1000.0,-5.0,1e-15];
const v2 = [-1000000000.0];
const v3 = /ia\sv9(\1a)/gvdmsy;
const v4 = /Ia{}/ims;
const v5 = /8je\p{Nd}whI/gud;
const v6 = [403.8812960369132,-1000000000.0,-1.28209416790123e+308,0.8625725778943152];
const v7 = [23.134493926635855,-3.126066757986294,0.4544020110807957];
const v8 = [-5.0,0.7471120288683607,5.0,-92012.24661029619,0.20334328953997383,0.024035976253432678,-882.6683740207791,-127.55079485814576,2.557075500915108];
function f9() {
    return v8;
}
for (let [v13,v14,v15] of v7) {
    -1024 instanceof v15;
}
let [,v17] = v7;
try { v4.exec(v17); } catch (e) {}
class C19 {
    #valueOf(a21, a22, a23) {
        let v24;
        try { v24 = new a22(a22, 4096, a21, a22); } catch (e) {}
        try { new v24(this, this, v0, v5); } catch (e) {}
        try {
            v7.h = f9;
        } catch(e26) {
        }
        return;
        let v29 = -11;
        v29 = 372;
        return v6;
    }
    #p(a31, a32, a33, a34) {
        super[a32] = a32;
        const v35 = v3;
        v35 - a31;
        const v38 = Symbol.iterator;
        const o47 = {
            [v38]() {
                let v40 = 10;
                const o46 = {
                    next() {
                        v40--;
                        const v44 = v40 == 0;
                        const o45 = {
                            "done": v44,
                            "value": v40,
                        };
                        return o45;
                    },
                };
                return o46;
            },
        };
        new Uint16Array(3);
        new BigInt64Array(50);
        new Uint32Array(15);
        return v5;
    }
}
new C19();
new C19();
new C19();
function F60() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v63 = -(-7);
        const v64 = v63 ** v63;
        f9();
        const v66 = [v8];
        [v66,v0,v3,v2,v66];
        [v64,v7,v64];
        v1[Symbol.iterator];
    } catch(e72) {
    }
}
function F73(a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
    const v77 = this.constructor;
    try { new v77(this, a75); } catch (e) {}
    new F60();
}
new F73();
