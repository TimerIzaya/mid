function f3(a4) {
    const o5 = {
        ..."toStringTag",
    };
    o5[5] = o5;
    return o5;
}
class C6 extends f3 {
    ["15036"];
}
try { new C6(); } catch (e) {}
const v8 = new C6();
let v9 = -11n;
v9 & v9;
class C12 {
    o(a14, a15) {
        ({"h":v9,...a15} = this);
        let v16;
        try { v16 = new v9(a14); } catch (e) {}
        const o17 = {
        };
        try {
            new Int16Array(1371);
            ("sync")[-5.0];
            o17.d = v16;
        } catch(e24) {
        }
        try {
            const o25 = {
            };
            Math.expm1(1e-15);
            class C30 {
                constructor(a32) {
                    ("valueOf").localeCompare(a32, "valueOf");
                }
            }
            o25.d = v16;
            o25.f = -2147483649n;
        } catch(e34) {
        }
        try {
            function F35(a37, a38) {
                if (!new.target) { throw 'must be called with new'; }
                this.c = a38;
            }
            function f39(a40) {
                const o42 = {
                    __proto__: Set,
                    ...Set,
                };
                const v46 = new Float32Array(256);
                v46[5] ||= 6;
                function f48(a49) {
                    function F50(a52, a53) {
                        if (!new.target) { throw 'must be called with new'; }
                    }
                    const v55 = [9007199254740992,-12,-65536,21712,-1,-65536,-152029754,536,-4,1193126662];
                    const o56 = {
                        [v55]: undefined,
                    };
                    a49 & a49;
                }
                this.onmessage = f48;
                v8.__proto__;
            }
            const v62 = [f39];
            const o63 = {
                "arguments": v62,
                "type": "function",
            };
            const o64 = {
            };
            o64.d = v16;
            o64.f = -2147483649n;
            o64.e = -2147483649n;
        } catch(e65) {
        }
        const v68 = new Int32Array(257);
        function f69(a70, a71, a72, a73) {
            let v75 = new Map();
            [...v75] = v68;
            let [...v76] = v68;
            return v75;
        }
        try {
            const o77 = {
            };
            o77.d = v16;
            ("setUTCMinutes").toUpperCase();
            const v80 = /xEz\xe2\x81\xa3/gumy;
            function f81(a82, a83, a84) {
                return v80;
            }
            o77.f = -2147483649n;
            o77.a = a15;
            return o77;
            const v86 = new BigInt64Array();
            v86[0] = v86;
            try {
                Array(-12302);
            } catch(e90) {
            }
        } catch(e91) {
        }
        return 0n;
    }
}
const v92 = C12?.apply;
try { new v92(C12, v8); } catch (e) {}
new C12();
const v95 = new C12();
try { v95.o(C6, v9); } catch (e) {}
new C12();
[549.0446026521968,-723614.8410958203,2.220446049250313e-16];
gc();
function f102(a103, a104, a105, a106) {
    const o111 = {
        [a105](a108, a109, a110) {
            switch (a103) {
                default:
                    break;
            }
        },
    };
    return a106;
}
f102.h = f102;
[1.7976931348623157e+308,4.0,-938721.1407019085,-1.0,-183.35329447949357,4.0,-3.1897515634632185,0.0];
[2.2250738585072014e-308,6.122990157382489];
new Map();
const v117 = new Uint32Array(Uint32Array);
Int16Array.d = Int16Array;
new Uint8Array(255);
Object.defineProperty("toStringTag", 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
new Int16Array(v117);
