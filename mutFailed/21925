const v0 = /Wi/u;
/[aLafoo[z]*]/umy;
/(?:a*)*/gumsy;
const v4 = new Date();
let v5 = 2379;
let v6 = Float32Array;
const v7 = new v6(v5);
delete v0[v4];
delete v0[v7];
Object.defineProperty(v4, 141, { enumerable: true, set: Date });
[v5,...v6] = v7;
const v12 = [v5];
Reflect.construct(Date, v12, v6);
new Float32Array(213);
new Float32Array(10);
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = this.constructor;
    let v24;
    try { v24 = new v23(F19, v23, F19, F19); } catch (e) {}
    const v26 = v24 >>> 38445;
    this[v26] = this;
    let v27;
    try { v27 = v12.copyWithin(213, 213, 213); } catch (e) {}
    v27 = this;
    ~v4;
    const o31 = {
        "maxByteLength": 3511,
    };
    const v33 = new SharedArrayBuffer(2730, o31);
    new Float64Array(v33);
    38445 >> v24;
    let v37 = v26 * v26;
    v37--;
}
const v39 = new F19(F19, F19);
new F19(F19, v39);
