let v0 = "string";
class C3 {
    get d() {
        try {
            this.length = 1;
        } catch(e6) {
        }
        v0 -= this;
        const t7 = "asyncIterator";
        t7[87] = 1;
        return 1;
    }
    static d = "asyncIterator";
    static [v0];
    static g = v0;
    static 5;
    [0.0];
}
const v7 = new C3();
const v8 = new C3();
const v9 = new C3();
function f10(a11, a12, a13) {
    const o14 = {
        __proto__: v0,
        ...v9,
        9: "asyncIterator",
        "f": v0,
        "c": a12,
        [-1]: "asyncIterator",
        "caller": v0,
        "MAX_VALUE": "asyncIterator",
        "b": a12,
        [0.0]: a13,
        "e": a13,
        "h": "asyncIterator",
        9: a13,
        ...a11,
        [a11]: v8,
    };
    return o14;
}
const v15 = f10(v9, v7, v9);
const v16 = f10(v7, v9, v9);
f10(v9, v15, C3);
new WeakSet();
[536870888,-1,4294967295,362268157,9007199254740991];
[9007199254740991,127,5,4,1000,255,512];
[6,-2147483648,-163552433,-5];
function f23() {
}
f23();
%PrepareFunctionForOptimization(f23);
v7();
f23();
%OptimizeFunctionOnNextCall(f23);
f23();
const v29 = ([-65535,14,-4294967295,8,9,-1195111240,8,4,-9223372036854775808])[1];
function F30() {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f23;
    try { this.constructor(); } catch (e) {}
    this.b = 4294967296;
    try {
        function F34() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v36 = new F34();
        const v37 = new F34();
        const v38 = v37.__defineSetter__;
        try { v38(); } catch (e) {}
        function f40(a41, a42) {
            const o43 = {
                "e": v36,
            };
            return o43;
        }
        const v44 = f40();
        f40();
        function f46() {
            return f40;
        }
        f46.b = v29;
        f46.b = f46;
        const v49 = new Float32Array();
        for (const v50 of v49) {
            v50 & v50;
            Object.defineProperty(v44, Float32Array, { configurable: true, enumerable: true, get: f40, set: f46 });
        }
        this.g = 4294967296;
    } catch(e52) {
    }
    this.f = 4294967296;
}
new F30();
new F30();
new F30(v15, 0.0, v16);
