[];
const v1 = [-2147483648,4294967297];
const v2 = [2067498107,64];
function f3() {
    let {"a":v4,"length":v5,} = v1;
    try { v2.entries(); } catch (e) {}
    return v2;
}
v2.toString = f3;
[127,1,62450,65536,-2,44550,-9223372036854775808,7,-609996761,12];
const v8 = [-214875.94706647936,259.43609348609425,1.0];
try { v8.pop(); } catch (e) {}
[0.4277404911630627,1.426536963353989,3.0,2.2250738585072014e-308,4.0,5.0];
[NaN,NaN,-953.3936861174191,-7.6043555020732985,-1000000.0,-137.91617226622657,-4.233477781745472,-Infinity,1000000000000.0];
let v12 = 16;
v12 >> v12;
try { Uint32Array.from(237); } catch (e) {}
const v19 = new Uint32Array(237);
v19[97] = v19;
const v22 = new Float64Array(5);
function f23() {
    v12 = 237;
    function F24(a26, a27, a28, a29) {
        if (!new.target) { throw 'must be called with new'; }
        try { a27.call(); } catch (e) {}
        for (let v31 = 0; v31 < 50; v31++) {
        }
    }
    new F24();
    return F24;
}
Object.defineProperty(v22, "constructor", { writable: true, configurable: true, value: f23 });
try { v22.slice(v2, 237); } catch (e) {}
4 - 4;
new Int8Array(4);
const v38 = /[\ca]/ms;
v38.caller = Float64Array;
function f41(a42, a43) {
    function f44(a45) {
        const v48 = Array(19793);
        [v48,v48,v48];
        return Array;
    }
    a43.toString = f44;
    a42.caller = a42;
    const o51 = {
        get h() {
            return a43;
        },
        [a43]: 4,
        2778757984: a42,
        "h": 4,
    };
    return 4;
}
function f52(a53, a54) {
    const o55 = {
    };
    function f56(a57) {
        const o58 = {
        };
        return o58;
    }
    const v59 = f56();
    class C60 extends f56 {
    }
    const v61 = new C60();
    function F62(a64, a65) {
        if (!new.target) { throw 'must be called with new'; }
        const v66 = this.constructor;
        try { new v66(a64, v66, v66, o55, v66); } catch (e) {}
        v59[v61] = o55;
    }
    return v38;
}
f41.toString = f52;
f41(f41, f41);
f41(v38, -65535);
