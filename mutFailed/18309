function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(F3); } catch (e) {}
    try {
        this.a = 0.8809895566196683;
    } catch(e7) {
    }
    try {
        this.c = a5;
    } catch(e8) {
    }
    try {
        this.h = a5;
    } catch(e9) {
        const v12 = Math.round(Math);
        async function f13(a14, a15, a16) {
            await v12;
            return 268435440;
        }
    }
}
const v18 = F3?.apply;
try { new v18(F3, -8.229679289370568e+307); } catch (e) {}
new F3(1.3455767005837919e+308);
new F3(0.8809895566196683);
function f22() {
    const v23 = [f22,f22];
    function f24(a25) {
        return a25;
    }
    v23.toString = f24;
    const o26 = {
        __proto__: v23,
    };
    const v28 = new Int8Array();
    v28[1];
    return f22;
}
new F3(1.3455767005837919e+308);
Int16Array.length;
new v18(47);
new Float32Array(1000);
~256;
("c").normalize();
const v45 = new Int32Array(1000);
v45.includes(-1014545457);
const v47 = Int8Array.name;
const v48 = new Int8Array(256);
v47[76] = v48;
class C49 {
}
C49.length = Int32Array;
for (let v50 = 0; v50 < 5; v50++) {
    function f51() {
        let v52 = f51 % C49;
        v52--;
        -4087;
        for (const v58 of Array(4087)) {
        }
        return C49;
    }
    f51();
    ("c").toUpperCase();
    Int32Array.length = Int32Array;
    const o62 = {
    };
}
