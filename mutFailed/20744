let v0 = "-37736725";
-25283n && -25283n;
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    this.toString();
    const v13 = this.constructor;
    let v14;
    try { v14 = new v13(); } catch (e) {}
    typeof v14 === "symbol";
}
new F6();
const v19 = ("-536870912")[-7];
function f21(a22, a23, a24) {
    return a23;
}
class C25 extends f21 {
}
for (let v26 = 0; v26 < 5; v26++) {
    Object.defineProperty(C25, Float32Array, { enumerable: true, get: f21 });
}
let v27 = Date;
const v28 = new v27();
const v29 = v28?.setFullYear;
class C31 extends Int8Array {
}
new C31();
const v35 = new Date(Uint8Array);
v35.setTime(Uint8Array);
try { new v29(v27, -7, v28); } catch (e) {}
const v38 = v27++;
v38 * v38;
function f40() {
    return v19;
}
9007199254740991 * 9007199254740991;
const v46 = new Int32Array(965);
const v48 = new Float64Array(965);
let v50 = 255;
const v51 = new Array(v50);
class C54 extends Array {
    static n(a56, a57, a58, a59) {
        [0.1270426937578495,a58,a56];
        const v61 = [1.0,Array];
        [v61,a57];
        return v61;
    }
    static [Array] = v50;
    static #n(a64, a65, a66) {
        const v67 = 1.0 == v51;
        if (v67) {
            super.at(a64);
        } else {
            new BigUint64Array(11);
            new Int16Array(1);
            new Uint16Array(1758);
        }
        return v67;
    }
}
const v78 = new C54();
const v79 = new C54();
const v80 = new C54();
function f81(a82, a83, a84, a85) {
    const o115 = {
        ...v78,
        "c": a84,
        set g(a87) {
            let [v88,v89,,v90] = v80;
            try {
                this.__proto__ = this;
                new Date(..."undefined");
                v50++;
                for (let v95 = 0; v95 < 5; v95++) {
                    const v98 = v95 >> -18321;
                    Math.log1p(v95);
                    Math.tan(v98);
                }
            } catch(e101) {
            }
            Array(a84);
            %PrepareFunctionForOptimization(Array);
            -(536870912n << 536870912n);
            class C106 {
            }
            function f107(a108, a109) {
                const o110 = {
                    "c": a109,
                    __proto__: C106,
                };
                o110.c;
                return o110;
            }
            %OptimizeFunctionOnNextCall(f107);
            Array(a84);
            Array(a84);
            %OptimizeFunctionOnNextCall(v79);
            v89(a84);
        },
    };
    return o115;
}
v46.BYTES_PER_ELEMENT;
1024 >> 1024;
new BigUint64Array(1024);
try {
    function f122() {
    }
    new Float64Array(6);
    const v127 = Math.min(5);
    v127 === v127;
    let v129 = 5 >>> v46;
    v129 & v129;
    Math.asin(v46);
    const v132 = v46 && 1024;
    v132 >>> v132;
    v129--;
} catch(e135) {
    965 && e135;
    class C137 {
    }
    function F138() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            let v140 = 0;
            -v140;
            for (let i = 0; i < 5; i++) {
                const v142 = v140++;
                v142 - v142;
                const v144 = v142 ^ v142;
                v144 / v144;
            }
            new F138();
        } catch(e147) {
        }
    }
}
new BigInt64Array(16);
v0 = v38;
function f153() {
    return 9007199254740991;
}
const v156 = new Uint8ClampedArray(8);
const v157 = v156.lastIndexOf(73962578);
v157 >>> v157;
function f159() {
}
let v160 = [-5105,-65536,512,536870887,128,1108608188,60880,12,5];
const v161 = v48.constructor;
const v163 = 1922 % 1922;
const v164 = v163 == v163;
for (let v165 = 0; v165 < 25; v165++) {
    v165 - v165;
    v160 = v161;
    function f167() {
        return f167;
    }
    function f168(a169, a170, a171, a172) {
        a169 + a169;
        a170.values(f159);
        new a171(v164);
        a170.hasOwn(f167, a171);
        let v177;
        try { v177 = new a171(a170); } catch (e) {}
        const v178 = v177?.is;
        try { v178(a170, a172); } catch (e) {}
        a172 >>> a172;
        let v181;
        try { v181 = a170(a172); } catch (e) {}
        try { new a171(); } catch (e) {}
        a170.freeze();
        const v185 = -(a172 + a172);
        v185 & v185;
        function f187() {
            return v181;
        }
        f187.length;
        f187.arguments;
        try { f187.toString(); } catch (e) {}
        const v192 = -f187.length;
        const v194 = f167().constructor;
        let v195;
        try { v195 = v194(); } catch (e) {}
        try { v195.toString(); } catch (e) {}
        v195.bind(v192, v194, v195);
        function f198() {
        }
    }
    for (let v199 = 0; v199 < 5; v199++) {
        f168(v199, v161, v161, 1922);
    }
}
