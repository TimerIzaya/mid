const v2 = new Uint8Array(1914);
const v5 = [1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0];
v5["findIndex"](gc);
const o16 = {
    m(a10, a11, a12, a13) {
        ("ignoreCase").normalize();
        return this;
    },
};
const v17 = new BigUint64Array(1000);
const v20 = new BigUint64Array(6);
function f21(a22, a23, a24, a25) {
    const o47 = {
        ...v17,
        "d": v20,
        "c": a24,
        "g": v2,
        set f(a27) {
            function f28(a29, a30) {
                const o31 = {
                    ...v17,
                    [BigUint64Array]: BigUint64Array,
                };
                return o31;
            }
            let v34 = 10 << 10;
            let v35 = --v34;
            let v36 = ++v35;
            Math.cos(++v36);
            f28(a27, a27);
            Math.sinh();
            Math.cos(2);
            (2).dotAll;
            f28(a25, a23);
            f28(a24, a23);
        },
    };
    return o47;
}
f21(1914, 6, 1000, 6);
f21(1000, 1914, 1914, 1000);
const o50 = {
};
const v51 = [601759695];
try { v5["find"](..."find", 1914, ...v51, ...v5); } catch (e) {}
f21(1914, 1914, 1914, 6);
function f59(a60, a61) {
    return 4;
}
function f62() {
    const o63 = {
    };
    function f64() {
        return f21;
    }
    Object.defineProperty(o63, Symbol.toPrimitive, { enumerable: true, get: f64 });
    o63.valueOf = f59;
    return o63;
}
const v67 = f62();
const v68 = f62();
v68[Symbol.toPrimitive] = gc;
([Uint8Array])["indexOf"](v67, v68);
