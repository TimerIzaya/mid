function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        function f4(a5, a6) {
            const v10 = new Uint16Array(3225);
            for (const v11 of v10) {
                const v13 = 9007199254740991 * v11;
                v13 | v13;
            }
        }
        BigUint64Array[Symbol.toPrimitive] = f4;
        BigUint64Array * 536870887;
        function F19(a21, a22, a23, a24) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v25 = new F19();
        v25.valueOf = f4;
        "" >= v25;
        this.f = -1024;
    } catch(e28) {
    }
    try {
        this.a = -1024;
    } catch(e29) {
    }
    try {
        this.h = -1024;
    } catch(e30) {
    }
}
const v31 = new F0();
new F0();
const v33 = new F0();
try { ("b4FN").codePointAt("b4FN"); } catch (e) {}
function f41() {
    return v31;
}
class C42 {
    o(a44, a45, a46, a47) {
        try {
            a47.f = v31;
        } catch(e48) {
        }
        return "b4FN";
    }
    constructor(a50, a51) {
        a50 % a50;
        v33.__proto__;
        try {
            v33.__proto__ = a51;
        } catch(e54) {
            e54.e = e54;
        }
    }
}
const v55 = new C42(9n, v31);
const v56 = v55?.constructor;
try { new v56(v55, "b4FN"); } catch (e) {}
const v58 = new C42(2n, v33);
new C42(10000n, C42);
new Int16Array(Int16Array);
const v65 = new Int8Array(0);
try { v65.lastIndexOf(16); } catch (e) {}
257 / 257;
Uint8Array.e = Uint8Array;
const v70 = new Uint8Array(257);
v70[54];
const v72 = [Int16Array,v70,16,16,16];
class C73 extends Int8Array {
    1073741823;
    a = v58;
    [Uint8Array] = Uint8Array;
}
new C73();
new C73();
new C73();
const v78 = [Int8Array,v65,[v72]];
v78[2] = v78;
-7.651694669892345e+307 >> -7.651694669892345e+307;
948737.12760097 >>> 948737.12760097;
class C89 {
    n(a91, a92) {
        super[-8n] = this;
        const o95 = {
            "maxByteLength": 47,
        };
        SharedArrayBuffer(3, o95);
        new Int8Array();
    }
}
try { C89.toString(); } catch (e) {}
let v102;
try { v102 = Map.bind(Map, 6, Map, Map); } catch (e) {}
const v106 = new WeakSet();
const v108 = [-8n];
Reflect.apply(v106.add, "number", v108);
1024 | 1024;
Int32Array.prototype = Int32Array;
const v113 = new Int32Array(1024);
v113[560];
for (const v116 of v113) {
    v116 >> v116;
    try { new SharedArrayBuffer(1024); } catch (e) {}
    const o121 = {
        "maxByteLength": 1293466293,
    };
    const v123 = new SharedArrayBuffer(1796, o121);
    v123.byteLength;
}
2.2250738585072014e-308 + 2.2250738585072014e-308;
let v128 = 135.68951961804942;
v128++;
const v132 = new Int16Array(2183);
try { v132.reduce(v132); } catch (e) {}
Uint8Array.e = 2.2250738585072014e-308;
Uint8Array.e = Uint8Array;
new Uint8Array(255);
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v139 = new Int16Array(8);
try { parseFloat(16); } catch (e) {}
async function f142(a143, a144, a145) {
    a144 >>> a144;
    a145 ^ a145;
    const v148 = delete v139[-1000000000.0];
    v148 && v148;
    let [v150,v151,...v152] = v132;
    try { v152.toLocaleString(); } catch (e) {}
    let v154 = v132[5];
    v154--;
    await v151;
    return Uint8Array;
}
const v157 = f142?.constructor;
try { new v157("b4FN"); } catch (e) {}
const v160 = +-36313;
v160 * v160;
v160 || (v128 / (-36313 + v128));
try {
    v65.toString = v102;
} catch(e165) {
}
var e = 257;
