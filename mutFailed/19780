const v0 = /a|bc/vm;
const v1 = /abc+?{z}[-\xf0\x9f\x92\xa9]+/gims;
const v2 = /[Y(?:a+)?]/gvdms;
const v3 = [v2,v2,v2];
const v5 = new Float32Array();
[v5];
for (let i10 = 0, i11 = 10;
    (() => {
        const v12 = i10 < i11;
        class C13 extends Date {
        }
        return v12;
    })();
    i10++) {
}
[v0,v1,v0,v3];
const v21 = new WeakSet();
for (let v22 = 0; v22 < 25; v22++) {
    v21["p" + v22] = v22;
}
const v25 = [v0,v0,v0,v2,v0];
[[v25],v25];
try {
    let v28 = 0;
    -v28;
    for (let i = 0; i < 5; i++) {
        const v30 = v28++;
        v30 - v30;
        const v32 = v30 ^ v30;
        v32 / v32;
    }
    new Date();
} catch(e35) {
}
[v25,v3,v2];
class C38 {
    static {
        super[this];
    }
}
function F42() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const o47 = {
            "maxByteLength": 1000,
        };
        new ArrayBuffer(10000, o47);
    } catch(e49) {
    }
}
const v52 = new Float32Array(Float32Array, Float32Array);
for (let v53 = 0; v53 < 25; v53++) {
    function f54(a55, a56, a57, a58) {
        a55[0] = a55;
        a56 <= a56;
        const v61 = arguments?.__lookupGetter__;
        try { v61(v61, f54, a56); } catch (e) {}
        let v63 = -1073741824n;
        const v64 = v63--;
        function F65(a67, a68, a69, a70) {
            if (!new.target) { throw 'must be called with new'; }
            this.e = v64;
        }
        try { undefined(); } catch (e) {}
        return v53;
    }
    for (let v73 = 0; v73 < 10; v73++) {
        f54(v52);
    }
    function f75() {
        ~([-1.5424212036356715e+308]).shift();
        return v53;
    }
}
