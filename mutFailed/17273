const v0 = /f\P{sc=Greek}/disy;
/r\ba\s/vds;
let v2 = /1[a-zA-Z0-9]/vims;
const v3 = [-3.0,0.16196918827409768,-372945.9466933913,-154.533439458697,5.0,-561.8933695658046,-841.878911886286,-3.0];
const v4 = [-8.741522731684126,881.551632841745,-5.0];
const v7 = v2--;
const v8 = -v7;
v4 ** v0;
Math.imul(v8, v0);
[1000000.0,-815.6477195010368,-1.7976931348623157e+308,2.0,-3.0,4.0,-63204.30554067565,1.165307060891274e+308,3.2991244067262337e+307];
[-2147483649,-4096,9,24991,-10258,-2147483648,703840976,60244657,-5775];
[-1];
[47705,9,-268435456,-75278428,-256,-2147483647,255];
function f18() {
    const o29 = {
        8: 0.043152456200264866,
        get a() {
            /[.ma\Sc]/vdimsy;
            Int16Array.exec(Int16Array);
            const o25 = {
            };
            gc(o25);
            Math.acos(0.043152456200264866);
        },
    };
    return Math;
}
const v30 = v3();
const v31 = f18();
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 257;
    this.h = a36;
}
const v39 = new Math(v31, v30);
function f41(a42, a43, a44) {
    function f46(a47) {
    }
    a42[1] = a44;
}
[v39];
Math.log(v4);
+v4;
v8 ^ v4;
Math.abs(F33);
Math.sinh(-119330268);
136441943 & v4;
const o60 = {
    "arguments": v7,
    "type": "function",
};
new Worker(f41, o60);
