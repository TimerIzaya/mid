const v0 = [1073741825,-1073741824,-2,-15,857901258,39004,1073741825];
[-4294967296,6];
const v2 = [-16284,-14];
class C3 {
    get f() {
        try { this.o(v2, this, this, this); } catch (e) {}
        this[this];
        return v0;
    }
    5 = v2;
    c;
    static m(a8, a9) {
        const v10 = this & v2;
        const o13 = {
            "maxByteLength": 141,
        };
        const v15 = new SharedArrayBuffer(127, o13);
        new Int16Array(v15);
        return v10;
    }
}
let v18;
try { v18 = new C3(); } catch (e) {}
const t23 = v18[5];
const v20 = new t23();
v20[5];
const v22 = new v20();
const v23 = v22[5];
v22[5] = v22;
const v24 = new C3();
class C25 extends v24 {
    toString(a27, a28) {
        delete a27[v20];
        const v30 = v0 >> a28;
        try {
            v0.valueOf = v22;
        } catch(e31) {
        }
        return v30;
    }
    h;
}
C25.c = C25;
new C25();
new C25();
new v20();
Map.d = Map;
new Map();
const v43 = new Float32Array(6);
let v44;
try { v44 = v43.sort(v23); } catch (e) {}
const v45 = v44.fill();
try { v45.reduceRight(Map); } catch (e) {}
