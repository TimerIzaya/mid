function f3() {
    return -9007199254740991n;
}
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a7;
        for (let v8 = 0; v8 < 5; v8++) {
            function f9() {
                const v10 = [-1.5424212036356715e+308];
                try { v10.findIndex(); } catch (e) {}
                ~v10.shift();
                return v8;
            }
            f9();
            %OptimizeFunctionOnNextCall(f9);
        }
    } catch(e15) {
    }
    try {
        this.c = a6;
    } catch(e16) {
    }
}
new F4(-9007199254740991n, -930475435n);
const v18 = new F4(-65537n, -9007199254740991n);
let v19 = new F4(-930475435n, -930475435n);
class C20 {
    [F4] = f3;
    static #b = -65537n;
    #d = f3;
    7 = -9007199254740991n;
    1;
    static #g = f3;
    valueOf(a22, a23, a24) {
        v19[1073741825] = a22;
        v19 = v18;
        const o25 = {
        };
        try {
            o25.f = -930475435n;
        } catch(e26) {
        }
        try {
            const o27 = {
            };
            -2.241327492701015 & 9007199254740991;
            const v32 = `
                Uint8Array >> v32;
            `;
            o27.f = -930475435n;
            o27.d = a22;
        } catch(e34) {
        }
        try {
            const o35 = {
            };
            o35.f = -930475435n;
            o35.d = a22;
            o35.e = this;
        } catch(e36) {
        }
        try {
            const o37 = {
            };
            o37.f = -930475435n;
            o37.d = a22;
            o37.e = a23;
            new Uint8Array();
            Symbol.toPrimitive;
            const v45 = new Float32Array(4096);
            v45.lastIndexOf(1.3174607869926752e+308);
        } catch(e47) {
        }
        return F4;
    }
}
new C20();
new C20();
const v50 = new C20();
class C51 extends -9007199254740991n {
    static set f(a53) {
        new Float64Array(4077);
        return 1n;
        class C59 {
            static #m(a61) {
            }
            set d(a63) {
                this.#m();
            }
            constructor(a66) {
                function f67() {
                    return f67;
                }
                Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f67 });
            }
        }
        const v68 = new C59(-4294967296);
        v68.g = v68;
        function F70(a72, a73) {
            if (!new.target) { throw 'must be called with new'; }
            this.h = a73;
        }
        class C74 {
        }
        const v75 = new C74();
        const v78 = new BigInt64Array();
        const v81 = new Uint16Array(256);
        const v82 = v78[205];
        function F83(a85, a86, a87, a88) {
            if (!new.target) { throw 'must be called with new'; }
            [586209.1308562411,9.273207833056233,-793.5051180378861,-88.02009084622205,1000.0,5.993768942190951e+307,0.6895260767593681,3.203916786355496,1.7976931348623157e+308,-1.0422896205696638e+308];
            a86 >> a86;
            a88 | a88;
            v75.dotAll = v75;
            function f92() {
                return f92;
            }
            for (const v93 of v81) {
                v82?.h;
            }
        }
        new F83();
        new Uint8Array(3);
        new Float32Array(4096);
    }
    [-65537n];
    static 2;
    c;
    [v50] = F4;
}
new C51();
new C51();
new C51();
function f104(a105, a106, a107, a108) {
    const v109 = a107++;
    v109 <= v109;
    return f104;
}
for (let v111 = 0; v111 < 10; v111++) {
    f104(v111, v111, v111);
}
%OptimizeFunctionOnNextCall(f104);
f104(f104, f104, f104, f104);
