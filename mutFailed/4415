[];
[-2.0,798.1237445488182,-1e-15,927.3153050229976,-636.0399212871339,-1000000000000.0,-2.1260349136061082e+307];
[5.0,1000000000000.0,0.921618030309597,481.23298110982773,-3.936406464611769e+307,-2.2250738585072014e-308];
const v3 = [81433.59238001006,1.7976931348623157e+308,0.9823786013077331];
const v6 = new BigInt(221);
new Uint32Array(2003, v6, v3, Uint32Array);
new Uint16Array(1297);
const v14 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v15 = 0; v15 < 25; v15++) {
    v14["p" + v15] = v15;
}
const v19 = [4096];
const v20 = [1073741824,1073741823,1376142744,1073741825];
function f21(a22, a23, a24, a25) {
    function f26() {
        ("Vre")["concat"]("concat", a25, a23);
        let v34 = Float64Array;
        v34 = a23;
        v14.length;
        try {
            v20.forEach();
        } catch(e37) {
        }
        Symbol.toPrimitive;
        const o44 = {
            toString(a41, a42) {
                return a25 && v34;
            },
        };
        const o45 = {
        };
        new Proxy(Uint8ClampedArray, o45);
        o44[9] = a22;
        const o53 = {
            [-4294967297n](a49, a50, a51, a52) {
            },
            ...v19,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            5: -4294967295,
        };
        return f21;
    }
    f26();
    %OptimizeFunctionOnNextCall(f26);
    return -4294967297n;
}
for (let v55 = 0; v55 < 10; v55++) {
    f21();
}
%OptimizeFunctionOnNextCall(f21);
f21(v19, v19, v14, v14);
