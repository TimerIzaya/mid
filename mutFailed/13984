function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 13;
    } catch(e3) {
    }
}
new F0();
const v5 = new F0();
const v6 = new F0();
class C7 extends F0 {
    toString(a9, a10) {
        const v11 = `
        `;
        eval(v11);
        return v6;
    }
    0 = F0;
}
const v17 = new C7();
const v18 = new C7();
function F19() {
    if (!new.target) { throw 'must be called with new'; }
}
class C22 extends F19 {
}
class C23 extends C22 {
    set d(a25) {
        super.d = this;
    }
}
const v29 = new C7();
function f30(a31, a32, a33, a34) {
    const o42 = {
        "h": a34,
        "c": a32,
        set a(a36) {
            this in this;
            delete v18[a34];
        },
        "d": v18,
        [a32]: a32,
    };
    return o42;
}
const v43 = f30(v17, v29, v6, v18);
f30(v18, v43, v5, v43);
f30(C7, v18, v6, v17);
for (let [i55, i56] = (() => {
        for (let v48 = 0; v48 < 5; v48++) {
            function f49() {
                return f49;
            }
            f49.d = v48;
            f49.d = f49;
        }
        const v51 = new Uint32Array(0, 0, 10);
        const t8 = v51.constructor;
        const v53 = new t8();
        v53.reverse();
        return [0, 10];
    })();
    i55 < i56;
    i56--) {
}
