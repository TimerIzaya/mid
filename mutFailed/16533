const v5 = new Uint16Array(128);
const v8 = new Int16Array(6);
const v11 = new Uint32Array(86);
class C12 extends Int16Array {
    m(a14, a15) {
        a14 = 1.6286064980524535e+308;
        return this;
    }
    constructor(a20, a21, a22) {
        super(a20);
        try { a20(v5, a22, a20, v8, a21); } catch (e) {}
        try { ("8").split(-376498.8199279986, 4.2127286749195657e+307); } catch (e) {}
        this["pCk1"];
        const o29 = {
        };
        try { Proxy.apply(o29, v5); } catch (e) {}
        new Proxy(v8, o29);
    }
}
try { C12(4.2127286749195657e+307, 6, C12); } catch (e) {}
new C12(Uint32Array, 4.2127286749195657e+307, 1.6286064980524535e+308);
const v35 = new C12(6, 4.2127286749195657e+307, 1.6286064980524535e+308);
v35[1] = v35;
new C12(v11, 1.6286064980524535e+308, 1.6286064980524535e+308);
function F37() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = -2147483647;
    } catch(e40) {
    }
}
const v41 = new F37();
const v42 = new F37();
const v43 = new F37();
function F44(a46) {
    if (!new.target) { throw 'must be called with new'; }
    const v47 = a46?.constructor;
    try { new v47(); } catch (e) {}
    const v49 = a46?.constructor;
    let v50;
    try { v50 = new v49(); } catch (e) {}
    v50.e = v50;
    try {
        this.g = a46;
    } catch(e51) {
    }
}
const v52 = F44.arguments;
const v54 = Symbol.iterator;
const o63 = {
    [v54]() {
        let v56 = 10;
        const o62 = {
            next() {
                v56--;
                const v60 = v56 == 0;
                const o61 = {
                    "done": v60,
                    "value": v56,
                };
                return o61;
            },
        };
        return o62;
    },
};
o63.c = o63;
const v64 = new F44(v43);
const v65 = new F44(v42, v64);
v65.length = v65;
function f66() {
    return F44;
}
f66.prototype;
Math[256];
128 & 128;
let v73;
try { v73 = new BigInt64Array(v43, BigInt64Array, v65); } catch (e) {}
try { v73.entries(); } catch (e) {}
new BigInt64Array(128);
let v76 = 3171;
v76--;
new Uint16Array(v76);
let v80 = 9;
new Uint16Array(v80);
let v83 = 7;
v83--;
function f87(a88, a89) {
    v80 = a89;
}
try { f87.toString(); } catch (e) {}
const v92 = new Promise(f87);
const v93 = f66++;
Math.cbrt(v93);
Math.asin(v93);
const v96 = new F44(v42);
v96.d = v96;
function F97(a99, a100, a101) {
    if (!new.target) { throw 'must be called with new'; }
    a99.c = a99;
    a101.g = a101;
    const v102 = this?.__lookupGetter__;
    try { new v102(Uint16Array); } catch (e) {}
    a100.a = a100;
    try {
        this.a = v64;
        Symbol.search = Symbol;
        try { new Symbol(); } catch (e) {}
        const v106 = Symbol.split;
        Symbol.for(v106.description);
        v96[v106];
        const v111 = typeof a101;
        v111[0] = v111;
        try { ("Qhn").codePointAt(a101); } catch (e) {}
        const v114 = ("Qhn")[0];
        try { v114.indexOf(v114); } catch (e) {}
        v111 === "Qhn";
    } catch(e117) {
    }
    try {
        this.c = v43;
    } catch(e118) {
    }
}
F97.arguments = F97;
const v119 = new F97(v64, v43, v41);
try { v119.hasOwnProperty(v92); } catch (e) {}
const v121 = new F97(v64, v42, v43);
const v122 = v121?.constructor;
try { new v122(v76, v76, f87); } catch (e) {}
const v124 = new F97(v64, v43, v41);
v124.e = v124;
const v125 = [65536,616125741,39049,129];
v125[3] = v125;
const v127 = ([536870888,2147483649])[1];
v127 / v127;
[1723484275,-249128090];
[];
class C131 {
    constructor(a133) {
        this.constructor;
        gc.length = gc;
        function F137() {
            if (!new.target) { throw 'must be called with new'; }
        }
        try { new F137(); } catch (e) {}
        class C140 {
            constructor(a142, a143, a144) {
                const v145 = this?.constructor;
                try { new v145(a142, a142, a144); } catch (e) {}
                try { a143.bind(v124); } catch (e) {}
                a143.constructor = gc;
                const v148 = a143.constructor;
                v148.b = v148;
                class C149 extends v148 {
                }
                const v150 = new C149();
                const v151 = v150?.toLocaleString;
                try { new v151(); } catch (e) {}
            }
        }
        C140.e = C140;
        new C140(F137, C140);
        const v154 = new WeakSet();
        try { v154.add(a133); } catch (e) {}
        for (let v156 = 0; v156 < 5; v156++) {
            const v157 = v156 >>> v156;
            v157 !== v157;
        }
        a133++;
    }
}
try { C131.apply(v52, 128); } catch (e) {}
new C131();
const v162 = new C131(C131);
const v163 = v162?.constructor;
try { new v163(v162); } catch (e) {}
