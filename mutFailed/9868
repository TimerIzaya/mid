const v5 = new Int8Array(4077);
const v8 = new Uint8ClampedArray(10);
function f9() {
    let {"byteLength":v10,"length":v11,} = v8;
    function f12(a13, a14) {
        Array(3).unshift(3, a13);
        return f12;
    }
    return f12;
}
v8.toString = f9;
new BigInt64Array(801);
new Map();
class C24 {
}
const v27 = Array(4087);
for (const v28 of v27) {
}
const v29 = new C24();
const v30 = new C24();
new C24();
function f32() {
    return f32;
}
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
}
function f39(a40, a41, a42, a43) {
    const o56 = {
        get f() {
            const v46 = [1.6045920026493271e+308,-5.0,358.53542407847453,-4.6776659891528976,-1000.0,-Infinity];
            const o48 = {
                valueOf() {
                    return true;
                },
            };
            typeof (this >> v30) === "string";
            f32();
            v46.length = o48;
            new a41();
            return /e\p{Changes_When_NFKC_Casefolded}/vdimy;
        },
        ...a41,
        [v8]: v29,
        [a42]: -893301392,
        "f": 4087,
        [v27]: a41,
        ...v30,
    };
    return o56;
}
const v57 = f39();
const v58 = [-1.7976931348623157e+308,-613.7550152041111];
v58.toString = Array;
v58 ^ -1264607604;
class C62 {
    static {
        try {
        const t0 = 0.44967380041772886;
        t0();
        } catch (e) {}
    }
    static f;
}
const v65 = f39();
class C66 extends f39 {
    constructor(a68, a69, a70) {
        super(v29, a70);
        const v71 = new C24();
        v71.p12 = v5;
        for (let v72 = 0; v72 < 25; v72++) {
            v71["p" + v72] = v72;
            [Uint8ClampedArray,Uint8ClampedArray];
            const v77 = v27.includes;
            try { v77(); } catch (e) {}
            const v81 = new BigInt64Array(2325);
            for (const v82 in v81) {
            }
        }
    }
}
new C66();
const v84 = new C66(v57, v57, C24);
new C66(v65, v65, v84);
