const v0 = [];
function f1() {
    const o21 = {
        "a": v0,
        valueOf() {
            let v3;
            try { v3 = this(v0, this, this, this, this); } catch (e) {}
            this[v3] -= v3;
            return this[10];
        },
        "c": v0,
        ...v0,
        get f() {
            const o8 = {
                "maxByteLength": 536870888,
            };
            const v10 = new ArrayBuffer(64, o8);
            const o11 = {
            };
            class C13 extends Date {
            }
            new C13();
            const v16 = new Uint32Array(v10);
            class C17 {
                static {
                    const v19 = this.toString();
                    try { v19(); } catch (e) {}
                }
            }
            return v16;
        },
    };
    return o21;
}
function F22(a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a25;
}
F22.arguments = F22;
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    const v30 = this.constructor;
    v30.length = v30;
    try { new v30(f1, a28, f1, v30); } catch (e) {}
    new f1();
}
const v33 = F26?.apply;
let v34;
try { v34 = new v33(F22, v0); } catch (e) {}
const v35 = f1();
const v36 = f1();
const v37 = f1();
function F38(a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = a41?.valueOf;
    try { new v42(); } catch (e) {}
    try {
    } catch(e44) {
        const v46 = Float32Array();
        class C48 extends Float64Array {
        }
        const v49 = C48();
        try { v49(v46); } catch (e) {}
    }
    try {
        this.f = v37;
    } catch(e51) {
    }
}
new F38(F38, v35);
const v53 = new F38(v35, v36);
const v54 = new F38(v35, v37);
v54.f;
[v54,v54,v0,v35,f1];
const v57 = [v0];
const v58 = [v53,v57,v36,v57,v37];
new Date();
1957281702 >>> 1957281702;
const v63 = [4294967296,-57202,256,48562,333990054];
v63.length = 1957281702;
let v66;
try { v66 = Uint32Array.apply(2, v63); } catch (e) {}
for (let [v68,,...v69] of v34) {
    delete this[v53];
}
v58[3412] = v63;
f1 = v66;
const v71 = this?.SyntaxError;
try { new v71(F22); } catch (e) {}
this.print(this, this);
