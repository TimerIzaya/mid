function f0() {
}
function f1() {
    const o16 = {
        "d": f0,
        m() {
            this[this] = this;
            [9264,-2147483647,4294967297,-2,-9223372036854775807,9007199254740990,65536];
            for (let i8 = (() => {
                    function f5() {
                        return f5;
                    }
                    const o7 = {
                        [f5]() {
                        },
                    };
                    return 0.8037056182165817;
                })();
                i8 < 10;
                i8++) {
            }
            [-14];
            return [536870887,226645837,6,399293378,-4957,129,8,-9223372036854775808,255];
        },
        "f": f1,
        [f0]: f0,
    };
    return o16;
}
const v17 = f1();
f1();
const v19 = f1();
function f20() {
    return f0;
}
5 * 5;
new Int16Array(5);
const v27 = new Int32Array(127);
v27[20] = v27;
function f29(a30, a31) {
    const o34 = {
        set b(a33) {
        },
    };
    return o34;
}
Uint8Array.BYTES_PER_ELEMENT;
new Uint8Array(6);
new Float32Array([0.12475621559067818,-1e-15,974.1787307240129,1.0,-1.625776868102476e+308,-0.0,-2.220446049250313e-16,5.0,1.7976931348623157e+308]);
const v41 = [];
for (let v42 = 0; v42 < 5; v42++) {
}
Math.tan();
new Float32Array(2);
try { v41.slice(v19, v17); } catch (e) {}
const v49 = [f1];
let v50;
try { v50 = v49.group(v49); } catch (e) {}
gc();
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
}
function f58(a59, a60, a61, a62) {
    Uint8Array / a59;
    a60 < F53;
    const o68 = {
        "b": a59,
        ...a59,
        n(a66, a67) {
            return Uint8Array;
        },
    };
    return o68;
}
for (let v69 = 0; v69 < 625; v69++) {
    v50();
}
