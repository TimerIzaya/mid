("minor").valueOf();
const o6 = {
    "execution": "async",
    "type": "minor",
};
class C7 {
    g;
    constructor(a9, a10) {
        a10.sup("minor", "async").toLocaleLowerCase();
    }
    n(a14, a15) {
        function F16(a18, a19, a20) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v21 = new F16(a14, -53069, 7);
        const v22 = new F16("async", -53069, v21);
        F16(v22);
    }
    static p(a25, a26) {
        -53069 | a26;
        return a25;
    }
    static valueOf(a29, a30) {
        this[5];
        [4096];
        function f35(a36, a37) {
            const o41 = {
                "f": a37,
                [a36]: -12,
                set e(a39) {
                },
            };
            return o41;
        }
        return "f";
    }
}
try { new C7(); } catch (e) {}
new C7();
new C7();
const v48 = new C7();
try { new BigUint64Array(-256, v48, -256); } catch (e) {}
const v52 = new BigUint64Array(9);
-25283n && -25283n;
function f55(a56, a57, a58) {
    function f60(a61) {
    }
    a56[1] = a58;
}
function f62(a63, a64) {
    const v65 = [];
    const o67 = {
        [v65]: v65,
        get h() {
            return this;
        },
    };
    for (const v68 in o67) {
    }
    return v52;
}
v52.constructor = f62;
const v69 = v52?.constructor;
try { new v69(BigUint64Array, BigUint64Array, BigUint64Array); } catch (e) {}
const v73 = new Uint16Array(129);
new Float32Array(165);
new Uint32Array(4);
const v82 = new Float32Array(129);
let v83;
try { v83 = v82.findIndex(9); } catch (e) {}
Math.expm1(Math);
class C89 {
    4294967296 = 996195971n;
}
new C89();
function f91() {
    function f92(a93, a94) {
        var h = v83;
        function f95() {
        }
        return 4;
    }
    return f92;
}
function f96(a97) {
    const v98 = [-6.741855211610779,553.594505585577,1.0637276618206825e+308];
    const o102 = {
        set c(a100) {
            class C101 {
                static [v98];
            }
        },
    };
}
Object.defineProperty(WeakMap, "toString", { get: f91, set: f96 });
const v103 = [-2.220446049250313e-16,0.4010936999061169];
try {
    v103.length = -2;
} catch(e105) {
}
try { WeakMap.toString(); } catch (e) {}
const v107 = new WeakMap();
try { v107.has(v73); } catch (e) {}
const v109 = v107.set(Uint16Array);
try { v109.has(v109); } catch (e) {}
