const v1 = new Date();
[-2.220446049250313e-16,-189102.58008396672,-3.5065048194853096e+307,-1.7976931348623157e+308,1.0,0.3815086759189378];
const v3 = [1.7976931348623157e+308,0.8431785227693137];
v3[1] = v3;
[1.5490146200941268,232.59232252355287,-2.220446049250313e-16,900989.4762728123,0.5607478212304542,455.57529965815297,667502.7941610089];
let v6 = ~310131033n;
const v9 = [65537,-3,-4294967295,268435440,-31464,4,9,46114,13,3];
[31774,1073741824,9007199254740990,2147483649,16,-213672035,7,4];
const v11 = [0,-1179422201,3,-21413,40789,268435440,65536,10,9,536870889];
let v12;
try { v12 = v11.push(v3); } catch (e) {}
v12 !== v12;
const v15 = 4096 >> 4096;
v15 - v15;
let v18 = 6;
v18--;
-1024 ^ -1024;
Float64Array.d = Float64Array;
const v25 = new Float64Array(257);
try { v25.reduce(v11); } catch (e) {}
try { new Float64Array(v18, v3, 129n); } catch (e) {}
const v30 = new Float64Array(3609);
try { v30.find(v9); } catch (e) {}
try { v30.filter(Float64Array); } catch (e) {}
9 != 9;
let v35 = 9 - 9;
v35--;
257 !== v9 ? 257 : v9;
v11.length;
try {
    Date(2147483648);
} catch(e42) {
}
let v44;
try { v44 = new Float32Array(v9, v1, Float32Array); } catch (e) {}
try { v44.keys(); } catch (e) {}
Float32Array.BYTES_PER_ELEMENT;
const v47 = new Float32Array(9);
function f48() {
}
f48[Symbol.toPrimitive] = f48;
const v51 = [601759695];
const v52 = v51?.groupToMap;
v52.length;
const v54 = v52?.apply;
try { v54(v3, v3); } catch (e) {}
try { new v54(v30, v47); } catch (e) {}
try { new v52(257); } catch (e) {}
const v58 = [1073741824,1073741823,1376142744,1073741825];
try { v58.findLastIndex(v58); } catch (e) {}
let v60 = 522675525n;
v60--;
function f62(a63, a64, a65, a66) {
    a65.toString = Date;
    -a64;
    a66--;
    const v69 = a64 >>> a64;
    const v70 = v69 - v69;
    const v71 = v70 + v70;
    arguments[1] = arguments;
    const v73 = arguments[1];
    v73 !== v73;
    function f75() {
        return v60;
    }
    f75.arguments;
    const v77 = f48();
    try { new Int8Array(v25, v25, 3609); } catch (e) {}
    const v80 = new Int8Array();
    3 % 3;
    function f84(a85, a86) {
        const v87 = a85.length;
        v87 << v87;
        const o94 = {
            "g": 1073741824,
            get d() {
                super[a85];
                return this;
            },
            "f": 3,
            ...a85,
            "getOwnPropertyDescriptor": f75,
            p(a92, a93) {
                return f75;
            },
            1: 257,
            10: 1073741824,
        };
        o94.length = Float64Array;
        return o94;
    }
    const v95 = f84(f84);
    v95.length = v71;
    v95[10] = v95;
    const v97 = f84(v95)[10];
    v97 | v97;
    const v99 = v80.buffer;
    function f100() {
        return f84;
    }
    function f101(a102) {
        v6 += a102;
    }
    Object.defineProperty(v99, "constructor", { writable: true, enumerable: true, get: f100, set: f101 });
    try { v99.slice(3609, 3609); } catch (e) {}
    function f106() {
        v30.__proto__;
        const v109 = new Map();
        return v109;
    }
    Int8Array[Symbol.toPrimitive] = f106;
    Int8Array.prototype = Int8Array;
    const v112 = new Int8Array();
    try { v112.set(-1024); } catch (e) {}
    let v114 = 1000000000000.0;
    const v116 = -(v114--);
    v116 & v116;
    v116 == v116;
    const v119 = v99.slice(2147483648);
    v119.constructor = f100;
    try { v119.slice(v9, v9); } catch (e) {}
    const v121 = [];
    v121.valueOf = f101;
    let v122 = 1.0;
    v122 - v122;
    v122--;
    v121.length += v122;
    class C126 {
        ["resolve"] = "resolve";
    }
    %OptimizeFunctionOnNextCall(f75);
    ("6Ct").normalize();
    class C130 {
    }
    C130.toString = f106;
    Symbol.search = Symbol;
    Symbol.search = Symbol;
    Date.e = Date;
    let v133;
    try { v133 = new Date(257, Int8Array, C130, Int8Array, C130, v121, Int8Array); } catch (e) {}
    const v134 = v133?.setFullYear;
    try { new v134(1000n, v122, v80); } catch (e) {}
    Date.toString = Symbol;
    class C136 extends Date {
    }
    function f137(a138, a139) {
        try {
            arguments.fuck(-12n, true);
        } catch(e143) {
        }
        return a138;
    }
    C136.valueOf = f137;
    const v144 = C136.prototype;
    try { v144.toJSON(v77); } catch (e) {}
    let v146;
    try { v146 = new C136(); } catch (e) {}
    try { v146.getDay(); } catch (e) {}
    let v148;
    try { v148 = v146.getUTCDay(); } catch (e) {}
    v148 | v148;
    const v150 = new C136();
    try { v150.getFullYear(); } catch (e) {}
    try { v150.setMonth(C130, C136); } catch (e) {}
    let v153;
    try { v153 = v58["find"](..."find", a66, ...v51, ...v58, ...v60); } catch (e) {}
    let v155;
    try { v155 = ("bZ").localeCompare("bZ"); } catch (e) {}
    v155 - v155;
    for (const v158 in "1024") {
    }
    const o159 = {
        "execution": "1024",
    };
    Symbol.iterator = Symbol;
    Symbol("bZ");
    const v163 = new Uint8ClampedArray();
    try { v163.subarray(1000n, 1000n); } catch (e) {}
    const o165 = {
    };
    v153 <= a65;
    return arguments;
}
f62.e = f62;
for (let v167 = 0; v167 < 10; v167++) {
    v167 >> v167;
    v167 % v167;
    const v170 = f62(v167, v167, f48, v60);
    v170[2];
    v170[3] = v170;
    const v173 = -(-4294967297n);
    v173 !== v173;
    const v175 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    v175[4];
    const v177 = [601759695];
    v177[0] = v177;
    const v178 = [1073741824,1073741823,1376142744,1073741825];
    const v179 = v178[3];
    v179 - v179;
    function f182(a183, a184, a185, a186) {
        function f188() {
            b = Float64Array;
            v58.b = -302142025;
            function F195(a197, a198) {
                if (!new.target) { throw 'must be called with new'; }
            }
            try {
                v178.forEach(Float64Array);
            } catch(e200) {
            }
            const v201 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            Symbol.toPrimitive;
            const o209 = {
                toString(a205, a206) {
                    return (a186 && Float64Array) <= v201;
                },
            };
            const o229 = {
                "c": -4294967297n,
                [522675525n](a212, a213) {
                },
                "c": v177,
                valueOf(a215, a216) {
                    return a183;
                },
                [-4294967297n](a218, a219, a220, a221) {
                },
                "e": -4294967295,
                "e": -268435456,
                "maxByteLength": -4294967295,
                "arguments": v175,
                "type": "Vre",
                ..."Vre",
                valueOf(a223, a224) {
                    return v201;
                },
                ..."Vre",
                4: "Vre",
                "c": -268435456,
                "type": "Vre",
                "type": "Vre",
                toString(a226, a227, a228) {
                    return a186;
                },
                5: -4294967295,
                6: -268435456,
            };
        }
        f188();
        const v232 = new Int8Array();
        v232.buffer.slice(2147483648);
        %OptimizeFunctionOnNextCall(f188);
        let v237;
        try { v237 = v178["find"](..."find", a186, ...v177, ...v178, ...522675525n); } catch (e) {}
        v237 <= a185;
        return arguments;
    }
}
%OptimizeFunctionOnNextCall(f62);
const v239 = f62();
v239.h = v239;
