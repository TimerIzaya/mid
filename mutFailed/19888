const v3 = new Uint8ClampedArray();
function f4() {
    return f4;
}
function f5(a6) {
    function f8(a9, a10, a11, a12) {
        3 | a10;
        const v14 = a9 / a9;
        const v15 = a10 < a9;
        let v16 = a11 >>> a11;
        v16++;
        const o21 = {
            n(a19, a20) {
                return v15;
            },
        };
        return v14;
    }
    return v3;
}
f4[Symbol.toPrimitive] = f5;
class C24 extends f4 {
}
class C25 extends C24 {
}
function f27(a28, a29, a30, a31) {
    try { a28(); } catch (e) {}
    a29 & a29;
    const v34 = 3 | C25;
    v34 * v34;
    const v36 = a28 / a28;
    const v37 = a29 < a29;
    const o41 = {
        n(a39, a40) {
            return v37;
        },
    };
    return v36;
}
let v43 = 101;
v43 / v43;
Object.defineProperty(Uint16Array, "toString", { writable: true, configurable: true, value: f27 });
const t42 = "g";
t42[14] &&= 14;
const o51 = {
    toString(a49, a50) {
    },
};
try { o51.toString(o51, 14); } catch (e) {}
const v53 = new Uint16Array(v43);
v53.toString = f4;
function f54(a55, a56) {
    async function f57(a58, a59, a60) {
        return a59;
    }
    return f57;
}
Object.defineProperty(v53, "valueOf", { writable: true, value: f54 });
v53[3] = v53;
const v63 = new Int16Array(161);
function f64(a65, a66) {
    v43 = 161;
    const v69 = new Date(Date);
    try { v69.setUTCMinutes(-26635n); } catch (e) {}
    return Uint16Array;
}
v63.constructor = f64;
try { v63.slice(Uint16Array, "g"); } catch (e) {}
new Float32Array(1000);
class C75 {
    static valueOf(a77, a78, a79) {
        let v76 = this;
        const v80 = new Uint16Array(-482122074n, 536870889n, a79, a77, v76);
        v76[a77] **= 161;
        let v81;
        try { v81 = v53.entries(); } catch (e) {}
        v76 = v53;
        try { v80.findIndex(v81, v76); } catch (e) {}
        return v63;
    }
    get g() {
        async function f84(a85, a86, a87) {
            try {
                new Int16Array(this);
            } catch(e89) {
            }
            const v91 = (await a86)?.constructor;
            try { new v91(Uint16Array); } catch (e) {}
            return Uint16Array;
        }
        function f93() {
            return Symbol;
        }
        function f94(a95) {
            class C96 {
                constructor(a98, a99) {
                    function f100(a101, a102, a103, a104) {
                        return arguments;
                    }
                    for (let v106 = 0; v106 < 5; v106++) {
                        const v107 = f100();
                        v107[1] = v107;
                    }
                }
            }
        }
        Object.defineProperty(f84, "then", { get: f93, set: f94 });
        f84.then = f84;
        return f84(161, f84, 41957n);
    }
    set g(a110) {
        class C111 {
        }
    }
    #toString(a113, a114, a115, a116) {
    }
}
new C75();
new C75();
const v119 = new C75();
v119.g;
class C121 {
}
const v122 = new C121();
const v123 = v122?.propertyIsEnumerable;
try { new v123(Int16Array); } catch (e) {}
const v125 = [C121,C121];
v125[Symbol.toPrimitive] = Symbol;
v125.valueOf = f4;
Date.name;
const v132 = Date.UTC(v125, v122, -4096, 65535);
v132 / v132;
