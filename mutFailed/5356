function f3(a4, a5) {
    a4 >>> a4;
    const o19 = {
        ...-16,
        n(a8) {
            function F9(a11, a12) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.a = a11;
                } catch(e13) {
                }
                try {
                    this.sticky = a5;
                } catch(e14) {
                }
                try {
                    this.g = a8;
                } catch(e15) {
                }
            }
            new F9(-2, a5);
            new F9(a5, a4);
            new F9(-2, a8);
            return -2;
        },
    };
    return o19;
}
const v20 = f3(-16, -536870912);
let v21;
try { v21 = v20.n(-16); } catch (e) {}
const v22 = v21(-536870912, -16);
const v23 = f3(-536870912, -536870912);
try { v23.n(v22); } catch (e) {}
let v26 = 118773563;
-65535 | -65535;
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try { a34.n(this); } catch (e) {}
    a37 !== a37;
    this.a = a34;
    try {
        this.d = -16;
    } catch(e40) {
    }
}
const v41 = F32?.constructor;
try { new v41(-16); } catch (e) {}
const v43 = new F32(v22, v23, 536870888, -2);
new F32(v23, -536870912, -16, 8);
new F32(v22, v43, 536870888, v43);
let v46 = 7;
v46--;
const v49 = new Int8Array(v46);
v49[706] = v49;
const v52 = new Float64Array();
try { v52.values(); } catch (e) {}
let v54 = 0;
for (let i = 0; i < 5; i++) {
    v54 < 8;
    [...v26] = v49;
    v54++;
}
