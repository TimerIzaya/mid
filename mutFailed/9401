let v0 = [];
function f1(a2) {
    v0.length ||= a2;
    const v5 = new Uint8ClampedArray();
    let v11 = new WeakMap();
    class C12 {
        constructor(a14, a15) {
            super[a14]?.[1];
        }
        c = "U2pI";
        static 268435439;
        static get d() {
            v11 ||= this;
            return [-679038690,7,-65536,3,1461677839,9];
        }
        static d = WeakMap;
    }
    const v20 = new C12("-19084", 5);
    let v21;
    try { v21 = v5("function", 14); } catch (e) {}
    v21(v20);
    [Float64Array,Float64Array,Float64Array,v21,v0];
    return a2;
}
v0[Symbol.toPrimitive] = f1;
const v27 = [-11,-45877,1481895322,-2147483648,54135,268435440,1238629043,-9223372036854775807,268435440,-3];
const v28 = [-24870,-14,1036507015,2,9007199254740992,19537,7];
const v29 = [1073741824,-16,1438922003,5054864];
function f30() {
    const v31 = Symbol[9];
    for (let i = 0; i < 5; i++) {
        function F32(a34, a35) {
            if (!new.target) { throw 'must be called with new'; }
        }
    }
    return v31;
}
Object.defineProperty(v29, Symbol.toPrimitive, { configurable: true, value: f30 });
class C38 {
    static 2431086867 = v27;
    [v29] = v29;
    static #f;
    static 1814055450;
    static [v0];
    constructor(a40) {
        v27[v28] ||= this;
        try {
            super.o(v29);
        } catch(e42) {
        }
        [,v0,v0] = a40;
    }
    a;
    static 5 = v27;
}
new C38(v0);
new C38(v28);
new C38(v29);
new Uint16Array(313);
new Int8Array(1073741823);
const o57 = {
    0: "1ya",
    162: "1ya",
};
new Int8Array(1024);
new BigUint64Array(7);
[-Infinity,Infinity,959819.665748626];
[0.881533214430694,1000000000000.0,-2.6561951388069446e+306,1e-15,-601975.7256958171,-2.0,1.0,-1000000000000.0,-5.0];
class C65 {
}
const v67 = ([8,-46529,2147483648,1073741824]).includes;
try { v67(); } catch (e) {}
[-6.825886894231237,-1000000000.0,-7.405832553829715,-5.0];
function f73() {
    let v75 = 1000000000000.0;
    const v76 = v75--;
    -v76;
    class C81 {
        constructor(a83) {
            const v85 = new Float32Array();
            try { v85.entries(); } catch (e) {}
            const v87 = new Uint16Array(12, -4294967296, v76);
            new Float32Array(v87, -4294967296, 268435439, v75, v87);
        }
    }
    try { new C81(12); } catch (e) {}
    const v90 = new C81(257828.6336153492);
    const v91 = new C81();
    return v76;
    ([12]).toLocaleString();
    const v94 = [1.7976931348623157e+308,2.2250738585072014e-308,928419.7587767004,-279.06139374957183,1000.0];
    v94[Symbol.isConcatSpreadable] = v94;
    const v97 = new C81(-4294967296);
    const v98 = [v97,C81];
    [257828.6336153492,v97,v90,v97,v98];
    const v100 = [v97];
    class C101 extends C81 {
        n(a103, a104) {
            Object.defineProperty(this, "e", { enumerable: true, value: super[43411] });
        }
        a;
        [v90];
    }
    const v106 = new C101();
    const v107 = v100.constructor;
    try { v107.isArray(v100); } catch (e) {}
    class C109 extends v107 {
    }
    C109.a = C109;
    const v110 = new C109();
    const v111 = v110?.constructor;
    function F112(a114) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v115 = new F112(F112);
    const v116 = v115.propertyIsEnumerable();
    try { v116(); } catch (e) {}
    try { new v111(); } catch (e) {}
    const o128 = {
        m(a120) {
            const v123 = new Int8Array(3938);
            let v124 = 3;
            let v125 = 0;
            [...v124] = v123;
            -(v125++);
        },
    };
    o128.m();
    Object.defineProperty(v110, 65537, { value: v91 });
    try { v106.m(v98); } catch (e) {}
    return Int32Array;
}
%PrepareFunctionForOptimization(f73);
f73();
%OptimizeFunctionOnNextCall(f73);
f73();
