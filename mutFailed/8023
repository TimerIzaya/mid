const v2 = new Array(3257);
class C3 {
}
new C3();
function f5(a6, a7) {
    return f5;
}
const v8 = f5(f5, f5);
class C9 extends f5 {
    constructor(a11, a12, a13) {
        super();
        const v14 = `
            try { a11(a13, v8); } catch (e) {}
        `;
        eval(v14);
    }
}
class C18 extends Array {
    static #m(a20) {
        class C21 extends Array {
            #b = 3257;
            static 2312993610 = a20;
            static [3257] = a20;
        }
        new C21();
        new C21();
        new C21();
        return a20;
    }
    1631;
    static #d;
}
gc();
class C28 {
    constructor(a30) {
        this.p16 = 6n;
        for (let v31 = 0; v31 < 32; v31++) {
            this["p" + v31] = v31;
            for (let v34 = 0; v34 < 5; v34++) {
                function f35() {
                    return f35;
                }
                f35();
            }
        }
    }
}
new C28(C28);
const v38 = new C18();
const v39 = new C18();
let v40 = new C18();
class C41 {
    constructor(a43, a44, a45, a46) {
        Object.defineProperty(v38, a44, { writable: true, configurable: true, enumerable: true, get: Array });
        super[Array] = this;
        3257 * 3257;
        class C48 {
        }
        const v53 = new a43(-1.461653635104799e+308, -1.461653635104799e+308, -1.0, -5.0);
        function F54(a56, a57, a58) {
            if (!new.target) { throw 'must be called with new'; }
            const v59 = this.constructor;
            try { new v59(a43, -1.0); } catch (e) {}
            const v61 = a57.constructor;
            try { new v61(a57, v53, this, a56); } catch (e) {}
        }
        new F54(-3.0, a43);
    }
    static get d() {
        const v65 = super.c;
        v40 |= v40;
        3409 - 3409;
        this <= this;
        for (const v69 in this) {
        }
        const v71 = Symbol.iterator;
        C9.constructor;
        function F74(a76) {
            if (!new.target) { throw 'must be called with new'; }
            const v77 = this?.constructor;
            try { new v77("toString"); } catch (e) {}
            a76[5];
        }
        new F74("toString");
        const o89 = {
            [v71]() {
                let v82 = 10;
                const o88 = {
                    next() {
                        v82--;
                        const v86 = v82 == 0;
                        const o87 = {
                            "done": v86,
                            "value": v82,
                        };
                        return o87;
                    },
                };
                return o88;
            },
        };
        return v65;
    }
}
const v90 = new C41(v39, v40, C41, v39);
new C41(v2, v38, v90, v39);
for (let i94 = 0, i95 = 10; i94 < i95; i94++) {
    continue;
}
new C41(v90, v40, Array, v2);
/ha$\P{Decimal_Number}+/vdisy.constructor.$7;
