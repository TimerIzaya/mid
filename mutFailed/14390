const v10 = new WeakMap();
class C11 {
    #b = "concat";
    set e(a13) {
        let v12 = this;
        v12 = "a";
        const v18 = 1864489360 << "a";
        v18 & v18;
        function f20() {
            const o26 = {
                0: 549538.9552070533,
                [-6.170254254244802e+307](a24, a25) {
                },
            };
            return o26;
        }
        f20();
        const v28 = f20();
        function F29(a31, a32, a33, a34) {
            if (!new.target) { throw 'must be called with new'; }
            a31[0];
            const v36 = this?.constructor;
            try { v36.call(v28); } catch (e) {}
            try { new v36(a31, a33, a32, a31); } catch (e) {}
            a31[0] = a31;
            a34[0] = a34;
            this.f = a31;
            this.f = v28;
        }
        const v40 = true + true;
        Math.clz32(v10);
        Math.atan2(true, 268435439);
        a13 << v40;
    }
    constructor(a45, a46, a47, a48) {
        super();
        function f49() {
            const t37 = [];
            t37[6] = 4294967295;
            const o54 = {
                set b(a53) {
                },
            };
            return 4294967295;
        }
        for (let v55 = 0; v55 < 5; v55++) {
            f49();
            %OptimizeFunctionOnNextCall(f49);
        }
    }
    c;
    static [-2];
    2;
    #d;
}
try { new C11(); } catch (e) {}
new C11();
const v59 = new C11();
new C11();
function F61() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 1489843090;
    } catch(e64) {
    }
}
new F61();
const v66 = [-349055.72992167494,-1000000000000.0,-8.263641716323854e+307,1.050616183420453e+308,1000.0,1000.0,6.087868782871141,-1.7976931348623157e+308,3.0];
const v68 = new Int16Array(v66, Int16Array, Int16Array);
try { v68.slice(v59, 1654939312n); } catch (e) {}
const v70 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v71 = 2684;
Uint32Array.name;
const v74 = new Uint32Array(v71, v71, v71);
const v76 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
v76[4];
const v78 = [601759695];
v78[0] = v78;
const v79 = [1073741824,1073741823,1376142744,1073741825];
try { v79.reduce(v71); } catch (e) {}
function f82(a83, a84, a85, a86) {
    a83 + a83;
    try { a84.find(a83); } catch (e) {}
    function f89() {
        let v90 = 114;
        try { new Int32Array(v66, a86, v68); } catch (e) {}
        new Int32Array();
        const v95 = [-0.685155357392599,5.0];
        try { v95.entries(); } catch (e) {}
        let v98 = -4294967295;
        const v99 = v98--;
        let v100 = Float64Array;
        v100 = a84;
        b = v78;
        ("sync")[-5.0];
        class C104 {
        }
        C104.length;
        const v106 = v70.length;
        try {
            v79.forEach(a84, v70);
        } catch(e108) {
            const v109 = e108?.constructor;
            try { new v109(f89); } catch (e) {}
            e108.name = e108;
            Float32Array[2] = a83;
            const v112 = new Float32Array(Float32Array, Float32Array, Float32Array);
            try { v112.keys(); } catch (e) {}
            function f114() {
                return v66;
            }
            try { f114(); } catch (e) {}
            v90 = v71;
            "a" / v99;
            try { Math.expm1(v112); } catch (e) {}
            const v122 = 26577 ^ a86;
            v122 >>> v122;
            let v124 = Math.expm1(9223372036854775807);
            v124++;
            const v126 = !v122;
            v126 || v126;
            Math.min(a86);
            const v129 = a86 || 26577;
            const t123 = "concat";
            t123.h = -1.0458776802029855e+308;
            const v131 = [1.7976931348623157e+308,0.14033774481022865,0.764442389288067,-2.220446049250313e-16,710.5353911028728,1000000.0];
            class C132 {
            }
            const v133 = new C132();
            for (let v134 = 0; v134 < 25; v134++) {
                v131[4294967295] = v133;
            }
            v129 == v129;
            Object.defineProperty(v112, "h", { configurable: true, enumerable: true, get: f114 });
            const v137 = [601759695];
            const v138 = [1073741824,1073741823,1376142744,1073741825];
            function f140(a141, a142, a143, a144) {
                function f145() {
                    let v148 = Float64Array;
                    v148 = a142;
                    b = v137;
                    v70.length;
                    try {
                        v138.forEach();
                    } catch(e151) {
                    }
                    const v152 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
                    const v154 = Symbol.toPrimitive;
                    const o160 = {
                        toString(a156, a157) {
                            const v158 = a144 && v148;
                            a156 *= v154;
                            v158 <= v152;
                            return a142;
                        },
                    };
                    const o180 = {
                        "c": -4294967297n,
                        [522675525n](a163, a164) {
                        },
                        "c": v137,
                        asinh(a166, a167) {
                            return "Vre";
                        },
                        "b": -4294967295,
                        [-4294967297n](a169, a170, a171, a172) {
                        },
                        "e": -4294967295,
                        "e": -268435456,
                        "maxByteLength": -4294967295,
                        "arguments": v66,
                        ...v137,
                        "type": "Vre",
                        ..."Vre",
                        valueOf(a174, a175) {
                            return a144;
                        },
                        ..."Vre",
                        4: "Vre",
                        "c": -268435456,
                        "type": "Vre",
                        "type": "Vre",
                        toString(a177, a178, a179) {
                            return a143;
                        },
                        5: -4294967295,
                        6: -268435456,
                    };
                }
                f145();
                %OptimizeFunctionOnNextCall(f145);
                return v137;
            }
        }
        Symbol.for(Symbol.toPrimitive.description);
        const v187 = delete a85?.a;
        const v190 = [7,128];
        const v191 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
        const v195 = new BigInt64Array();
        function f197(a198, a199) {
            const o213 = {
                "c": 15135,
                "a": 15135,
                "d": a198,
                __proto__: a199,
                "g": -15,
                "type": "Vre",
                "a": v195,
                set b(a201) {
                },
                "g": 15135,
                "b": a199,
                get f() {
                    super[1000000.0] = this;
                    try {
                        new Int8Array(9);
                        function f206() {
                            return f206;
                        }
                        const o208 = {
                            [f206]() {
                            },
                        };
                        [o208];
                        v191.copyWithin(8, -268435456, -256);
                    } catch(e212) {
                    }
                    return this;
                },
            };
            return o213;
        }
        f197(925.1427495594241, v190);
        f197(1000000.0, v191);
        v187 || v187;
        return v10;
        new BigUint64Array(2);
        new Uint8ClampedArray(1812);
        new Float64Array(3);
        const o230 = {
            toString(a228, a229) {
                return -4294967297n;
            },
        };
        const o244 = {
            [522675525n](a233, a234) {
            },
            [v106](a236) {
            },
            [-1]: v71,
            1073741824: v74,
            "maxByteLength": -268435456,
            "b": v98,
            [-4294967297n](a238, a239, a240, a241) {
                eval();
            },
            "arguments": v76,
            256: a86,
            ...v78,
            ..."Vre",
            4: "Vre",
            "type": "Vre",
        };
        return o244;
    }
    const v245 = f89();
    try { v245.delete(v245); } catch (e) {}
    for (let [i263, i264] = (() => {
            const v250 = [];
            try { v250.flat(4096); } catch (e) {}
            new BigUint64Array(10);
            10 / 10;
            const v257 = new Uint32Array(0, 0, 10);
            const v258 = v257?.constructor;
            try { new v258("c", 268435440, a85); } catch (e) {}
            const t7 = v257.constructor;
            const v261 = new t7();
            v261.reverse();
            return [0, 10];
        })();
        (() => {
            const v265 = i263 < i264;
            !v265;
            return v265;
        })();
        i264--) {
    }
    eval.length;
    eval();
    %OptimizeFunctionOnNextCall(f89);
}
f82.arguments;
for (let v276 = 0; v276 < 5; v276++) {
    function F277() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            new F277(F277, this, -302142025);
            /Ckza\Wb?/vis;
            /((?=.)1a{}[(?<=a)a{1,2}?a(?=b)*])/gms;
            /Ma\W+/gudm;
            this.b = -302142025;
        } catch(e285) {
        }
    }
    v71 = v276;
    f82(v276, v76, v276, v276);
    -6;
    let v290 = 8003;
    const v291 = [601759695];
    const v292 = [1073741824,1073741823,1376142744,1073741825];
    try { v292["find"](..."find", Math, ...v291, ...v292, ...522675525n); } catch (e) {}
    v290--;
    6 / v290;
    let v298 = 6 / 6;
    v298++;
    !v276;
    f82();
}
