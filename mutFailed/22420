new Int8Array(1000);
const v4 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v5 = [601759695];
function f7(a8, a9, a10, a11) {
    function f12() {
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const o20 = {
            toString(a18, a19) {
                return this;
            },
        };
        const o42 = {
            "c": -4294967297n,
            [522675525n](a23, a24) {
            },
            "c": v5,
            valueOf(a26, a27) {
                return a9;
            },
            "b": -4294967295,
            [-4294967297n](a29, a30, a31, a32) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v4,
            ...v5,
            "type": "Vre",
            ..."Vre",
            valueOf(a34, a35) {
                return a8;
            },
            "type": "byteOffset",
            o(a37) {
                return this;
            },
            ..."Vre",
            "c": -268435456,
            "type": "Vre",
            toString(a39, a40, a41) {
                return f7;
            },
        };
        return -4294967297n;
    }
    f12();
    f12();
    return 522675525n;
}
for (let v45 = 0; v45 < 10; v45++) {
    f7(522675525n, v5, 522675525n, v45);
}
%OptimizeFunctionOnNextCall(f7);
f7();
new BigInt64Array(255);
new Float32Array(0);
class C54 extends BigInt64Array {
    static #a = 255;
    1957876801;
    #valueOf(a56, a57, a58) {
        try {
            const o59 = {
            };
            new Int8Array(o59);
        } catch(e61) {
        }
        return a58;
    }
}
new C54();
new C54();
new C54();
const v67 = new Uint8ClampedArray(3269);
const v68 = new Uint8ClampedArray(v67);
new Uint16Array(v68);
