const v1 = new Date();
function f2(a3, a4) {
    try { new a3(Date, a3); } catch (e) {}
    a4.prototype = a4;
    const o17 = {
        "b": a4,
        set a(a7) {
            Reflect.construct(a3, [Reflect], Date);
            try {
                super.trimEnd(this);
            } catch(e12) {
            }
        },
        valueOf(a14) {
            try {
                this.fuck(a3, a14);
            } catch(e16) {
            }
            return this;
        },
    };
    const v18 = o17?.constructor;
    try { new v18(a3); } catch (e) {}
    return o17;
}
const v20 = f2(f2, Date);
const v21 = f2(f2, Date);
const v22 = v21?.b;
let v23;
try { v23 = new v22(f2, v1, v21, f2, f2, Date, Date); } catch (e) {}
const v24 = f2(f2, f2, v1);
class C28 extends Date {
    static valueOf(a30, a31, a32, a33) {
        const v35 = Symbol.unscopables;
        v1[v35] = v35;
        try { a32(3, f2, v24, 3); } catch (e) {}
        return a31;
    }
    [v24] = v21;
    toString(a38, a39) {
        try { a39.toString(this); } catch (e) {}
        v24[a38] = this;
        Object.defineProperty(v1, "b", { configurable: true, enumerable: true, value: this });
        super.getUTCDay();
        return this;
    }
}
const v45 = new C28();
try { v45.setUTCFullYear(v45); } catch (e) {}
const v47 = new C28();
const v48 = new C28(v23, v21, v45);
function F49(a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a51;
    } catch(e54) {
    }
    try {
        this.h = a52;
    } catch(e55) {
    }
    try {
        this.d = a53;
    } catch(e56) {
    }
}
new F49(v48, v47, 5);
const v58 = new F49(v45, 3, v20);
new F49(v48, v58, -61246);
const v60 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
function f61(a62, a63) {
    return f61;
}
const v65 = BigInt.multiline;
Symbol.for(v65.prototype);
v60[v65] = f61;
const v69 = [3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
function f70(a71, a72, a73) {
    try { a71.toString(); } catch (e) {}
    a72[8] = a72;
    const o75 = {
        __proto__: a73,
    };
    o75.c = o75;
    return a72;
}
const v76 = f70(v69, v60);
try { v76.toLocaleString(); } catch (e) {}
f70(v69, v76, v76)[9];
BigInt64Array.b = BigInt64Array;
new BigInt64Array(1073741824);
