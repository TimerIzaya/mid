let v2 = 3.0;
const v5 = new Uint8Array(16);
const v8 = new Int16Array(223);
new BigUint64Array(16);
function f12(a13, a14, a15) {
    const o24 = {
        p(a17, a18, a19) {
            v2 = a13;
            const v20 = new BigUint64Array(a18, a14, a17);
            let v21;
            try { v21 = v20.findLastIndex(223); } catch (e) {}
            try {
                v5.filter(v21);
            } catch(e23) {
            }
            return v5;
        },
        "g": a14,
        65537: a15,
        [a14]: v8,
        __proto__: v5,
    };
    return o24;
}
f12(0.9025764319767139, 223, 223);
f12(0.9025764319767139, 223, 223);
f12(NaN, 223, 16);
function f28(a29, a30) {
    let v31 = Int16Array;
    function F32(a34, a35) {
        if (!new.target) { throw 'must be called with new'; }
    }
    function F36() {
        if (!new.target) { throw 'must be called with new'; }
        const v38 = this.__lookupGetter__;
        function f40() {
            const v41 = [16];
            [a29,[v41,v41,v31],a29,f12,this];
            return f12;
        }
        Date[Symbol.match] = f40;
        const v46 = Date.toString();
        const v47 = v46[23];
        const v48 = v46.replaceAll();
        const v49 = v48.replaceAll(Date, v48, v46);
        const v51 = new Uint32Array(v38);
        const v53 = new Set();
        const v54 = v53.add;
        const v56 = v53["delete"]();
        const v57 = v56 || v56;
        const v58 = v57 || v57;
        const v59 = v57 && v57;
        const o61 = {
        };
        let v63;
        try { v63 = v53.forEach(v58, v54); } catch (e) {}
        const v65 = -v56;
        v65 >>> v65;
        const v67 = v31 >>> v58;
        const v69 = ("getPrototypeOf").blink();
        const v70 = v69.trimRight;
        try { v70(v58); } catch (e) {}
        try {
            v53.values();
        } catch(e73) {
        }
        new Date(0.9025764319767139);
        const v75 = v69[28];
        const v76 = v75.strike(v31);
        try { v76.isWellFormed(v49, a30, v69); } catch (e) {}
        const v78 = v69.strike(v49);
        const v79 = v78.replace(v56, v31, v69, Array, v78);
        v79[11] = v79;
        class C80 {
        }
        C80.toString = f12;
        class C81 extends C80 {
            ["getPrototypeOf"] = C80;
        }
        const v82 = new C81();
        const t80 = v82.getPrototypeOf;
        new t80(F36);
        const v85 = new F32();
        const v86 = v85.constructor;
        const v87 = new v86(v51);
        function f88(a89, a90) {
            const v91 = [9007199254740991,10,56647,-29200,-9223372036854775807];
            return v91 & v91;
            return a90;
        }
        v87.valueOf = f88;
        v87.valueOf(v31, F36);
        const v94 = new C81();
        function f95(a96, a97) {
            16 - 16;
            let v100 = 536870887;
            const v101 = v31--;
            const v102 = ++v100;
            Math.log1p(v101);
            return v102;
        }
        v94.constructor = f95;
        const t102 = v94.constructor;
        new t102("delete", v56, v65, f28, v57);
        const v106 = v94.getPrototypeOf;
        function f107() {
            return Date;
        }
        Object.defineProperty(v106, "toString", { writable: true, enumerable: true, get: f107 });
        new v106(v106);
        const v110 = BigUint64Array.of();
        try { v110.entries(v31, F36, v47); } catch (e) {}
        try { Int8Array(Int8Array, Int8Array, v63); } catch (e) {}
        const v114 = new C81();
        const v115 = v114.getPrototypeOf;
        const t114 = v114.getPrototypeOf;
        const v117 = new t114();
        const v118 = v117.__defineSetter__;
        try { v118(v67); } catch (e) {}
        const t119 = v114.getPrototypeOf;
        const v121 = new t119();
        v121.getPrototypeOf = v121;
        const v122 = new C81();
        function f123(a124) {
            function f125() {
                return f125;
            }
            return f125.arguments;
            return v86;
        }
        v122.constructor = f123;
        const v127 = v122.getPrototypeOf;
        const v128 = new v127(F36, "getPrototypeOf", v48);
        v128.b = v128;
        v128.b = v128;
        const v129 = new v127();
        const v130 = v129.constructor;
        v130.toString = Date;
        try { v130.call(v75); } catch (e) {}
        const v132 = new v130();
        v132.getPrototypeOf = v132;
        let v133 = v132.getPrototypeOf;
        v133++;
        const t142 = v122.constructor;
        const v136 = new t142(F36, v59);
        v136.constructor = f12;
        const v137 = v136.constructor;
        new v137(this, F32, v137);
        const v139 = v136.getPrototypeOf;
        try { v139.toString(arguments, v139, v115); } catch (e) {}
        const v141 = Array(19793);
        v141[17012] = v106;
        v141.with(v69, v67);
        for (const v143 of v141) {
        }
    }
    new F36();
    new F36();
    return F32;
}
f28();
