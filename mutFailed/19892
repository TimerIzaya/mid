function f0() {
    const o18 = {
        __proto__: "string",
        set f(a5) {
            const v7 = new Map();
            const v8 = v7.values();
            try { v8.next(); } catch (e) {}
            Float64Array.toString = gc;
            try { new a5(a5, a5); } catch (e) {}
            const o16 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o16);
        },
        "f": -56003,
        ..."string",
        "e": -56003,
    };
    function f19() {
        function f20(a21) {
            o18[16] = a21;
            a21?.[a21];
            return o18;
        }
        return f20;
    }
    function f23(a24) {
        function F27(a29, a30, a31) {
            if (!new.target) { throw 'must be called with new'; }
            const v32 = this.constructor;
            try { new v32(a29, a29, this); } catch (e) {}
            a29 + a29;
            try {
                this.e = a31;
            } catch(e35) {
            }
            try {
                this.h = -6.336273045214518e+306;
            } catch(e36) {
            }
            try {
                this.g = -1.7976931348623157e+308;
            } catch(e37) {
            }
        }
        const v40 = new Uint16Array(64);
        function f41() {
            class C44 {
            }
            let v45;
            try { v45 = new C44(12); } catch (e) {}
            const v46 = new C44(-4294967296);
            const v47 = [v46,C44];
            try { v47.map(v40); } catch (e) {}
            const v49 = [v46];
            for (let i51 = 0; i51 / i51, i51 < 2; i51++) {
                new F27(undefined, v45, undefined);
            }
            class C60 extends C44 {
            }
            const v61 = new C60();
            class C63 extends v49.constructor {
            }
            try { v61.m(); } catch (e) {}
            return C44;
        }
        f41();
        f41();
    }
    Object.defineProperty(o18, "toString", { enumerable: true, get: f19, set: f23 });
    return o18;
}
let v67 = 10;
v67--;
const v70 = v67 == 0;
const o71 = {
    "done": v70,
    "value": v67,
};
const v72 = f0();
v72.toString = f0;
const v73 = f0();
v73[Symbol.toPrimitive] = f0;
const v76 = f0();
v76[Symbol.toPrimitive] = f0;
function f79(a80, a81) {
    a81.toString = f0;
    a80[1];
    const o89 = {
        ...v76,
        "h": f0,
        4096: v73,
        __proto__: a81,
        "d": v73,
        215: a80,
        [a80](a84, a85) {
            [-2.5463836374085913,-1.7976931348623157e+308,-2.0,1.7976931348623157e+308,-1e-15,1000000000000.0,-122.39931622077393,-1.7976931348623157e+308,955485.2587843633];
            [315262.6551695487,-1.0,0.29079501442498334,1000000000.0,2.2250738585072014e-308,-706479.7772571307,-1.0,-629980.2920141565];
            [2.534072484897136e+307];
            return f0;
        },
        [v72]: v73,
        1793: f0,
        ...a81,
    };
    return o89;
}
const v90 = f79(v73, v72);
v90[0] = v90;
f79(v76, v73);
f79(v76, v72);
new Uint32Array(2258);
new Int32Array(1783);
new Int32Array(257);
function F102() {
    if (!new.target) { throw 'must be called with new'; }
}
const v104 = [-268435456,-9007199254740990,11,-25356,-536870912,4294967296,1520296454];
v104[0] = v104;
const o105 = {
    __proto__: v104,
};
o105[3] = o105;
try { o105.group(F102); } catch (e) {}
