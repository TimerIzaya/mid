new Uint8ClampedArray(9);
const v3 = [];
function F4() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v3;
    } catch(e6) {
    }
}
const v7 = new F4();
const o16 = {
    "h": v7,
    199: 9,
    "b": F4,
    "a": v3,
    n(a9, a10, a11) {
        try {
        } catch(e15) {
        }
    },
};
new Int16Array(91);
new Uint8Array(164);
class C23 {
    static set e(a25) {
        for (let i28 = 0, i29 = 10;
            (() => {
                const v30 = i28 < i29;
                let v31 = 3375;
                const v33 = new BigUint64Array(v31);
                let v36 = Math.tan(--v31);
                v36--;
                let [v38,,v39,...v40] = v33;
                v38--;
                return v30;
            })();
            i28++) {
        }
        new Uint32Array(3205);
        new Uint32Array(147);
        new Int8Array(7);
    }
    constructor(a57, a58, a59, a60) {
        super();
        function f61() {
            const t45 = [];
            t45[6] = 4294967295;
            const o66 = {
                set b(a65) {
                },
            };
            return 4294967295;
        }
        for (let v67 = 0; v67 < 5; v67++) {
            f61();
            %OptimizeFunctionOnNextCall(f61);
        }
    }
}
([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4");
new C23();
new C23();
new C23();
const v77 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
class C78 {
}
new C78();
const o82 = {
    o(a81) {
        return this;
    },
};
function F83(a85, a86, a87, a88) {
    if (!new.target) { throw 'must be called with new'; }
    function f89(a90, a91, a92) {
        const v93 = v77.__proto__;
        try { v93.findLastIndex(this); } catch (e) {}
        return a90;
    }
    f89(a87, a87, a87);
}
new F83();
