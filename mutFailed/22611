function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 4;
    } catch(e3) {
    }
    try {
        this.a = 4;
    } catch(e4) {
    }
}
new F0();
new F0();
const v7 = new F0();
v7.b = v7;
256 ^ 256;
Float32Array.name[8];
const v13 = new Float32Array(256);
try { v13.toLocaleString(); } catch (e) {}
let v15 = 257;
const v16 = v15++;
const v18 = Float32Array.name;
new Float32Array(v15);
new BigUint64Array(256);
try { new Map(); } catch (e) {}
const v25 = new v15();
const v27 = ~-2147483647;
v27 === v27;
let v30 = 24560;
v16 - v30;
v30--;
let v36 = undefined;
const o44 = {
    ...v25,
    ...Map,
    __proto__: v25,
    [v30](a38, a39, a40) {
        super[591114.0785999324];
        v36 = Map;
    },
};
o44[24559] = o44;
const v45 = o44?.keys;
try { new v45(); } catch (e) {}
v36 = o44;
[v25];
function F49() {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    try { v51.splice(v51, 4); } catch (e) {}
    const v55 = new Date();
    try { v55.getMinutes(); } catch (e) {}
    const o58 = {
    };
    o58.e = 19793;
    const v60 = Array(19793);
    for (const v61 of v60) {
    }
    const v62 = [v60,v60,v60,v60,v60];
    v62[3] = v62;
    try {
    const t0 = 9223372036854775807;
    new t0(Date, v62, v18);
    } catch (e) {}
    o58.name = BigUint64Array;
    const v65 = new BigUint64Array();
    try { v65.values(); } catch (e) {}
    [];
    for (let v69 = 0; v69 < 50; v69++) {
        v69++;
    }
    const v72 = [[v62,v62,v62]];
    v72[0];
    !(v72 >= Uint16Array);
}
const v77 = new F49();
const v78 = v77?.constructor;
let v79;
try { v79 = new v78(); } catch (e) {}
const v80 = v79?.constructor;
try { new v80(); } catch (e) {}
const v82 = new F49();
const v83 = v82?.constructor;
try { new v83(); } catch (e) {}
