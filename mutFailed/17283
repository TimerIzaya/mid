const v0 = [3.984889413674038,1000.0];
[8.477279483572634e+307,-63.79055340841421];
const v2 = [-688.1935608273661,2.7665275356573105,5.0,-75458.12056335004,-710.2028979974255,-678916.6905478339,Infinity,1000000.0,5.0];
let v4 = 64;
function F6() {
    if (!new.target) { throw 'must be called with new'; }
}
function f8(a9, a10) {
    function f11() {
    }
    const v15 = new Uint8Array(/(u4(?:a?)*)/gudimsy, f11);
    function f17() {
        return f11;
    }
    Object.defineProperty(Uint32Array, "constructor", { configurable: true, get: f17 });
    const v18 = new Uint32Array();
    for (let v19 = 0; v19 < 625; v19++) {
        const o29 = {
            ...v15,
            n(a23, a24) {
                a24 = v18;
                try {
                    new F6();
                } catch(e26) {
                }
                v18[Uint8Array] = v18;
            },
            "b": v4,
            "maxByteLength": 10000,
            "g": Uint8Array,
            toString(a28) {
            },
        };
    }
    const o30 = {
    };
}
async function f32(a33, a34) {
    function F35() {
        if (!new.target) { throw 'must be called with new'; }
    }
    /2a\sc/uds;
    f8();
}
class C39 {
    #b;
}
new C39();
const v41 = new C39();
new C39();
f32(F6, 4294967296);
const v48 = ("match").__proto__;
v48[Symbol.toPrimitive] = f32;
const v51 = [-1.7976931348623157e+308,1.567547754457685];
const v53 = new Uint32Array(v51, v51, Uint32Array);
function f54(a55) {
    [10000,f8,[a55,a55,v2,v41],10000,[v4]];
    return v0;
}
v53.constructor = f54;
v53.constructor;
[0,49369,65537,-5];
[-1913578650,-4294967296,536870888,9007199254740991,536870887,129];
[13780];
for (const v69 of "-4294967295") {
}
BigUint64Array <= 0.7221600461335677;
Uint32Array.constructor;
v4++;
class C76 {
}
class C77 {
    constructor(a79, a80) {
        try {
            a80.length = 5;
        } catch(e82) {
        }
    }
}
const v84 = new BigUint64Array(3927);
function f85(a86, a87, a88) {
    try { a86.apply(a87, v84); } catch (e) {}
    let v90 = 0;
    do {
        v84[Symbol.toStringTag];
        v90++;
    } while (v90 < 9)
    f85 ** a87;
    try {
        Reflect.ownKeys();
    } catch(e100) {
    }
    return v84;
}
v2[Symbol.toPrimitive];
v48 + v41;
const t94 = "tan";
t94[0] = f85;
function F105() {
    if (!new.target) { throw 'must be called with new'; }
}
function f107() {
    for (const v109 in [-65535,536870889,4096]) {
    }
    try {
        f107();
    } catch(e111) {
    }
    return f107;
}
f85(f85);
