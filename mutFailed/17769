new Float64Array(256);
new Uint32Array(149);
new Uint8Array(226);
let v12 = "mSS";
class C15 {
    get b() {
        let v18 = -13050;
        Math.tanh(v12);
        Math.cos(-197199362);
        const o23 = {
        };
        const v24 = -v18;
        C15.ceil(++v12);
        Math.log10(v24);
        return v18--;
    }
    [v12] = v12;
}
new C15();
new C15();
new C15();
function f32() {
    return v12;
}
/(\xed\xa0\x80?)/vis;
/6x/vdsy;
/[\p{Script_Extensions=Mongolian}&&\p{Number}]i[]9/guimsy;
const t24 = (2136873598).constructor;
t24(7);
function f43(a44) {
    a44 ^ a44;
    return 36002;
}
new Int8Array(16);
new BigUint64Array(144);
function f51() {
    return f51;
}
const v52 = [601759695];
const v53 = [1073741824,1073741823,1376142744,1073741825];
function f54(a55, a56, a57, a58) {
    a58.toLocaleString();
    try { v53["find"](..."find", a58, ...v52, ...v53); } catch (e) {}
    typeof 0 === "number";
}
for (let v65 = 0; v65 < 5; v65++) {
    f54(f51, v65, v65, v53);
}
const v68 = [-292.83735349768153,1000000.0,-Infinity];
function f70(a71) {
    function F72(a74, a75, a76) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.h = a76;
        } catch(e77) {
        }
    }
    new F72("bigint", v52, v68);
    new F72("bigint", v52, v53);
    const v80 = new F72(a71, v68, v12);
    return v80;
}
Float64Array.toString = f70;
class C82 extends Uint8Array {
    constructor(a84, a85) {
        a84[1] = Float64Array;
        super(a84);
    }
}
new C82(v68);
new Uint32Array(0);
try { ("10").concat(); } catch (e) {}
new Map();
const v95 = new Uint8ClampedArray(9);
function f96(a97, a98, a99) {
    a98--;
    const o101 = {
        __proto__: v95,
    };
}
