const v2 = new Float64Array(1);
new Int32Array(255);
const v8 = new Uint8Array(128);
function f9(a10, a11) {
    const o25 = {
        toString(a13, a14, a15, a16) {
            this[Symbol.toStringTag];
            return v8;
        },
        "c": v2,
        ...v2,
        __proto__: v8,
        "a": a11,
        get d() {
            super[a10] = this;
            return 2147483647n;
        },
    };
    return o25;
}
f9(128, 128);
const v27 = f9(128, 128);
f9(255, 128);
const v29 = [1.0663730977141727e+308,NaN,-1.1534060997380896e+308,-9.26829361922416e+307];
const v30 = /xEz\xe2\x81\xa3/gumy;
["function",v30];
class C33 {
}
const v34 = new C33();
ReferenceError(v34);
const v37 = [0.3588640203078587,-1e-15,0.5938791097479088,-1000000000.0];
v29.constructor;
function f39(a40, a41) {
    return Math.tanh("1");
}
%PrepareFunctionForOptimization(f39);
const v45 = [5.453486096719857];
function F46(a48) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.push(F46); } catch (e) {}
    try {
        this.d = a48;
    } catch(e50) {
        let v52 = new Date();
        v52 **= v52;
    }
}
new F46(v29);
new F46(v37);
const v56 = new F46(v45);
v56.a = v56;
let v58 = 2086125797;
let v59 = v58++;
v59 = 1;
Object.defineProperty("function", "e", { configurable: true, enumerable: true, value: 4294967296 });
v30[v56];
const v64 = -1233294118 / 0;
Int32Array / v64;
Math.trunc(v64);
Math.sign(v27);
Math.tanh(-1233294118);
+v27;
Math.tanh(-1233294118);
const o72 = {
};
Math.cos(-1567809689);
256 === 256;
const v79 = new Uint16Array(Uint16Array);
new Uint8ClampedArray(v79);
function f82() {
}
class C83 extends f82 {
}
new C83();
function f86(a87, a88) {
    const o89 = {
    };
    return o89;
}
const v90 = new Set();
function F91(a93, a94) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const o109 = {
            o(a96) {
                let v97 = 10;
                for (; v97--;) {
                    const o101 = {
                        "maxByteLength": 536870889,
                    };
                    const v103 = new SharedArrayBuffer(238, o101);
                    new Uint8ClampedArray(v103);
                }
                const o107 = {
                };
                return gc(o107);
            },
        };
        this.d = a93;
    } catch(e110) {
        for (let [v111,v112] of a93) {
        }
    }
    const t103 = 4294967296;
    t103.h = v90;
    ~(-256n >> -256n);
    try {
        (4294967296)[this];
        try { new WeakSet(); } catch (e) {}
        const v119 = [WeakSet];
        const v120 = new F91();
        this.b = v119;
        const v122 = new Map();
        v119[4294967296] = Set;
        const v123 = [v120];
        const v124 = [v123,v123,v120,v122];
        [-256n,v124,-41535,v122,v124];
    } catch(e126) {
    }
}
F91.arguments;
new F91();
