const v1 = new Map();
class C2 extends Map {
    static 10;
    constructor(a4, a5) {
    }
    c;
    3;
    /*
    constructor(a7, a8) {
        delete arguments.callee;
        new Date("2");
        super(a8);
        a7[1731] -= a7;
        /5u(x)(x)(x)\1*/gvdimsy;
        /a$\p{Script=Greek}a?fa\W?/udim;
        class C16 {
        }
        new C16();
        const o18 = {
            [C16]: a7,
            ...a7,
        };
        /(a+(?: foo ))/di;
        try {
            v1.size = a7;
        } catch(e20) {
        }
    }
    */
    static #a = v1;
    static valueOf(a22, a23, a24) {
        new a24();
    }
    static #h = Map;
}
const v26 = new C2(Map, Map);
const v27 = new C2(v26, v1);
const v28 = new C2(Map, v27);
function f29() {
    const v31 = new Map();
    delete v31?.size;
    const v36 = new Int8Array(7);
    new Uint32Array(v36);
    return v28;
}
function F41(a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = Map;
        const v46 = [9007199254740990,16,-65536,7,10,9223372036854775807,16,4,1073741824];
        let v47 = [29915,-9007199254740990,9];
        const v48 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
        const v49 = [2147483647,-32974,7,-54836,-9,-15,10000];
        const v50 = [268435440,49273,-15,214837996,-12,65536,1291301446,-65535];
        try { v50.concat(v48); } catch (e) {}
        if (v48 <= v49) {
            v46 ** v48;
            v47 += v49;
        } else {
            var d = v49;
        }
    } catch(e54) {
    }
    try {
        this.b = v1;
    } catch(e55) {
    }
    try {
        this.a = a44;
    } catch(e56) {
    }
}
new F41("c", v1, "2oIN");
new F41(f29, v28, "2oIN");
new F41(F41, v26, "2oIN");
const t75 = "9007199254740992";
t75["255"] &= 7;
