64 + 64;
const v9 = 2.0 >>> 2.0;
function f11() {
    return 1.1916412794457982e+307;
}
Object.defineProperty(-712282103, 650, { writable: true, enumerable: true, set: f11 });
const v12 = v9[2.0];
try {
    v12.__proto__ = v12;
} catch(e13) {
}
const v14 = f11?.constructor;
try { new v14(1.1916412794457982e+307); } catch (e) {}
602 <= 602;
new Uint16Array(602);
const v22 = new Float32Array(1409);
Uint32Array.e = Uint32Array;
const v25 = new Uint32Array(126);
try { v25.constructor(Uint16Array, Uint16Array, v22); } catch (e) {}
function F27(a29, a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    const v33 = this?.constructor;
    try { new v33(64, a29, 64, a32); } catch (e) {}
    a32.caller = a32;
    const v37 = new BigInt64Array(11);
    v37.lastIndexOf(this);
}
const v39 = new F27(F27, F27, F27, F27);
v39.length = v39;
