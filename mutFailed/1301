[];
const v4 = [17381];
v4[0] = v4;
const v5 = [127,9,8,1885383289,-1024,6,16,-200630045];
const v6 = [-24167,25612];
try { v6.pop(); } catch (e) {}
const v8 = [-16828,9007199254740990,2147483647,1199803768,17644,268435439];
const v9 = [129,-9223372036854775807,-1073741824,52623,11];
v9[1] = v9;
const v10 = [-774668646,-5,1160847291];
try { v10.reduce(v9); } catch (e) {}
943290442n ^ 943290442n;
9007199254740991n / 9007199254740991n;
257 >>> 257;
new Int8Array(257);
try { new Uint8Array(Uint8Array, 4294967297n, v8); } catch (e) {}
new Uint8Array(2, v5, v5);
Float64Array.g = Float64Array;
const v27 = new Float64Array(533);
v27[452];
"eYk" == "eYk";
-1073741824 != -1073741824;
-1152270245 | -1152270245;
-268435456 + -268435456;
-268435456 >> -268435456;
class C40 {
    m(a42, a43) {
        new a43(-1073741824, -268435456, -1073741824, -1073741824, ...a42);
    }
}
function F46(a48, a49, a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    const v52 = this?.constructor;
    try { new v52(-1073741824, F46, v8, -1073741824); } catch (e) {}
    let v54;
    try { v54 = this.propertyIsEnumerable(Float64Array); } catch (e) {}
    !v54;
    this.a = a49;
}
const v56 = new F46();
v56.a;
v56.a;
for (const v59 in v56) {
}
const o62 = {
    "maxByteLength": 84,
};
const v64 = new SharedArrayBuffer(79, o62);
new BigInt64Array(v64);
