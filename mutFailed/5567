function f2() {
}
const v4 = gc();
function F6(a8) {
    if (!new.target) { throw 'must be called with new'; }
    a8 ^ a8;
    this?.constructor;
    try { new v4(3n); } catch (e) {}
}
class C13 {
    get e() {
        if (-65536 > "setYear") {
            this.DataView;
            new Date(-4.0);
            try {
            const t0 = "setYear";
            new t0(-65536);
            } catch (e) {}
            function f24() {
                return 2720;
            }
            function F25(a27, a28) {
                if (!new.target) { throw 'must be called with new'; }
                const v29 = this.constructor;
                try { new v29(a27, 256); } catch (e) {}
                -a27;
                a28--;
                this.h = f24;
            }
            const v33 = new F25();
            class C34 extends F25 {
                #h;
                3120 = F25;
                #g = v33;
                valueOf(a36, a37, a38) {
                }
                [v33] = 256;
            }
            new C34();
        } else {
            f2[-2];
        }
        return this;
    }
    static #g = "setYear";
}
function f41() {
    function f42() {
        try {
            const t49 = "setYear";
            t49.f = "setYear";
        } catch(e43) {
        }
        return "setYear";
    }
    return f42;
}
function f44(a45) {
    a45[-65536];
}
Object.defineProperty("setYear", Symbol.toPrimitive, { configurable: true, enumerable: true, get: f41, set: f44 });
const v49 = new C13();
new C13();
new C13();
class C52 extends C13 {
    static [v49];
    set c(a54) {
    }
    static 7 = -9223372036854775807;
    [C13] = "setYear";
    c = "setYear";
    static 268435456;
}
let v58 = new C52();
const t74 = -65536;
new t74();
new C13();
const o63 = {
    "maxByteLength": 1000,
};
const v65 = new ArrayBuffer(8, o63);
const v67 = new BigUint64Array(v65);
v58 *= v67;
