const v3 = /(a)\1/gdmy;
const v4 = /\x01/guims;
const v5 = /\xed\xb0\x80*/gvi;
function f6(a7, a8) {
    const o18 = {
        __proto__: v3,
        get c() {
            let {"ignoreCase":v10,} = v5;
            [NaN,698.9219273731123,-1000000.0,-Infinity,-990582.8638143302,604243.6576715414,Infinity,0.780202471987412,-1.322993221125336e+308,0.3909229402061294];
            [0.13103258561628317,0.46395269273308337,1.7850033382494177e+308,-674395.3321442427,2.0,5.0,0.002457711606611901,1000000.0];
            const t8 = [7.134431132944798e+307];
            t8[4] = WeakMap;
            class C15 {
            }
            new C15();
            [-1000.0,9.664274025784778,2.220446049250313e-16,4.0];
            return this;
        },
        "f": 11,
        ...a7,
        "h": v3,
        ...v3,
    };
    return o18;
}
f6(v4, 4);
const v20 = f6(v5, 4);
let v22 = 932132118;
552610460 | v3;
Math.imul(v22, v22);
v22++;
f6(v20, 11);
class C31 {
    static toString(a33, a34) {
        this.d = this;
        const v36 = super[a34];
        const v37 = [];
        function f40(a41, a42) {
            a42 >> a42;
            const v44 = -256 >>> a42;
            v44 / v44;
            return -256;
        }
        f40(v37, -256);
        function f48() {
            return -4294967296;
        }
        function F50(a52, a53, a54, a55) {
            if (!new.target) { throw 'must be called with new'; }
            const v56 = this?.constructor;
            try { new v56(a52, -1.0, a55, a55); } catch (e) {}
            a53 - a53;
            a55 ^ a55;
            try {
                a55.g = a54;
            } catch(e60) {
            }
            try {
                try {
                    new f48();
                } catch(e62) {
                }
                try {
                    v37.fill(-65537n);
                } catch(e64) {
                }
                this.b = -65537n;
            } catch(e65) {
            }
        }
        try {
            delete this[v36];
            this[C31];
        } catch(e68) {
        }
    }
}
new C31();
const v71 = /o(\xed\xb0\x80)\x01/gudims;
const v73 = Symbol.toPrimitive;
v71[v73] = v73;
Math.sinh(0);
const v77 = new Uint8ClampedArray(C31);
function f78() {
    function f79(a80, a81) {
        const v82 = a81.constructor;
        v82 + v82;
        return a80;
    }
    return f79;
}
Object.defineProperty(v77, "valueOf", { get: f78 });
v77[5] = v77;
