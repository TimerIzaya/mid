let v0 = -9007199254740992;
const v5 = 23274 - 23274;
v5 >>> v5;
let v7 = -36719088;
v7--;
class C9 {
    static [23274] = v0;
    128;
    set f(a11) {
        v0 /= v0;
        v7 ||= 731154972;
    }
    static #toString(a14, a15, a16) {
        try {
            this.g = a15;
        } catch(e17) {
        }
        typeof this === "boolean";
        return this;
    }
}
new C9();
const v22 = new C9();
v22[128] = v22;
const v23 = new C9();
const v25 = 3515 + 3515;
Int32Array.name = Int32Array;
const v27 = new Int32Array(3515);
let v28 = 165;
v28--;
const v30 = -v28;
let v32;
try { v32 = Float64Array.bind(v7); } catch (e) {}
v32.g = v32;
const v33 = new Float64Array(v28);
const v34 = v33[113];
v34 >> v34;
BigInt64Array.b = BigInt64Array;
new BigInt64Array(2740);
let v40;
try { v40 = new WeakSet(); } catch (e) {}
try { v40.delete(v30); } catch (e) {}
const v42 = new WeakSet();
try { v42.delete(v25); } catch (e) {}
1135 + 1135;
1135 >> 1135;
const v48 = new Float64Array(1135);
try { new Uint16Array(v40, 1135, 3515); } catch (e) {}
Uint16Array.g = Uint16Array;
new Uint16Array(1987);
try { new BigInt64Array(v48, BigInt64Array, 1135); } catch (e) {}
new BigInt64Array(3151);
let v59;
try { v59 = ("d").trimLeft(); } catch (e) {}
try { v59.split(v23, v27); } catch (e) {}
v59[0] = v59;
let v62;
try { v62 = ("number").startsWith(1135); } catch (e) {}
v62 || v62;
const o64 = {
};
o64.e = o64;
const v66 = 1.185961373472971e+308 || v33;
WeakMap.name = WeakMap;
const v68 = new WeakMap();
try { v68.delete(23274); } catch (e) {}
const v70 = v68?.__lookupSetter__;
try { new v70(3515); } catch (e) {}
try { new v70(v66); } catch (e) {}
const v73 = Float64Array + "number";
try { v73.substring(v27, v73); } catch (e) {}
const v75 = v68 * WeakMap;
Number.isNaN(v75);
const v79 = Number.isNaN(v75);
v79 || v79;
class C81 {
}
const v82 = C81?.toString;
try { new v82(); } catch (e) {}
switch ("number") {
    case o64:
        v62 = v62;
        break;
}
const v84 = o64.constructor;
try { v84.getOwnPropertyDescriptors(v75); } catch (e) {}
try { new v84(v84); } catch (e) {}
1987 === 1922;
const v89 = 1922 % 1922;
v89 + v89;
const v91 = v89 == v89;
for (let v92 = 0; v92 < 25; v92++) {
    function f93() {
        return f93;
    }
    function f94(a95, a96, a97, a98) {
        try { a97.defineProperties(a95, f94); } catch (e) {}
        a98 % a98;
        try { new a96(a95); } catch (e) {}
        let v102;
        try { v102 = a97.preventExtensions(f93); } catch (e) {}
        v102.caller = v102;
        a95 - a95;
        const v104 = a96.freeze(f93);
        v104.length;
        let v106;
        try { v106 = v104.bind(f93); } catch (e) {}
        try { v106(); } catch (e) {}
        a98 + a98;
        function f109() {
            const t110 = 23274;
            t110[0] = v27;
            2096661586 >>> 2096661586;
            try {
                const o114 = {
                };
                -(-1490667426);
                new Int32Array(o114, -1490667426, -9007199254740991);
            } catch(e118) {
            }
        }
        try { f109(); } catch (e) {}
        let v120 = f109.length;
        v120--;
        let v122 = v120 >>> v120;
        v122--;
        const v124 = v120 <= v92;
        v124 || v124;
        let v126 = -v120;
        v126 + v126;
        v126--;
        const v130 = f93().constructor;
        const v131 = v130?.constructor;
        try { new v131(o64); } catch (e) {}
        let v133;
        try { v133 = v130(); } catch (e) {}
        const v134 = v133.caller;
        const v135 = v133.bind();
        try { v134.seal(f94, f93, f93); } catch (e) {}
        const v140 = f93++;
        let v141 = v140 * v140;
        f93 | v92;
        ++v141;
        v141--;
        ~v141;
        1000 ^ v141;
        try { v135(); } catch (e) {}
        v135.e = v135;
        try {
            /9/uis;
        } catch(e150) {
        }
        const v151 = v135.length;
        v151 % v151;
        const v153 = v135.bind();
        v153.length;
        try { v153(); } catch (e) {}
        v130 * v91;
        const v157 = typeof f109;
        try { v157.blink(); } catch (e) {}
        v157.italics(v157, v126, v153);
        const v160 = v157 === v104;
        v160 && v160;
        v160 || v160;
        function f163() {
        }
        const v164 = f163?.constructor;
        try { new v164(v22); } catch (e) {}
        f163.g = f163;
        const v166 = f163();
        const v167 = [65535,-10,4294967296,-10,36724,65536,-2147483647,52881,2,4096];
        -v167[0];
        let v171;
        try { v171 = Array.from(v92); } catch (e) {}
        try { v171.some(v153); } catch (e) {}
        function f173(a174, a175, a176) {
            const v178 = [Array,a176];
            const v180 = Reflect.apply(v167.filter, v166, v178);
            try {
            } catch(e181) {
            }
            const o182 = {
            };
            try {
            } catch(e183) {
            }
            try {
                const o184 = {
                };
            } catch(e185) {
            }
            try {
                const o186 = {
                };
            } catch(e187) {
            }
            try {
                const o188 = {
                };
            } catch(e189) {
            }
            v180.find(v133);
        }
        const v191 = f173?.apply;
        try { new v191(v102, v102); } catch (e) {}
        const v195 = ("find").blink().replaceAll;
        try { v195(v160); } catch (e) {}
    }
    for (let v197 = 0; v197 < 5; v197++) {
        f94(v197, v84, v84, 1922);
    }
}
