const v1 = new Date();
function f2() {
    return v1;
}
const v3 = [Date,v1];
v3[1] = v3;
class C6 {
    constructor(a8) {
        for (const v9 of "bigint") {
            this.c = v9;
        }
    }
    h = undefined;
}
const v10 = new C6();
const v11 = [v1,Date];
function f12() {
    const o27 = {
        valueOf(a14, a15) {
            function F16(a18, a19) {
                if (!new.target) { throw 'must be called with new'; }
                this.hasOwnProperty(a14, a19, a14);
                a18 >= a18;
                const v22 = this.constructor;
                try { new v22(); } catch (e) {}
            }
            class C24 extends F16 {
            }
            new C24();
            new C24();
            return F16;
        },
    };
    o27.valueOf();
    return v10;
}
[v3,v11,v11,v1];
class C33 {
}
for (let v34 = 0; v34 < 25; v34++) {
}
const o35 = {
    "f": 16,
};
new Set();
class C38 {
    constructor(a40, a41, a42, a43) {
        super();
        function f44() {
            const t49 = [];
            t49[6] = 4294967295;
            const o49 = {
                set b(a48) {
                },
            };
            return 4294967295;
        }
        for (let v50 = 0; v50 < 5; v50++) {
            f44();
            %OptimizeFunctionOnNextCall(f44);
        }
    }
    #n(a53, a54, a55) {
        try { a53.copyWithin(a54, 16); } catch (e) {}
        Set / this;
        const o63 = {
            "g": 1073741824,
            get d() {
                super[a54];
                return this;
            },
            "f": 3,
            ...a54,
            10: 1073741824,
        };
        return o63;
        return a53;
    }
    static #toString(a67, a68, a69, a70) {
        f2 &&= f2;
        try {
            f2();
        } catch(e72) {
        }
        return f2;
    }
}
const v76 = new C38();
new C38();
Object.hasOwn(16);
Object(16);
function f82(a83, a84, a85, a86) {
    return f82;
}
new C38();
function F89(a91, a92, a93, a94) {
    if (!new.target) { throw 'must be called with new'; }
    const v95 = a91.push();
    const v96 = this.__defineGetter__;
    try { v96.call(v95); } catch (e) {}
}
try { new Date(16, 16, v1, v1, v76, Date, v1); } catch (e) {}
class C100 extends Date {
}
const v101 = new C100(-4294967296);
const v102 = v101?.getDay;
try { new v102(); } catch (e) {}
Object.defineProperty(Date, v101, { get: Date, set: Date });
