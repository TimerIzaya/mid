const v0 = [];
new Int32Array(127);
const v6 = new Float64Array(1024);
new Uint16Array(11);
for (let [i13, i14] = (() => {
        0 * 0;
        return [0, 10];
    })();
    i13++, i13 < i14;
    (() => {
        const v19 = [601759695];
        const v20 = [1073741824,1073741823,1376142744,1073741825];
        function f21(a22, a23, a24, a25) {
            a25 ^ a25;
            try { v20["find"](..."find", a25, ...v19, ...v20); } catch (e) {}
        }
        for (let v29 = 0; v29 < 5; v29++) {
            f21(v29, f21, i13);
        }
    })()) {
}
const v33 = [Float64Array];
[[v0,v6,v33,Uint16Array],v33,v33,Uint16Array];
/(?!\1(a\1)\1)\1/vimy;
/[xyz{1,32}[^123]]/vi;
/a+b|ca(?=bbb|bb)c/vis;
function F39() {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = -(-7);
    v42 ** v42;
}
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this.constructor;
    try { new v48(F39, a46, F39, v48); } catch (e) {}
    new F39();
}
new F44();
const o52 = {
};
