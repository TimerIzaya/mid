let v0 = [];
class C1 {
    m() {
        ({"b":v0,} = v0[this]);
        const v4 = super[v0];
        const v6 = [601759695];
        const v7 = [1073741824,1073741823,1376142744,1073741825];
        let v9;
        try { v9 = v7["find"](..."find", v4, ...v6, ...v7); } catch (e) {}
        return v9;
        return C1;
    }
    static #h = C1;
}
const v12 = new C1();
const v13 = new v12();
function f14() {
    for (const v18 of Array(4087, 4087, v0, 4087)) {
    }
    return 4087;
}
%PrepareFunctionForOptimization(f14);
const v19 = f14(v13, v12, f14);
%OptimizeFunctionOnNextCall(f14);
v0();
new C1(v0, C1, v0);
new Int8Array(v19);
new Uint8ClampedArray(13);
const v31 = new Uint32Array(0);
const v32 = [536870887,-60324,23228695,26098,13,2];
try {
    class C35 extends [BigUint64Array,BigUint64Array,BigUint64Array,BigUint64Array] {
    }
} catch(e36) {
}
for (let v37 = 0; v37 < 5; v37++) {
    function f38() {
        class C40 {
        }
        const v41 = new C40();
        v41.isPrototypeOf(v32);
        const o49 = {
            "maxByteLength": v37,
            n(a44, a45) {
                v31[v37] = v31;
                return v37;
            },
            4: "Vre",
            "message": "Vre",
            "e": v31,
            "MIN_SAFE_INTEGER": "Vre",
            toString(a47, a48) {
            },
        };
        return v37;
    }
    f38();
    %OptimizeFunctionOnNextCall(f38);
}
