const v1 = new Set();
function f2(a3, a4) {
    const o11 = {
        "h": a4,
        get b() {
            for (let [v6,v7,v8] of a4) {
                try {
                    v6.b = v7;
                } catch(e9) {
                }
            }
            this - v1;
            return v1;
        },
        3: a4,
        2759: a4,
        "b": a3,
    };
    return o11;
}
const v12 = f2(Set, v1);
const v13 = f2(f2, v12);
const v14 = f2(v12, f2);
function f15(a16, a17) {
    const o27 = {
        get c() {
            const o22 = {
                "maxByteLength": 130,
            };
            const v24 = new SharedArrayBuffer(130, o22);
            new DataView(v24);
            return v13;
        },
        "a": Set,
    };
    return o27;
}
f15(v12, v14);
const v29 = f15(v13, v14);
f15(v12, v13);
const v31 = [v1,v1];
const v33 = [v12,Set,[f15,v31,v14,v1,v31],v29,f15];
class C34 extends Set {
    static #o(a36, a37, a38, a39) {
        const v40 = `c`;
        new Set(v40);
        v40[393] = super[a39];
        return v40;
    }
    static #valueOf(a44, a45) {
        let {"b":v46,"e":v47,"h":v48,...v49} = v13;
        v46?.f;
        Math.log2(v33);
        const v55 = ~f2;
        -2.0 << v49;
        -2.0 >>> v55;
        +v55;
        Math.log2(-2.0);
        return v33;
    }
}
new C34();
new C34();
new C34();
function F63() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v65 = 0; v65 < 32; v65++) {
        "p" + v65;
    }
}
const v68 = new F63();
v68[-1] = F63;
const v69 = new F63();
new F63();
v69[v69];
const v73 = v68[-1];
new WeakSet();
const v78 = new BigInt64Array(7);
v78.toString = f15;
v78[v78] = v73;
gc.d = gc;
gc();
-128n + -128n;
function F86(a88, a89, a90, a91) {
    if (!new.target) { throw 'must be called with new'; }
}
new F86(undefined, undefined, -128n);
