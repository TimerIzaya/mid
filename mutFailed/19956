new BigUint64Array(1000);
new Int32Array(128);
new Float32Array(3);
/S\P{Decimal_Number}/gvdms;
/ROlL/gudimy;
/3a$JP(a)\1/gus;
new BigInt64Array(15);
const o34 = {
    m(a33) {
        return this;
    },
    __proto__: 946.0676210033328,
};
const v36 = new Uint8ClampedArray(1104276741);
const v39 = new Int16Array(8);
for (const v40 in v36) {
    delete v39?.buffer;
    new Int16Array(7);
    new Float32Array(2801);
    new Uint8ClampedArray(3070);
    const v51 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    [601759695];
    const v55 = [1073741824,1073741823,1376142744,1073741825];
    function f57(a58, a59, a60, a61) {
        function f62() {
            const v65 = v51.length;
            try {
                v55.forEach(a59);
            } catch(e67) {
            }
            const o71 = {
                toString(a69, a70) {
                },
            };
            const o89 = {
                [522675525n](a73, a74) {
                },
                valueOf(a76, a77) {
                },
                [v65](a79) {
                },
                [-128n](a81, a82, a83, a84) {
                },
                set b(a86) {
                },
                m(a88) {
                },
            };
        }
    }
    for (let v90 = 0; v90 < 5; v90++) {
    }
}
const v91 = [0.9388990264144315,-1e-15,-1.0,841561.2554243801];
class C92 {
    n(a94, a95) {
    }
    static m(a97) {
        const o98 = {
        };
    }
    static [v91] = BigInt64Array;
}
try {
} catch(e99) {
}
function F100() {
    if (!new.target) { throw 'must be called with new'; }
}
function f102(a103) {
    try {
    } catch(e104) {
    }
}
const o106 = {
    get a() {
    },
};
class C107 {
}
function F108() {
    if (!new.target) { throw 'must be called with new'; }
}
class C110 {
}
class C111 {
    constructor(a113, a114, a115) {
        function f116(a117, a118, a119) {
            try {
            } catch(e120) {
            }
        }
    }
}
const o121 = {
};
try {
    const v124 = new Int32Array(12);
    for (const v125 in v124) {
    }
} catch(e126) {
}
for (let v127 = 0; v127 < 5; v127++) {
    function f128() {
        for (let v129 = 0; v129 < 5; v129++) {
        }
        try {
            function f130(a131, a132) {
                f102(a131);
            }
        } catch(e134) {
            class C135 {
            }
            try {
            } catch(e136) {
            }
        }
        for (let v137 = 0; v137 < 5; v137++) {
            function f138() {
            }
        }
        function F139() {
            if (!new.target) { throw 'must be called with new'; }
            function f141(a142) {
            }
        }
    }
}
