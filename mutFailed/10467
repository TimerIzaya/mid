const v6 = /(?:ab)?/udimy;
const v7 = /[i5\cj\cJ\ci\cI\ck\cK]/udy;
const v8 = /a*bO/umsy;
const v9 = /hx\p{Changes_When_NFKC_Casefolded}/vdy;
const v10 = /V/vds;
const v11 = /g[]/vimy;
class C12 {
    constructor(a14, a15) {
        this.f = v10;
        function f16() {
            const v18 = ["-3"];
            const o20 = {
                "arguments": v18,
                "type": "function",
            };
            return C12;
        }
        a14[Symbol.toPrimitive] = f16;
        if (v9 >= a14) {
            v8.test(v7, v9, v10, -27098, -1073741824);
            try {
                this.f = a15;
            } catch(e25) {
            }
        } else {
            super.f;
        }
    }
    h;
}
1940694780n ^ 1940694780n;
const v30 = new Uint8Array();
v30.buffer.transfer();
new C12(v11, -27098);
function F34() {
    if (!new.target) { throw 'must be called with new'; }
}
const v36 = new F34();
v36.d = -1478533836;
const v38 = v36.d;
try { v38(Array); } catch (e) {}
const o40 = {
    "construct": Array,
    "defineProperty": Array,
    "getPrototypeOf": Array,
    "preventExtensions": Array,
    "set": Array,
};
new C12(v11, 62350);
new C12(v6, -528825626);
function f45() {
    return 36924;
}
function f46(a47, a48, a49, a50) {
    const o71 = {
        __proto__: a49,
        ...a49,
        m(a52) {
            let v51 = this;
            try { a52.next(); } catch (e) {}
            a52.g = a52;
            const o54 = {
            };
            function f55(a56, a57, a58) {
            }
            try {
            } catch(e59) {
            }
            try {
                const o60 = {
                };
                o60.unscopables = o60;
            } catch(e61) {
            }
            try { Math.cos(a52); } catch (e) {}
            class C64 {
            }
            const v67 = new Int8Array(3938);
            let v68 = 3;
            v51++;
            [...v68] = v67;
            const o70 = {
            };
        },
    };
    return o71;
}
f46(-65536, 36924, f45);
function f74() {
}
function f77() {
    let v78 = 1073741824;
    class C80 {
        constructor(a82) {
            [a82,v78] = "boolean";
        }
    }
    const v83 = new C80(C80);
    return v83;
}
Int32Array.valueOf = f77;
const v84 = new Int32Array(1024);
for (const v85 of v84) {
    const o88 = {
        "maxByteLength": 1293466293,
    };
    new SharedArrayBuffer(1796, o88);
}
class C93 {
    set h(a95) {
        eval();
    }
}
const v100 = [1342014474];
function f103() {
    const v105 = ("1073741824").constructor;
    return v105(f103, -1478533836, v105, "1073741824", v105);
}
function f107() {
    const v109 = new Int16Array();
    return v109;
}
f103[Symbol.toPrimitive] = f107;
f103();
%OptimizeFunctionOnNextCall(f103);
Int32Array.toString = f45;
let v125 = 2950;
v125--;
const v131 = new Uint8ClampedArray(995);
const v133 = new Int8Array(995);
const v135 = [9,62350,9];
const v136 = v133.copyWithin;
Reflect.apply(v136, v131, v135);
try { v131.some(v136); } catch (e) {}
const v149 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937);
v149[3] = v149;
0 - 0;
function f153(a154) {
    class C155 {
        static #h = a154;
        [a154] = 62350;
    }
    new C155();
    new C155();
    new C155();
    function f160(a161) {
        a154 ||= -47530;
    }
    this.onmessage = f160;
    6 !== v100 ? 6 : v100;
    return Uint32Array;
}
Int32Array < -528825626;
Object.defineProperty(C12, "d", { configurable: true, enumerable: true, value: v125 });
