class C3 {
    g = "create";
    3 = "-2142618020";
    static n(a5, a6) {
        super.a;
        try {
            this.g = a5;
        } catch(e9) {
        }
        return this;
    }
    static c = "create";
}
new C3();
new C3();
const v12 = new C3();
function f15() {
    function f16(a17, a18) {
        return C3;
    }
    return f16;
}
function f22(a23) {
    ("create")[7];
}
Object.defineProperty(Int32Array, "toString", { writable: true, configurable: true, get: f15, set: f22 });
const v25 = new Int32Array(256);
function f28(a29, a30) {
    const v32 = -425087802 >>> -425087802;
    const v33 = new a30();
    try { v33.group(v32); } catch (e) {}
    return v32;
}
Int32Array.valueOf = f28;
new Int32Array(4096);
new BigInt64Array(43);
const v40 = new Set();
function f41(a42) {
    const o49 = {
        set b(a44) {
        },
        toString(a46, a47) {
            return a46;
        },
        get d() {
            return a42;
        },
    };
    return o49;
}
const v50 = f41(v40);
const v51 = f41(v50);
const v52 = f41(v40);
const v54 = Symbol.toPrimitive;
v52[v54] = f41;
function F55(a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
}
new F55(v50, v52);
new F55(v25, v50);
const v61 = new F55(v50, v51);
function f64(a65) {
    v52[a65] = a65;
    try {
        v54.description = "create";
    } catch(e66) {
    }
    return a65;
}
Int32Array.toString = f64;
const v67 = new Int32Array(2020);
try {
    v40.size;
    v52 & 1024;
    268435440 - -406885.1001387938;
    Math.fround(-406885.1001387938);
    const v78 = new Uint8ClampedArray(231);
    const v80 = v78["reverse"]();
    ~Int32Array;
    class C83 {
        constructor(a85) {
        }
        h = v80;
    }
    class C86 extends C83 {
    }
    C86();
    v52 / 268435440;
} catch(e89) {
    const v92 = new Float32Array(2306);
    v92.reverse();
    function F94(a96, a97) {
        if (!new.target) { throw 'must be called with new'; }
    }
    [-5.0,0.6506817157229189,-1.0,325954.7806464648,-2.977619842045307,207.7293164806515,-2.2250738585072014e-308,-3.8235851972465246e+307,1.0];
    [-1.0,-1000000000000.0,0.8531264749275649,-5.0];
    [7.640606689322991e+307,-0.0,2.0,1000000.0,-1.7976931348623157e+308,2.0,0.0,34737.52793939819,959540.4413600569,1e-15];
}
const o103 = {
    "f": -1.883023285666516,
};
const o105 = {
    1073741825: "MIN_VALUE",
};
function F107(a109, a110, a111, a112) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v113 = 0; v113 < 100; v113++) {
        const o116 = {
            valueOf(a115) {
                return a115;
            },
        };
    }
}
new F107("n");
new Uint16Array(70);
[-4096,-156526366,-9007199254740992,-2108113053,-1409475351,11,-37308,16];
[-6,-429106885,58245331,9,5,-41416,33852];
[-1073741824,255,11,-9007199254740991,232691623,1046358555,-42399,13,-46796,1669956301];
try {
    BigInt64Array(256);
    const v132 = new Uint32Array();
    const v133 = v132[40];
    for (let v134 = 0; v134 < 5; v134++) {
        try { v133(); } catch (e) {}
    }
    v12("undefined");
    v67?.constructor;
    [-671138503,-536870912,-9007199254740991,-9007199254740992,-268435456,128,2023752111,-970019998,8839,6];
    [1073741824,-46456,536870888];
    function f140(a141, a142) {
        return 8;
    }
} catch(e143) {
}
new Float64Array(8);
const v145 = /(?:a*)+q(?<a>.)/guds;
const o146 = {
    "maxByteLength": v61,
    __proto__: v145,
};
for (let i149 = 0, i150 = 10; i149 < i150; i150--) {
}
