class C3 {
    static get h() {
        let v5;
        try { v5 = this(-1.6557535997985084, -4.021021172150117, this); } catch (e) {}
        var e = -1.6557535997985084;
        let v6;
        try { v6 = C3.o(v5); } catch (e) {}
        C3 * v6;
        C3[1.6074989727503104e+308] >>= 1.6074989727503104e+308;
        const o9 = {
            4294967296: 1733353236,
        };
        const o10 = {
        };
        ("undefined").localeCompare("undefined", o10);
        this[-2] = C3;
        if (v5) {
            try { v5.setUTCMonth(this); } catch (e) {}
        } else {
            try { this.shift(this, 1.6074989727503104e+308, 1.6074989727503104e+308, v5, 1.6074989727503104e+308); } catch (e) {}
        }
        return v5;
    }
    6;
    static [-4.021021172150117];
    static 512;
}
new C3();
new C3();
new C3();
const v20 = new Set();
let [v21,,...v22] = v20;
v21.setUTCFullYear(v22, Set, -256);
new Uint8Array(8, Uint8Array, 8);
let v29 = 0;
do {
    C3 instanceof Uint8Array;
    v29++;
} while ((() => {
        Array(12, -10);
        class C40 {
        }
        const v41 = v29 < 1;
        Array(4096).shift();
        class C47 {
            constructor(a49, a50, a51, a52) {
                const v53 = this?.constructor;
                try { new v53(-2.3890993596755727, a50, a51, a51); } catch (e) {}
                for (let v55 = 0; v55 < 5; v55++) {
                }
            }
        }
        new C47();
        return v41;
    })())
new Int32Array(0);
new Uint8Array(256);
(0)?.g;
const v63 = [3.0];
function F64(a66, a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
}
const v69 = new F64(-725.0347156854516);
new F64(v69, v63);
function f71() {
    const v74 = new Int16Array(128);
    new Uint8ClampedArray(v74);
    return f71;
}
const t69 = /C/vdiy;
t69.constructor = f71;
