class C3 {
    constructor(a5) {
        Symbol.for((-3.0771895411888313).toPrimitive.description);
        const o15 = {
            [this]() {
                return -2;
            },
        };
    }
    [-2] = -3.0771895411888313;
    f = -2;
}
C3.length;
const t12 = -2;
const v17 = new t12(C3);
new C3(v17);
new C3(62601);
const v22 = new Float32Array(2516);
v22[2502] = v22;
BigInt64Array.BYTES_PER_ELEMENT;
const v26 = new BigInt64Array(6);
try { Int32Array(v26, v26, Int32Array); } catch (e) {}
const v30 = new Int32Array(2516);
v30[1607];
Number.isNaN(Math.log2());
const v36 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F37(a39, a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v43 = 0; v43 < 100; v43++) {
        function f44(a45, a46, a47) {
            const o49 = {
                get d() {
                    return a46;
                },
            };
            for (let i = 0; i < 10; i++) {
                f44 < 10;
                delete v36[10];
            }
            return o49;
        }
        F37(a42, f44, f44);
    }
}
new C3();
