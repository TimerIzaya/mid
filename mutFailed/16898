const v3 = [9007199254740990,1146162507,1,9007199254740990];
const v4 = [1,1];
let v5;
try { v5 = v4.groupToMap(9007199254740990); } catch (e) {}
const v6 = [v5];
function f7(a8, a9, a10) {
    try { a8.sort(a10); } catch (e) {}
    try { a8.map(v3); } catch (e) {}
    const o19 = {
        ...v6,
        n(a14, a15) {
            a15[1146162507] = a8;
            +a8;
            super.a;
            return this & 1;
        },
        ...v3,
        "d": 1,
        __proto__: v4,
        "c": a10,
        "h": v5,
    };
    return o19;
}
const v20 = f7.name;
const v21 = f7(v3, 1, v3);
const t26 = f7(v6, 9007199254740990, v3);
t26[1] = v21;
const v23 = f7(v5, 9007199254740990, v3);
const v24 = [-9007199254740990,-2,-1946119414,64137,-14,10,512,9,-12];
try { v24.includes(f7); } catch (e) {}
const v26 = [257,-128,1383234600,0,-51696,9920,2];
let v27;
try { v27 = v26.entries(); } catch (e) {}
[1,255,16569,-290504078,1000,536870889,1093635331,-2082716730,-21735,0];
let v34 = 135.68951961804942;
v34--;
const v38 = new Int16Array(v27);
try { v38.set(v23); } catch (e) {}
255 >> 255;
new Uint8Array(255);
const v46 = new Int16Array(8);
async function f48(a49, a50, a51) {
    a49 % a49;
    delete v46[-1000000000.0];
    let [v54,v55,...v56] = v38;
    v55--;
    try { v56.find(1000000000.0); } catch (e) {}
    -v38[5];
    let v61 = await v55;
    v61--;
    return Uint8Array;
}
f48(8, 8, 948737.12760097);
const t53 = "function";
t53[1] = v20;
const v66 = v5.length;
v66 & v66;
const v69 = +-36313;
-36313 + v34;
v69 || (v34 / v66);
