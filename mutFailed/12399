-(2n | -9);
const o13 = {
    set d(a9) {
        this.b = this;
        this.cos = a9;
        for (let v10 = 0; v10 < 25; v10++) {
        }
        try { a9["cos"](); } catch (e) {}
    },
};
o13.d = -9;
129 >> 129;
try {
    const v19 = new Int32Array(53099, 53099, 53099);
    v19[46335];
} catch(e21) {
}
const t17 = 129;
const v22 = new t17(129);
function F24(a26) {
    if (!new.target) { throw 'must be called with new'; }
    const v28 = (a26 ^ a26)?.constructor;
    try { new v28(3n); } catch (e) {}
}
5 + 5;
try { new Uint8Array(Uint8Array, 129, v22); } catch (e) {}
const v34 = new Uint8Array(5);
try { v34.findLastIndex(F24); } catch (e) {}
6 - 6;
v22.length = Uint8ClampedArray;
new Uint8ClampedArray(6);
const v40 = [-6.8035006781971e+307,1000000.0,1000.0,-2.715046407601891];
try { new Array(2147483647n); } catch (e) {}
v34[0];
class C44 extends Array {
}
C44.a = C44;
C44.b = C44;
const v45 = new C44();
function f46(a47) {
    return a47;
}
v45.constructor = f46;
const v48 = v45.concat(v40);
v48[3] = v48;
v48[0] = v48;
