new Float32Array(5);
function F3(a5, a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
    function F8(a10, a11) {
        if (!new.target) { throw 'must be called with new'; }
        function f12(a13, a14, a15) {
            for (let i = 0; i < 10; i++) {
                const o16 = {
                };
            }
            try {
                f12(F3, a13, a11);
            } catch(e18) {
            }
            return a14;
        }
        f12();
        try {
            this.fuck(this, a6, Float32Array, 5);
        } catch(e21) {
        }
        d = a6;
    }
    new F8();
}
const v23 = new F3();
new Uint8Array(1328);
new BigUint64Array(127);
function f30(a31, a32) {
    try { v23.next(); } catch (e) {}
    const v34 = new BigUint64Array(1328);
    return v34;
}
f30(1328, 5);
function f39() {
    class C41 extends f39 {
        static 255;
    }
    new C41();
    new C41();
    new C41();
    59817n < undefined;
    return BigUint64Array;
}
%PrepareFunctionForOptimization(f39);
f39();
%OptimizeFunctionOnNextCall(f39);
f39();
