new BigInt64Array(1000);
new Int32Array(8);
const v8 = new BigInt64Array(3);
const v10 = new Set();
class C11 extends Int32Array {
    [Int32Array] = 3;
    static #toString(a13, a14, a15) {
        try {
            this.h = v8;
        } catch(e16) {
        }
        return a13;
    }
    #a;
    valueOf(a18, a19, a20, a21) {
        class C23 {
            #valueOf(a25, a26) {
                return a26;
            }
            #b = a20;
        }
        const v27 = new C23();
        const v28 = new C23();
        const v29 = [v27];
        function f30(a31, a32, a33) {
            v29.copyWithin();
            const v38 = new Int32Array([Infinity,-1.7411766874642142e+308,-1000000.0,-1000000000000.0,-1000.0,-8.633030896336538e+307,3.4879373433419367,3.0,4.0,0.3217386216666849]);
            ([1.7976931348623157e+308,-5.063738949828065,-1000000.0,-4.0,4.0,1.368499884638594e+307,0.0,-1.2131530743918297,-1000000000.0,-2.809909548595164]).concat();
            try {
                function f42() {
                    0 < 10;
                    for (let v48 = 0; v48 < 5; v48++) {
                    }
                    return v28;
                }
                %PrepareFunctionForOptimization(v38);
                [];
                f30(252859902);
            } catch(e51) {
            }
            v10 >> 252859902;
            return -BigInt64Array;
        }
        let v57 = (-3.0) ** -3.0;
        let v59 = v57 + v57++;
        v57 % v57;
        const v61 = ++v59;
        return (v61 + v59) >>> v61;
    }
}
new C11();
new C11();
new C11();
function F67() {
    if (!new.target) { throw 'must be called with new'; }
}
const v70 = new v8();
new F67();
const v72 = new F67();
Math.sinh(-3.3474037991793697);
[-5,2147483649,-4294967295,1,8,-4331,52354,15231];
BigInt64Array["unshift"]();
class C82 extends F67 {
    b = "number";
    set g(a84) {
        let v83 = this;
        ({"c":a84,"d":v83,} = v72);
    }
    static {
        const v86 = super[this];
        ("function").substring(v86, this, v86, "function", "8", this);
        super.c;
        try {
            v70.f = v86;
        } catch(e89) {
        }
    }
}
