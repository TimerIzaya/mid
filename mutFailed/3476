const v1 = [true];
const v3 = [v1,[true,true,v1,v1,true]];
let v5;
try { v5 = ("fromEntries").split("fromEntries", v3); } catch (e) {}
try { ("c").toWellFormed(); } catch (e) {}
("cmQ")[1];
new Set();
class C16 extends Date {
}
const v17 = new C16();
const v18 = v17.toGMTString();
try { v18.strike(); } catch (e) {}
const v20 = [155533.8602852358,2.0];
v20[658291203] = v5;
function F22() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.valueOf(); } catch (e) {}
    const v25 = this?.__lookupGetter__;
    let v26;
    try { v26 = v25.bind(v25); } catch (e) {}
    try { new v25(); } catch (e) {}
    const v30 = Array(19793);
    v30[18649] = v26;
    try { v30.keys(); } catch (e) {}
    v30[3536] = this;
    for (const v32 of v30) {
        v20[658291203] = null;
        Math.g = Math;
        let v35 = Math.cbrt(19793);
        v35--;
        const v37 = 0.4890055133608564 || 0.4890055133608564;
        const v38 = v37 + v37;
        v38 + v38;
    }
    const v40 = [];
    v40.g = v40;
    v40.g = -1252925017;
    v40.g = v40;
    const v41 = [C16,C16];
    try { v41.fill(v3); } catch (e) {}
    let v43;
    try { v43 = v41.fill(); } catch (e) {}
    try { v25(v43, "cmQ", this); } catch (e) {}
    v18[1073741824];
    2 - 2;
    const v50 = [v40,v40,v40,v40];
    try { v50.entries(); } catch (e) {}
}
const v52 = new F22();
function f53() {
    return Date;
}
Object.defineProperty(v52, "constructor", { writable: true, configurable: true, get: f53 });
const v54 = v52?.constructor;
try { new v54(); } catch (e) {}
new F22();
