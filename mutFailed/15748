function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 127;
    } catch(e3) {
    }
    try {
        this.g = 127;
    } catch(e4) {
    }
    try {
        F0.b = 127;
    } catch(e5) {
    }
}
new F0();
const v7 = new F0();
new v7();
class C9 extends F0 {
    static get d() {
        const v13 = new Uint8ClampedArray(129);
        new Int16Array(6);
        new Uint8ClampedArray(5);
        return v13;
    }
}
const v20 = new C9();
const v21 = new C9();
new C9();
function f23() {
    return v21;
}
const v24 = [F0];
[v7,v24,v24,v20];
[F0,f23];
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    function f37(a38) {
        const v42 = a38 || -960721497;
        268094.97505370784 | a38;
        +v42;
    }
    Object.defineProperty(this, "f", { enumerable: true, set: f37 });
    const v45 = this?.constructor;
    try { new v45(0.29489550717955537, a35); } catch (e) {}
    try { this.constructor(0.6822080711934364, this); } catch (e) {}
    try {
        this.f = 3.0;
    } catch(e48) {
    }
}
new F33(C9);
new F33();
3911 >> 3911;
new Int32Array();
