function f0() {
    new Uint8Array(268435440);
    const v5 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v7 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v8 = [601759695];
    function f10(a11, a12, a13, a14) {
        function f15() {
            try {
                v5.forEach(a12);
            } catch(e19) {
                e19.f = e19;
            }
            const v20 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
            const o32 = {
                toString(a22, a23) {
                    const v24 = a14 && a12;
                    const v26 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
                    v26.__proto__ = v26;
                    return "7";
                    let v27 = "string";
                    class C28 extends f0 {
                        set h(a30) {
                            ({"h":v27,} = this);
                        }
                    }
                    v24 <= v20;
                    return a12;
                },
            };
            class C35 extends Int8Array {
                [12];
            }
            let v36 = -268435456;
            v36++;
            const o56 = {
                "c": -4294967297n,
                [522675525n](a39, a40) {
                },
                "c": v8,
                valueOf(a42, a43) {
                    return this;
                },
                [-4294967297n](a45, a46, a47, a48) {
                },
                "maxByteLength": -4294967295,
                "arguments": v7,
                ..."Vre",
                valueOf(a50, a51) {
                    return a51;
                },
                4: "Vre",
                "type": "Vre",
                toString(a53, a54, a55) {
                    return "Vre";
                },
                5: -4294967295,
                6: v36,
            };
            return a11;
        }
        f15();
        %OptimizeFunctionOnNextCall(f15);
        return f15;
    }
    for (let v58 = 0; v58 < 5; v58++) {
        f10(-4294967297n, v5, v58, v58);
    }
    const o77 = {
        ..."7",
        "arguments": v8,
        get h() {
        },
        "arguments": v7,
        "d": "7",
        ["65537"]: "65537",
        __proto__: "j",
        n(a64) {
            %VerifyType("7");
            try {
                const t79 = "7";
                t79.length = 0;
            } catch(e66) {
            }
            new Uint8ClampedArray([5.0]);
            function F70(a72, a73, a74) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v75 = new F70(F70, v7, F70);
            new F70(v75, v75, v75);
            return "j";
        },
    };
    return o77;
}
f0();
f0();
const v80 = f0();
URIError(Float64Array);
let v84 = -2147483648n;
class C85 {
    static m(a87) {
        ({"a":C85,"h":v84,} = this);
    }
}
const v90 = /a(?!bbb|bb)c/vi;
const v91 = v90.toString;
const v92 = new v91(BigUint64Array, 246, C85, v90, v91);
v92.__lookupGetter__;
const v94 = [-4294967296];
[-4294967295,-65537,1433230176];
[1073741824];
const v99 = new BigUint64Array(257);
function F100(a102, a103, a104) {
    if (!new.target) { throw 'must be called with new'; }
    const v105 = this?.__defineGetter__;
    try { new v105(v99, v99); } catch (e) {}
}
function f107() {
    return v80;
}
new Int32Array(v94);
new Uint16Array(14);
new Float64Array(256);
class C118 {
    #o(a120) {
        for (let i122 = C118; i122 < 6;) {
            const t126 = -15n;
            var c = t126(this, i122);
        }
    }
}
for (let i = 0; i < 25; i++) {
    function F133(a135, a136) {
        if (!new.target) { throw 'must be called with new'; }
        const v137 = this.constructor;
        try { new v137(); } catch (e) {}
        function f139() {
            return F133;
        }
        %PrepareFunctionForOptimization(f139);
        f139();
        %OptimizeFunctionOnNextCall(f139);
    }
    const o142 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o142);
}
