function f0() {
    const o8 = {
        toString(a5) {
            const v6 = a5 | "9";
            this[this];
            return v6;
        },
        "a": -1489157957,
        4: 14992,
        "g": 14992,
        __proto__: "9",
        "f": 14992,
    };
    return o8;
}
const v9 = f0();
const v10 = f0();
const v11 = f0();
function f12(a13, a14) {
    const o15 = {
        ...a14,
        "g": a13,
        2: f0,
        [f0]: a14,
        536870912: a13,
        "e": v9,
        __proto__: a14,
        "c": v10,
        6: f0,
        "f": a13,
    };
    return o15;
}
f12(v9, v11);
const v17 = f12(v11, v9);
f12 ^ v17;
try {
    f0();
} catch(e20) {
}
const v21 = f12(v11, v10);
const v23 = /a{12z}+/dimy;
const v24 = /(?:a{5,1000000}){3,1000000}a(?!b)*/gvms;
/l(ab)/gvim;
function f26() {
    const v29 = [8n,8n,8n,8n] > 8n;
    let v30 = 0;
    for (let v31 = 0; v31 < 5; v31++) {
        Array(36862);
    }
    while (v30 < 10) {
        for (let v37 = 0; v37 < 5; v37++) {
            "n" + v37;
        }
        v30++;
    }
    return v29;
}
%PrepareFunctionForOptimization(f26);
const v41 = f26();
%OptimizeFunctionOnNextCall(f26);
const v42 = f26();
function* f43(a44, a45, a46, a47) {
    const v48 = v10.toString(a44, a44, v42, v23, undefined, a47);
    v48.__proto__;
    [-5.26272202064372e+307,-1000000000.0];
    [2.2250738585072014e-308,-1.556825241725094e+308,-507.48761747372083,-2.0];
    yield* [v9,[-5.415140029583975,0.32872373925446485,-1.0,-1000000000.0,-972071.4412143101,2.2250738585072014e-308,-5.182817708924432,-2.220446049250313e-16,-110984.7988223636],v21,v24];
    return v48;
}
f43(v9, v41, v17, v24);
