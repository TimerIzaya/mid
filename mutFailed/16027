([])["concat"]("concat");
new Set();
let v7 = 4096;
[26758,812416309];
const v14 = new Uint32Array(8);
v14.lastIndexOf(8);
9 != 9;
[-379820490,-9007199254740991,-1587357864,36390,-268435456,9,-1863419681,1073741824,1073741825];
[12,536870887,-16,1073741823];
const v22 = new Uint16Array(1425);
new Uint8Array(2, 2, 2);
const v27 = [6,-1340283293,-11812,-1073741824,-1073741824];
try {
    v27.length = -2147483648;
} catch(e29) {
}
function f31() {
    return f31;
}
function f32() {
    return f31 == f32;
}
f32();
new Boolean(1000, v7, Boolean, Boolean);
const v38 = new Uint8Array(13);
function f39() {
    new Uint8ClampedArray(231);
    function f43() {
        return f43;
    }
    const v44 = f43.arguments;
    function f45() {
        for (let v46 = 0; v46 < 5; v46++) {
            Array(36862, v44, v46 & v46).reverse();
        }
        return f45;
    }
    %PrepareFunctionForOptimization(f45);
    const o60 = {
        "e": 0.9122522475753213,
        __proto__: v22,
        [-13]: 0.9122522475753213,
        ...v38,
        "h": v7,
        ...0.9122522475753213,
        "b": -44510n,
        ...-2147483648,
        4294967296: "concat",
        [-44510n]: 4294967295n,
        next() {
            v7--;
            const v56 = v7 == 0;
            const o57 = {
                "done": v56,
                "value": v7,
            };
            return o57;
        },
        set b(a59) {
        },
    };
    o60.b = o60;
    return o60;
}
for (let v61 = 0; v61 < 5; v61++) {
    f39();
    %OptimizeFunctionOnNextCall(f39);
}
Reflect.ownKeys();
function f65() {
    for (const v69 of Array(4087)) {
        v69 - v69;
    }
}
