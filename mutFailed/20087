let v0 = WeakSet;
const v1 = new v0();
const v4 = new Uint8Array(257);
-10;
Uint8Array.BYTES_PER_ELEMENT = Uint8Array;
const v8 = new Uint8Array(10);
try { v8.findIndex(10); } catch (e) {}
Int16Array.g = v1;
Int16Array.g = Int16Array;
new Int16Array(216);
const v13 = [65121,13,13,16,35791,1452951425,-9223372036854775808,7,48262];
[-54261];
[-417903539,5,2099,4];
function f16() {
    for (let v17 = 0; v17 < 5; v17++) {
        function f18() {
            return f18;
        }
        !v17;
        ({"h":v0,} = v1);
        const o20 = {
            "defineProperty": f18,
            "deleteProperty": f18,
            "get": f16,
            "getOwnPropertyDescriptor": f18,
            "getPrototypeOf": f18,
            "setPrototypeOf": f18,
        };
        const v22 = new Proxy(v8, o20);
        f18.d = v17;
        f18 >> v22;
        function F24(a26, a27) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = o20;
            } catch(e28) {
            }
        }
        new F24(10, 216);
        new F24(v17, 257);
        new F24(v17, 10);
        f18.d = f18;
    }
    return f16;
}
%PrepareFunctionForOptimization(f16);
f16();
if (216 > v13) {
    d[f16] = Uint8Array;
} else {
    v0 *= v4;
}
%OptimizeFunctionOnNextCall(257);
f16();
