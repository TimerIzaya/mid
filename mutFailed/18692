new WeakMap();
/\p{Changes_When_NFKC_Casefolded}/vd;
/w/udimsy;
const v4 = /\c~/msy;
new Uint32Array(256);
const v11 = this.print(this, this);
const v14 = new Float64Array(3341);
const v15 = new Float32Array(31);
new String();
function F18(a20) {
    if (!new.target) { throw 'must be called with new'; }
    const v21 = this.constructor;
    try { new v21(); } catch (e) {}
    new BigInt64Array();
}
new F18();
delete v4[2143];
for (let v27 = 0; v27 < 32; v27++) {
    v4["p" / v27] = v27;
}
const v33 = [-4294967296];
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
}
let v38 = 0;
while (v38 < 0) {
    for (let v41 = 0; v41 < 5; v41++) {
    }
    v38++;
}
new Uint8ClampedArray(16);
const v47 = [957.745995576631];
try { v47.toReversed(); } catch (e) {}
const v49 = [1.3135103235327608e+308,-193.8567171280638,3.582138489303892,7.806053331905822,-3.269763049797403,-0.3815765900884749,474197.91025597067,-3.0,0.5058222148288534,-9.044946443159311];
[-Infinity,NaN,-1000000.0,1000000.0,1000000000000.0,-1.0,1.7976931348623157e+308,1000.0];
const v54 = ("async").constructor;
v54.raw(v54);
function f56(a57, a58, a59, a60) {
    const v61 = a59++;
    v61 <= v61;
    return f56;
}
f56(f56, f56, f56, f56);
let v65 = -314.9391272852571;
const v66 = --v65;
new Uint16Array(Float32Array);
const v69 = [-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0];
const v72 = new g("undefined");
v11 in v72;
const v74 = new F34(v66, this);
v74 instanceof Uint16Array;
v69["findIndex"](gc);
-1865840174 | -1865840174;
("message")[Symbol.matchAll];
let {"d":v85,"g":v86,"length":v87,} = v49;
v15 ^ v86;
Symbol.prototype;
const v92 = new WeakMap();
const v93 = /8[\cA]v/uisy;
try { v93.test(v93); } catch (e) {}
function f95(a96, a97) {
    const v98 = [a96,a96,a96,a96];
    try { v98.concat(10); } catch (e) {}
    v92.set(v98);
    let v104 = ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
    v104++;
    return "NEGATIVE_INFINITY";
}
v93[Symbol.toPrimitive] = f95;
const v107 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
function f108() {
}
function f109(a110, a111, a112, a113) {
    function f114() {
    }
    f108();
    const v117 = new Int8Array();
    function f118(a119, a120) {
        const o124 = {
            p(a122, a123) {
                return this;
            },
        };
    }
    f118();
    f118();
    const v127 = v117.buffer;
    let v128 = 1000000000000.0;
    v128--;
    try {
        v33.toReversed();
    } catch(e132) {
    }
    function F133(a135, a136) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.c = a135;
        } catch(e137) {
        }
        try {
            this.h = a136;
        } catch(e138) {
        }
        try {
            this.f = a136;
        } catch(e139) {
        }
    }
    new F133(v49, v107);
    new F133(f114, v127);
    new F133(F133, v14);
    function F144(a146, a147, a148, a149) {
        if (!new.target) { throw 'must be called with new'; }
        this.c = a146;
    }
    const v150 = new F144(-2.0);
    const v151 = new F144(-1.093925554716035e+308);
    v151 in v150;
    const t117 = [];
    t117.length += 1.0;
    %OptimizeFunctionOnNextCall(f114);
    class C157 extends Date {
        static 2544510523 = 1.0;
        1855;
    }
    try { v49["find"](); } catch (e) {}
    for (const v160 in "1024") {
    }
}
for (let v161 = 0; v161 < 10; v161++) {
    f109();
}
try {
} catch(e163) {
}
