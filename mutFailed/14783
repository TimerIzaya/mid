const v2 = [];
("concat")[4];
const v5 = v2["concat"]("concat");
try { v5.every("concat"); } catch (e) {}
const t4 = [-65317,-58155,536870889,976,536870889];
t4[2] = 13;
const v14 = new WeakSet();
try { v14.delete(v5); } catch (e) {}
const v18 = ("concat").constructor;
try { v18.bind("d"); } catch (e) {}
function f20(a21, a22) {
    const o23 = {
    };
    return o23;
}
f20.length = f20;
("g")[0];
function F29() {
    if (!new.target) { throw 'must be called with new'; }
}
class C31 {
    constructor(a33, a34, a35) {
        a33.arguments = a33;
        a34.name = a34;
        class C37 extends a34.constructor {
        }
        const v38 = new C37();
        try { v38(); } catch (e) {}
    }
}
try { C31.constructor(0); } catch (e) {}
const v41 = new C31(F29, C31);
const v42 = v41?.__lookupGetter__;
try { new v42(-1000000.0); } catch (e) {}
class C44 {
    static {
        this.prototype = this;
        const v46 = this.name;
        v46.length;
        const v48 = this.toString();
        v48[346] = v48;
        v48.lastIndexOf(v46);
    }
}
function F50() {
    if (!new.target) { throw 'must be called with new'; }
}
try { new WeakSet(); } catch (e) {}
try { new Uint32Array(v18, Uint32Array, -1000000.0); } catch (e) {}
function f56(a57) {
    function f59(a60) {
        try { a57.valueOf(a60, Uint32Array, WeakSet, a60, this); } catch (e) {}
    }
    this.onmessage = f59;
}
const v64 = ["function"];
const o65 = {
    "arguments": v64,
    "type": "function",
};
o65.e = o65;
new Worker(f56, o65);
