function f0() {
}
const v1 = /K[\p{Script_Extensions=Mongolian}&&\p{Number}][^123]+/gudimsy;
const v3 = new Date();
v3.toLocaleString();
const o5 = {
};
const v6 = /abc(?:(?=a))a\1[-\xf0\x9f\x92\xa9]+/gm;
const v7 = /\1(a)/vd;
class C8 extends f0 {
    valueOf(a10, a11, a12, a13) {
        super[this] = f0;
    }
    10;
    static #n(a15, a16) {
    }
    #valueOf(a18, a19) {
        try {
            v1.toString = f0;
        } catch(e20) {
            function F21(a23, a24, a25, a26) {
                if (!new.target) { throw 'must be called with new'; }
                const v27 = a25[1];
                try {
                    with (a23) {
                        F21(v27, a26);
                    }
                } catch(e29) {
                }
            }
        }
        return v6;
    }
    [v1] = v6;
    static g;
    [v7] = f0;
}
const v30 = new C8();
new C8();
new C8();
new Number();
[601759695];
new Uint8ClampedArray(268435440);
const v39 = [601759695];
const v40 = [1073741824,1073741823,1376142744,1073741825];
function f41(a42, a43, a44, a45) {
    let [] = v40;
    try { v40["find"](..."find", a45, ...v39); } catch (e) {}
    return a44;
}
const v48 = [1073741824,1073741823,1376142744,1073741825];
function f49(a50, a51) {
    const v54 = Array();
    function f55() {
        return f49;
    }
    function f56(a57) {
        const o60 = {
            "execution": "async",
        };
        gc(o60);
        return a57;
    }
    Object.defineProperty(v54, 0, { configurable: true, enumerable: true, get: f55, set: f56 });
    v54.unshift(3);
    return a50;
}
function f63(a64, a65, a66, a67) {
    function f68() {
        +("Vre").constructor;
    }
    try { f68(); } catch (e) {}
    f68();
    try { v48["find"]("find"); } catch (e) {}
    return "match";
    return v30;
    Array(19793);
}
for (let v80 = 0; v80 < 10; v80++) {
    f63();
}
%OptimizeFunctionOnNextCall(f63);
f63();
