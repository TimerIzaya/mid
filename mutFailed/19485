[4.276666871300288e+307,-0.0,-3.0,-3.0,0.7436692261242497,-9.424040253107786e+307,-Infinity,2.2250738585072014e-308];
[198.11362451668174,-2.2250738585072014e-308,-1e-15,451712.52137440536,-2.2250738585072014e-308,-1000000000.0,1000.0,1000.0];
const v2 = [6.794195660546066,-1.7976931348623157e+308];
function f3() {
    return v2;
}
const v6 = new Uint8Array(239);
function f8() {
    ("-536870912").normalize;
    ("-536870912").g;
    const v14 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    for (let v15 = 0; v15 < 5; v15++) {
        function f16() {
            try {
                v14.forEach();
            } catch(e18) {
                e18.a = v6;
                e18.a = e18;
            }
            const v20 = Symbol.toPrimitive;
            Symbol.for(v20.description);
            v20.description;
            Symbol.for();
            return v20;
        }
        f16();
        %OptimizeFunctionOnNextCall(f16);
    }
    new Uint16Array(209);
}
[140693.55968437064,-1.1852842353837545,1.7976931348623157e+308,0.2891882798796017,1000000.0,-405533.57654950966,-476160.9672552756,-1.2913968641498632e+308,-1.7976931348623157e+308,1000000.0];
[0.0,2.439947332797196];
const v30 = [3.554050204802966,2.0,-0.9893540922478827,835.4687088452995,1.0,-1000000000000.0,537.8799696886636,-129821.05993193889];
const v32 = Symbol.toPrimitive;
v30[v32] = f3;
Object.defineProperty(v30, "valueOf", { writable: true, value: f8 });
const v34 = v30 <= "Z";
v34 && v34;
36002 % 36002;
const v38 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
function f39() {
    %VerifyType(Uint8Array);
    return "Z" >> v32;
}
v38.toString = f39;
function f41(a42) {
    a42 ^ a42;
    return 36002;
}
function f44(a45, a46) {
    a46.length;
    return f41;
}
const v49 = new Promise(f44);
v49[v38] += 36002;
const v52 = new BigInt64Array();
new BigUint64Array(127);
class C58 extends f8 {
}
for (const v59 in C58) {
}
new Int16Array(3);
let v63 = 10;
for (; v63--;) {
}
const v66 = [];
function* f67(a68, a69) {
    yield* v66;
    return a68;
}
const v70 = new Int8Array();
try { v70.entries(); } catch (e) {}
try { new Array(v52); } catch (e) {}
for (let v74 = 0; v74 < 10; v74++) {
    3811 >>> 3811;
    const v78 = Float64Array.of();
    const v79 = v78?.set;
    try { new v79(3811); } catch (e) {}
    v78.toString = f8;
    new Date();
    const v84 = Array(36862);
    try { v84.sort(36862); } catch (e) {}
}
new Uint8Array(1193);
new Float64Array(263);
[-9007199254740992,-268435456,11,9007199254740990,96025401,-65536,12,255];
class C94 {
    #g = 5483n;
    #e = 5483n;
    #d = 9n;
    c = 9n;
    8;
}
class C96 {
    get f() {
        const t95 = Date();
        t95[1024] = 1073741824n;
    }
}
new C96();
function F102(a104, a105) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f39;
    const v106 = this.constructor;
    try { new v106(a105); } catch (e) {}
    for (let v108 = 0; v108 < 5; v108++) {
        new Date();
    }
}
new F102();
const v112 = new C94();
[-3.555277632152693,0.8875320140334291,-0.0,1.0,-412.0963098221713,4.640011956102125e+307,-783439.9468182282,310231.27043130714,8.153989949457934,974838.3777621158];
const v114 = [3.0,-1.5434910396300392e+308];
const v115 = v114.entries();
const v118 = ("1000")["toUpperCase"]();
c = v112;
try { v115("toUpperCase", 5483n, v118, v114); } catch (e) {}
