function f1(a2, a3, a4, a5) {
    return arguments;
}
for (let v7 = 0; v7 < 5; v7++) {
}
let v10;
try { v10 = Symbol.keyFor(Symbol); } catch (e) {}
Symbol.e = v10;
function f11() {
    Array.__proto__ = this;
    return Array;
}
f11();
function f16() {
    return -8.011899050543597;
}
const v17 = [-2107733634,4];
[256,-58191,257,1421220115,1073741824,4294967297,-1995991055,-65536,-47650];
const v19 = [-65537,1875154844,16,10,1302554851];
class C20 extends f16 {
    static set d(a22) {
        function f23(a24, a25, a26, a27) {
            try {
                f23(a24, a25, a27, a27);
            } catch(e29) {
            }
            for (let v30 = 0; v30 < 5; v30++) {
                v30--;
            }
            return a25;
        }
        f23(f23, f23, f23, f23);
        const v35 = new Int32Array();
        const t33 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
        t33.b = v35;
        try {
            const t36 = null;
            t36.valueOf = v17;
        } catch(e38) {
            e38.stack;
        }
        const o42 = {
            "maxByteLength": 13,
        };
        const o44 = {
        };
        const v46 = Symbol.isConcatSpreadable;
        o44[v46] = v46;
        const v47 = new ArrayBuffer(13, o42);
        Promise.reject(Promise);
        function f51(a52, a53, a54, a55) {
            const v58 = new Int32Array(a53);
            v58[0] %= -1073741824;
            return v58;
        }
        f51();
        %OptimizeFunctionOnNextCall(f51);
        new DataView(v47);
    }
}
new C20();
const v62 = [-9007199254740991,256,5,4294967297,1,-38452,9223372036854775807,2147483649];
class C63 {
    constructor(a65, a66) {
        const v67 = a66[this];
        try { v67(v67, ...a66, ...v62); } catch (e) {}
    }
}
new C20();
new v19();
("h").split(65535);
