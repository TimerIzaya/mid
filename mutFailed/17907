function f0() {
    const o18 = {
        "f": "symbol",
        o(a5, a6) {
            for (const v7 of "iW") {
                ("symbol").length;
                const t5 = "iW";
                t5[-2095] = this;
            }
            let [v9] = "iW";
            return v9;
        },
        get b() {
            let v11;
            try {
            const t0 = "iW";
            v11 = t0(this, this);
            } catch (e) {}
            let v12 = 0;
            do {
                super["symbol"] = v11;
                super.d;
                try {
                    const t23 = "iW";
                    t23.h = "iW";
                } catch(e14) {
                }
                v12++;
            } while (v12 < 1)
            return -2095;
        },
    };
    return -2095;
}
const v19 = f0();
const v20 = f0();
const v21 = f0();
class C22 extends f0 {
    4098466395;
    constructor(a24, a25) {
        super();
        const o26 = {
        };
        try {
            o26.d = v20;
        } catch(e27) {
        }
        try {
            const o28 = {
            };
            o28.d = v20;
            o28.b = a24;
        } catch(e29) {
        }
        try {
            try {
                new f0();
            } catch(e31) {
            }
            super[a24];
            const o33 = {
            };
            o33.d = v20;
            o33.b = a24;
            o33.g = a25;
        } catch(e34) {
        }
        try {
            const o35 = {
            };
            o35.d = v20;
            o35.b = a24;
            o35.e = a25;
        } catch(e36) {
        }
    }
}
const v37 = new C22(v21, v20);
new C22(v21, v20);
new C22(v21, v20);
new Set();
class C42 extends Set {
    #n(a44, a45, a46, a47) {
        try {
            a44.#n(v37, this, f0, a47);
        } catch(e49) {
        }
        return a44;
    }
    #g;
    constructor(a51, a52) {
        /W(jy2)/udy.flags;
        new Uint8Array();
        new Uint32Array();
        function f60(a61, a62, a63, a64) {
            return f0;
        }
        for (let v65 = 0; v65 < 625; v65++) {
            f60(Uint8Array, 2, v65);
            try {
                a51 &= v20;
            } catch(e67) {
            }
        }
    }
    set b(a69) {
        throw v19;
        Object.defineProperty(v20, "a", { writable: true, configurable: true, get: f0, set: f0 });
    }
    #a = f0;
    13 = v20;
}
new C42();
new C42();
new C42();
new Int8Array(3663);
new Uint8Array(1759);
const v82 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f83(a84, a85, a86, a87) {
    const v88 = /(?:a*)+q(?<a>.)/guds;
    function f89(a90) {
        v82.constructor.isArray(v88);
        return a90;
    }
    for (let i95 = 0, i96 = 10; i95 < i96; i96--) {
        f89(v88);
    }
    return a84;
}
%OptimizeFunctionOnNextCall(f83);
let v105 = -2.220446049250313e-16;
class C108 {
}
const v109 = new C108();
const v110 = [v109,v109,v109];
const v111 = [C108,C108,C108];
const v112 = [v105,v111];
const v113 = ("number").slice(v111, v109);
const v115 = ("1G")["trimEnd"]();
++v105;
function F118(a120) {
    if (!new.target) { throw 'must be called with new'; }
    a120 / a120;
    const v122 = this.constructor;
    v122.name;
    try { new v122(-143547321); } catch (e) {}
}
function f125(a126, a127, a128) {
    const o148 = {
        "type": "number",
        "d": a126,
        [v112]() {
        },
        [536870912n](a131, a132, a133, a134) {
            const v135 = [-256,13351,5138,2,-4294967295,1000,268435440];
            class C136 {
                constructor(a138, a139) {
                    for (const v140 in this) {
                    }
                    Math.atan2(v135, -4294967297);
                }
            }
            class C144 extends C136 {
            }
            new C144();
            eval();
        },
        ...a128,
        268435441: v109,
    };
    return o148;
}
f125(v115, v115, f125(v110, v113, v112));
