const v0 = [2,58229,1814983385,-31573,-53372];
const v1 = [1073741823,70836603,5132,-2,180790236,-4294967295,61828,16,16,12];
[-9007199254740991,-1024,268435441];
4 != 4;
const v6 = new Uint16Array(4);
const v9 = new Int16Array(0);
const v12 = new Uint16Array(4);
try { v12.reduce(Int16Array); } catch (e) {}
("7")[0];
try { ("toString").blink(); } catch (e) {}
function F19() {
    if (!new.target) { throw 'must be called with new'; }
}
const v21 = new F19();
268435440 & 268435440;
v9 * 4;
-5.655173504179719e+307 & -5.655173504179719e+307;
let v29 = 268435440 >> v9;
4 + v9;
v29--;
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
}
F32.length;
const v37 = new F32();
const v38 = v37?.propertyIsEnumerable;
try { new v38(v6); } catch (e) {}
~591114.0785999324;
const v43 = [];
function F45() {
    if (!new.target) { throw 'must be called with new'; }
    const v47 = this?.__lookupGetter__;
    try { new v47(v1); } catch (e) {}
    9223372036854775807 >>> 9223372036854775807;
    const v52 = Date.toString(F45);
    try { v52.padStart(v52); } catch (e) {}
    const v54 = v52[23];
    try { v54.strike(); } catch (e) {}
    const v56 = v52.replaceAll(v21, -37859n);
    try { v56.replaceAll("f", -5.655173504179719e+307); } catch (e) {}
    try { new Uint32Array(v1, v0, Date); } catch (e) {}
    const v60 = new Uint32Array(Uint32Array, Uint32Array, 4);
    v60[2];
    const v64 = new Set(v43);
    const v65 = v64.add;
    v52.f = v65;
    try { v65(v60); } catch (e) {}
    const v68 = v64["delete"](839612.5677247904);
    v68 && v68;
    const v70 = v68 || v68;
    !v70;
    const v72 = v70 || v70;
    v72 && v72;
    v72 && v72;
    const v75 = v70 && v70;
    !(v75 || v75);
    const o79 = {
    };
    o79.b = o79;
    try { Array(9223372036854775807); } catch (e) {}
    let v82;
    try { v82 = v64.forEach(v72, v65); } catch (e) {}
    const v84 = -v68;
    v84 >>> v84;
    const v86 = Int16Array >>> v72;
    try {
        arguments.fuck(F19, arguments, 0, -1.0);
    } catch(e89) {
    }
    const v91 = ("getPrototypeOf").blink();
    const v92 = v91?.trimRight;
    try { new v92(); } catch (e) {}
    const v94 = v91[28];
    const v95 = v94.strike();
    try { v95.isWellFormed(); } catch (e) {}
    v95[4] = v95;
    const v98 = v91.strike(591114.0785999324).replace(19793, v37);
    v98[11] = v98;
    class C101 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C102 extends C101 {
        ["getPrototypeOf"] = C101;
    }
    C102.c = C102;
    const v103 = new C102();
    class C104 {
        static get c() {
            const v106 = `
            `;
        }
    }
    const v107 = v103?.getPrototypeOf;
    try { new v107(); } catch (e) {}
    const v109 = new F32();
    function f110(a111, a112, a113, a114) {
    }
    f110();
    Object.defineProperty(Float64Array, "valueOf", { enumerable: true, value: f110 });
    const v117 = v109.constructor;
    v117.length = v117;
    const v118 = new v117();
    try { v118.valueOf(); } catch (e) {}
    const v120 = new C102();
    const v121 = v120?.constructor;
    try { new v121(); } catch (e) {}
    const v123 = v120.getPrototypeOf;
    try { new v123(); } catch (e) {}
    const v126 = BigUint64Array.of();
    try { v126.entries(); } catch (e) {}
    new BigUint64Array();
    try { Int8Array(Int8Array, Int8Array, v82); } catch (e) {}
    new Int8Array();
    const v133 = new C102();
    const v134 = v133?.getPrototypeOf;
    try { new v134(); } catch (e) {}
    const v136 = v133.getPrototypeOf;
    try { new v136(); } catch (e) {}
    const v138 = new v136();
    const v139 = v138?.__defineSetter__;
    try { new v139(v86, v86); } catch (e) {}
    const v141 = v133.getPrototypeOf;
    v141.name;
    let v143;
    try { v143 = new v141(); } catch (e) {}
    v143.getPrototypeOf = v143;
    const v144 = new C102();
    const v145 = v144.getPrototypeOf;
    let v146;
    try { v146 = new v145(); } catch (e) {}
    v146.b = v146;
    try { v145(); } catch (e) {}
    let v148;
    try { v148 = new v145(); } catch (e) {}
    try { v148.propertyIsEnumerable(v98); } catch (e) {}
    const v150 = v148?.constructor;
    try { v150.toString(); } catch (e) {}
    v1.b = Set;
    function F153() {
        if (!new.target) { throw 'must be called with new'; }
        this.c = this;
        try {
            this.c = 19793;
            try { Array.of(); } catch (e) {}
            const v158 = Array(19793);
            try { v158.map(this); } catch (e) {}
            for (const v160 of v158) {
            }
            const v161 = [];
            const v163 = Symbol.toPrimitive;
            v161[v163] = Array;
            const v164 = [v161,v161,v161];
            try { Symbol.apply(Symbol, v163); } catch (e) {}
            v164[Symbol.toPrimitive] = Symbol;
            [v164,v164];
            Uint16Array.toString = Array;
        } catch(e170) {
        }
        try {
            this.b = 19793;
        } catch(e171) {
        }
    }
    try { v150.call(v94); } catch (e) {}
    let v173;
    try { v173 = new v150(v91, this, 4); } catch (e) {}
    let v174 = v173.getPrototypeOf;
    v174++;
    try { v173.constructor(); } catch (e) {}
    const v177 = v144.constructor;
    let v178;
    try { v178 = new v177(F45, v75); } catch (e) {}
    const v179 = v178?.constructor;
    try { new v179(); } catch (e) {}
    const v181 = v178?.getPrototypeOf;
    try { v181.toString(); } catch (e) {}
    v181.h = v181;
    const v183 = Array(19793);
    try { v183.with(Uint32Array, Uint32Array); } catch (e) {}
    for (const v185 of v183) {
    }
}
F45.g = F45;
new F45();
new F45();
