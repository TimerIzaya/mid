const v0 = [NaN,-2.220446049250313e-16,1.7542194205822949e+308,2.220446049250313e-16,926.6001028463788,NaN,-1.6046555104436195e+308,-6.629426372716488e+307,-2.2250738585072014e-308,2.0];
const v1 = [-1e-15,0.4685965724532073,4.0,-1000000000.0,705362.8094313878,-1.681966702901521,2.0,1.0,0.12031504072891874,-1.5329041055442037e+307];
const v2 = [9.107381553729248,-1.3585332604776763,-1000000.0,1.4755647123172042e+308,1000000.0,6.210486248797437e+306,963304.4393362387,-2.220446049250313e-16,-3.0,-8.328559987709237];
const v3 = [-1.6057913144104037e+308,-759.5198798505529,0.36221609592130244,-5.0,1000000.0,-509.0059878850841,4.0,1e-15,1.7976931348623157e+308];
let v4;
try { v4 = v3.find(v0); } catch (e) {}
[-1.0,Infinity,0.5556164152382514,1000000000.0,-4.748855067933013];
const v6 = [-1.7976931348623157e+308,0.0,1.3460558271882448,-571.8977716203419,4.0];
v6.g = v6;
const v7 = [-1676223207,4294967295,127];
const v8 = [1073741824,536870888,9007199254740990,268435439];
const v9 = [60861];
function F10(a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    const v14 = v4?.constructor;
    try { new v14(a13, a13); } catch (e) {}
    try { a13.pop(); } catch (e) {}
    try {
        this.a = a13;
    } catch(e17) {
    }
}
new F10(v7, v6);
const v19 = new F10(v9, v3);
v4.length = v19;
new F10(v1, v8);
v2 % 7.704514582589091e+307;
try { new Int16Array(Int16Array, Int16Array, v1); } catch (e) {}
new Int16Array(Int16Array);
const v31 = new Int8Array(0);
let v32;
try { v32 = v31.lastIndexOf(16); } catch (e) {}
v32 % v32;
Uint8Array.e = Uint8Array;
const v36 = new Uint8Array(257);
v36[117];
const v38 = [Int16Array,v36,16,16,16];
const v40 = [Int8Array,v31,[v38]];
try { v40.copyWithin(NaN, NaN); } catch (e) {}
let v43 = 1000000000.0;
v43--;
-(-1000000000.0);
2.2250738585072014e-308 + 2.2250738585072014e-308;
let v50 = 135.68951961804942;
v50++;
let v52 = 2183;
v52--;
new Int16Array(v52);
try { new Uint8Array(948737.12760097, v38, v32); } catch (e) {}
Uint8Array.e = 2.2250738585072014e-308;
Uint8Array.e = Uint8Array;
const v59 = new Uint8Array(255);
v59[243] = v59;
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v62 = new Int16Array(8);
let v64;
try { v64 = parseFloat(16); } catch (e) {}
v64--;
async function f66(a67, a68, a69) {
    a68 >>> a68;
    a69 ^ v19;
    const v72 = delete v62[-1000000000.0];
    v72 && v72;
    let [v74,v75,...v76] = 257;
    let v77;
    try { v77 = v76.toLocaleString(); } catch (e) {}
    let v78 = v77[5];
    v78--;
    await v75;
    return Uint8Array;
}
const v83 = +(-36313 / -36313);
const v85 = v50 / (-36313 + v50);
v85 & v85;
v83 || v85;
