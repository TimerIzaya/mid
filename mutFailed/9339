function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 65535;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
let v6 = new F0();
function f7() {
    return v5;
}
2003505391n / 2003505391n;
v5 & 2003505391n;
Object.defineProperty(v5, v6, { writable: true, configurable: true, enumerable: true, value: f7 });
for (let v11 = 0; v11 < 100; v11++) {
    f7();
}
try { ("-7").sup(); } catch (e) {}
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    a21.f;
    try { a22.padStart(f7); } catch (e) {}
    try {
        this.h = 13n;
    } catch(e25) {
    }
}
let v26;
try { v26 = F19.call("unicode"); } catch (e) {}
new F19(v4, "resizable");
const v28 = new F19(v5, "unicode");
v28.h = v28;
new F19(v4, "resizable");
const v31 = 16 | 16;
const t36 = "unicode";
t36[660] = 13n;
v6 <<= v26;
for (let v32 = 0; v32 < 100; v32++) {
    f7();
}
const v35 = new Date(v31);
v35.setFullYear(Date, v35, v31);
class C37 extends Date {
}
const v38 = new C37();
let v39 = v38.setHours(C37, C37, v38, C37);
v39--;
