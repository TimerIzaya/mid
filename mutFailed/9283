function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 128;
    } catch(e3) {
        const v6 = new Date();
        v6.setUTCMilliseconds(285215976);
        function f9() {
        }
        const v10 = [f9,f9];
        [v10,f9];
        new Float32Array(165);
        const v14 = [-9007199254740991,536870888,51292,-2147483649];
        const v15 = [536870912,-124426018];
        const v16 = [23930,454087404,65536,-6,-1955199007,1,1073741824,14];
        function f17(a18) {
            try { a18.map(v15); } catch (e) {}
            a18[0] = a18;
            const o32 = {
                "e": v10,
                "c": v15,
                "apply": Date,
                toString(a21, a22, a23) {
                },
                "a": this,
                "arguments": v14,
                [v16]: v16,
                "a": v16,
                [v14]: v16,
                get f() {
                    let {"h":v25,"length":v26,...v27} = v16;
                    this.toString = v25;
                    const v28 = [];
                    const o30 = {
                        [v28]: v28,
                        get h() {
                            return this;
                        },
                    };
                    for (const v31 in o30) {
                    }
                    return v27;
                },
            };
            return o32;
        }
        f17?.toString;
    }
    try {
        this.a = 128;
    } catch(e34) {
    }
}
const v35 = new F0();
const v36 = new F0();
const v37 = new F0();
function f38(a39, a40) {
    const o47 = {
        "e": a40,
        "b": v35,
        "g": v36,
        [a39](a42, a43, a44) {
            try {
                super.p(a40, a43, a39, a44, v36);
            } catch(e46) {
            }
            return a40;
        },
    };
    return o47;
}
f38(v37, v35);
const v49 = f38(v36, v37);
const v51 = [3.0];
function F52(a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
}
const v57 = new F52(-725.0347156854516);
new F52(v57, v51);
const v59 = f38(v36, v36);
function F60(a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a63;
    } catch(e65) {
    }
}
const v66 = new F60(v59, v37, F0);
new f38();
function F68(a70, a71, a72, a73) {
    if (!new.target) { throw 'must be called with new'; }
    const v74 = a72[1];
    try {
        with (a70) {
            F68(v74, a73);
        }
    } catch(e76) {
    }
}
const v77 = new F60(v66, v36, v49);
new F60(v37, v37, v77);
const v79 = [2.2250738585072014e-308,6.427477933354486e+307,1000000000.0,0.08682825617912271,-1000000000.0,3.0,228665.3903849495,0.5660155973967917,0.8606405474237848,3.0108403245603076e+307];
const v80 = [1000000000.0,12.305595805765165,2.0862036260312724e+307,-5.0,0.3227826650028378,-Infinity,-6.013642736236817,-6.180619420937975e+307,-1000000.0];
const v81 = [881266.4750531102,900.0211844391163,-148.3543184123963,-878.1424195424157,8.23394403026903,-1000000.0,4.0,1.7976931348623157e+308,-6.700826123638565,Infinity];
function F82(a84) {
    if (!new.target) { throw 'must be called with new'; }
    const v85 = this.constructor;
    try { v85(v80); } catch (e) {}
    v81.a = v79;
}
const v87 = new F82(v80);
const v90 = new Uint8ClampedArray(104);
v90.toLocaleString();
const o95 = {
    toString(a93) {
        class C94 {
            static [this] = a93;
        }
        return C94;
    },
};
const t121 = v87.constructor;
new t121(v87);
new F82(v79);
const v102 = /((?<=a))/gudm;
const v103 = /gk4b*/vmsy;
let v105;
try {
const t0 = 1e-15;
v105 = t0(2);
} catch (e) {}
for (let v106 = 0; v106 < 5; v106++) {
    const v107 = [-392.0576825237305,0.3449869706009556,4.447039970507995e+307,-5.063798246562485e+307,-568.9796177589394,388231.4033702491,-3.5365646375454567,0.12172568971863451,-4.474791203319841e+307];
    const v108 = [9007199254740992,-13,1,206834672,5792,16,856414023,8,2147483648];
    function f109(a110, a111, a112) {
        return f109;
    }
    const v115 = ["function",v108,v107];
    const o116 = {
        "arguments": v115,
        "type": 2,
    };
    new Worker(f109, o116);
    try { v105(v102, -6, v103, v106, -4); } catch (e) {}
}
