const v1 = new Map();
class C2 {
    static #o(a4, a5) {
        try {
            super.getUTCFullYear(Map, v1);
        } catch(e7) {
        }
        return this;
    }
    a = v1;
    static p(a9) {
        const v10 = a9 >= a9;
        if (v10) {
            let {"c":v11,"h":v12,} = this;
            v10 % v11;
        } else {
            this[v10];
            const o17 = {
                "maxByteLength": 4,
            };
            const v19 = new SharedArrayBuffer(4, o17);
            new BigUint64Array(v19);
        }
        return a9;
    }
}
new C2();
const v23 = new C2();
new C2();
let v27;
try { v27 = ("bigint").strike(); } catch (e) {}
"g" == "g";
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = this?.constructor;
    const v35 = [536870912,-9223372036854775807,64,-1144505356,-10,-13,10];
    [-16,256,9007199254740992,8,28804,6,-1073741824,1330686196];
    [-65535,1000];
    new F30(a32, v27);
    v35.length;
    try { new v34(a33, "getUTCDate"); } catch (e) {}
    this.c = F30;
    try {
        this.c = this;
    } catch(e41) {
    }
    try {
        this.f = a33;
    } catch(e42) {
    }
}
F30.arguments = F30;
const v43 = new F30("bigint", C2);
new F30("g", v43);
new F30("getUTCDate", v23);
const v47 = [BigUint64Array];
try {
    v23[255] ^= v27;
    const o50 = {
        "maxByteLength": 536870888,
    };
    const v52 = new ArrayBuffer(0, o50);
    new BigUint64Array(v52);
    new BigUint64Array(v47);
} catch(e56) {
    e56.message = e56;
}
