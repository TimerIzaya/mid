[-21034,474609924,-9,-4096];
const v1 = [65536,1562751896,-44869,128,65537];
[226941798,-2,1119783280];
for (let v8 = 0; v8 < 20; v8++) {
    v1.valueOf = v1;
}
const v11 = new Uint8Array(2, 2, Uint8Array);
const v13 = new Uint32Array();
function f14(a15, a16, a17, a18) {
    const o22 = {
        "b": a15,
        ...v11,
        n(a20, a21) {
            v13[a15] = v13;
        },
    };
    return v13;
}
f14(Uint8Array, 2, 10);
const t18 = -1086065058n;
new t18();
const v33 = [];
v33[Symbol.isConcatSpreadable] = v1;
v33["concat"]();
const v41 = new Uint8ClampedArray(8);
v41.lastIndexOf(73962578);
function f43() {
    const v45 = new BigInt64Array();
    const v47 = new Date(v45);
    class C49 {
        constructor(a51, a52) {
            try {
                super.n(1e-15);
            } catch(e54) {
            }
            try {
                super.getYear(a51, this);
            } catch(e56) {
            }
        }
    }
    const o63 = {
        [-1086065058n]: v47,
        get d() {
            this[2] /= -268435456;
            let v59 = -908890636;
            return Math.log(this & --v59);
        },
    };
    return o63;
}
function f64(a65, a66, a67, a68) {
    ("HEkWL").localeCompare("isArray", "isArray");
    for (let v72 = 0; v72 < 5; v72++) {
    }
    return a68;
}
for (let v73 = 0; v73 < 5; v73++) {
    f64();
}
const v75 = f43();
new Uint32Array(1024);
const v81 = new Uint8ClampedArray(16);
new Uint32Array(v81);
const v84 = f43();
v84.e = -10172n;
for (let v85 = 0; v85 < 25; v85++) {
    const v86 = [601759695];
    const v87 = [1073741824,1073741823,1376142744,1073741825];
    function f89(a90) {
        return f89;
    }
    const v91 = f89(undefined);
    function f92() {
        return f92;
    }
    const v93 = [v91,,];
    v93[1] = v93;
    const v94 = v93.group(Symbol);
    function f95(a96, a97, a98, a99) {
        a96[4] = v94;
        const v100 = a97.e;
        try { v100(a99, v100, v85, f43); } catch (e) {}
        a96[4] = a96;
        a97[4] = a97;
        try { v87["find"](..."find", a99, ...v86, ...v87); } catch (e) {}
        return v86;
    }
    for (let v104 = 0; v104 < 5; v104++) {
        f95(v75, v84);
    }
}
