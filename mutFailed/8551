function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 1017828820;
    } catch(e3) {
    }
    try {
        this.d = 1017828820;
    } catch(e4) {
        function f5() {
        }
        new f5();
        const v9 = new Float64Array();
        ("p").lastIndexOf(v9);
    }
    try {
        this.g = 1017828820;
    } catch(e11) {
    }
}
new F0();
const v13 = new F0();
const v14 = new v13();
const v17 = Float64Array?.constructor;
try { new v17(Float64Array); } catch (e) {}
const v19 = new Float64Array(3474);
try { v19.every(v19); } catch (e) {}
const v23 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
gc();
try { v14.constructor(); } catch (e) {}
const v29 = new Uint8ClampedArray();
v29[6] = 3;
class C30 {
    constructor(a32, a33, a34, a35) {
        const v36 = Uint32Array.constructor;
        try { new v36(); } catch (e) {}
        for (let v38 = 0; v38 < 5; v38++) {
            v23[v38] = a35;
        }
    }
}
new C30(v23, Uint32Array, Uint32Array, Uint32Array);
function f40(a41, a42, a43, a44) {
    return arguments;
}
for (let v46 = 0; v46 < 5; v46++) {
    const v47 = f40();
    v47[1] = v47;
}
new BigUint64Array(10);
function f52() {
    return f52;
}
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
}
const v57 = new f40();
v57.constructor = f52;
new BigInt64Array(13);
4n < 4n;
const v62 = new Float64Array(Float64Array);
for (const v63 in v62) {
}
new Int16Array(16);
function f67() {
    return 16;
}
%OptimizeFunctionOnNextCall(f67);
const v68 = f67();
v68 << v68;
gc();
const v72 = (a73, a74, a75, a76) => {
    'use strict';
    return a73;
};
