[1073741824,536870889,8,-2147483647,7,2147483647,127,-2];
[9223372036854775807,889997024,64256,14,60438,536870912,536870888,-8];
[65537,6,-4294967295,1024,11958];
function f6() {
    return "536870888";
}
const v7 = [1073741824,-65536,64,-4294967295,-4294967295];
[10,48859,1797688662,129,48746,129];
[-4294967297,-536870912,9223372036854775807,-5078,5,-565436509,268435456];
function f13() {
    function F14(a16, a17, a18, a19) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            const t13 = "ignoreCase";
            t13.__proto__ = v7;
        } catch(e24) {
        }
        const v26 = new Float64Array(1);
        v26.reverse();
    }
    return f13;
}
function f28(a29, a30) {
    function f31(a32, a33, a34, a35) {
        const v36 = a33++;
        class C37 {
            static [v36];
        }
        return f31;
    }
    return f31();
}
f13.valueOf = f28;
class C39 extends f13 {
}
class C40 {
    toString(a42, a43) {
        this.toString = f6;
        class C44 {
            constructor(a46) {
                for (let v47 = 0; v47 < 32; v47++) {
                    for (let v48 = 0; v48 < 5; v48++) {
                    }
                    const v49 = this.p16;
                    try { a46(C40, a42, v49, v49, v47); } catch (e) {}
                }
            }
        }
        new C44(this);
        const v52 = new C44(C40);
        new C44(v52);
    }
}
const v54 = new C40();
v54[Symbol.toPrimitive] = f28;
function f57(a58, a59, a60, a61) {
    const o62 = {
        [v54]: a59,
    };
    return C40;
}
f57(f57, C40, v54, f57);
f57();
function f65(a66, a67, a68, a69) {
    const v72 = new Int32Array(a67);
    v72[0] %= -1073741824;
    return v72;
}
f57();
class C74 extends C39 {
}
function f75(a76, a77) {
    const v79 = new Uint32Array();
    function f80(a81, a82) {
        const o90 = {
            [v79](a84, a85, a86) {
                a82?.[a84].__proto__;
            },
        };
        return a81;
    }
    return "536870888";
}
C74.valueOf = f75;
function f93(a94, a95, a96, a97) {
    let v98;
    try { v98 = a94(a97, 3, 3); } catch (e) {}
    a95 & a95;
    const v100 = 3 | C74;
    v100 * v100;
    a94 / a94;
    a95 < a94;
    const o107 = {
        n(a105, a106) {
            return a97;
        },
    };
    return v98;
}
for (let v108 = 0; v108 < 500; v108++) {
    f93(Uint8Array);
    f13.d = f13;
    new Int8Array(3391);
    new Int32Array(3276);
    new Float64Array(876);
    const v124 = new Float64Array(5);
    v124.valueOf = f75;
    const v125 = new Float64Array(v124);
    v124 ** v125;
}
var c = 255;
[Reflect,Reflect,Reflect];
Uint16Array[1] = Reflect;
new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
