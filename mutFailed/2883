class C3 {
    #d;
    #a = C3;
    h;
    b = 13;
    static [1000000.0];
    static {
    }
    constructor(a9, a10) {
        delete a9?.b;
        %VerifyType(Infinity);
        try { a9["of"](a9, "of", "of", "of", this); } catch (e) {}
    }
    25120751;
    [Infinity];
}
const v14 = new C3(C3, 1000000.0);
const v15 = new C3(v14, Infinity);
const v16 = new C3(C3, Infinity);
const v17 = [129,256,-757923335,43549,-4,-1024,-55630104,207788660,-2147483647];
[-5,9007199254740991,-2147483649,1024,-4294967296,268435440,-15,256];
[536870912,9007199254740991,1000,9,10250,-157026331,536870887,4,-1215224868,-1024];
class C20 {
    #d;
    static #toString(a22, a23, a24, a25) {
        try { a23.keys(); } catch (e) {}
        try {
            try {
                a25.#d;
            } catch(e28) {
            }
            %VerifyType(this);
            v16.#d;
        } catch(e30) {
        }
        return this;
    }
    [v17];
    static b = 13;
    [v14] = 1000000.0;
    static [v14] = v15;
}
new C20();
new C20();
new C20();
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this.constructor;
    try { new v39(a38); } catch (e) {}
    a38 == a38;
    a37 !== a37;
    this.g = a38;
}
new F35(F35, -418967591n);
const t54 = 13;
new t54();
