const v4 = new Map();
function f5(a6, a7) {
    a6.d = a6;
    const v8 = Map?.d;
    try { new v8(); } catch (e) {}
    a7 - a7;
    const o11 = {
        [v4]: a7,
        "c": v4,
        "a": a6,
        [2147483647]: v4,
        [a7]: v4,
        ...v4,
        "g": 2147483647,
        "h": v4,
        10: 2147483647,
        ...v4,
        [a7]: a6,
        "b": a7,
        "e": v4,
        "f": Map,
        ...a7,
    };
    o11[10];
    return o11;
}
try { f5(Map, Map); } catch (e) {}
const v14 = f5(2147483647, 48956);
const v15 = f5(48956, 2147483647);
const v16 = f5(2147483647, v15);
v16[10];
const v18 = [v14,v14,v15,v15,v16];
try { v18.unshift(v16); } catch (e) {}
[0,48956,[v16,v16]];
function F22(a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    const v26 = a24?.constructor;
    try { new v26(a25, a24); } catch (e) {}
    a25 - a25;
    try {
        this.d = a25;
    } catch(e29) {
    }
    try {
        this.a = a24;
    } catch(e30) {
    }
    try {
        this.h = v16;
    } catch(e31) {
    }
}
const v32 = new F22(v14, 2147483647);
v32.h = v32;
const v33 = new F22(v15, 0);
v33.f = v33;
v33.d = v33;
const v34 = new F22(v16, 0);
v34.length = v34;
F22 + 129;
const v38 = Int32Array.length;
v38 + v38;
const v40 = new Int32Array();
BigInt64Array.c = BigInt64Array;
const v42 = new BigInt64Array();
const v43 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
const v44 = [-1.7976931348623157e+308];
function f45(a46, a47, a48, a49) {
    -a47;
    BigInt64Array[0];
    try { a46.entries(); } catch (e) {}
    const v53 = -a47;
    v53 - v53;
    try { a48.reduceRight(a46); } catch (e) {}
    const o62 = {
        toString(a57, a58, a59) {
            255n >= 255n;
            a48[a47] = a46;
            return 255n;
        },
    };
    return o62;
}
const v63 = f45(v42, 129, v44);
const v64 = f45(v40, 129, v43);
try { v64.toString(v4, v40, BigInt64Array); } catch (e) {}
for (let v66 = 0; v66 < 5; v66++) {
    -v66;
    v66 % v63;
    v43.b = v40;
}
