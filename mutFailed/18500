function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2() {
        h = this;
        const v4 = new Uint8Array();
        for (let v5 = 0; v5 < 5; v5++) {
            function f6() {
                v4.__proto__;
                return v5;
            }
            f6();
            %OptimizeFunctionOnNextCall(f6);
        }
        return v4;
    }
    this.toString = f2;
    this.g = this;
    try {
        this.g = F0;
    } catch(e10) {
    }
}
const v11 = new F0();
const v12 = new F0();
const v13 = new F0();
function f14() {
    try {
        v12.fuck(F0, v11, v11);
    } catch(e16) {
    }
    return F0;
}
v13[Symbol.match] = f14;
-965644223 - -965644223;
-305214516 >> v12;
typeof 3;
3 === "boolean";
3 >>> v12;
const v30 = v13[Symbol.match];
3 >>> 3;
const v32 = [3,-305214516,v13];
[v32,v32,v11];
[3,v13,3,v32];
this.constructor = Array;
Array.__proto__ = this;
const o45 = {
    "f": "stack",
    [v13]: v12,
    ...v30,
    "c": "-58525",
    268435456: v11,
    get b() {
        try { this.hasOwnProperty(this); } catch (e) {}
        const v42 = Array.constructor;
        try { new v42(v42); } catch (e) {}
        new v42(this, this, Array, Array, v42);
        return this;
    },
};
const o46 = {
    ...o45,
};
try { o46.toLocaleString(); } catch (e) {}
