class C3 {
    constructor(a5) {
        const o8 = {
            "maxByteLength": 4096,
        };
        const v10 = new SharedArrayBuffer(4096, o8);
        new Float32Array(v10);
    }
    static #a;
    static 1073741824 = "number";
}
new C3("number");
const v14 = new C3(C3);
new C3(v14);
function f16() {
    return v14;
}
f16[Symbol.toPrimitive] = f16;
class C22 extends C3 {
    get a() {
        !"number";
        512 % 44579;
        return (-329183708) ** C22;
    }
    1000;
    #b = 512;
    2;
    static e = "-5";
}
new C22();
new C22();
new C22();
function F37(a39, a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = Symbol;
    a40.valueOf = Symbol;
    ("function").toUpperCase();
    ~a40;
    const v46 = this.constructor;
    try { new v46(); } catch (e) {}
}
const v48 = new F37();
new F37(v48, f16, v48, v48);
function f53(a54, a55, a56, a57) {
    function f59() {
        let v60 = -268435456;
        let v61 = v60--;
        v61--;
        const v63 = v61 << v61;
        v63 * v63;
        return f59;
    }
    const v65 = [-25552.232795396703,-1e-15,-4.0,4.0,-1000000000.0,Infinity,5.418706939384283e+306,3.0,-5.0,1.7434284636811316e+308];
    function F66(a68, a69) {
        if (!new.target) { throw 'must be called with new'; }
    }
    function f70(a71, a72, a73) {
        return a73;
    }
    [Worker,Worker,v65];
    const o77 = {
        "arguments": v65,
        "type": "0TC",
    };
    new F66(f70, o77);
    f59.d = f53;
    return v65;
}
