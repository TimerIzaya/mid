const v0 = [0.47526356246524537,3.0,0.5047463087079733];
const v1 = [318.02327539843714,-7.309667468870098e+307,-1000.0,-941810.7859268265,-6.209524935223635e+307,-966.989076157255,-9.618351217241708,8.463824347692212e+307,1.2376607312945575e+308,-4.0];
const v2 = [1.4437996449398005e+308,3.0];
function f3(a4, a5) {
    const o8 = {
        "maxByteLength": 2723,
    };
    const v10 = new SharedArrayBuffer(2723, o8);
    new Uint32Array(v10);
    return v0;
}
Object.defineProperty(v2, "toString", { configurable: true, enumerable: true, value: f3 });
class C16 {
    constructor(a18, a19, a20, a21) {
        this.d = a21;
        function f22(a23, a24) {
            const v27 = new BigInt64Array(128);
            v27.indexOf(-11907, 4294967296);
            return v27;
        }
        a18[Symbol.toPrimitive] = f22;
        super[a18] = 1000000.0;
        try {
            this.d = 1.0;
        } catch(e33) {
        }
    }
    [v2] = v2;
    e;
    static 8;
    static #f = 1000000.0;
    #b;
}
new C16(v0, 1000000.0, v1, v2);
new C16(v0, 1000000.0, v0, v1);
new C16(v0, 1000000.0, v0, v0);
try { Float64Array.from(null); } catch (e) {}
