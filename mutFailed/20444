function f0() {
    const v5 = 10 << 10;
    f0 % v5;
    let v7 = f0 instanceof f0;
    v7 %= v7;
    ("replaceAll").length;
    new f0();
    function f10() {
        for (let v11 = 0; v11 < 5; v11++) {
            v11 & f10;
        }
        return f10;
    }
    f10();
    const o20 = {
        "h": "number",
        ["replaceAll"]: -1.3391878620518586e+308,
        ..."replaceAll",
        ["number"]: "number",
        "e": -1.3391878620518586e+308,
        "f": -1.3391878620518586e+308,
        o(a15) {
        },
        "f": 10,
        __proto__: "number",
        toString(a17, a18, a19) {
            return v5;
        },
        "c": "replaceAll",
        /*
        __proto__: "number",
        */
        "b": "replaceAll",
        ..."number",
        "a": "replaceAll",
        ..."number",
        "g": -1.3391878620518586e+308,
        [-1.3391878620518586e+308]: -1.3391878620518586e+308,
        "d": -1.3391878620518586e+308,
    };
    return o20;
}
const v21 = f0();
new Uint8Array(268435440);
const v28 = [Uint8Array,0];
function F30(a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e34) {
    }
}
function f35(a36, a37) {
    function f39(a40) {
        return a36 ^ a37;
    }
    this.onmessage = f39;
}
const o44 = {
    "type": "function",
};
new Worker(f35, o44);
new BigInt64Array(2147483649);
const o49 = {
    "arguments": v28,
    "type": "function",
};
f0();
const v51 = f0();
const v52 = [v51,f0,f0,v51];
[v21,v52,v52,v51,v51];
[v21,v51];
new Int32Array(3703);
new Int32Array(7);
class C62 {
}
class C63 {
    static #a = C62;
    static {
    }
}
new Int8Array();
function F69(a71) {
    if (!new.target) { throw 'must be called with new'; }
    const v72 = this?.constructor;
    try { new v72("toString"); } catch (e) {}
    a71[5];
}
new F69("toString");
new BigInt64Array(2185);
new Float32Array([0.12475621559067818,-1e-15,974.1787307240129,1.0,-1.625776868102476e+308,-0.0,-2.220446049250313e-16,5.0,1.7976931348623157e+308]);
[[]];
