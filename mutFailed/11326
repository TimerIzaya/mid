const v1 = new WeakMap();
let v2 = 636901854n;
function f5() {
    return -943223507n;
}
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    function f12() {
        return a11;
    }
    v1[2180993614] = v1;
    delete a10?.d;
    for (let v14 = 0; v14 < 32; v14++) {
        a8["p" + v14] = v14;
    }
    function f17(a18) {
        Array(4087);
    }
    Object.defineProperty(this, "c", { configurable: true, enumerable: true, get: f12, set: f17 });
    try {
        this.e = v2;
    } catch(e22) {
    }
    try {
        this.c = a9;
    } catch(e23) {
    }
    try {
        this.h = a8;
    } catch(e24) {
    }
}
let v25 = f5();
Object.defineProperty(v1, F6, { enumerable: true, value: 2063422144n });
v2 = v25;
[[WeakMap,[-943223507n,2063422144n],f5,v25],v25,v25,v1];
const v29 = new F6(2063422144n, 2063422144n, f5, v2);
const v31 = [1073741824,255,-93221804,1,268435440];
v31.length = 512;
const v35 = v31["concat"]([Uint32Array]);
const v36 = new F6(v2, -943223507n, WeakMap, v29);
new F6(-943223507n, 2063422144n, v36, v36);
function F41(a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
}
const v46 = new F41();
v25 %= v25;
("concat")["trimStart"]();
Math.cbrt(v35);
Math.atan(6);
Math.abs(v35);
v35 * v25;
function f56(a57, a58, a59, a60) {
    try { a57(v46); } catch (e) {}
    try { a59(); } catch (e) {}
    const o66 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o66);
    const o71 = {
        n(a69, a70) {
            return a60;
        },
    };
    return a60;
}
for (let v72 = 0; v72 < 500; v72++) {
    f56();
}
