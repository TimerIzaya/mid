function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -26570;
    } catch(e3) {
    }
}
const v4 = new F0();
new F0();
const v6 = new F0();
const v7 = v6?.constructor;
try { new v7(); } catch (e) {}
function f9() {
    return v4;
}
-65084 - -65084;
[-5.0,-3.0,-9.972316103945499,909.6325337112328,2.220446049250313e-16];
[-986.1993246455478,1.7976931348623157e+308,-69119.55310919124,-2.2250738585072014e-308,-3.0,-1000000000.0,9.137388364891876,-1000000000000.0];
([1.2539893929934323,-1000000.0,-9.79276001069593e+307,3.0,-1e-15,697.6801329086372,-1000000.0]).length;
const v18 = [];
try { v18.concat(-14); } catch (e) {}
const v20 = [];
class C21 {
    static {
        try { this.bind(v18); } catch (e) {}
        for (let v24 = 0; v24 < 25; v24++) {
            function f25(a26, a27, a28, a29) {
                const v32 = new Float32Array(this, a29, v24, -14);
                function f34() {
                    return a26;
                }
                let v36;
                try { v36 = new Date(this, v24, 84, f25, v24); } catch (e) {}
                try { v36.setFullYear(v36, v18, f9); } catch (e) {}
                const v38 = new Date();
                try { v38.getUTCHours(); } catch (e) {}
                const v40 = [2147483647,31400,-1283953271,-13,-3,9007199254740991,0];
                try { new Proxy(v20, a29, v24); } catch (e) {}
                const v43 = new Proxy(v40, v38);
                v43[3] = v43;
                v43[0] = v43;
                const o44 = {
                    __proto__: v43,
                };
                try { o44.copyWithin(v32, v32); } catch (e) {}
                o44[2] = o44;
                const v46 = v32.constructor;
                v46.prototype = v46;
                class C47 extends v46 {
                }
                function f48(a49, a50) {
                    a50 | a50;
                }
                f48.name = f48;
                try { f48(f25, v24); } catch (e) {}
                %OptimizeFunctionOnNextCall(f34);
                const o53 = {
                    __proto__: arguments,
                };
            }
            for (let v54 = 0; v54 < 5; v54++) {
                f25();
            }
        }
    }
}
try { new C21(); } catch (e) {}
