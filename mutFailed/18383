let v7 = 3570;
const v10 = ("string").normalize("NFKD");
const v12 = new Date();
try { v12.getUTCDay(); } catch (e) {}
for (let i18 = 0, i19 = 10;
    i18 < i19;
    (() => {
        function f23() {
            return f23;
        }
        const v24 = [601759695];
        const v25 = [1073741824,1073741823,1376142744,1073741825];
        function f27(a28, a29, a30, a31) {
            function f33() {
                return a28;
            }
            const v34 = f23();
            const v36 = new Int8Array();
            function f37(a38, a39) {
                return v34;
            }
            const v40 = f37();
            for (const v41 of v24) {
                ("z4HnR")[3766];
                new Float32Array(16);
                new BigUint64Array(4096);
                new BigInt64Array(127);
            }
            const v52 = f37();
            const v53 = v36.buffer;
            Object.defineProperty(v53, "constructor", { writable: true, configurable: true, value: Date });
            new Int8Array();
            let v56 = 1000000000000.0;
            v56--;
            v52();
            Object.defineProperty("string", "length", { configurable: true, get: f23, set: v40 });
            try {
                f33();
            } catch(e62) {
            }
            v53.slice(2147483648);
            %OptimizeFunctionOnNextCall(f33);
            new Float32Array(1);
            new Uint8ClampedArray(1250);
            new Float32Array(11);
            let v74;
            try { v74 = v25["find"](..."find", a31, ...v24, ...v25, ...522675525n); } catch (e) {}
            Symbol("find");
            const v78 = new Uint8ClampedArray();
            const o79 = {
                ...v78,
            };
            v74 <= a30;
            return arguments;
        }
        for (let v81 = 0; v81 < 10; v81++) {
            f27();
        }
        i18++;
    })()) {
}
new Int32Array(v7);
function f89() {
    parseInt(([1946,1946,1946,1946]).toSpliced());
}
f89();
new BigInt64Array(1946);
function F96() {
    if (!new.target) { throw 'must be called with new'; }
}
[F96];
v10.constructor;
const o103 = {
};
try { ("JbyK").localeCompare("JbyK"); } catch (e) {}
const v106 = v7++;
v106 / v106;
new BigInt64Array(129);
const v111 = new Date();
function f112() {
    ([]).constructor;
    new Uint8Array(268435440);
}
f112();
v111.setSeconds(v111, "jFd1");
