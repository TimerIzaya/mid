h = 1.942502679900917e+307;
let v5 = (536870888)[0.4283917576459044];
Reflect.construct(1.942502679900917e+307, [-2147483648,v5 = -2147483648,536870888], -2147483648);
function f10() {
    return 1.942502679900917e+307;
}
const v11 = f10?.constructor;
try { new v11(-1000000000000.0); } catch (e) {}
function f13(a14) {
    return a14;
}
class C15 extends f13 {
    static h;
    static b = 10;
    [Reflect] = -1000000000000.0;
}
const v16 = [-1000000000.0,1.0,-213.18380732477453,-4.0,-1.4614959368637257e+308,-1000000000.0];
v16[5] = v16;
const v17 = [2.0,-5.0,382311.9408606547,489385.23240285367,0.43865732294787496,559118.9819405628,2.0,-6.09439286360452,257531.64402373345];
const v18 = [850333.2716450808,-4.613437417932083e+307,-5.0,-0.0,-1000000.0,1000.0,-9.081394752552406,3.0,-5.0,-7.9373679276873315];
new Uint8ClampedArray(Uint8ClampedArray);
try { new Uint32Array(-2147483648, 10, -2147483648); } catch (e) {}
new Uint32Array(4096);
new Uint16Array(7);
const v30 = Float32Array?.constructor;
try { new v30(Float32Array); } catch (e) {}
const v33 = 245 >>> 245;
let v34 = Int32Array;
let v35;
try { v35 = v17.concat(v33); } catch (e) {}
v34 = v35;
const v36 = 10 / 257;
function F37(a39, a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = Uint32Array;
    } catch(e43) {
    }
    try {
        this.d = v11;
    } catch(e44) {
    }
}
new F37(1.942502679900917e+307, v36, v18, v30);
new F37(-1000000000000.0, 1.942502679900917e+307, v16, 536870888);
new F37(0.4283917576459044, 0.4283917576459044, v16, 536870888);
const v48 = new v34(245);
v48[120] = v48;
new Float32Array(v48);
