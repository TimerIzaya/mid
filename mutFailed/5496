function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 22290;
    } catch(e3) {
    }
}
Uint32Array[1] = 15;
const v7 = new Float64Array(Uint32Array);
const v8 = new F0();
const v9 = new F0();
const v10 = new F0();
v10.a = v10;
class C11 {
    static n(a13) {
        return 6504;
    }
    static 69 = v8;
    #toString(a18, a19) {
        try {
            super.getUTCSeconds(a18, a19);
        } catch(e21) {
        }
        return this;
    }
}
const v22 = new C11();
const v23 = v22?.constructor;
try { new v23(); } catch (e) {}
const v25 = v7?.constructor;
v25.name = v25;
let v26;
try { v26 = new v25(); } catch (e) {}
const v27 = v26?.constructor;
try { new v27(); } catch (e) {}
const v29 = new v22();
const v30 = v10?.constructor;
try { new v30(); } catch (e) {}
const v32 = v29?.__lookupGetter__;
try { new v32(v8); } catch (e) {}
const v34 = new C11();
v7?.constructor;
try { new v27(); } catch (e) {}
class C37 {
    get h() {
        v8 << v9[9];
        return v34;
    }
    d = v10;
    524 = v10;
    static b;
    5;
    h;
    g = v10;
}
const v44 = new C37();
v44[524] = v44;
new C37();
const v46 = new v34();
try { Array.toString(); } catch (e) {}
const v50 = new Array(7);
try { v50.entries(); } catch (e) {}
try { v50.toReversed(); } catch (e) {}
~6;
Int8Array.e = v25;
try { new Int8Array(6, v9, v46); } catch (e) {}
try { BigUint64Array.from(v29); } catch (e) {}
try { v7.reduceRight(v25); } catch (e) {}
30895 + 30895;
const v67 = ~-1.2032034612141183e+308;
v67 - v67;
-(30895 ** -7);
