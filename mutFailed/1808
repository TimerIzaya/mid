const v0 = [];
class C1 {
    static #valueOf() {
        v0 - this;
        function F5(a7, a8) {
            if (!new.target) { throw 'must be called with new'; }
            const v9 = this.constructor;
            try { new v9(268435440n, a8); } catch (e) {}
            this.f = 268435440n;
        }
        const v11 = new F5();
        return v11;
        return this[2];
    }
    h = v0;
    static m() {
        v0.__proto__;
        const o17 = {
            "maxByteLength": 1833,
        };
        const v19 = new SharedArrayBuffer(1833, o17);
        new BigUint64Array(v19);
        return v19;
    }
}
const v22 = new C1();
const v23 = new C1();
new C1();
const v25 = /[Fa+b|c]/gvdm;
const v26 = /dRM(?:a*)*xyz?/ums;
const v27 = /\P{Decimal_Number}/gusy;
class C28 extends C1 {
    7;
    constructor(a30, a31, a32, a33) {
        super();
        a31.flags >>= C1.h;
        const v35 = v22[1];
        try {
            a31.g = v35;
        } catch(e36) {
        }
        const v39 = new Uint32Array(64);
        v22.constructor;
        v39.toString();
    }
    [-2] = v25;
}
new C28(v26, v27, v22, v26);
const v43 = new C28(v25, v26, v23, v26);
new C28(v25, v26, v43, v26);
class C46 {
}
new C46();
class C49 extends Set {
}
const t55 = C49.constructor;
t55(C49);
let v52 = 0.3050534209767637;
v52--;
new WeakMap();
const v57 = [BigUint64Array];
v57.pop();
function F60(a62, a63, a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
}
class C68 {
    o(a70, a71, a72, a73) {
        class C74 {
            static 44 = "EV";
        }
        new C74();
        new C74();
        new C74();
        return 0;
    }
    static #f = 0;
}
new C68();
const v79 = Math.__defineSetter__;
try { v79(); } catch (e) {}
Math.sinh();
const o82 = {
};
if (5) {
    function F83(a85, a86) {
        if (!new.target) { throw 'must be called with new'; }
    }
    for (let v87 = 0; v87 < 5; v87++) {
        function F88(a90, a91) {
            if (!new.target) { throw 'must be called with new'; }
        }
    }
    const v94 = new Int32Array(1024);
    for (const v95 of v94) {
        const o98 = {
            "maxByteLength": 1293466293,
        };
        new SharedArrayBuffer(1796, o98);
    }
}
const o102 = {
    ...v57,
    ..."EV",
    [v25]: C1,
    "type": "EV",
    "type": "EV",
    "type": "EV",
};
