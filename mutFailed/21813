function f0() {
    class C4 {
    }
    const v5 = new C4();
    const v6 = ("a").constructor;
    let v7;
    try { v7 = new v6(); } catch (e) {}
    v7.c = v5;
    const o17 = {
        10: "number",
        "h": "a",
        "g": "number",
        11: "a",
        ..."a",
        ..."number",
        "a": "number",
        ..."number",
        __proto__: "number",
        toString(a9, a10) {
            new Int32Array(1024);
            new SharedArrayBuffer();
            this?.__lookupSetter__;
        },
        "e": -10,
        "c": "a",
        3: "a",
        "f": "number",
    };
    return o17;
}
const v18 = f0();
const v19 = f0();
const v20 = f0();
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = f0;
    } catch(e25) {
    }
    -9223372036854775808n <= 2.220446049250313e-16;
    Math.atan(0.6146752851534484);
    try {
        this.f = a23;
    } catch(e32) {
    }
    try {
        this.e = a24;
    } catch(e33) {
        function F34(a36, a37, a38) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C39 {
        }
        for (let v40 = 0; v40 < 5; v40++) {
            function f41() {
                const v43 = Symbol.toPrimitive;
                function f44() {
                    const o47 = {
                        m(a46) {
                            return f44;
                        },
                    };
                }
                v43.description.codePointAt(C39);
                return Symbol;
            }
            f41();
            %OptimizeFunctionOnNextCall(f41);
        }
    }
}
const v51 = new F21(v20, v18);
new F21(v20, v20);
const v53 = new F21(v19, v20);
class C54 {
    static p(a56, a57) {
        super.g = f0 ** a57;
        let {"c":v59,"e":v60,"g":v61,...v62} = v19;
        return v51;
    }
    constructor(a64, a65, a66, a67) {
        function f68(a69, a70) {
            a69 && v18;
            this[129];
            return a69;
        }
        f68(this, a67);
        const o77 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o77);
    }
}
new C54(v19, v53, v18, v18);
const v80 = new C54(v51, v18, v18, v51);
new C54(v18, v53, v18, v80);
for (let v85 = 0; v85 < 25; v85++) {
    const v86 = [601759695];
    const v87 = [1073741824,1073741823,1376142744,1073741825];
    function f88(a89, a90, a91, a92) {
        let v94 = 536870887;
        v94++;
        BigUint64Array * v94;
        try { v87["find"](..."find", a92, ...v86, ...v87); } catch (e) {}
        return v87;
    }
    for (let v99 = 0; v99 < 5; v99++) {
        f88();
    }
    try { ("imul").padEnd(v85); } catch (e) {}
    const v104 = new Uint32Array();
    for (let v105 = 0; v105 < 10; v105++) {
        f88(v104);
    }
}
