class C3 {
    static ["function"] = "compile";
    static get g() {
        const v6 = Symbol.iterator;
        const o15 = {
            [v6]() {
                let v8 = 10;
                const o14 = {
                    next() {
                        v8--;
                        const v12 = v8 == 0;
                        const o13 = {
                            "done": v12,
                            "value": v8,
                        };
                        return o13;
                    },
                };
                return o14;
            },
        };
        return o15;
    }
}
const v16 = new C3();
const v17 = new v16();
const v18 = new C3();
class C19 extends C3 {
    a = "function";
    constructor(a21, a22) {
        super();
        try {
            super.o("compile", "function", this);
        } catch(e24) {
        }
    }
    static #a = v18;
    set f(a26) {
        super[this.a] = C3;
        try {
            super.m();
        } catch(e32) {
        }
    }
}
new C19(v17, C19);
const v34 = new C19(v16, v16);
new C19(v18, v34);
function F36(a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a38;
    } catch(e40) {
    }
}
new F36("function", v18);
new F36(C19, v18);
new F36(v18, "function");
const v45 = new Float32Array();
const v48 = new C19(512);
v48["lastIndexOf"](v45);
