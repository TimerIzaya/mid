const v0 = [NaN,-5.0];
const v1 = [837119.571165279,-1.7976931348623157e+308];
const v2 = [5.0];
let v3 = "undefined";
const v6 = /U0a|bnL/msy;
v6.dotAll = v6;
/[\xe2\x81\xa3]/gudis;
const v8 = /S/gums;
v8.ignoreCase = v8;
const v10 = new WeakMap();
try { v10.delete(v1); } catch (e) {}
function f12(a13, a14) {
    try { a13.replaceAll(f12, WeakMap); } catch (e) {}
    try { a14.fill(a13); } catch (e) {}
    a13 == a13;
    let v18;
    try { v18 = a14.fill(v6); } catch (e) {}
    try { v18.toString(); } catch (e) {}
    const o31 = {
        get h() {
            const v21 = this | this;
            v3 = a13;
            var f = a13;
            super[this];
            try { a14.splice(v21, v21, "join", v6, v1, v3); } catch (e) {}
            return v2;
        },
        valueOf(a25, a26) {
            try { a25.join("join"); } catch (e) {}
            return v1;
        },
    };
    return o31;
}
f12(v3, v1);
f12("wgC1I", v1);
f12(v3, v0);
function f35(a36, a37, a38, a39) {
    return a36;
}
f35.prototype;
const v41 = f35.name;
try { v41.toLocaleLowerCase(); } catch (e) {}
const v43 = f35();
-4294967297n > -4294967297n;
let v46 = -128;
v46++;
v46 - v46;
const v49 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v50 = [601759695];
v50[0];
try { v50.every(v50); } catch (e) {}
v50[0] = v50;
const v53 = [1073741824,1073741823,1376142744,1073741825];
let v54;
try { v54 = v53.toString(); } catch (e) {}
try { v54.valueOf(); } catch (e) {}
let v56 = 522675525n;
v56--;
function f58(a59, a60, a61, a62) {
    const v63 = a59?.find;
    let v64;
    try { v64 = new v63(v6); } catch (e) {}
    const v66 = arguments.toString();
    let v67;
    try { v67 = v66.codePointAt(v43); } catch (e) {}
    v67 == v67;
    function f69() {
        const v71 = ("Vre").toLocaleUpperCase;
        try { v71.constructor(a61); } catch (e) {}
        try { v71(); } catch (e) {}
        try { new v71(v71, -4294967297n, a61, v53); } catch (e) {}
        const v75 = ("Vre").fixed(f58);
        try { v75.codePointAt(v64); } catch (e) {}
        let v77;
        try { v77 = v75.localeCompare(a59); } catch (e) {}
        v77++;
        -4294967295 !== -4294967295;
        let v81 = -268435456;
        v81--;
        -(v81 + v81);
        const o98 = {
            "c": -4294967297n,
            [v56](a86, a87) {
            },
            ..."Vre",
            "maxByteLength": v46,
            "c": v50,
            valueOf(a89, a90) {
                return a89;
            },
            "e": -4294967295,
            "e": v81,
            "maxByteLength": -4294967295,
            "arguments": v49,
            ...v50,
            "type": "Vre",
            ..."Vre",
            valueOf(a92, a93) {
                return -4294967295;
            },
            ..."Vre",
            4: "Vre",
            "c": v81,
            "type": "Vre",
            "type": "Vre",
            toString(a95, a96, a97) {
                return a95;
            },
            5: -4294967295,
            6: v81,
        };
        o98.valueOf();
        return f58;
    }
    try { f69(); } catch (e) {}
    const v101 = f69.length;
    v101 << v101;
    const v103 = v101 * v101;
    v103 >>> v103;
    f69();
    Int8Array.a = Int8Array;
    const v107 = new Int8Array();
    let v108;
    try { v108 = v107.entries(); } catch (e) {}
    const v109 = v108?.constructor;
    try { new v109(v101); } catch (e) {}
    try { v109.findIndex(v43); } catch (e) {}
    const v112 = v107.buffer;
    try { v112.resize(arguments); } catch (e) {}
    const v114 = v112.slice();
    try { v114.resize(v114); } catch (e) {}
    %OptimizeFunctionOnNextCall(f69);
    ("find")[0];
    ("find").strike();
    try { v53["find"](..."find", a62, ...v50, ...v53, ...v56); } catch (e) {}
    return v53;
}
for (let v120 = 0; v120 < 5; v120++) {
    v120 > v120;
    f58(v50, v120, v120, v53);
}
%PrepareFunctionForOptimization(f58);
const v123 = f58();
v123[3] = v123;
%OptimizeFunctionOnNextCall(f58);
WeakMap(v123, f58, v46, v43);
