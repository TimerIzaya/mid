const v1 = [1.7976931348623157e+308,0.14033774481022865,0.764442389288067,-2.220446049250313e-16,710.5353911028728,1000000.0];
const t0 = 1024;
const v2 = new t0();
v1[4294967295] = v2;
const v5 = new Float64Array(Float64Array, Float64Array);
class C6 extends Int16Array {
}
const v7 = new C6();
const o8 = {
    __proto__: v7,
};
try { v5.every(o8); } catch (e) {}
const v11 = new Float64Array(1024, Float64Array, Float64Array);
let v12 = 63718;
Symbol.for(Symbol);
function f16(a17, a18) {
    const v19 = a18?.propertyIsEnumerable;
    try { v19(); } catch (e) {}
    const v21 = [];
    let v22;
    try { v22 = v21.with(v21, v21); } catch (e) {}
    const v24 = new Float64Array(v21, v22);
    const v25 = new Float64Array(v24, a17, v22);
    v25.values();
    return v25;
}
%PrepareFunctionForOptimization(f16);
new Float64Array(v12);
const v30 = new Int16Array(1024);
const v31 = [Int16Array];
[v11,v31,v31];
[v11,Int16Array,v30,v30,v11];
const v34 = [];
function f35() {
    return f35;
}
class C36 extends f35 {
    constructor(a38, a39, a40, a41) {
        super();
        function f42() {
            const v43 = [];
            let v44 = 4294967295;
            const v47 = new Uint8Array(1);
            Float32Array.from(v47);
            v43[6] = v44;
            const o55 = {
                get a() {
                    v12 %= v12;
                    return f42;
                },
                next() {
                    v44--;
                    return this;
                },
                "h": v43,
                "g": a39,
                ...v30,
                6: 1024,
                "a": a38,
                set byteLength(a54) {
                },
                "arguments": v34,
            };
            return o55;
        }
        if (v31 <= v34) {
            class C57 {
            }
            const v58 = new v12();
            const o59 = {
                __proto__: v58,
            };
            try {
                super.p(v11, v34, Int16Array);
            } catch(e61) {
            }
        } else {
            let {"g":v62,} = this;
        }
        for (let v63 = 0; v63 < 5; v63++) {
            f42();
            %OptimizeFunctionOnNextCall(f42);
        }
    }
}
new C36();
