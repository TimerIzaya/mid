class C3 {
    static [C3] = -1e-15;
    constructor(a5, a6) {
        try {
            this.d = a6;
        } catch(e7) {
        }
    }
    e;
    ["toString"] = "toString";
    5;
}
const v8 = new C3(C3, -1e-15);
const v9 = new C3("toString", v8);
new C3(v9, v9);
const v14 = [735.0257666748869,0.8927745243580386];
function f15() {
}
const o16 = {
};
function F18() {
    if (!new.target) { throw 'must be called with new'; }
}
const v20 = new F18();
v20.constructor;
function f22() {
    const o26 = {
        __proto__: f22,
        valueOf(a24, a25) {
            return a25;
        },
    };
    return -4096;
}
function F27(a29, a30, a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    for (let v36 = 0; v36 < 100; v36++) {
        const o40 = {
            6: undefined,
            "d": undefined,
            [a31]: 2105444095n,
            "e": v14,
            __proto__: v36,
            "g": 15,
            "b": -4294967296n,
            "arguments": this,
            valueOf(a39) {
                return a39;
            },
        };
        o40[1] = o40;
    }
}
new F27();
new F27();
const t55 = -15;
new t55();
const v52 = [Infinity,-2.0,2.220446049250313e-16];
[-971331.1004055343,0.6863590731415691,-1000000.0,-2.0];
function f57() {
    return v14;
}
function F58(a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a60;
    } catch(e62) {
    }
    try {
        this.c = this;
    } catch(e63) {
    }
    try {
        this.ignoreCase = v52;
    } catch(e64) {
    }
}
