const v3 = [0.5608441769709115,1000000000000.0,2.2250738585072014e-308,0.8541370601556278,-1.7976931348623157e+308,7.663709851718139,-2.0];
function f4(a5, a6) {
    try { v3.shift(); } catch (e) {}
    [5.0,0.3927813860835424,1.0];
    [2.220446049250313e-16];
    [-1.0];
    return a5;
}
v3[Symbol.toPrimitive] = f4;
const v13 = [1.0,1.4646932294864657e+308,-2.2426945085062684,-6.524806897916671];
v13[1];
6 - 6;
const v18 = new Uint16Array(6);
v18.toString = f4;
3 >>> 3;
const v22 = new Float64Array(3);
try { new Float64Array(Float64Array, v18, v22); } catch (e) {}
Float64Array.e = Float64Array;
const v26 = new Float64Array(3);
v26[1] = v26;
const v27 = [1.0];
v27.valueOf = Symbol;
129n / 129n;
-6n ^ -6n;
2n / 2n;
[-4.0,-0.0,1000000000.0,3.0,0.03187006169132567,-5.351525096988146,-1e-15,-1000000000000.0];
const v35 = [-688610.226146389,9.830646304044578,604655.8116907289,-7.588738541008995,-1.7976931348623157e+308,298.0989762846807,-677108.9190591004];
v35[Symbol.toPrimitive] = Symbol;
v35[4] = v35;
let v38;
try { v38 = v35.fill(-6n); } catch (e) {}
try { v38.toLocaleString(); } catch (e) {}
let v40;
try {
const t0 = 6;
v40 = t0(v13, v35, v27, v27, Uint16Array);
} catch (e) {}
let v41;
try { v41 = v40(); } catch (e) {}
v22[v18] >>= v41;
let v42;
try { v42 = v35.fill(v26, 3); } catch (e) {}
const v44 = Symbol.toPrimitive;
Object.defineProperty(v42, v44, { configurable: true, value: f4 });
Math.imul(v3, 2147483648);
let v49 = Math.expm1(2147483648);
v49++;
const v51 = ~v27;
const v52 = 1.8443849875045721 | v27;
const v53 = Math.tan(v3);
v53 - v53;
v51 | v52;
const v56 = [-987.1777751425428,193.79048667904,0.06267364379165852,0.563583806942342,-5.959620599421232,-5.0];
function f57() {
    function f58(a59, a60) {
        /[\ca]/gm;
        /(foo(?<=bar)baz)/gvimy;
        /(?=)?/gvimsy;
        return a59;
    }
    return f58;
}
function f64(a65) {
    try {
        v26.toString = a65;
    } catch(e66) {
    }
}
Object.defineProperty(v56, "toString", { configurable: true, enumerable: true, get: f57, set: f64 });
let v67;
try { v67 = v56.toString(); } catch (e) {}
v67[48] = v67;
const v68 = [560.3764338321384,2.831189514697529,-1.0,1000.0,-2.4858124652164726,1000.0,1000000.0,1000000.0,6.670434684407409e+307,-Infinity];
v68[3] = v68;
40 > 40;
const v72 = new Uint32Array();
function f73(a74, a75) {
    ([-1.5424212036356715e+308]).shift();
    return v44;
}
v72.valueOf = f73;
let v78;
try { v78 = v72.entries(); } catch (e) {}
try { v78.next(); } catch (e) {}
const v80 = v78?.next;
v80.g = v80;
try { new v80(); } catch (e) {}
const v82 = v72[40];
for (let v83 = 0; v83 < 5; v83++) {
    try { v82(); } catch (e) {}
}
const v85 = [-2.220446049250313e-16,-146030.0093347557,-759818.7684978913,1000000000000.0,-1.2175538670763404e+307];
[4.0];
const v88 = new BigUint64Array();
try { v88.entries(); } catch (e) {}
try { v88.entries(); } catch (e) {}
const v91 = /anVXYFzN(x)(x)(x)\3/gvdms;
v91.flags;
try { Math.floor(v40); } catch (e) {}
let v97 = Math.cosh(!v42);
v97--;
const v99 = v42 % 4;
v99 - v99;
const v101 = v72 || v72;
function f102(a103) {
    return f57;
}
v101.toString = f102;
try { v101.findLast(4); } catch (e) {}
-v72;
let v110 = ~Math.log1p(v72);
v110--;
const v112 = Math.cosh(v101);
v112 >>> v112;
try { v88.reduceRight(v91); } catch (e) {}
[-1.7976931348623157e+308,v85];
