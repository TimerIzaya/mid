function f0() {
}
("-7")[1];
14 - 14;
const v8 = new Uint32Array(14);
71 == 71;
const v11 = 71 - 71;
v11 >> v11;
new Float32Array(71);
const v16 = 2 / 2;
const v17 = -v16;
function f18(a19) {
    Object.defineProperty(v17, f18, { value: v8[this]() * v17 });
    return Uint8Array;
}
v16 % v16;
const o38 = {
    get b() {
        const v36 = Array.constructor;
        v36(Array, v36, v36, Array);
        return this;
    },
};
const o39 = {
    ...o38,
};
try { Uint32Array(Uint32Array, Float32Array, Float32Array); } catch (e) {}
const v42 = new Uint32Array(2);
let v43;
try { v43 = v42.entries(); } catch (e) {}
try { v43.next(); } catch (e) {}
try { v43.next(); } catch (e) {}
URIError.length = URIError;
class C47 {
    static #valueOf(a49, a50, a51) {
    }
}
const v52 = [723200.4184824808,-1000.0,-523437.54204506474,-964793.6675249395];
for (let v53 = 0; v53 < 20; v53++) {
    let [,v54,...v55] = v52;
}
let v56;
try { v56 = URIError.toString(); } catch (e) {}
let v57;
try { v57 = v56.at(Uint32Array); } catch (e) {}
v57[0] = v57;
Math.sin(/c(?:ab)|cde/vdmy.exec());
const v63 = new Date();
v63.getUTCHours();
const v66 = new Int32Array();
const v67 = v66?.entries;
try { v67(); } catch (e) {}
try { new v67(); } catch (e) {}
const v71 = new BigUint64Array();
try { v71.with(URIError, v66); } catch (e) {}
