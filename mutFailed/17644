class C3 {
    static #g;
    set a(a5) {
        try { a5.valueOf(); } catch (e) {}
        const v8 = Symbol.e;
        this[v8] = v8;
    }
    o(a10) {
        a10[9] = this;
        const v11 = /n(\2)(\1)[^xxx$f(?:foo)?]/vdisy;
        /a(?=b)c/gdi;
        /(?=)/vdimy;
        return v11;
    }
}
new C3();
new C3();
new C3();
function f17() {
    return C3;
}
[4.0,-1.6751249174093302e+308,2.220446049250313e-16,5.0,-2.2250738585072014e-308,Infinity];
[-287.98696679880015];
[Infinity,2.5885232318767337e+306,5.0,-4.0];
[2147483648];
const v26 = /(l{z})/s;
function F27(a29) {
    if (!new.target) { throw 'must be called with new'; }
    const v30 = this.constructor;
    try { new v30(v26); } catch (e) {}
    a29.b = a29;
}
new F27(v26);
new F27(v26);
function f34(a35, a36) {
    class C37 {
        constructor(a39, a40) {
        }
    }
    const o42 = {
    };
    gc(o42);
    for (let v44 = 0; v44 < 50; v44++) {
        new C37();
    }
}
new Promise(f34);
class C48 {
}
const v49 = new C48();
const v50 = [v49];
try { ReferenceError.from(v50); } catch (e) {}
function f53(a54, a55) {
    function f56() {
    }
    function f57(a58) {
    }
}
new Promise(f53);
