const v1 = new WeakMap();
const v4 = new BigInt64Array(128);
const v7 = new Uint32Array(51);
if (v1) {
    v4[-2] **= 128;
    const v8 = [128];
    [v7,WeakMap,v8];
    [Uint32Array,v8];
} else {
    v4[51];
}
const v14 = new Int32Array(5);
v14[3] = v14;
class C17 {
    get b() {
    }
    #e;
    c = 3.2255150730772826;
}
try { C17.bind(v14); } catch (e) {}
const v20 = new C17();
v20.b = v20;
function f21(a22, a23) {
    return a23;
}
v20.toString = f21;
const v24 = new C17();
v24.b = v24;
v24.toString = f21;
const v25 = new C17();
v25.c = v25;
class C26 {
    [v24];
    #toString(a28, a29, a30) {
    }
    [3.2255150730772826] = v20;
    188 = C17;
    static 3865;
    4 = v20;
    #g = C26;
}
try { C26.bind(C26); } catch (e) {}
try { C26.call(v20); } catch (e) {}
const v33 = new C26();
v33.e = v33;
const v34 = v33?.__lookupGetter__;
v34.length = v34;
function f35(a36, a37) {
    const o38 = {
        ...a36,
    };
    return a37;
}
try { v34(C26); } catch (e) {}
const v40 = new C26();
const v41 = v40?.constructor;
try { v41(); } catch (e) {}
const v43 = new C26();
v43[4] = v43;
function f44() {
    const t60 = "symbol";
    t60[v20] = v25;
    -943.3768400471749 >> -943.3768400471749;
    class C47 {
    }
    const v48 = C47();
    const v49 = C47();
    function f50(a51, a52) {
        const o61 = {
            [-943.3768400471749]: v49,
            ...v49,
            "execution": "symbol",
            [a52](a54, a55, a56) {
            },
            p(a58, a59) {
                this.toString(a59, this, v48);
                return -943.3768400471749;
            },
        };
        return o61;
    }
    return v33;
}
v43.constructor = f44;
const v62 = v43?.constructor;
try { v62(); } catch (e) {}
class C64 {
    static {
        this.e = this;
        const o67 = {
            "execution": "symbol",
            "type": "minor",
        };
        try { this(); } catch (e) {}
        let v69 = 0;
        ~v69;
        while ((() => {
                const v72 = v69 < 6;
                const v73 = !v72;
                v73 && v73;
                return v72;
            })()) {
            v69++;
            const v76 = [];
            const v77 = v7.constructor;
            try { new v77(BigInt64Array, v76, Int32Array, BigInt64Array); } catch (e) {}
            class C79 {
                constructor(a81) {
                    const v82 = this.constructor;
                    try { new v82(); } catch (e) {}
                    const v85 = new Float32Array();
                    v85.entries();
                }
            }
        }
        const v88 = new Uint8ClampedArray();
        const o89 = {
            ...v88,
        };
    }
}
