function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 268435440;
    } catch(e3) {
    }
    try {
        this.b = 268435440;
    } catch(e4) {
    }
    try {
        this.f = 268435440;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
const v9 = [v8];
const v10 = [v6,v8,v8,F0,v6];
const v11 = [v10];
class C15 extends F0 {
    constructor(a17, a18, a19) {
        super();
        v9.length;
        try {
            a18.b = F0;
        } catch(e21) {
        }
        const v23 = v11["forEach"](v6, a19);
        super.g = a17;
        try { v10.slice(v23, v23); } catch (e) {}
        try { ("forEach").startsWith("forEach", v23); } catch (e) {}
        v10 % "a";
    }
    static #g;
    static ["a"] = v7;
    a;
    230;
    #f = v8;
}
new C15(v11, v9, v10);
new C15(v11, v11, v10);
function f30(a31) {
    return "91";
}
class C32 extends f30 {
    a;
    14;
}
new C15(v11, v11, v10);
const v37 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F38(a40, a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    v37.__proto__.push(F38, a40, a40);
}
new F38();
