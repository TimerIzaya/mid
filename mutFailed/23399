const t0 = 413;
new t0(413);
const v5 = new BigUint64Array(1959);
new Uint8Array(4);
const v10 = new Date();
const v18 = [[]];
class C20 extends Map {
}
const v21 = new v5();
const v22 = new C20(v18);
const v23 = new C20(v22);
const v26 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
new Uint32Array();
const v30 = [601759695];
const v31 = [1073741824,1073741823,1376142744,1073741825];
function f33(a34, a35, a36, a37) {
    try { a34.toLocaleString(); } catch (e) {}
    const v39 = a34?.constructor;
    let v40;
    try { v40 = v39(); } catch (e) {}
    try { v39(); } catch (e) {}
    const v43 = arguments.length;
    Object.defineProperty(v21, "e", { configurable: true, enumerable: true, value: f33 });
    const v45 = v22["entries"](a36, ...v23, BigUint64Array, ..."entries", a35, v43);
    new Float32Array();
    class C49 {
    }
    class C50 {
    }
    const v52 = Symbol.toStringTag;
    v22[v52] = v52;
    function f53() {
        let v55;
        try { v55 = ("Vre").charAt(4096); } catch (e) {}
        try { v55.lastIndexOf("Vre", a34); } catch (e) {}
        let v57;
        try { v57 = ("Vre").codePointAt(v26); } catch (e) {}
        v57 - v57;
        v57 ^ v57;
        let v60 = Float64Array;
        v60 = a35;
        let v61 = v26.length;
        const v62 = v61++;
        try {
        } catch(e63) {
        }
        const o91 = {
            268435439: v30,
            ..."e",
            n(a65, a66) {
                return a66;
            },
            m(a68) {
                return v62;
            },
            m(a70) {
                return Map;
            },
            [f53]() {
            },
            ["entries"](a73, a74) {
            },
            valueOf(a76, a77) {
                return a76;
            },
            get h() {
                return v26;
            },
            [v31](a80, a81, a82) {
            },
            "toPrimitive": v40,
            get f() {
                return this;
            },
            [-4294967297n](a85, a86, a87, a88) {
                eval(a87);
            },
        };
        return v22;
    }
    f53();
    const v94 = Array();
    let v95;
    try { v95 = v94.findLast(f33); } catch (e) {}
    const v96 = v94.unshift("entries", v45, "entries", v95);
    let v98;
    try { v98 = (1.7976931348623157e+308).of(); } catch (e) {}
    let v99;
    try { v99 = v98.join(v18, v98); } catch (e) {}
    try { new v99(v39, v96, v10, Int8Array, ...arguments); } catch (e) {}
    try {
        Date("c");
    } catch(e102) {
    }
    const v103 = new Int8Array(v30);
    v103.c = v103;
    const v105 = v103.buffer.slice();
    try { Int32Array(v105, arguments, -4294967297n); } catch (e) {}
    function f108(a109, a110, a111, a112) {
        return a111;
    }
    const v113 = new Int32Array();
    const v114 = v113[3];
    v114 + v114;
    for (let v116 = 0; v116 < 5; v116++) {
    }
    try { v31["find"](..."find", a37, ...v30, ...v31, ...522675525n); } catch (e) {}
}
for (let v119 = 0; v119 < 10; v119++) {
    f33(v119);
}
%OptimizeFunctionOnNextCall(f33);
f33(Map, Map, v23, v23);
