new BigInt64Array(77);
let v5;
try { v5 = BigUint64Array.from(BigInt64Array); } catch (e) {}
const v6 = new BigUint64Array(3);
-3425;
new Float32Array(3425);
let [] = v6;
const v23 = 10 << Infinity;
const v24 = Math.sign(Infinity);
10 | BigInt64Array;
Math.log10(Infinity);
Infinity ^ v23;
Math.cos(64516);
~64516;
const v32 = [8.44159678189066e+307,69.19103544930294];
try { v32.copyWithin(-4n, -4n); } catch (e) {}
-0.0 & v24;
try { v5.copyWithin(10, BigUint64Array, v6); } catch (e) {}
const o38 = {
};
new Proxy(Proxy, o38);
1604 % 1604;
try { Int32Array.from(10n); } catch (e) {}
const v51 = (77).atan2(-0.0, -0.0);
v51 - v51;
