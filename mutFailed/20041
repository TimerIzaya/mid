const v0 = /f/gvimsy;
const v1 = /[abc+?]/gv;
const v2 = /\xe2\x81\xa3Wa|bc?/gvisy;
const v4 = new WeakMap();
function f8() {
    return WeakMap;
}
let v9 = 0;
do {
    -79219496 >>> f8;
    const o11 = {
        "apply": f8,
        "call": f8,
        "defineProperty": f8,
        "deleteProperty": f8,
        "get": f8,
        "getOwnPropertyDescriptor": f8,
        "has": f8,
        "isExtensible": f8,
        "ownKeys": f8,
        "set": f8,
    };
    new Proxy(v0, o11);
    v9++;
} while (v9 < 3)
class C20 extends WeakMap {
    constructor(a22, a23) {
        function F24(a26, a27, a28) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = -79219496;
            } catch(e29) {
            }
            try {
                this.e = a26;
            } catch(e30) {
            }
        }
        const v31 = new F24(8, -1, -63470);
        new F24(a23, 1234868898, a22);
        new F24(F24, v31, -1);
        super(v0);
        v0[-1 || a22];
        function F36(a38, a39, a40, a41) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                F36--;
                a23 ^ -1170008655;
                a41 ** -a23;
                --a41;
                a23 - -1170008655;
                ++a23;
                this.b = a40;
            } catch(e51) {
            }
        }
        new F36(v4, v2, v2, 1234868898);
        new F36(a22, -63470, a22, a23);
        new F36(a23, v0, 1234868898, -1);
    }
}
new C20(v1, -79219496);
new C20(v2, -63470);
new C20(v0, 8);
class C58 {
}
const v59 = C58.toString;
try { v59(); } catch (e) {}
