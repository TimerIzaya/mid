let v2 = -2.1657623955247987e+306;
class C3 {
    get b() {
        try {
            const t4 = "c";
            t4.__proto__ = this;
        } catch(e5) {
            super[e5] = "d";
            super[this] = e5;
            super.c;
            try {
                const t11 = "d";
                t11.g = e5;
            } catch(e7) {
            }
        }
        v2 **= v2;
        return this;
    }
    10;
    b = v2;
    h;
    a;
}
const v8 = C3?.constructor;
let v9;
try { v9 = new v8("d"); } catch (e) {}
const v10 = new C3();
const v11 = new C3();
function f12() {
    function f13(a14) {
        const v15 = ("d")[2];
        try { ("d").concat(v9, C3, v15); } catch (e) {}
        return a14;
    }
    return f13;
}
const v18 = Symbol.toPrimitive;
Object.defineProperty(v11, v18, { enumerable: true, get: f12 });
const v19 = v11?.__lookupSetter__;
try { new v19("c"); } catch (e) {}
const v21 = new C3();
function f22() {
    function f23(a24) {
        Object.defineProperty(C3, 14, { writable: true, enumerable: true, value: a24 });
        const o25 = {
            "apply": f12,
            "call": f12,
            "construct": Symbol,
            "defineProperty": Symbol,
            "deleteProperty": f12,
            "getOwnPropertyDescriptor": Symbol,
            "getPrototypeOf": Symbol,
            "has": f12,
            "isExtensible": f12,
            "preventExtensions": Symbol,
            "set": f12,
        };
        new Proxy(v18, o25);
        return a24;
    }
    return f23;
}
Object.defineProperty(v21, "toString", { writable: true, enumerable: true, get: f22 });
function f28(a29, a30, a31, a32) {
    function f33() {
        return f12;
    }
    Object.defineProperty(a32, Symbol.toPrimitive, { writable: true, configurable: true, get: f33 });
    a32[10] = a32;
    const o56 = {
        [v21](a37, a38, a39, a40) {
            function f41() {
                return v2;
            }
            return f41;
        },
        [v11](a43, a44, a45) {
            Object.defineProperty(a29, "e", { enumerable: true, get: eval });
            new BigInt64Array(1);
            new BigUint64Array(90);
            new Uint8Array(9);
            return eval;
        },
    };
    o56.h = v10;
    return o56;
}
try { f28.bind(v11); } catch (e) {}
f28(C3, f28(v11, C3, C3, v21), C3, v10);
const v60 = f28(v11, v11, v11, C3);
v60.h = f22;
v60.h = v60;
-4761 - -4761;
function f65() {
    let v67 = ("-536870912").normalize;
    Object.defineProperty(v67, "a", { configurable: true, enumerable: true, value: v67 });
    v67.a = v67;
    ("-536870912").g;
    try { new Uint16Array(v2, Uint16Array, v2); } catch (e) {}
    const v72 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    v72.length;
    for (let v74 = 0; v74 < 5; v74++) {
        function f75() {
            try {
                v72.forEach();
            } catch(e77) {
                e77.name;
                e77.a = e77;
            }
            const v80 = Symbol.toPrimitive;
            const v82 = v80.description;
            v82[15];
            Symbol.for(v82);
            v80.description;
            Symbol.for();
            return v80;
        }
        Symbol.for(f75().description);
        %OptimizeFunctionOnNextCall(f75);
    }
    v67 = v72;
    try {
        ("c").repeat(209);
    } catch(e92) {
    }
    new Uint16Array(209);
}
try { f65(); } catch (e) {}
const v95 = [140693.55968437064,-1.1852842353837545,1.7976931348623157e+308,0.2891882798796017,1000000.0,-405533.57654950966,-476160.9672552756,-1.2913968641498632e+308,-1.7976931348623157e+308,1000000.0];
v95[3] = v95;
[0.0,2.439947332797196];
const v97 = [3.554050204802966,2.0,-0.9893540922478827,835.4687088452995,1.0,-1000000000000.0,537.8799696886636,-129821.05993193889];
v97[Symbol.toPrimitive] = f12;
Object.defineProperty(v97, "valueOf", { writable: true, value: f65 });
const v101 = v97 <= "Z";
v101 && v101;
36002 % 36002;
const v105 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
v105.g = v105;
function f106(a107) {
    a107 ^ a107;
    return 36002;
}
function f109(a110, a111) {
    a110.length;
    a111.length;
    let v114 = a111.length;
    v114--;
    return f106;
}
f109.g = f109;
const v117 = new Promise(f109);
v117[v105] += 36002;
const v120 = new BigInt64Array();
new BigUint64Array(127);
-9007199254740992 >>> -9007199254740992;
class C127 extends f65 {
}
try { new C127(); } catch (e) {}
for (const v129 in C127) {
}
try { Int16Array.bind(254067393); } catch (e) {}
new Int16Array(3);
268435456 >> 268435456;
let v135 = 10;
for (; v135--;) {
}
Int8Array.g = Int8Array;
const v138 = [];
function* f139(a140, a141) {
    yield* v138;
    return a140;
}
const v142 = new Int8Array();
let v143;
try { v143 = v142.entries(); } catch (e) {}
const v144 = v143?.__lookupGetter__;
try { new v144(v143); } catch (e) {}
try { new Array(v120); } catch (e) {}
for (let v148 = 0; v148 < 10; v148++) {
    const v150 = 3811 >>> 3811;
    v150 | v150;
    const v153 = Float64Array.of();
    v153.buffer;
    const v155 = v153?.set;
    try { new v155(3811); } catch (e) {}
    v153.toString = f65;
    const v158 = new Date();
    const v159 = v158?.toGMTString;
    try { new v159(); } catch (e) {}
    const v162 = Array(36862);
    try { v162.sort(36862); } catch (e) {}
}
