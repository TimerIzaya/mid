new Float64Array(114);
new BigUint64Array(1303);
class C10 {
    [C10] = 23354;
    #h;
    1;
    [23354];
    [-4.055130549492246];
}
const v11 = new C10();
for (const v12 in v11) {
}
new BigInt64Array(2773);
new Float64Array(2);
new Int16Array(3427);
new Uint16Array(15);
const v31 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v32 = 0; v32 < 25; v32++) {
    v31["p" + v32] = v32;
}
const v36 = [601759695];
[1073741824,1073741823,1376142744,1073741825];
function f38(a39, a40, a41, a42) {
    function f43() {
        ("Vre")["concat"]("concat", a42);
        let v48 = Float64Array;
        v48 = a40;
        v31.length;
        try {
            Promise.reject(Promise);
            ("D")[0];
            const v56 = new BigInt64Array(3);
            let v58;
            try { v58 = Float32Array.from(v56); } catch (e) {}
            v58.forEach();
        } catch(e60) {
        }
        v11.toPrimitive;
        const o67 = {
            toString(a64, a65) {
                a65 && v48;
                return this;
            },
        };
        const o68 = {
        };
        new Proxy(Uint8ClampedArray, o68);
        o67[9] = a39;
        const o76 = {
            [-4294967297n](a72, a73, a74, a75) {
            },
            ...v36,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            5: -4294967295,
        };
        return f38;
    }
    f43();
    %OptimizeFunctionOnNextCall(f43);
    return -4294967297n;
}
for (let v78 = 0; v78 < 10; v78++) {
    f38();
}
%OptimizeFunctionOnNextCall(f38);
f38();
