const v8 = new Array(128);
function F9(a11, a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    function f15() {
        function f16(a17, a18) {
            for (let v19 = 0; v19 < 5; v19++) {
            }
            return v8;
        }
        return f16;
    }
    Object.defineProperty(this, "toString", { configurable: true, enumerable: true, get: f15 });
    try {
        this.g = a12;
    } catch(e20) {
    }
    try {
        this.e = a14;
    } catch(e21) {
    }
}
const v22 = new F9("5", -256n, "function", 65537n);
new F9("prototype", -256n, "5", 65537n);
const v24 = new F9("prototype", -256n, "function", 65537n);
function f25(a26, a27) {
    const v29 = [];
    function f30(a31, a32) {
        const v34 = new Uint8Array(47108);
        for (const v35 in v34) {
        }
    }
    v29.toString = f30;
    const o48 = {
        ..."5",
        [v24](a37, a38, a39) {
            let v41 = 450149850;
            Math.pow(v8, a37);
            Math.log(v41);
            Math.fround(-v41);
            v41++;
            ~a37;
            return 65537n;
        },
        "h": a27,
        "g": a27,
    };
    return o48;
}
f25(-256n, 65537n);
f25(-256n, -256n);
f25(65537n, -256n);
new BigUint64Array(2864);
let v57 = 2549;
v57--;
new BigInt64Array(v57);
try { Float32Array(v57, v57, undefined); } catch (e) {}
new Float32Array(3);
const v65 = /(J5a{0,1}?)/y;
v65[Symbol.toPrimitive] = Array;
/u?/udms;
/bf/gvms;
32 >>> 32;
let v72 = 32 + 32;
v72--;
new Uint8ClampedArray(32);
4096 & 4096;
try { new Uint8Array(BigUint64Array, BigUint64Array, 3); } catch (e) {}
new Uint8Array(4096);
let v82 = 1582 >> 1582;
v82--;
new Int8Array(1582);
4 - 4;
-54813 - -54813;
8 & 8;
const v92 = [-54813,1582,-54813,8];
const v93 = [-54813];
const v94 = [-54813];
v94.valueOf = Array;
try { v94.map(4); } catch (e) {}
function f96(a97, a98, a99, a100) {
    function f101(a102, a103) {
        const v104 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
        new Date(-2, v104, v104, v104, -2);
        return Float32Array;
    }
    Object.defineProperty(a97, "toString", { configurable: true, enumerable: true, value: f101 });
    try { a97.toString(); } catch (e) {}
    try { a98.groupToMap(a99); } catch (e) {}
    a99[0] = a99;
    try { a97.copyWithin(undefined, a98); } catch (e) {}
    const o119 = {
        n(a112, a113, a114, a115) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return this;
        },
        ...v94,
        "b": v92,
        ...a99,
        ...v94,
        129: 4,
        ...a97,
    };
    o119[2] = o119;
    return o119;
}
const v121 = f96(v93, 8, f96(v93, v94, v92, 4), 4);
v121[129] = v121;
const v122 = f96(v94, 4, 4, 4);
v122.d = v22;
v122.d = v122;
-26206 - -26206;
try { new Map(); } catch (e) {}
/ND2/gds;
class C130 extends Map {
}
const v131 = new C130();
try { v131.get(Uint8Array); } catch (e) {}
const v133 = v131.isPrototypeOf();
v133 && v133;
v133 && v133;
Date.name;
let v139;
try { v139 = Date.parse(4); } catch (e) {}
-v139;
class C141 {
    static {
        for (let v143 = 0; v143 < 25; v143++) {
            v143 >>> v143;
            const v145 = [601759695];
            const v146 = [1073741824,1073741823,1376142744,1073741825];
            function f148(a149, a150, a151, a152) {
                try { new a149(); } catch (e) {}
                a150 & a150;
                ~a150;
                try { new a149(); } catch (e) {}
                const v157 = a151 << a151;
                v157 % v157;
                function f160() {
                }
                const v162 = new Int8Array();
                const v165 = BigUint64Array * 536870887;
                let v166 = v165 - v165;
                v166++;
                const v168 = v165 ** v165;
                try { Number.parseInt(v166, v166); } catch (e) {}
                let v171;
                try { v171 = new Number(v65); } catch (e) {}
                v171.valueOf = Symbol;
                try { v171.valueOf(); } catch (e) {}
                Number.isNaN(v168);
                function f174(a175, a176) {
                    return Number;
                }
                try { f174(); } catch (e) {}
                v162.buffer.__defineGetter__;
                %OptimizeFunctionOnNextCall(f160);
                try { v146["find"](..."find", a152, ...v145); } catch (e) {}
                const o182 = {
                };
            }
            for (let v183 = 0; v183 < 5; v183++) {
                f148(this, v183, v183);
            }
        }
    }
}
