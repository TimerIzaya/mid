10000n * 10000n;
function f7(a8, a9, a10, a11) {
    a8--;
    a11 / a11;
    const o26 = {
        ...a9,
        1024: 1073741825,
        m(a15, a16, a17, a18) {
            this.b ^= a11;
            %VerifyType(a15);
            Math.floor(-10);
            const v22 = -10 - a15;
            Math.asin(-a15);
            return -v22;
        },
    };
    return o26;
}
f7(-65371, f7(1073741825, 10000n, f7(-65371, -23313n, -10, -65371), 1073741825), -10, -10);
-(-1736682328);
9007199254740990 * 9007199254740990;
try { Int32Array.from(Int32Array); } catch (e) {}
new Int32Array(4);
new Uint16Array(6);
let v42 = 0;
v42--;
const v45 = new Int32Array(v42);
try { v45.indexOf(v45); } catch (e) {}
class C48 {
}
const v49 = (2136873598).constructor;
v49.MAX_SAFE_INTEGER = v49;
const v50 = new v49();
v50.toExponential(C48);
