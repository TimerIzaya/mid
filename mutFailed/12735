const v0 = [-2,4294967296];
const v1 = [-1422,-4294967297,255,65536,1257882689,1591727556,-6];
const v2 = [13,536870887,-20812,-2006948978];
class C3 {
    set c(a5) {
        ({"h":a5,...a5} = this);
        try { v2.toSpliced(v0, v2, this, v2, this); } catch (e) {}
    }
    static {
    }
    constructor(a12) {
        new Float32Array(127);
        new Uint32Array(5);
        new Uint8ClampedArray(Uint8ClampedArray);
    }
}
new C3(v2);
const v23 = new v2(v1);
new C3(v1);
[-536870912,-33592,22582,256,-12,257,16,536870912];
[536870889,58155,512,2064952958,9007199254740990];
[3,-1,-4294967296,-250220261,16,-59429,9007199254740991,9223372036854775807,4];
function f33() {
    return Uint32Array;
}
function f34(a35) {
    Array(4087);
}
Object.defineProperty(Uint32Array, 3, { configurable: true, get: f33, set: f34 });
new Uint32Array(v2);
new Uint8ClampedArray(1);
new Uint32Array(126);
function f46(a47, a48, a49, a50) {
    for (let v51 = 0; v51 < 77; v51++) {
        const v52 = new a48(v51);
        for (let v53 = 0; v53 < 32; v53++) {
            v52["p" + v53] = v53;
        }
    }
    return a47;
}
f46[1] = v0;
function f56(a57, a58, a59, a60) {
    function f61() {
        Uint8ClampedArray & Uint8ClampedArray;
        Uint8ClampedArray << f61;
        ~(f61 * v2);
        return v0;
    }
    const v68 = f34.length;
    const v69 = v68 + v68;
    const v71 = new Int8Array(a57);
    const v72 = v71.buffer;
    v72.constructor = f33;
    function f73(a74) {
        return a74;
    }
    f73.constructor = f46;
    f73.constructor;
    const v76 = v72.slice(v68, a58);
    function f77(a78) {
        v76.slice(a78, v69);
        return f56;
    }
    return v69;
}
%PrepareFunctionForOptimization(f56);
Uint32Array[3] = v23;
const o83 = {
    "execution": "async",
    "type": "major",
};
gc(o83);
f56(f46, f56, f56, f46);
%OptimizeFunctionOnNextCall(f56);
f56(f56, f56, f56, f46);
