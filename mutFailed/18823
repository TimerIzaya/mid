const v0 = [9007199254740991,-1073741824,-25026,1682919031];
const v1 = [-30985,28779,-29785,-16,10000,1584563098];
[515396001,-27392,-9007199254740992,268435440];
new Uint32Array(2523);
new BigUint64Array(3756);
function f14(a15, a16, a17, a18) {
    function f20(a21) {
        return arguments;
    }
    Object.defineProperty(arguments, "toString", { enumerable: true, value: f20 });
    arguments.toString(a16, f14, f14);
    function f23() {
        let v24 = -268435456;
        const v25 = v24--;
        v25 << v25;
        return f14;
    }
    f23();
    return arguments;
}
f14(2147483647, Float64Array, BigUint64Array, f14());
new Uint8ClampedArray(10);
class C31 extends Uint8ClampedArray {
    72;
    static #d = Uint8ClampedArray;
    static {
    }
    constructor(a34, a35) {
        const v36 = this.constructor;
        try { new v36(); } catch (e) {}
        const v39 = Math.atan2(this);
        v39 ** v39;
    }
    static #valueOf(a42, a43, a44) {
        function F45(a47, a48, a49) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                function F50(a52, a53, a54) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                function f55() {
                    function f56(a57, a58) {
                        return f55;
                    }
                    const v60 = new Promise(f56);
                    v60.catch();
                    return f56;
                }
                f55();
                this.d = this;
            } catch(e63) {
            }
            try {
                try { new BigInt64Array(BigInt64Array); } catch (e) {}
                for (const v69 of Array(19793)) {
                }
                this.f = 3756;
            } catch(e70) {
            }
        }
        new F45(a44, a44, a42);
        new F45(v1, a44, 2523);
        new F45(a44, a43, 3756);
        return v0;
    }
}
new C31();
new C31();
new C31();
const v77 = [-Infinity];
class C78 {
}
const v79 = new C78();
v77 << v79;
for (let v81 = 0; v81 < 5; v81++) {
    const o82 = {
    };
    try { Reflect.defineProperty(o82, o82, v81); } catch (e) {}
}
