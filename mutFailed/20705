class C3 {
    o(a5, a6) {
        const o9 = {
            "maxByteLength": 1073741825,
        };
        const v11 = new ArrayBuffer(1, o9);
        new BigUint64Array(v11);
        return a5;
    }
    #e;
}
const v14 = new C3();
const v15 = new C3();
new C3();
function f20() {
    return C3;
}
class C21 {
    constructor(a23, a24) {
        a24--;
        Object.defineProperty(C3, a23, { configurable: true, enumerable: true, set: f20 });
        f20();
        268435441n === 268435441n;
    }
    static #n(a32, a33, a34) {
        const v35 = delete v15?.c;
        function F36(a38, a39) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = a38;
            } catch(e40) {
            }
            try {
                a33.d = a32;
            } catch(e41) {
            }
            try {
                this.b = a39;
            } catch(e42) {
            }
        }
        new F36(a34, this);
        new F36(v35, v14);
        new F36(65536, a32);
        return -8046n;
    }
}
try { new C21(v14, v14); } catch (e) {}
new C21(65537n, 4294967295);
const v48 = new C21(4294967295n, 4294967295);
const v49 = v48?.__defineSetter__;
let v50;
try { v50 = new v49(4294967295n, 4294967295n); } catch (e) {}
new C21(65537n, 4294967295);
try { Int16Array.bind(Int16Array); } catch (e) {}
const v55 = [Int16Array,Int16Array,Int16Array,Int16Array];
const v56 = [v55];
const v57 = v56?.groupToMap;
try { new v57(-8046n); } catch (e) {}
class C60 extends Map {
}
C60.name;
const v62 = new v50();
const v63 = new C60(v56);
const v64 = new C60(v63);
try { new BigUint64Array(v55, 4294967295n, -8046n); } catch (e) {}
5 - 5;
const v70 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v72 = new Uint32Array();
try { v72.subarray(v14, v64); } catch (e) {}
-4294967297n & -4294967297n;
const v76 = [601759695];
const v77 = [1073741824,1073741823,1376142744,1073741825];
522675525n >= 522675525n;
function f80(a81, a82, a83, a84) {
    try { a81.toLocaleString(); } catch (e) {}
    const v86 = a81?.constructor;
    try { v86(); } catch (e) {}
    let v88;
    try { v88 = v86(); } catch (e) {}
    const v90 = arguments.length;
    -v90;
    Object.defineProperty(v62, "e", { configurable: true, enumerable: true, value: f80 });
    const v93 = v63["entries"](a83, ...v64, BigUint64Array, ..."entries", a82, v90);
    new Float32Array(5, 5, v90);
    class C97 {
    }
    class C98 {
    }
    const v100 = Symbol.toStringTag;
    v63[v100] = v100;
    function f101() {
        let v103;
        try { v103 = ("Vre").charAt(4096); } catch (e) {}
        try { v103.lastIndexOf("Vre", a81); } catch (e) {}
        let v105;
        try { v105 = ("Vre").codePointAt(v70); } catch (e) {}
        v105 !== v105;
        const v107 = v105 - v105;
        v107 !== v107;
        v105 ^ v105;
        let v110 = Float64Array;
        v110 = a82;
        let v111 = v70.length;
        const v112 = v111++;
        v112 & v112;
        try {
            v77.forEach(a82);
        } catch(e115) {
            e115.name;
            e115.stack = e115;
        }
        const o134 = {
            268435439: v76,
            ..."e",
            m(a118) {
                return C98;
            },
            "c": -4294967297n,
            "EPSILON": v76,
            valueOf(a120, a121) {
                return Uint32Array;
            },
            1073741824: v72,
            "arguments": v55,
            get h() {
                return v103;
            },
            [v77](a124, a125, a126) {
            },
            [-4294967297n](a128, a129, a130, a131) {
                eval();
            },
            "arguments": 5,
        };
        return Int16Array;
    }
    f101();
    const v137 = Array?.constructor;
    try { new v137(v88); } catch (e) {}
    const v139 = Array();
    let v140;
    try { v140 = v139.findLast(f80); } catch (e) {}
    v139.unshift("entries", v93, "entries", v140);
    let v143;
    try { v143 = Int8Array.of(); } catch (e) {}
    try { v143.join(v86); } catch (e) {}
    const v145 = new Int8Array(v76);
    v145.c = v145;
    const v147 = v145.buffer.slice(v86);
    try { Int32Array(v147, arguments, -4294967297n); } catch (e) {}
    function f150(a151, a152, a153, a154) {
        return C97;
    }
    const v155 = new Int32Array();
    const v156 = v155[3];
    v156 + v156;
    for (let v158 = 0; v158 < 5; v158++) {
    }
    ("find")[2];
    try { v77["find"](..."find", a84, ...v76, ...v77, ...522675525n); } catch (e) {}
    return v155;
}
for (let v162 = 0; v162 < 10; v162++) {
    f80(v72);
}
%OptimizeFunctionOnNextCall(f80);
f80();
