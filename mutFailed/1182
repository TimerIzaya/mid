const v0 = [-1000000.0];
const v1 = [-2.220446049250313e-16,2.0,0.9092444017988345,-784463.7850998319,2.444597625267539,8.620671860159334,-3.0,2.561367715602007e+307];
function f2(a3, a4) {
    try { new a4(v0, a3, a3); } catch (e) {}
    class C6 {
        #e;
        static 3;
    }
    for (let v7 = 0; v7 < 25; v7++) {
        Object.defineProperty(C6, v7, { value: v7 });
    }
    return v1;
}
v0.toString = f2;
const v8 = [1000000000.0,-2.220446049250313e-16,-1000.0];
function F9(a11) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(v0); } catch (e) {}
    try { a11.copyWithin(v1, v1); } catch (e) {}
    try {
        this.b = a11;
    } catch(e14) {
    }
    try {
        this.f = v8;
    } catch(e15) {
    }
    try {
        this.g = a11;
    } catch(e16) {
    }
}
const v17 = new F9(v8);
new F9(v8);
new f2(v1);
let v22;
try { v22 = ("object").charCodeAt(v17); } catch (e) {}
Uint8ClampedArray.length;
const v30 = new v22(1907);
66 ^ 66;
512 - 512;
v30[7] = 43464885;
v30.fill(512, 66);
try { f2.entries(); } catch (e) {}
v30[-1] = 10;
