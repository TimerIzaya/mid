function f0() {
    const o21 = {
        o(a5) {
            try { a5.shift(this, this); } catch (e) {}
            super.f;
            return a5;
        },
        ...-7,
        valueOf(a9, a10) {
            %VerifyType(a10);
            const v15 = new BigUint64Array(3375);
            let [v16,,v17,...v18] = v15;
            v16--;
            return 1n;
        },
        7: 9007199254740990,
    };
    new Float32Array(7);
    function f25(a26, a27, a28, a29) {
        for (let v30 = 0; v30 < 5; v30++) {
            (2136873598).constructor.parseFloat(f25);
        }
        return f25;
    }
    f25(f25, f25, 7, 7);
    return o21;
}
const v35 = f0();
f0();
f0(v35);
new BigInt64Array(0);
new TypeError(68);
new WeakMap();
const v47 = [];
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    const v52 = this.constructor;
    try { new v52(a50, v47, F48, a50); } catch (e) {}
    v47[129];
    Math.asinh();
}
new URIError(0, TypeError, 68);
const v61 = [-6.672391061426152e+307];
function f62() {
    [f62,f62,f62,f62,f62];
    v61["pop"]();
    return v61;
}
%PrepareFunctionForOptimization(f62);
class C68 extends WeakMap {
    static [-9223372036854775808n];
}
function f69(a70, a71, a72, a73) {
    function f74() {
        function f75(a76) {
            return f69;
        }
        f75(f75);
        return f69;
    }
    f74();
    f74();
    %OptimizeFunctionOnNextCall(f74);
    return a71;
}
f69();
const v82 = new Int16Array();
const o83 = {
    ...v82,
};
const v84 = new o83();
switch (v84) {
    default:
        o83.toString();
        break;
}
