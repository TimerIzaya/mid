const v2 = new Uint8Array(13);
new Uint8ClampedArray(4);
const v8 = new Int8Array(186);
new Float64Array(506);
new Uint8Array(1215);
const v17 = new Float32Array(122);
function f18() {
    return f18;
}
const v20 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
Date.UTC(f18, f18, "string");
const v24 = new v17(-2, v20);
function f25() {
    Math.sinh(0);
    const o30 = {
        ..."raw",
    };
    function f31() {
        return f31;
    }
    function f33() {
        let [v34,,...v35] = v17;
        v35 >>>= v2;
        const o36 = {
            "getOwnPropertyDescriptor": Date,
            "isExtensible": Date,
        };
        new v34(o30, o36);
        Object.defineProperty(f25, 13, { enumerable: true, set: f31 });
        return v35;
    }
    f33();
}
const v44 = [f25,5.0];
[-1000000.0,-9.82871036065143,v20,v44,-9.82871036065143];
const v46 = [v44,v44,-9.82871036065143,5.0];
const o48 = {
};
async function f49(a50, a51, a52, a53) {
    return await v46;
}
f49();
function f56() {
}
const v58 = new BigInt64Array();
for (const v59 in v58) {
    class C60 {
    }
    class C61 {
        set e(a63) {
            v8[Int8Array];
            const v65 = C60.a;
            let v66;
            try { v66 = v58.findIndex(v65, v20); } catch (e) {}
            for (let v67 = 0; v67 < 100; v67++) {
                f49(v66, v44, v44, a63);
            }
            class C69 {
            }
            class C70 {
                static {
                }
            }
        }
    }
}
const o72 = {
};
("boolean").split(5.0);
v24.toTimeString();
