let v2;
try { v2 = BigInt64Array(BigInt64Array); } catch (e) {}
const v5 = new Uint8ClampedArray(1000);
v5.includes(undefined);
let v10;
try { v10 = Reflect.defineProperty(-12); } catch (e) {}
0.09837025008073552 !== 0.09837025008073552;
for (let i17 = 0, i18 = v2; i17 < i18; i18--) {
}
for (const v27 in v10) {
    const o28 = {
    };
    new Proxy(Reflect, o28);
    const v33 = new Int32Array(3239);
    new Float64Array(v33);
}
-437484.8463506384 >> -437484.8463506384;
function f40(a41, a42, a43, a44) {
    a43--;
    const o79 = {
        [undefined]() {
            super.b;
        },
        get c() {
        },
        "c": 0n,
        "f": a44,
        __proto__: a42,
        valueOf(a50, a51, a52, a53) {
            super.c **= -8;
            return a53;
        },
        set h(a55) {
        },
        "b": -2098624656,
        valueOf(a57, a58) {
            return this;
        },
        ...1000000000.0,
        m(a60, a61, a62) {
            super[a44] = a62;
            const v66 = [601759695];
            const v67 = [1073741824,1073741823,1376142744,1073741825];
            function f68(a69, a70, a71, a72) {
                a69 >>> a69;
                a71[3];
                ("find").codePointAt(v67);
                try { v67["find"](..."find", a72, ...v66); } catch (e) {}
                return a70;
            }
            return b;
        },
        ...a41,
        755: -61460n,
    };
    return o79;
}
f40.length;
f40(3, -437484.8463506384, -61460n, -2098624656);
class C84 extends Int8Array {
    [12];
}
f40(f40(-8, -61460n, 0n, 3), 0n, f40, 3);
const v87 = [536870887,-60324,23228695,26098,13,2];
const v88 = v87?.toSpliced;
let v89;
try { v89 = new v88(14n, v2); } catch (e) {}
new Int16Array(128);
new v10();
for (let v95 = 0; v95 < 5; v95++) {
    v95 >>> 128;
    function f97() {
        class C99 {
        }
        const v100 = new C99();
        const v101 = v100?.__lookupGetter__;
        try { new v101(v95); } catch (e) {}
        v100.isPrototypeOf(v87);
        const o111 = {
            4: v100,
            toString(a105, a106) {
                return this;
            },
            toString(a108, a109, a110) {
                return v10;
            },
        };
        %OptimizeFunctionOnNextCall(Int8Array);
        class C112 {
        }
        async function f113(a114, a115, a116, a117) {
            return await C112;
        }
        return v95;
    }
    f97();
    %OptimizeFunctionOnNextCall(v89);
}
