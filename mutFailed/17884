function f0() {
    new Date(-9223372036854775807);
    const v4 = [0.600959953156498,1.0,-Infinity];
    new Int8Array(v4);
    const o29 = {
        "e": -2147483647,
        1024: -1e-15,
        ..."valueOf",
        "maxByteLength": -9223372036854775807,
        [Int8Array](a11, a12, a13, a14) {
            function f15(a16, a17) {
            }
            return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
        },
        "b": -1e-15,
        268435441: -2147483647,
        "c": "valueOf",
        ["valueOf"]: -2147483647,
        ..."valueOf",
        [-2147483647]: -9223372036854775807,
        get f() {
            let v20 = 21370;
            const v22 = --v20;
            -1e-15 << 15;
            (v22 | 15) % 15;
            return f0;
        },
        ..."valueOf",
        "g": "valueOf",
        __proto__: "valueOf",
        ..."valueOf",
        /*
        __proto__: v4,
        */
        valueOf(a27, a28) {
        },
        "type": "valueOf",
        ...-1e-15,
    };
    const v30 = [-25552.232795396703,-1e-15,-4.0,4.0,-1000000000.0,Infinity,5.418706939384283e+306,3.0,-5.0,1.7434284636811316e+308];
    function F31(a33, a34) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v37 = [Worker,F31,v30];
    const o38 = {
        "arguments": v37,
        "type": "function",
    };
    return o29;
}
const v39 = f0();
const v40 = f0();
const v41 = f0();
class C45 {
    #b;
    constructor(a47, a48, a49, a50) {
        Object.defineProperty(v39, a50, { writable: true, configurable: true, get: f0 });
        try { a50.trim(a48, a50, this, this, a47); } catch (e) {}
        try { a49(a48, "keyFor"); } catch (e) {}
        try {
            a50.#b = v40;
        } catch(e53) {
        }
    }
    static f = v39;
}
new C45("e", "keyFor", "e", v39);
new C45("keyFor", "e", v39, v41);
new C45("keyFor", "keyFor", "boolean", v39);
class C57 {
}
this.escape();
function F60(a62, a63, a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    function f66() {
        return F60;
    }
    class C67 extends f66 {
        constructor(a69) {
            super();
            for (let v70 = 0; v70 < 25; v70++) {
                this["p" + "p"] = v70;
            }
        }
    }
    new C67();
}
function F77(a79, a80) {
    if (!new.target) { throw 'must be called with new'; }
    a79 % a79;
    a80 >>> a80;
    const v83 = this.constructor;
    try { new v83(0.8735699512350641); } catch (e) {}
    this.c = a79;
    this.g = a80;
}
new F77(-3.413527541634011e+307, 0.941857606566444);
const v86 = new F77(F77, 0.941857606566444);
new F77(0.941857606566444, 0.941857606566444, 0.941857606566444, v86, v86);
class C88 {
}
const v91 = Math.log1p(-4.600007534268795);
v91 + v91;
