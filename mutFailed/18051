const v3 = [-1000000000.0,1000000000000.0,-1000000000000.0,Infinity,1.0,217.36072363683115,-944.0733331528647,669407.875315469,-5.0,966.1002623995994];
const v4 = [-1000000.0,-1.0,-3.65533361634834,24069.891431465163,0.3573235169408573,5.3730298028195715,1000.0,5.988317627653239e+307,-2.0,6.831144072888328];
let v5;
try { v5 = v4.fill(8.21486810228065); } catch (e) {}
[-Infinity,Infinity,1.1682043401137824e+307,0.8037091787189926,1.7976931348623157e+308,-1000000.0,9.016758577624648e+307,-733548.3774868181];
let v7 = 160;
const v9 = new Uint8ClampedArray(v7);
v9[71] = v9;
const v13 = new Date();
v13.setUTCMilliseconds(-3);
v7++;
v5 - 2105444095n;
function f20(a21, a22) {
    const o26 = {
        968: a22,
        "d": a21,
        [268435439n]: a21,
        __proto__: -4294967296n,
        valueOf(a24) {
            return -4294967296n;
        },
    };
    return v5;
}
for (let v27 = 0; v27 < 100; v27++) {
    f20();
}
try { new Int32Array(v9, v9, v5); } catch (e) {}
const v34 = -35199 % (v3 / -1478256740);
v34 ^ v34;
const v36 = Date.constructor;
try { new v36(v7); } catch (e) {}
v36.bind();
new Int32Array(8);
const v42 = new Int8Array(114);
v42[80];
try { Float64Array.from(null); } catch (e) {}
