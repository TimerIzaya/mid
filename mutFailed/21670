const v0 = [-9,-65535,-9007199254740990,4096,9223372036854775807,-1047759267,-5,2];
const v1 = [1734998174,10000,9007199254740990,1000];
const v2 = [398361620,-11,536870887];
const v3 = /7a\b!/gvms;
const v4 = /O(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/vdim;
const v5 = /a*?(x)(x)(x)\3*/gms;
v5.b = v5;
function f6(a7, a8) {
    let v9;
    try { v9 = a7.toString(); } catch (e) {}
    try { v9.toLocaleLowerCase(); } catch (e) {}
    const o16 = {
        "h": a7,
        [v1](a12, a13) {
            const v14 = a7.dotAll;
            if (v14 !== a13) {
                a12[v1] = a8;
            } else {
                super[a13] = v14;
            }
            return v1;
        },
        ...v1,
        "g": a7,
        __proto__: a8,
        256: v2,
    };
    o16.f = o16;
    return o16;
}
try { new f6(v0, v5); } catch (e) {}
const v18 = f6(v3, f6);
v18[256] = v18;
const v19 = f6(v4, v18);
v19[256] = v19;
const v20 = f6(v4, v19);
v20[256] = v20;
const v23 = new Uint16Array(125);
let v24;
try { v24 = v23.toLocaleString(); } catch (e) {}
try { v24.trim(); } catch (e) {}
2306 >>> 2306;
new Float64Array(2306);
const v31 = 8 < 8;
const v32 = v31 && v31;
const v34 = new Float64Array(8);
try { v34.entries(); } catch (e) {}
function f36() {
}
function f37(a38, a39, a40) {
    function F41(a43, a44) {
        if (!new.target) { throw 'must be called with new'; }
        try { a44.toString(); } catch (e) {}
    }
    try { new F41(v2, v2); } catch (e) {}
    class C47 {
    }
    const v48 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v49 = [601759695];
    try { v49.findLastIndex(v23); } catch (e) {}
    for (let v51 = 0; v51 < 5; v51++) {
        function f52() {
            const t62 = "Vre";
            t62[2] = "Vre";
            const v54 = ("Vre").strike();
            let v55;
            try { v55 = v54.link(v0); } catch (e) {}
            Object.defineProperty(Array, 0, { configurable: true, value: Float64Array });
            const v58 = Array.from(Array);
            let v59;
            try { v59 = v58.find(v51); } catch (e) {}
            v59 = v32;
            v59 = v32;
            a40[Array] = f52;
            let v61 = -9932;
            ~v61;
            v61--;
            !v61;
            const v66 = Array().unshift();
            v66 > v66;
            const v69 = new Set();
            v69.add();
            Symbol.split = Symbol;
            class C72 {
            }
            try { C72.call(v51); } catch (e) {}
            const v74 = new C72();
            const v75 = v74?.constructor;
            let v76;
            try { v76 = new v75(); } catch (e) {}
            const v77 = v76?.constructor;
            try { new v77(); } catch (e) {}
            v74.__proto__ = F41;
            const v79 = Symbol.toPrimitive;
            Symbol.iterator = Symbol;
            const v82 = Symbol.for(v79.description);
            Symbol[Symbol] = Symbol;
            const v84 = 2306 < f52;
            v58[v84] = v84;
            Object.defineProperty(v55, Float64Array, { configurable: true, enumerable: true, get: Symbol, set: f37 });
            const v86 = v82.description;
            Symbol.for(v86);
            const o94 = {
                toString(a89, a90) {
                    try { this.toString(v51, v51); } catch (e) {}
                    let v92;
                    try { v92 = this.propertyIsEnumerable(a89); } catch (e) {}
                    !v92;
                },
            };
            const v95 = o94?.__lookupGetter__;
            try { new v95(v74); } catch (e) {}
            o94.toString();
            const o105 = {
                "c": v49,
                "arguments": v48,
                "type": C47,
                valueOf(a99, a100) {
                },
                4: "Vre",
                toString(a102, a103, a104) {
                },
            };
            o105[4] = o105;
            o105[522675525];
            const v109 = [272822757];
            v109[0] = v109;
            v4[F41];
            try {
                Symbol(v86);
            } catch(e112) {
            }
            v109.toLocaleString();
            [-2.0];
            Math.acosh();
        }
        f52();
        %OptimizeFunctionOnNextCall(f52);
    }
}
f37.arguments = f37;
f37();
