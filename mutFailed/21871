const v2 = new Uint16Array(8);
const v5 = new Uint16Array(64);
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a9;
    } catch(e10) {
    }
}
new F6(Uint16Array, 64);
new F6(v2, Uint16Array);
const v13 = new F6(v5, F6);
new Uint32Array(401);
class C20 extends Uint32Array {
    constructor(a22, a23, a24, a25) {
        super(a25, a25, a25);
        delete this[64];
        h = 64;
        a23 &&= -638195.1133890696;
    }
    static get f() {
        delete this[Uint32Array];
        return 165615.13319022;
    }
    #e = 6.213704636803293;
}
new C20(165615.13319022, 6.213704636803293, -638195.1133890696, 401);
new C20(-638195.1133890696, -638195.1133890696, 6.213704636803293, 64);
new C20(6.213704636803293, 165615.13319022, 6.213704636803293, 401);
function F35() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v37 = 0; v37 < 1000; v37++) {
        const v40 = ("p" + v37).fontcolor();
        let v41;
        try { v41 = v40.trimLeft(this); } catch (e) {}
        v41[12];
    }
    Uint16Array & this;
    let v48 = 536870887;
    const v49 = !v13;
    --v48 * -32878n;
    Math.asin(v49);
    -(-32878n);
    let v54 = -32878n || v49;
    --v54;
}
new F35();
new F35();
