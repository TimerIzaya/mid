const v0 = /[QE[^123]\P{gc=Decimal_Number}]/vdim;
/(x)(x)(x)\3j/vmsy;
const v2 = /anA\xed\xa0\x80a\W^xxx$/guisy;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = v2;
    } catch(e6) {
    }
    class C7 {
    }
    class C8 {
    }
    const v9 = new C8();
    const v10 = [];
    function f11() {
        ("Vre").startsWith(a5);
        const o14 = {
            [v10]: v9,
        };
        return C8;
    }
    f11();
    %OptimizeFunctionOnNextCall(f11);
    try {
        this.d = v0;
    } catch(e16) {
    }
    try {
        this.b = v0;
    } catch(e17) {
    }
}
new F3(v0);
let v19 = new F3(v2);
new F3(v0);
class C24 extends F3 {
    #h = 1073741825;
    [v0] = -2;
    static set e(a26) {
        if (v0 == F3) {
            v19 = this;
        } else {
            const v29 = Symbol.iterator;
            const o38 = {
                [v29]() {
                    let v31 = 10;
                    const o37 = {
                        next() {
                            v31--;
                            const v35 = v31 == 0;
                            const o36 = {
                                "done": v35,
                                "value": v31,
                            };
                            return o36;
                        },
                    };
                    return o37;
                },
            };
        }
    }
}
new C24();
new C24();
new C24();
function F42() {
    if (!new.target) { throw 'must be called with new'; }
}
([-2.0,-1.0,-5.0,-5.429610213896366,-2.2074967697332255,76807.25242455839,1.7976931348623157e+308]).toLocaleString();
class C47 {
}
const v48 = new C47();
const v50 = new Float32Array(v48, "nt", Float32Array);
const t75 = "nt";
const v51 = delete t75[v50];
try { v48.floor(v51); } catch (e) {}
class C53 {
    constructor(a55, a56) {
        function f57(a58) {
            function f59(a60) {
            }
            const v63 = new Uint16Array(1024);
            v63[7] = v63;
            return C53;
        }
        const o66 = {
            "type": "function",
        };
        new Worker(f57, o66);
    }
}
const v68 = new C53();
new C53(v68, C53);
new C53();
