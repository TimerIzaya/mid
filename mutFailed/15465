let v0 = 15;
new Int16Array(v0);
new Float64Array(112);
const v8 = new Int32Array(112);
class C12 extends Float64Array {
    #o(a14, a15, a16, a17) {
        try {
            v8.#o(-1073741824n, v8, a17, v0);
        } catch(e19) {
        }
        return 37156n;
    }
    3 = -1073741824n;
    static #c = 37156n;
    #valueOf(a21, a22) {
        while (v0 < 8) {
            try {
                a21.#c;
            } catch(e27) {
            }
            v0++;
        }
        return this;
    }
}
new C12();
new C12();
new C12();
class C32 {
}
const v33 = new C32();
[-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
const o35 = {
};
const v37 = new Proxy(o35, o35);
v37.unshift(v33);
const o39 = {
    __proto__: v37,
};
try { o39.reduceRight(v37); } catch (e) {}
