const t0 = "f";
t0[1073741824] = 4294967296;
function f3(a4, a5) {
    const o6 = {
        "f": a5,
    };
    return o6;
}
const v8 = new Float32Array(128);
const v11 = new Float32Array(3);
new v11(5);
function F15(a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = Float32Array;
    } catch(e20) {
    }
    try {
        this.f = Float32Array;
    } catch(e21) {
    }
    try {
        this.b = Float32Array;
    } catch(e22) {
    }
}
const v23 = new F15(128, 3, Uint16Array);
new F15(5, 128, v23);
class C30 {
    9;
    [-4294967295n] = 13n;
    get g() {
        this.f >>>= 1;
        const v32 = this[3360579767];
        try {
            super.toSpliced(v32, 13n, v32, 2, -1771000438);
        } catch(e34) {
        }
        return -1771000438;
    }
}
new Float32Array();
new F15(5, 5, v8);
const v37 = [4096,1000,17593,14,569949084,536870888,3,4];
([WeakSet,WeakSet,WeakSet,WeakSet]).copyWithin();
const v43 = new Uint32Array(2091);
for (const v45 in v43[0]) {
}
new Float64Array(1073741824);
class C49 {
}
const v52 = new Uint32Array(9, 2, 9);
v37[1855803377] = v52.buffer;
v37.length = 5;
