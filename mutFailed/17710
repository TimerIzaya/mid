class C3 {
    constructor(a5) {
        let v4 = this;
        v4 += v4;
        try {
        const t0 = -400381.5565961945;
        t0(v4);
        } catch (e) {}
        super[a5];
        const v9 = a5 && super.h;
        for (let v10 = 0; v10 < 32; v10++) {
            v9["p" + v10] = v10;
        }
    }
    static #b = 1000000.0;
    a;
}
const v13 = new C3(1000000.0);
const v14 = new C3(-1.7976931348623157e+308);
new C3(1000000.0);
class C16 extends C3 {
    m(a18, a19, a20) {
        new BigInt64Array(10);
        new Uint16Array(127);
        new Uint32Array(83);
        return v13;
    }
    #f;
    static [1000000.0] = C3;
}
const v30 = new C16();
const v31 = new C16();
const v32 = new C16();
function f33(a34, a35, a36, a37) {
    const o59 = {
        toString(a39, a40, a41) {
            try {
                v30.__proto__ = v14;
            } catch(e42) {
            }
            return v14;
        },
        o(a44, a45, a46) {
            if (a37 !== a35) {
                v32[v13];
                [-982506867,-256,64,2147483647];
                [10,5,268435441,-2147483649,-1074601583];
                [9,1000,1700421583,-128,-2147483649,46451,9];
            } else {
                try {
                    super.padStart(v14);
                } catch(e53) {
                }
            }
            let v54 = 0;
            while (v54 < 5) {
                try { a45.setUint32(C3); } catch (e) {}
                v54++;
            }
            return a34;
        },
    };
    return o59;
}
f33(-400381.5565961945, v31, -400381.5565961945, v30);
f33(-400381.5565961945, v13, -400381.5565961945, v13);
f33(-1.7976931348623157e+308, C3, -1.7976931348623157e+308, v31);
function f63() {
}
function f64() {
    return f63;
}
-520531413 >> -520531413;
-65536n + -65536n;
Map.prototype;
const v75 = new Map();
try { v75.set(Map, 512n); } catch (e) {}
try { new BigInt64Array(-9513n, f63, -9513n); } catch (e) {}
const v80 = new BigInt64Array(0);
let v81 = 1024;
let v82 = v81--;
v82++;
try { Int32Array.from(512n); } catch (e) {}
new Int32Array(v81);
const v88 = -9513n != 1;
v88 || v88;
if (v88) {
    try {
        new BigInt64Array(127);
    } catch(e92) {
    }
} else {
    var h = v88;
}
5 ^ 5;
const v99 = new BigUint64Array(5);
let v100;
try { v100 = v99.join(v81); } catch (e) {}
try { v100.replace(Int32Array, f63); } catch (e) {}
Int32Array.length;
-f63;
try {
    v80.f = 0;
} catch(e106) {
}
const v107 = new Int32Array(1);
v107[0];
v107[0] = v107;
new Int8Array(12);
const v112 = [1.5194593916452507e+308,1.7976931348623157e+308,-655.2599062195703,383261.13963534124,-4.351354601083372];
const v113 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
const v114 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
try { v114.join(-65536n); } catch (e) {}
function F116(a118, a119, a120) {
    if (!new.target) { throw 'must be called with new'; }
    const v121 = this?.__lookupGetter__;
    try { new v121(12); } catch (e) {}
    a119 + a119;
    try { a120.find(a118); } catch (e) {}
    try {
        this.d = a118;
    } catch(e125) {
    }
    try {
        this.b = a120;
    } catch(e126) {
    }
}
const v127 = F116?.constructor;
v127.length = v127;
let v128;
try { v128 = new v127(12); } catch (e) {}
v128.arguments;
new F116(Int32Array, 12, v113);
const v131 = new F116(v113, 5, v114);
v131.length;
const v133 = new F116(v112, 12, v112);
v133[65536];
const o136 = {
};
for (let v137 = 0; v137 < 25; v137++) {
}
