const v3 = [];
const o4 = {
    __proto__: v3,
};
const v5 = [1073741824,1073741823,1376142744,1073741825];
function f6(a7, a8, a9, a10) {
    const v11 = a9 + a9;
    v11 > v11;
}
for (let v13 = 0; v13 < 10; v13++) {
    f6(v5, v13, v13);
}
function f15(a16, a17) {
    const o46 = {
        "type": "f",
        "f": a17,
        toString(a19, a20) {
            return 48680;
            class C22 {
            }
            new Uint16Array([-2023,8,-5,-19182,268435441]);
        },
        4: "f",
        "g": a17,
        "d": "getMonth",
        get e() {
            super[this] = "getMonth";
            return "f";
        },
        get a() {
            function f28(a29, a30) {
                const o31 = {
                    ["f"]: a30,
                    "f": a29,
                };
                return o31;
            }
            const v32 = f28("getMonth", "getMonth");
            f28("getMonth", a17);
            f28("filter", "f");
            function F35() {
                if (!new.target) { throw 'must be called with new'; }
            }
            new F35();
            const v41 = new Uint8Array(512);
            v41.includes(2011);
            return v32;
        },
        "type": "f",
        "type": "f",
        ...a16,
        __proto__: a16,
        valueOf(a44, a45) {
        },
    };
    return o46;
}
-9513n != 1;
v5["f"]();
new Date();
f15("f", "f");
const v54 = f15("filter", "f");
f15("f", "getMonth");
class C56 {
}
const v59 = Array(8);
function f60() {
    return f60;
}
const v61 = f60?.apply;
try { v61(8, v59); } catch (e) {}
const v64 = /(?=.)ha\nb\bc/gum;
const v65 = v59.length;
let v66;
try { v66 = ("filter").m("filter", v65, Map, v64); } catch (e) {}
class C67 extends f15 {
    valueOf(a69, a70, a71) {
        try {
            function f72() {
                function f73(a74, a75, a76, a77) {
                    return a74;
                }
                return v66;
                new Int16Array(128);
                function f82(a83, a84) {
                    const o88 = {
                        p(a86, a87) {
                        },
                        10: 1073741824,
                    };
                    return o88;
                }
                f72 != f73;
                return f72;
            }
            %PrepareFunctionForOptimization(f72);
            v54.toString = f15;
        } catch(e90) {
            new Int16Array(512);
            const v95 = new Map();
            function F96(a98, a99, a100, a101) {
                if (!new.target) { throw 'must be called with new'; }
                const v102 = this.constructor;
                try { new v102(); } catch (e) {}
                const t104 = v95.constructor;
                const v105 = new t104();
                v105.set(v95, F96);
            }
        }
        return a71;
    }
    static #n(a108, a109, a110) {
        function f111(a112, a113) {
            try { a113(a112, "f", a112); } catch (e) {}
            -Infinity;
        }
        new Promise(f111);
        return v54;
    }
}
new C67();
new C67();
new C67();
("c").toUpperCase();
function f127() {
    class C128 {
        constructor(a130) {
            function f131() {
                const o134 = {
                    "execution": "async",
                };
                const t131 = gc(o134);
                t131.constructor = gc;
                return a130;
            }
            Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f131 });
        }
    }
    new C128();
    const v137 = new C128(f127);
    v137.length;
    return f127;
}
function F141(a143, a144) {
    if (!new.target) { throw 'must be called with new'; }
    const v145 = this.constructor;
    try { new v145("-268435456"); } catch (e) {}
    a143.prototype;
}
new F141(F141);
