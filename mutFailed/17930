class C3 {
    [789.1860923117783];
    valueOf(a5, a6) {
        return 789.1860923117783;
    }
    static set source(a11) {
        const v13 = new WeakSet();
        Math.asinh(this);
        let v17 = ~-2147483648;
        v17 | ++v17;
        const v20 = Math.trunc(-2147483648);
        Math.expm1(v17 >>> -2147483648);
        const v23 = delete C3?.[1073741824];
        const v24 = "object" % v20;
        try {
            super.subarray("object", v24, v13, v23, "object");
        } catch(e26) {
        }
    }
}
try { C3.call("object"); } catch (e) {}
const v28 = new C3();
const v29 = new C3();
const v30 = v29?.constructor;
try { new v30(); } catch (e) {}
const v32 = new C3();
const v33 = v32?.constructor;
try { new v33(); } catch (e) {}
for (let v35 of "object") {
    const v39 = v35--;
    Math.abs(v28);
    const v41 = v39 ** v28;
    +-492.088322007165;
    ~v41;
    Math.ceil(v35);
}
function F45(a47, a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = this?.__defineSetter__;
    try { new v51(a50, a50); } catch (e) {}
    try { a50.valueOf(a49, a49); } catch (e) {}
    try {
        this.e = a48;
    } catch(e54) {
    }
    try {
        this.d = v29;
    } catch(e55) {
    }
    try {
        this.a = C3;
    } catch(e56) {
    }
}
new F45(v29, C3, v29, v28, v29, v28);
const v58 = new F45(C3, C3, v29, C3);
new F45(-2, v28, v28, v28);
const v60 = [2147483648];
try { v60.toString(); } catch (e) {}
[512,2,23704,-9007199254740991,1024,3,-1230470214];
[-1024,-9007199254740990,-5902,64,-2147483648,-4,-4,255,28654,41689];
function f64(a65, a66, a67, a68) {
    a65.d;
    %OptimizeFunctionOnNextCall(a67);
    v30 instanceof F45;
    const o73 = {
        "maxByteLength": 10,
    };
    const v75 = new SharedArrayBuffer(10, o73);
    new Float32Array(v75);
    return a66;
}
%OptimizeFunctionOnNextCall(f64);
f64(v58);
