const v2 = new Uint8ClampedArray(512);
const t1 = 2286;
t1.__proto__ = 2286;
const v6 = new Float32Array(512);
Object(v6);
new Uint8Array(2286);
class C13 {
    toString(a15) {
        const o16 = {
            ..."raw",
        };
        try {
            function f17() {
                return f17;
            }
            function f19() {
                Object.defineProperty(arguments, 13, { enumerable: true, set: f17 });
                return o16;
            }
            f19();
        } catch(e22) {
        }
    }
}
const v23 = new C13();
const v24 = ["raw"];
try {
    v24.length = v23;
} catch(e25) {
}
new Int16Array(2);
const v28 = [6.621588498634488e+307,1.0,3.0,-5.0,-1.7976931348623157e+308,-1.7976931348623157e+308,257.7405098162435,-136018.55674827856];
[v28,Uint8ClampedArray];
("minor").valueOf();
const v33 = v28.constructor;
try { new v33(v2, Float32Array, v33, v2); } catch (e) {}
class C37 extends Array {
    2 = 64;
}
new C37();
[-5.034735835956977e+307,-385.25474675985527];
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    let v45 = this.valueOf();
    const v46 = v45.constructor;
    try { new v46(); } catch (e) {}
    --v45;
    Math.imul();
}
new BigInt64Array(1091060517);
[Uint8ClampedArray];
new BigInt64Array();
for (let [v57,...v58] of 2) {
}
const v65 = new Int16Array();
try { BigUint64Array.apply(10, v65); } catch (e) {}
new C13();
try {
const t0 = "raw";
t0();
} catch (e) {}
function f73() {
    return f73;
}
try { f73(); } catch (e) {}
this[256] = BigUint64Array;
const v75 = /((((.).).).)?/gvdimy;
const v76 = /C/gudm;
new Int16Array([10,829820207,16,-4294967296,-9007199254740992,-65535,-2147483648,1024]);
function F82(a84) {
    if (!new.target) { throw 'must be called with new'; }
    a84--;
    a84 ^ a84;
    const v87 = this.constructor;
    try { new v87(3n); } catch (e) {}
}
let v90;
try { v90 = Uint32Array(Uint32Array, 1391, v75); } catch (e) {}
try {
    v76.dotAll = v90;
} catch(e91) {
}
