function f6(a7, a8, a9, a10) {
    const o19 = {
        get a() {
            const t3 = "p";
            t3[a8] -= this;
            a9 ^= a10;
            function f13(a14) {
                return f13;
            }
            f13(undefined);
            ("-909369087")[3];
            try {
            const t0 = 16n;
            new t0(2147483648n);
            } catch (e) {}
            return -256n;
        },
        "c": a7,
        ..."-34520",
        "e": a8,
        "f": 16n,
        "h": 16n,
        "execution": "p",
        get g() {
            return 16n;
        },
        "type": "-909369087",
    };
    return o19;
}
const v20 = f6("-34520", "-34520", 16n, "-34520");
const v21 = f6("-34520", "-909369087", 2147483648n, "p");
f6("-34520", "-34520", 2147483648n, "-909369087");
new Float32Array(2536);
const v28 = new Int8Array(6);
new BigInt64Array(256);
const o36 = {
    [-352741132]: -352741132,
    set b(a35) {
    },
    "b": 2.220446049250313e-16,
};
try {
    v20.fuck(-256n, true, BigInt64Array);
} catch(e39) {
}
try {
    v21.e = 10000;
} catch(e44) {
}
try {
    const t51 = "-909369087";
    t51.e = 268435439;
} catch(e45) {
}
Object.defineProperty("number", "undefined", { configurable: true, enumerable: true, get: f6 });
v28[16n] = 36002;
const v54 = Promise.reject(Promise);
function F65(a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
}
const v69 = new F65(512, 10000);
const v70 = new F65();
const v72 = new Uint32Array(v54, 36002, 4);
([v70,v69,v72[0.29489550717955537]])[2];
