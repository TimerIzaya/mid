function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = F0;
    "function" == "function";
    function f7(a8, a9) {
        const o13 = {
            "f": a9,
            [a8]: -12,
            set e(a11) {
            },
        };
        return o13;
    }
    const v14 = f7(1000, 1000);
    class C15 extends f7 {
        static valueOf(a17, a18, a19) {
            async function* f20(a21, a22, a23, a24) {
                await f7();
                yield* [];
                return a23;
            }
            delete v14[2];
            a17.__proto__;
            for (let v30 = 0; v30 < 32; v30++) {
                const t24 = "function";
                t24["p" + v30] = v30;
            }
        }
    }
    try {
        this.d = 7;
    } catch(e33) {
    }
}
new F0();
const v37 = ([497658199,-1,2147483647,-16,9,-4294967297,-180329643]).group(Symbol);
function F38(a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    this.propertyIsEnumerable(Symbol);
    const v43 = this.constructor;
    try { new v43(); } catch (e) {}
    try { this.constructor(); } catch (e) {}
}
new F0();
new F0();
Symbol["keyFor"](v37);
/(?<a>(?<b>(?<c>(?<d>.).).).)/gum;
/(L)/gvisy;
/(?:a*)+/gdy.ignoreCase;
Uint32Array.d = Uint32Array;
new Uint32Array(64);
const v61 = [];
v61["concat"]("concat");
function f64(a65) {
    return f64;
}
1331 == 1331;
new Float32Array(1331);
new Uint32Array(7);
let v72 = 240;
v72--;
try { new DataView(v72); } catch (e) {}
const o76 = {
};
new Proxy(Uint32Array, o76);
for (let v79 = 0; v79 < 32; v79++) {
    v61["p" + v79] = v79;
}
