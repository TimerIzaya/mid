const v3 = new Int8Array(1392);
const v4 = v3.lastIndexOf(1392);
const v6 = new Date();
const v8 = new BigUint64Array();
v8[v6] = v6;
function f11() {
    return 15n;
}
class C13 extends f11 {
    constructor(a15) {
        new BigInt64Array();
        function f18() {
            return f18;
        }
        super();
        super[f11()] = 128n;
        const v20 = `a`;
        const v21 = [601759695];
        const v22 = [1073741824,1073741823,1376142744,1073741825];
        function f24(a25, a26, a27, a28) {
            function f29() {
                const o36 = {
                    "e": -4294967295,
                    ..."Vre",
                    valueOf(a34, a35) {
                    },
                    ..."Vre",
                    "c": a28,
                    5: -4294967295,
                    6: -268435456,
                };
            }
            f29();
            %OptimizeFunctionOnNextCall(f29);
            let v39;
            try { v39 = v22["find"](..."find", a28, ...v21, ...v22, ...522675525n); } catch (e) {}
            v39 <= a27;
        }
        v20[1000] >>= true;
    }
    #m(a42) {
        return this;
        this[f11] += f11;
        const v43 = new f11();
        const o46 = {
            "maxByteLength": 3174383256,
        };
        const v48 = new SharedArrayBuffer(4096, o46);
        new Int32Array(v48);
        return v43;
    }
}
new C13(15n);
new C13(2147483648n);
new C13(2147483648n);
function F54(a56) {
    if (!new.target) { throw 'must be called with new'; }
}
const v57 = v3.constructor;
try { new v57(); } catch (e) {}
class C59 {
}
function f60() {
    return f60;
}
const v61 = [601759695];
const v62 = [1073741824,1073741823,1376142744,1073741825];
function f64(a65, a66, a67, a68) {
    function f70() {
        return a65;
    }
    for (let v71 = 0; v71 < 5; v71++) {
        try {
            C59.__proto__ = Date;
        } catch(e72) {
        }
    }
    const v74 = new Int8Array();
    const v76 = new Uint32Array();
    const v77 = [v76];
    function f79(a80, a81) {
        return Date;
    }
    f79(v4, Uint32Array);
    const v83 = v74.buffer;
    new Int8Array(v77);
    v83.slice(a65, a67);
    %OptimizeFunctionOnNextCall(f70);
    try { v62["find"](..."find", a68, ...v61, ...v62, ...522675525n); } catch (e) {}
    f60(Symbol, BigUint64Array, Date);
    return arguments;
}
function F91(a93, a94) {
    if (!new.target) { throw 'must be called with new'; }
    const v95 = this.constructor;
    try { new v95(); } catch (e) {}
    try { this.constructor(); } catch (e) {}
}
const v101 = [9,1024,256,268435440,-1916992432,7,-2147483648,20126,-2,1645963617];
try { v101.group(BigInt64Array); } catch (e) {}
