[4,1157];
const v1 = [268435441,56987,65536,-20001];
[818408690,-1073741824];
[0.6322881460759279,Infinity,-0.0,-2.2250738585072014e-308,-1000000.0];
const v4 = [5.0,-3.0,974.6122790880545,-1e-15,1e-15];
[-2.2250738585072014e-308,2.220446049250313e-16,0.5945413932784751,0.6604021156411577];
const v6 = [-1,-1024,4294967297,-10,-188643952,-2147483648,-1042849581,-4294967295,27764];
try { v6.findLastIndex(v4); } catch (e) {}
[8,6,0,-10];
const v9 = [1073741825,-1570893780];
v9[1] = v9;
/(ab)\1?/vdms;
v4[2];
const v18 = /(ab)?/gdsy;
v18.d = v18;
const v19 = /foo[z]*/gudmy;
v19.f = v1;
v19.f = v19;
const v25 = new Int32Array(1024);
v25[743] = v25;
let v26 = this;
function f28(a29) {
    const v31 = new Uint16Array();
    const v34 = new Int32Array();
    class C35 {
        static #d = -2;
        constructor(a37, a38) {
            try {
                v31.#d += v34;
            } catch(e39) {
                e39.toString();
            }
        }
    }
    C35.constructor;
    return v31;
}
Reflect[Symbol.toPrimitive] = f28;
const v45 = Reflect.construct(Int32Array, [v25]);
v45[820] = v45;
v26 >>>= Reflect;
