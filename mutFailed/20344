function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = this;
    try {
        this.b = 536870912;
    } catch(e3) {
    }
    try {
        this.c = 536870912;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
function f7() {
    function f8() {
        return v5;
    }
    return v5;
}
v6.toString = f7;
const v9 = new F0();
class C13 {
    constructor(a15, a16, a17, a18) {
        function f19(a20) {
            a20 % a15;
            return a15;
        }
        a18.toString = f19;
        const v23 = v5[a18];
        try { v23(v6); } catch (e) {}
    }
    5 = v9;
    #g = 336.65557337370046;
    get toPrimitive() {
        class C26 extends F0 {
            static #d = 336.65557337370046;
        }
        new C26(F0);
        new C26();
        new C26();
        return 336.65557337370046;
    }
}
new C13(v6, v9, 1.6052633094914425e+308, v9, 336.65557337370046);
new C13(v6, v9, 541608.0252734968, v9);
new C13(v9, v6, 336.65557337370046, v6);
new WeakMap();
let v40 = -(-1e-15);
v40--;
Math.sinh(v40);
