function f2(a3, a4) {
    const v5 = [a3,a3];
    v5.at(a3);
    return v5;
}
const v8 = [9n];
function f9(a10, a11) {
    %VerifyType(a11);
    const v12 = [601759695];
    function f13(a14, a15, a16, a17) {
        arguments[2] = arguments;
        function f19() {
            ("Vre").fixed();
            const o22 = {
                __proto__: a16,
                ..."Vre",
            };
            o22.length;
            return o22.valueOf();
        }
        const v25 = f19();
        v25[6] = v25;
        %OptimizeFunctionOnNextCall(f19);
    }
    for (let v26 = 0; v26 < 5; v26++) {
        f13(v12, v26, v26);
    }
    return a10;
}
v8.toString = f9;
const v28 = [v8,65536n,0n,v8];
v28.toString = f2;
([-38686,-6,10000,-53904,-65535,48017,257,536870889]).includes;
class C33 {
    static [-53146] = -53146;
    #d;
    get e() {
        let v35;
        try { v35 = this.toString(); } catch (e) {}
        const v37 = Symbol.replace;
        v35[v37] = v37;
        return this;
    }
    static #e;
}
let v38;
try { v38 = C33.apply(-53146, 0.6625004038177351); } catch (e) {}
const v39 = new C33();
function f40(a41, a42) {
    f9 = f2;
    const v43 = [];
    const v44 = [v43,v43,v43,v43];
    const v45 = [v44,v44,v44];
    function f46() {
        return v45;
    }
    return a42;
}
v39.constructor = f40;
const v47 = v39?.constructor;
try { new v47(); } catch (e) {}
const v49 = [0n,0n,v28,v28];
function F53() {
    if (!new.target) { throw 'must be called with new'; }
    for (let i57 = 0, i58 = 10;
        i57++, i57 < i58;
        (() => {
            function f65(a66, a67, a68, a69) {
                return f65;
            }
            f65(this);
            for (let v71 = 0; v71 < 5; v71++) {
                const v72 = [2.220446049250313e-16,-2.0,9.472378156545009,0.0,1e-15,0.3751557433004281,0.0,-474740.46049005154];
                const o73 = {
                    __proto__: v72,
                };
                o73[6];
            }
        })()) {
    }
}
const v84 = new Map();
let v91 = undefined;
const o99 = {
    ...v84,
    ...v84,
    __proto__: v84,
    [24560](a93, a94, a95) {
        super[591114.0785999324];
        v91 = Map;
    },
};
v91 = o99;
[v84];
function F102() {
    if (!new.target) { throw 'must be called with new'; }
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    const v107 = new Date();
    const o109 = {
    };
    o109.e = 19793;
    const v111 = [-6.672391061426152e+307];
    v111[0] = v111;
    function f112() {
        return v111["pop"]();
    }
    %PrepareFunctionForOptimization(f112);
    f112();
    %OptimizeFunctionOnNextCall(f112);
    f112();
    function F117() {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F117();
    new Int8Array();
    const v122 = Array(19793);
    for (const v123 of v122) {
    }
    const v124 = [v122,v122,v122,v122,v49];
    new BigUint64Array();
    [];
    for (let v129 = 0; v129 < 50; v129++) {
    }
    const v130 = [v124,v124,v124];
    function f131(a132, a133) {
        for (let i136 = 0, i137 = 10;
            (() => {
                const v138 = i136 < i137;
                class C139 {
                }
                const v140 = new C139();
                class C141 {
                    static #e;
                    static {
                        try {
                            v140.#e = this;
                        } catch(e143) {
                        }
                    }
                }
                return v138;
            })();
            i137--) {
        }
        return v107;
    }
    v130.toString = f131;
    const v149 = [v130];
    function f151(a152) {
        const v155 = /((?<=a))/gudm;
        const v156 = /gk4b*/vmsy;
        let v158;
        try {
        const t0 = -1.3832922122240728e+307;
        v158 = t0(2);
        } catch (e) {}
        for (let v159 = 0; v159 < 5; v159++) {
            v159 < 1;
            try { v158(v155, v159, v156, v159, -4); } catch (e) {}
            const v164 = Symbol.iterator;
            const o168 = {
                [v164]() {
                    const o167 = {
                        next() {
                            return v156;
                        },
                    };
                },
            };
        }
        return v38;
    }
    Uint16Array.valueOf = f151;
    v149 >= Uint16Array;
}
new F102();
new F102();
for (let [i175, i176] = (() => {
        10 >>> 10;
        return [0, 10];
    })();
    i175 < i176;
    i175++) {
}
