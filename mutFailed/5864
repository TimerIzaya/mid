const t0 = [4.193051163654764e+307,-5.115167312952364e+307];
t0[2147483649] = 14;
2736188941 >> 2736188941;
const o7 = {
    "maxByteLength": 14,
};
const v9 = new SharedArrayBuffer(4, o7);
const v11 = new Uint16Array(v9);
const v12 = [-643.0085391319485,0.16631380971644683,-219975.33622073592,-1.7976931348623157e+308,-1000000.0];
try { v12.map(v9); } catch (e) {}
const v14 = [-2.0,-1.0,-3.587166891539204,392.2721226414433];
function f15(a16) {
    o7.maxByteLength >>= -15;
    const v17 = [-9223372036854775807,-31958,-437619447,54990,9007199254740992,-9223372036854775807,8,128];
    function F18() {
        if (!new.target) { throw 'must be called with new'; }
    }
    function F20(a22, a23) {
        if (!new.target) { throw 'must be called with new'; }
        for (let v24 = 0; v24 < 25; v24++) {
            "p" + v24;
        }
        const t22 = v17.constructor;
        new t22(F18, a22);
    }
    return F20;
}
v14[Symbol.toPrimitive] = f15;
try { v14.fill(4); } catch (e) {}
[10948,3,5];
const v33 = [678216886,-9007199254740990,26133,-1885174918];
const v34 = [-65535,-1215243383,-26140,54517,1237599735,-54991,830782160,6,1073741824];
v34.toString = f15;
v34[v34] = v34;
("join").length;
const v37 = v11["join"]("join");
try { v37.link(4); } catch (e) {}
const v39 = v14.__proto__;
try {
    v39.growable = v39;
} catch(e40) {
}
[[-9223372036854775808,v12,14],-9223372036854775808];
const v43 = [v33];
0.399187934805898 + 0.399187934805898;
2.220446049250313e-16 >>> 2.220446049250313e-16;
const v50 = new Date();
function f51() {
    function f52(a53) {
        function F55() {
            if (!new.target) { throw 'must be called with new'; }
            const v57 = this?.__defineSetter__;
            let v58;
            try { v58 = new v57(); } catch (e) {}
            for (const v62 of Array(19793)) {
                v43[658291203] = null;
                v58--;
            }
        }
        const v64 = new F55();
        const t60 = v64.constructor;
        const v66 = new t60();
        return v66;
    }
    return f52;
}
Object.defineProperty(v50, "valueOf", { configurable: true, enumerable: true, get: f51 });
v50.setUTCFullYear(Date, v50, v14);
v50.getFullYear();
