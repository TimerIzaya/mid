const o5 = {
    valueOf() {
        let v4;
        try { v4 = this.valueOf(this, 426155202); } catch (e) {}
        v4 = 128;
        return 4294967296;
    },
};
let v6 = 1000;
function f8(a9) {
    a9[64] &&= 426155202;
    new Int8Array(729);
    new Int32Array(4);
    new BigInt64Array(1680);
    return Int8Array;
}
Uint32Array.toString = f8;
const v19 = new Uint32Array(v6);
function f22() {
    const t19 = 4294967296;
    t19[4] = Uint32Array;
    return "Vre";
    return 426155202;
}
Uint8ClampedArray[Symbol.toPrimitive] = f22;
const v26 = new Uint8ClampedArray(2305);
Float32Array.valueOf = Symbol;
if (o5) {
    ("-6").normalize("NFKD");
} else {
    v26 && v26;
}
new Float32Array(3);
function F34(a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = F34;
    Object.defineProperty(this, "d", { configurable: true, enumerable: true, value: v19 });
    try {
        this.c = a36;
    } catch(e39) {
    }
    try {
        this.d = a38;
    } catch(e40) {
    }
    this[a36];
    ~F34;
    Uint32Array << a38;
    [,...v6] = v19;
    this / Float32Array;
    try {
        this.a = 2305;
    } catch(e45) {
    }
}
new F34(426155202, 128, Uint8ClampedArray);
new F34(426155202, 128, 2305);
new F34(4294967296, 2305, v6);
function f49() {
}
class C50 extends f49 {
    toString(a52, a53) {
        const v54 = this.constructor;
        new v54(a53, v54, this, v54, C50);
        -this;
    }
}
const v57 = new C50();
v57.constructor = Symbol;
Object.defineProperty(v57, Symbol.toPrimitive, { writable: true, configurable: true, value: f22 });
v57.valueOf = f49;
try { v57.toString(); } catch (e) {}
