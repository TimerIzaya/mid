const v2 = new Array(10);
function f3() {
    return v2;
}
function f4(a5) {
    const o24 = {
        "c": 10,
        get d() {
            const v8 = Symbol.toPrimitive;
            const o11 = {
                [v8]() {
                    [v2];
                },
            };
        },
        o(a13) {
            function f14(a15) {
                return a15;
            }
            class C16 extends f14 {
                d = a13;
            }
            C16[6];
            return a5;
        },
        "f": f3,
        ...a5,
        "a": v2,
        o(a19) {
            return a19;
        },
        toString(a21, a22, a23) {
            return a21;
        },
        "b": v2,
    };
    return o24;
}
const v25 = f4(f3);
const v26 = f4(f3);
const v27 = f4(v25);
function f28(a29, a30) {
    const o42 = {
        set d(a32) {
            [-3.0573889453111462,1000000000000.0];
            function f34() {
                const o35 = {
                };
                return o35;
            }
            f3[Symbol.iterator] = f34;
            [540464.8425877222,-2.220446049250313e-16,1000000.0,1.3556558315266935e+308,-1.9146051002448345];
            const v39 = [1.7976931348623157e+308,-1000.0];
            try {
                v39.length = 2;
            } catch(e41) {
            }
        },
        __proto__: a30,
        ...v26,
        "e": v25,
        "h": a30,
        "g": a29,
    };
    return o42;
}
f28(v25, v25);
new Uint8ClampedArray(129);
function F47(a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = f3.constructor;
    try { v51(this, f3); } catch (e) {}
}
new F47();
f28(v26, v27);
f28(v27, v25);
[-26335,1335743405,-40681,65535,-2,2094146488,-1676762618,64,4];
[127];
[512,52598,-43320,9007199254740991,0];
class C59 {
}
function F60(a62, a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
    const v67 = new Float32Array(this, a64, a64);
    const v69 = new Uint8Array(268435440);
    new Uint8ClampedArray(129);
    v69[6] = v67;
}
const v73 = new C59();
Object.defineProperty(v73, "toString", { writable: true, configurable: true, value: f3 });
("object").split(v73, 2306);
