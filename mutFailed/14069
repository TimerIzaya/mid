const v0 = [536870912,536870887,1];
const v1 = [-4294967297,0,1073741825];
const v2 = [-1326472496,-65535,-2117795905,-16];
for (let v3 = 0; v3 < 5; v3++) {
}
const v4 = /8/vdiy;
try {
    b = v4;
} catch(e5) {
} finally {
}
[v2,v1,v2];
const v7 = [v0,v1,v0];
[v2];
new Date();
const v11 = /60MGa\n(ab|cde)/gvmsy;
const v12 = /[^a]/imsy;
const v13 = /1(?:ab)+((?:a+){0,0})/gvim;
function F14(a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a16;
    } catch(e18) {
    }
    Symbol.matchAll;
    new SharedArrayBuffer(945);
    try {
        this.f = a16;
    } catch(e24) {
    }
}
new F14(v11, v2);
const v26 = new F14(v13, v2);
new F14(v12, v7);
class C29 extends Uint16Array {
    #b;
    constructor(a31) {
        v26.d = a31;
    }
    #toString(a33, a34, a35) {
    }
}
class C36 extends C29 {
    constructor(a38, a39, a40, a41) {
        super();
        function f42(a43, a44, a45) {
        }
        const o53 = {
            [Worker](a49, a50, a51) {
            },
            [v7]: v7,
            "e": Uint16Array,
            get c() {
            },
            "type": "function",
        };
        new Worker(f42, o53);
        for (let i58 = 0, i59 = 10;
            (() => {
                const v60 = i58 < i59;
                class C61 extends Date {
                }
                let v62;
                try { v62 = new C61(); } catch (e) {}
                v62.constructor;
                return v60;
            })();
            i58++) {
        }
    }
}
const t71 = [4294967296,-57202,256,48562,333990054];
t71.length = 1957281702;
function F71(a73, a74, a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
    const v77 = this.constructor;
    try { new v77(); } catch (e) {}
    typeof Float32Array;
}
new F71();
new C36();
class C83 {
}
new C36();
