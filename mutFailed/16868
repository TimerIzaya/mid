10 >>> 10;
10 / 10;
const o8 = {
    "maxByteLength": 153,
};
const v10 = new ArrayBuffer(6, o8);
new Int32Array(v10);
BigInt64Array.length = BigInt64Array;
const v14 = new BigInt64Array(10);
new Int16Array(3);
14 === 14;
const v21 = Uint16Array.name;
try { v21.codePointAt(3); } catch (e) {}
const v23 = new Uint16Array(14);
v10[268435439] = v23;
v10[Symbol.toPrimitive] = o8;
try {
    v14.copyWithin(-612, -42444, -612);
} catch(e29) {
}
v23[7] = v23;
let v30 = 1;
v30++;
const v33 = new Uint8Array(v30);
v33[0];
try {
    const o36 = {
    };
    new Float32Array(o36);
} catch(e38) {
}
const v39 = Float32Array.from(v33);
v39[0] = v39;
