Array(11);
class C6 {
    m(a8, a9) {
        new a9(-1073741824, -268435456, -1073741824, -1073741824, ...a8);
    }
}
let v12 = Int8Array;
const v13 = new v12(560);
const v16 = new BigUint64Array(2177);
class C19 extends Uint16Array {
}
for (let i = 0; i < 25; i++) {
    class C20 {
    }
    const v21 = new C20();
    class C22 {
        static #a = C20;
        static g = v21;
        static {
            delete this.g;
        }
    }
    const v27 = Symbol.replace;
    v13[v27] = 7;
    const v30 = new Uint8ClampedArray(4);
    function f31() {
        return f31;
    }
    function f32() {
        for (let v33 = 0; v33 < 5; v33++) {
            return f31;
            class C34 {
            }
        }
        return f32;
    }
    f32();
    const v36 = v16[65537];
    v12 = v36;
    const v41 = new BigInt64Array(v30, v30, v30);
    const v42 = `
        var c = v41;
    `;
    new Uint8ClampedArray(129);
    try { v16.forEach(v36); } catch (e) {}
    v27[Symbol.iterator] = v13;
}
new Uint8Array(2980);
[-1000.0,0.6126953594980485,1.0449669483083588e+308,2.8070645061095902,-4.0,3.0,-921595.8568285864,0.0014293676781188536,-1.2370867755919507e+308];
[2.220446049250313e-16,8.22903987197613,-933.1000631622428,5.0,-1e-15];
[-621.3747032800578,-3.0,5.0,0.11355382516891899,110589.3653012386,-Infinity,4.528719090252553e+307];
class C58 {
    p(a60, a61, a62, a63) {
        new Float64Array(85);
        new Uint8ClampedArray(3550);
        new Int8Array(0);
        return Float64Array;
    }
    [2980];
    static g;
}
new C58();
new C58();
let v75 = -9223372036854775808n;
v75 %= 45725n;
function f78(a79, a80, a81) {
    return a79;
}
const v83 = [Float64Array];
for (let v84 = 0; v84 < 5; v84++) {
    v83.length = 2;
}
f78.caller = f78;
f78.e = -65535;
new C58();
function f88(a89, a90, a91, a92) {
    const v93 = a90 >>> a90;
    const v94 = v93 >>> v93;
    const v95 = v94 != v94;
    for (let v96 = 0; v96 < 5; v96++) {
    }
    new Uint8ClampedArray(798);
    v94 + v94;
    class C103 {
        static [Set] = "boolean";
    }
    const o104 = {
    };
    o104.b = 5n;
    const v107 = new Date();
    v107.setYear(2.0);
    const o109 = {
    };
    v13.b = v95;
    return a91;
}
for (let v110 = 0; v110 < 5; v110++) {
    function F111() {
        if (!new.target) { throw 'must be called with new'; }
        for (let v113 = 0; v113 < 1000; v113++) {
            const v116 = ("p" + v113).fontcolor();
            let v117;
            try { v117 = v116.trimLeft(this); } catch (e) {}
            v117[12];
        }
    }
    do {
    } while (0 < 0)
    f88();
}
%OptimizeFunctionOnNextCall(f88);
f88();
