class C3 {
    constructor(a5, a6) {
        const v7 = a6--;
        function f8(a9, a10, a11) {
            a11.valueOf = f8;
            a9 + a9;
            -a10;
            ~a11;
            const o15 = {
                ["10"]: -628198.3292161745,
                "d": a6,
                [a9]: a11,
            };
            o15.toString = f8;
            return o15;
        }
        function f16(a17) {
            const v19 = ["10",C3 >> a17];
            const v20 = [v7,v7,v19,v19,a5];
            [v20,-628198.3292161745,v20];
            return a5;
        }
        f8[Symbol.toPrimitive] = f16;
        try { f8(C3, "10", a5); } catch (e) {}
        const v25 = f8(-65536, a5, -628198.3292161745);
        v25.d = v25;
        f8(-628198.3292161745, -65536, v25);
        f8(f8, -65536, "10");
    }
    f;
}
function f28() {
    class C29 {
        static {
            this < this;
        }
    }
    return "10";
}
C3.toString = f28;
const v32 = new C3(-628198.3292161745, -628198.3292161745);
const v33 = v32?.constructor;
v33[Symbol.toPrimitive] = f28;
try { new v33(C3, C3); } catch (e) {}
const v37 = new C3(v32, C3);
new C3(v37, v32);
[-Infinity,5.236212417491849];
const v40 = [-1000000.0,0.3841138978853982,3.0,-110537.91987089312,-5.696486292708778e+307,-1.7976931348623157e+308];
try { v40.keys(); } catch (e) {}
[-2.2250738585072014e-308,1.4187208905711568,5.0,-8.74169473040067,599008.9582060161];
new Map();
new Set();
class C47 {
}
try { C47.bind(v37); } catch (e) {}
const v49 = new C47();
v49.constructor = f28;
const v50 = v49?.constructor;
try { new v50(); } catch (e) {}
const v52 = v49.__lookupGetter__;
class C53 {
}
Float32Array[Symbol.iterator] = f28;
const v57 = new Float32Array(Float32Array);
class C58 {
}
try { new C58(); } catch (e) {}
try { C58.apply(C53, v57); } catch (e) {}
let v61;
try { v61 = v52(); } catch (e) {}
const v64 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
v64.g = v64;
const v65 = [601759695];
function f67(a68, a69, a70, a71) {
    const v73 = arguments.toString();
    v73[13];
    function f75() {
        const t77 = "Vre";
        t77[2] = "Vre";
        const v77 = ("Vre")?.toLocaleUpperCase;
        try { v77(); } catch (e) {}
        v77.g = v77;
        try { new v77(); } catch (e) {}
        let v80;
        try { v80 = ("Vre").fixed(); } catch (e) {}
        let v81;
        try { v81 = v80.localeCompare(v73); } catch (e) {}
        v81 - v81;
        let v84 = -268435456;
        const v85 = v84--;
        v85 + v85;
        -(v84 + v84);
        const o103 = {
            "c": -4294967297n,
            [522675525n](a90, a91) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v65,
            valueOf(a93, a94) {
            },
            "e": -4294967295,
            "e": v84,
            "maxByteLength": -4294967295,
            "arguments": v64,
            ...v65,
            "type": "Vre",
            ..."Vre",
            valueOf(a96, a97) {
                this[4] = this;
                a96.c;
                return a97;
            },
            ..."Vre",
            4: "Vre",
            "c": v84,
            "type": "Vre",
            toString(a100, a101, a102) {
                return a102;
            },
            6: v84,
        };
        try { o103.valueOf(o103, -128); } catch (e) {}
    }
    f75();
    %OptimizeFunctionOnNextCall(f75);
    return -4294967297n;
}
for (let v106 = 0; v106 < 5; v106++) {
    const v107 = f67();
    v107 > v107;
}
%OptimizeFunctionOnNextCall(f67);
f67(-4294967297n, f67, v64, v61);
