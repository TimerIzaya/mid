function f0() {
    const o8 = {
        "f": 283.9753550024791,
        "h": 283.9753550024791,
        ...-1000.0,
        "d": 1000.0,
        "c": 1000.0,
        [1000.0]: 1000.0,
        set g(a5) {
            let v6;
            try { v6 = new a5(); } catch (e) {}
            try { v6.m(this, 283.9753550024791); } catch (e) {}
        },
        ...283.9753550024791,
    };
    const v9 = o8?.__lookupSetter__;
    try { new v9(f0); } catch (e) {}
    return o8;
}
f0.group = f0;
f0();
const v12 = f0();
function f13(a14, a15) {
    var h = a15;
    return -65536;
}
v12.toString = f13;
f0();
function f20() {
    return f0;
}
new Map();
let v23 = -2.0;
v23--;
-130.3747275167084 >> -130.3747275167084;
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    a31 != a31;
    try {
        this.g = Map;
    } catch(e33) {
    }
    try {
        this.e = a31;
    } catch(e34) {
    }
}
F28.name;
new F28(0.5166409650712772, -130.3747275167084);
new F28(-130.3747275167084, 0.5166409650712772);
const v38 = new F28(-130.3747275167084, -130.3747275167084);
const v39 = v38?.g;
try { new v39(); } catch (e) {}
const v41 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v44 = new Uint32Array(v41, 2684);
v44.g = v44;
const v46 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v47 = [601759695];
function f48() {
    return f0;
}
function f49(a50) {
    try { a50(a50, a50); } catch (e) {}
}
Object.defineProperty(v47, "valueOf", { writable: true, enumerable: true, get: f48, set: f49 });
try { v47.at(0.5166409650712772); } catch (e) {}
const v53 = [1073741824,1073741823,1376142744,1073741825];
function f55(a56, a57, a58, a59) {
    a56.valueOf = f0;
    function f60() {
        try {
            new Map(v44);
        } catch(e62) {
        }
        return a57;
    }
    Object.defineProperty(a58, Symbol.search, { configurable: true, value: f60 });
    function f65() {
        return -130.3747275167084;
    }
    Object.defineProperty(a59, "group", { configurable: true, get: f65 });
    try { a56.group(a58); } catch (e) {}
    a58 - a58;
    a59 >> a59;
    function f69() {
        try { ("Vre").search(a58); } catch (e) {}
        let v73 = Float64Array;
        v73 = a57;
        b = v47;
        const v74 = v41.length;
        try {
            v53.forEach(a57, v41);
        } catch(e76) {
            e76.b = e76;
        }
        const v77 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        try { new Symbol(); } catch (e) {}
        const v80 = Symbol.toPrimitive;
        Symbol.for(v80.description);
        const o87 = {
            toString(a85, a86) {
                a85 *= v80;
                return v73;
            },
        };
        const o104 = {
            [522675525n](a90, a91) {
            },
            "c": v47,
            valueOf(a93, a94) {
            },
            [v74](a96) {
            },
            [-1]: 2684,
            1073741824: v44,
            "maxByteLength": -268435456,
            "b": -4294967295,
            "arguments": v77,
            [-4294967297n](a98, a99, a100, a101) {
                eval();
            },
            "e": -4294967295,
            "e": -268435456,
            "arguments": v46,
            256: a59,
            ...v47,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            6: -268435456,
        };
        return o104;
    }
    f69();
    const v107 = new Int8Array();
    const v108 = v107.buffer;
    Object.defineProperty(v108, "constructor", { writable: true, enumerable: true, value: f20 });
    try { ("").replaceAll(v12, ""); } catch (e) {}
    eval("");
    Uint32Array[2] = 1;
    v108.slice(2147483648);
    %OptimizeFunctionOnNextCall(f69);
    let v117;
    try { v117 = v53["find"](..."find", a59, ...v47, ...v53, ...522675525n); } catch (e) {}
    return v117 <= a58;
}
f55.group = v47;
try { f55(f0, v47, f20, v47); } catch (e) {}
for (let v120 = 0; v120 < 10; v120++) {
    f55(v53, v120, v120, v120);
}
%OptimizeFunctionOnNextCall(f55);
f55(f55, v46, 2684, f55);
