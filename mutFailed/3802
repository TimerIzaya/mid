const v0 = [];
function f1() {
    const o7 = {
        "a": v0,
        "e": v0,
        o() {
            this[this];
            for (let v4 = 0; v4 < 32; v4++) {
                v0["p" + v4] = v4;
            }
            return v0;
        },
    };
    return o7;
}
const v8 = f1();
const v9 = f1();
f1();
function F11(a13) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a13;
    } catch(e14) {
    }
    try {
        this.d = v9;
    } catch(e15) {
    }
    try {
        this.b = v0;
    } catch(e16) {
    }
}
new F11(v8);
new F11(v9);
new F11(v8);
const v26 = new Set();
const v28 = v26["delete"](839612.5677247904);
const v30 = new Float64Array(127);
(127).constructor;
new Int8Array(1073741823);
let v35 = 9223372036854775807;
v35 = 65536;
1024 >>> 1024;
try { new Uint32Array(1024, Uint32Array, 127); } catch (e) {}
const v41 = new v28(1024);
Float64Array.e = Float64Array;
const v44 = new Float64Array(159);
try { v41.filter(Float64Array); } catch (e) {}
[v44];
[v30];
[Float64Array,Uint32Array,159,127];
[1000000000.0,-1000.0];
function F50(a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.hasOwnProperty(a52); } catch (e) {}
    const v55 = this.constructor;
    try { new v55(); } catch (e) {}
    a52--;
    a52 & a52;
}
function f59(a60) {
    return a60;
}
class C61 extends f59 {
    [1024] = Float64Array;
    [1073741823];
}
new F11();
("29753").replaceAll("29753", "b").split("2147483648");
("boolean").split("toString");
function f70(a71, a72, a73) {
}
function f74(a75, a76, a77, a78) {
}
const v81 = new Uint8ClampedArray(104);
v81.toLocaleString();
("29753").toLocaleLowerCase();
