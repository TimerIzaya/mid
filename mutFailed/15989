const v0 = [];
class C1 {
    static h;
    o() {
        const v5 = new Array(127);
        return v5;
    }
    2147483649 = v0;
    8;
    [v0] = v0;
}
const v6 = new C1();
const v7 = new C1();
const v8 = new C1();
class C9 extends C1 {
    static valueOf(a11, a12) {
        return 0.5296602282776379;
    }
    3 = v6;
    g = v8;
    static #b;
    [v0] = v6;
}
const v16 = new C9();
const v17 = new C9();
const v18 = new C9();
class C19 extends C9 {
    f;
    static [v7] = v17;
    2095 = v6;
    constructor(a21, a22, a23, a24) {
        super();
        d = a23.g;
    }
}
const v29 = new C19(v7, v0, v16, v18);
const v30 = new C19(v17, v29, v29, v16);
function f31() {
}
class C32 {
    o(a34, a35) {
        for (const v37 of "bigint") {
        }
        f31();
    }
}
new C32();
new C32();
/(x)(x)(x)\1/uis;
[f31,[f31],C32];
function F46() {
    if (!new.target) { throw 'must be called with new'; }
    const o49 = {
    };
}
const o50 = {
};
new Float32Array(260330366);
new F46();
new Float64Array();
const v59 = [1613217357,204598905,15977,1122227661,64,-2,-12,536870888];
[NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
class C61 {
}
new C61(v59, 659.0540372978887);
("valueOf").localeCompare();
new Float32Array();
new C19(v30, C9, v17, v30);
function f67(a68, a69, a70, a71) {
    ("Vre").charAt();
    const v75 = new Uint8Array(a69);
    for (let v76 = 0; v76 < 5; v76++) {
    }
    let [v77] = v75;
    return f67;
}
for (let v78 = 0; v78 < 10; v78++) {
    f67(v78, v78, f67, f67);
}
%OptimizeFunctionOnNextCall(f67);
f67();
