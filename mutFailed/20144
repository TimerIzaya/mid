[];
const v3 = new Uint8ClampedArray(245);
const v6 = new Float32Array(8);
const v9 = new Int8Array(1000);
class C10 extends Uint8ClampedArray {
    constructor(a12, a13) {
        super(8, 245, a12);
        v6[10] <<= 8;
        this in v3;
        try { v9.findLast(1000, this); } catch (e) {}
    }
    #b = v6;
    static [1000] = 1000;
    static #d = 1000;
    e = v6;
    d = Int8Array;
    static [1000];
    static 0;
    static b = 8;
    static set h(a17) {
        try { a17(v9, a17, this, 8); } catch (e) {}
        let v20;
        try { v20 = a17["setInt16"](this, v6, this, a17, a17); } catch (e) {}
        const v21 = new Float32Array(this);
        const v22 = new Uint8ClampedArray(v21, v20);
        ["setInt16"];
        const v24 = ["setInt16",v22];
        [v24,v24,245,Int8Array];
    }
    g;
    #g;
    #a = Float32Array;
    [1000];
    [Uint8ClampedArray];
}
const v26 = new C10(8, 8);
new C10(1000, 1000);
const v28 = new C10(8, 8);
const v33 = [/D[\p{Script_Extensions=Mongolian}&&\p{Number}]*/udisy];
const v35 = ["-536870912","replace",v33,1,[v33]];
const v37 = [];
Reflect.apply(("-536870912").normalize, v35, v37);
const t41 = "replace";
t41[v33] = v26;
try {
    v28.reduceRight(isFinite);
} catch(e42) {
}
