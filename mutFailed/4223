let v0 = /a|b/vdy;
let v1 = /7Z(?:a?)+/gudsy;
const v2 = /\coQ/gdy;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v0;
    } catch(e6) {
    }
    try {
        this.g = a5;
    } catch(e7) {
        v2.dotAll >>= e7;
        let v8;
        try { v8 = e7(e7, v1); } catch (e) {}
        v1 = v8;
        return e7;
        v0 = v8;
    }
}
const v9 = new F3(v0);
const v10 = new F3(v1);
const v11 = new F3(v0);
class C12 extends F3 {
    static {
        super[v11] = v0;
        let v14;
        try { v14 = v1(F3); } catch (e) {}
        super.g |= v0;
        let v15;
        try { v15 = v2.exec(v14); } catch (e) {}
        const v16 = super[v15];
        try { v16(this, v16); } catch (e) {}
        v2[4];
        const v20 = v11 === v14 ? v11 : v14;
        try {
            v14.c = this;
        } catch(e21) {
            const o22 = {
                [e21]: this,
                "f": v20,
            };
            v10[Symbol.match];
        }
    }
    #h;
    static #g;
    g = v9;
    #b;
}
const v26 = new C12();
const v27 = new v26();
new C12();
const v29 = [-1077398797,2,1671415104,4294967297];
function f30(a31, a32, a33) {
    function f35(a36) {
        ++a36;
    }
    this.onmessage = f35;
    try {
        this.fuck(v11, a32);
    } catch(e39) {
    }
}
const v42 = [C12,v10,v0];
const o43 = {
    "arguments": v42,
    "type": "function",
    [v2]: "function",
    "d": v27,
    __proto__: v27,
    [f30]: v26,
    "e": v29,
};
new Worker(f30, o43);
[10,-11,-311602405,26740,6,697968897,-6,-2110822617,-39657,1073741823];
const v46 = [-5,-65536,-65537,14311,14,255];
function f47(a48, a49) {
    const v52 = a48 % a48;
    Math.log(3);
    v46 / v52;
    Math.imul(Worker, v52);
    Math.log(3);
    a49.constructor(a49);
    return f47;
}
new Promise(f47);
