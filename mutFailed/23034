[2,-4294967295,9007199254740991,257,536870887,2056960275,268435439,450059285];
const v1 = [-4294967295,268435441,2147483647,536870888,3,12,12];
const v2 = [65537,-14,31765,-1610112248,9007199254740992,32016,-268435456];
const v7 = ["MAX_VALUE","undefined",[v2,v1]];
[v1,"MAX_VALUE",v7,"undefined",v7];
const v12 = [v2,"undefined",-35032];
[v2,["MAX_VALUE"],-35032];
16 | 16;
v12 | [1073741824,-46456,536870888];
new Int16Array(2183);
/[[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]]/vim;
const o32 = {
    next() {
    },
    m(a25) {
        try { a25.m(); } catch (e) {}
        a25.next();
        const v30 = new Int8Array(3938);
        let v31 = 3;
        [...v31] = v30;
    },
};
for (let i48 = (() => {
        new Int16Array(2);
        function f36(a37, a38, a39, a40) {
            class C42 extends Date {
            }
            const v43 = new C42();
            v43.getDay();
            return f36;
        }
        f36(-35032, -35032, -35032, -35032);
        f36();
        return 0;
    })();
    i48 < 10;
    i48++) {
    const v54 = new v7();
    function f55(a56, a57, a58, a59) {
        const v62 = new Int16Array(1269);
        for (const v63 in v62) {
        }
        const o70 = {
            valueOf(a65, a66, a67, a68) {
                const o69 = {
                    [a57]: v54,
                };
                return a57;
            },
        };
        return o70;
    }
    f55(v7, f55, v7, v7);
    const v74 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v76 = new Uint32Array(v74);
    let v77 = -4294967297n;
    const v78 = v77--;
    const v79 = [601759695];
    const v80 = [1073741824,1073741823,1376142744,1073741825];
    function f82(a83, a84, a85, a86) {
        const v87 = a83?.constructor;
        try { v87(); } catch (e) {}
        function f89() {
            try { ("Vre").charAt(4096); } catch (e) {}
            const v92 = ("Vre").codePointAt();
            v92 ^ v92;
            let v94 = Float64Array;
            v94 = a84;
            b = v74;
            try {
                v80.forEach();
            } catch(e96) {
            }
            const o107 = {
                "c": v77,
                valueOf(a98, a99) {
                    return v76;
                },
                1073741824: v76,
                [v77](a101, a102, a103, a104) {
                    eval(a102);
                },
            };
            return v77;
        }
        f89();
        const v111 = new Int32Array(1024);
        const v112 = v111[3];
        v112 + v112;
        1024 * v112;
        for (let v115 = 0; v115 < 5; v115++) {
        }
        %OptimizeFunctionOnNextCall(f89);
        try { v80["find"](..."find", a86, ...v79, ...v80); } catch (e) {}
        return f82;
    }
    f82(v78, Uint32Array, 522675525n, v77);
    try { ("boolean").trimEnd(); } catch (e) {}
    try {
        const o120 = {
        };
        function F122(a124, a125) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                class C126 extends 4096 {
                }
            } catch(e127) {
                class C128 {
                    constructor(a130, a131) {
                        const o134 = {
                            "type": "minor",
                        };
                        o134.b = o134;
                        gc(o134);
                    }
                }
                const v136 = new C128();
                v136.constructor;
            }
        }
        const v138 = new F122(4096, F122);
        const v140 = new Date();
        const v143 = new Float32Array(v140, v138, v138);
        const v145 = new Uint8Array(268435440);
        v145[6] = v143;
    } catch(e146) {
    }
}
