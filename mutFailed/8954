Int16Array.g = Int16Array;
const v8 = new Int16Array(16);
9 & 9;
v8[4294967297] >>= 9;
a = 268435440;
const v15 = new Int16Array(9);
new Uint8ClampedArray(15);
const v27 = `
    try { v15.map(1073741825n, v15); } catch (e) {}
`;
const v30 = eval(v27);
522675525n | 522675525n;
function f34(a35, a36, a37, a38) {
    const v39 = a35 === a35;
    const v40 = a38 >= a38;
    arguments[3];
    let v44;
    try { v44 = ("Vre").search("Vre"); } catch (e) {}
    let v46;
    try { v46 = a38.localeCompare(); } catch (e) {}
    const v47 = new Int16Array(arguments, v46, 13);
    try { v47.reverse(); } catch (e) {}
    try { a35(Int16Array, -479221699); } catch (e) {}
    try { v30(Int16Array, v44, v40, v39, -4294967297n); } catch (e) {}
    Float64Array.g = Float64Array;
    Int8Array.length;
    2147483648 ^ 2147483648;
    -1024;
    const v61 = new Int32Array(Symbol);
    try { v61.entries(); } catch (e) {}
    v61[492];
    v61[3];
    return "find";
}
for (let v66 = 0; v66 < 10; v66++) {
    f34(v66, 522675525n, f34, v66);
}
%OptimizeFunctionOnNextCall(f34);
const v68 = f34(7.589647165982214, 1073741825n, 522675525n, 411585671n);
try { v68.fontcolor(Uint8ClampedArray); } catch (e) {}
