function f0() {
}
class C4 {
}
new C4();
const v7 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
function f8(a9) {
    return 512;
}
v7.toString = f8;
const v12 = new BigInt64Array(257);
%PrepareFunctionForOptimization(f0);
function F14() {
    if (!new.target) { throw 'must be called with new'; }
}
const v17 = new F14();
Object.defineProperty(v17, "toString", { configurable: true, enumerable: true, value: f0 });
const o25 = {
    [v17](a20, a21, a22, a23) {
        "D2z" < a20;
    },
};
new Uint8Array(1912);
new Float64Array(16);
function F31(a33, a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a34;
    } catch(e36) {
    }
    this.e = 4096;
    function f38() {
        return f38;
    }
    class C39 {
    }
    new F14(v12, []);
    ("toString").match();
    const v46 = [1613217357,204598905,15977,1122227661,64,-2,-12,536870888];
    const v47 = [12,-256,-4096,2,7,8,21956,46111,11,10];
    v47[4] = v47;
    const v48 = [-1073741824,1665564361,16526,1805211777,10,-9007199254740990,4,-17063,-1];
    const v49 = [-2.2250738585072014e-308,0.8014728140665155,1.4073101706157717e+308,1.4751052216559766e+308,2.0,-692.9604671107461,-2.220446049250313e-16,2.0];
    const v50 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
    const v51 = [-1.015259194643325e+308,-Infinity,-9.825391401141273,-2.2250738585072014e-308,5.0,-2.2250738585072014e-308];
    class C52 {
        constructor(a54, a55, a56, a57) {
            const v58 = this?.constructor;
            try { new v58(v50, a56, a56, v46); } catch (e) {}
            a55 >>> a55;
            -0.0 >>> -0.0;
        }
        /*
        constructor(a66, a67, a68, a69) {
            const o75 = {
                "maxByteLength": 2240,
            };
            const v77 = new ArrayBuffer(2240, a67);
            new Uint8ClampedArray(v77);
            this[268435456];
            v49 && this;
            try {
                v49.length = v51;
            } catch(e82) {
            }
        }
        */
        static 268435439 = v48;
        #c = -2.2250738585072014e-308;
        static 832209355 = 2.220446049250313e-16;
    }
    function f83(a84) {
        new C52(...v48, a84, ...v50, ...v51);
        new Float64Array();
        return -2.2250738585072014e-308;
    }
    C52.valueOf = f83;
    v47.length = C52;
    try {
        function f88() {
            return f88;
        }
        function f89() {
            [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
            const v92 = ([-1000000.0,771279.5641904315,0.0,8.299995604235331,6.625300935335886,-820.4949035918538,-602.5256799896665,0.6342705996691437,Infinity]).toLocaleString();
            let v93;
            try { v93 = v92.search(f89); } catch (e) {}
            return v93;
        }
        function F94() {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F94();
        ("D")[0].lastIndexOf("D");
        this.e = a33;
        class C100 {
        }
        let v101 = new C100();
        class C102 extends C100 {
            o(a104, a105) {
                v101 %= this;
                %VerifyType(super.g);
            }
        }
    } catch(e113) {
    }
}
new F31(-1, 16, 1912);
new F31(55701, -1, -1);
new F31(4294967295, BigInt64Array, 4294967295);
function f118() {
}
function f119() {
    const o137 = {
        valueOf() {
            try {
                for (let v124 = 0; v124 < 10; v124++) {
                    with ([4294967297,-1648241970,9,3,-2,0,-4294967296,10]) {
                        length | length;
                    }
                    function F131(a133) {
                        if (!new.target) { throw 'must be called with new'; }
                        this.b;
                    }
                    new F131();
                }
                this.valueOf = f118;
            } catch(e136) {
            }
        },
    };
    return o137;
}
const v139 = new Uint32Array(4);
new Float64Array(v139);
("D2z").trimRight();
function F143(a145, a146, a147) {
    if (!new.target) { throw 'must be called with new'; }
}
F143();
let v149 = 10;
for (;
    (() => {
        const v150 = v149--;
        v150 >>> v150;
        return v150;
    })();
    ) {
}
