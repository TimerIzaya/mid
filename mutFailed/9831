const v3 = [Infinity,721647.978649844,Infinity,Infinity,-1000.0];
const v4 = [v3,-1000.0];
const v5 = [-1000.0,v4,v3];
[v3,v5,v5,-1000.0,-1000.0];
[[v4],-1000.0];
new BigInt64Array(13);
new Float32Array(1993);
const v17 = new Float64Array(1000);
const o18 = {
    "f": 721647.978649844,
};
const v20 = new Date();
const v22 = new BigUint64Array();
v22[v20] = v20;
class C24 {
}
for (let i27 = 0, i28 = 10;
    i27 < i28;
    (() => {
        const v32 = [601759695];
        const v33 = [1073741824,1073741823,1376142744,1073741825];
        function f35(a36, a37, a38, a39) {
            function f40(a41, a42) {
                return i27;
            }
            f40(v33, C24);
            try { v33["find"](..."find", a39, ...v32, ...v33, ...522675525n); } catch (e) {}
            const v47 = new v17();
            const v49 = new Set();
            v49.add(v47);
            let [v51,,...v52] = v49;
            v51.setUTCMilliseconds();
            return a38;
        }
        for (let v54 = 0; v54 < 10; v54++) {
            f35(v54, f35, i27, v54);
        }
        i27++;
    })()) {
}
([-2.220446049250313e-16,-2.0,-4.926552391544163,0.4191996832717132,1.0,-455962.3271780333,-1000000000000.0,-4.0,446489.561411778])[1];
[5.0,-2.342856725751538e+307,1000000000.0];
[5.731799136885705,-8.861193309290517,-186.94205592339722,-1.0,-2.0,569.1323592186607];
function f65() {
    const v66 = [1000000.0,4.0,877990.5497759602,-506457.5906391711,1.5877136832764825e+308,-5.0,0.37988723353754195];
    const v67 = [-2.2250738585072014e-308,4.258971338651328e+307];
    class C69 {
        #valueOf(a71, a72) {
            try {
                new Float64Array(1260242888, -12, 9);
            } catch(e77) {
            }
        }
        static #a = v67;
        #g = 536870887n;
        static #f = v66;
        #b;
    }
    return 20947;
}
f65.length;
let v79 = 1129447093;
v79--;
f65();
%PrepareFunctionForOptimization(f65);
f65();
-f65();
%OptimizeFunctionOnNextCall(f65);
f65();
-1166767713 !== -1166767713;
[Uint8Array,Uint8Array,Uint8Array];
const o98 = {
    "e": -4294967295,
    ..."Vre",
    valueOf(a96, a97) {
    },
    ..."Vre",
    4: "Vre",
    "c": -268435456,
    5: -4294967295,
    6: -268435456,
};
const v99 = new BigUint64Array();
function F100() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v102 = 0;
        let v103 = 0;
        while ((() => {
                const v105 = v103 < 0;
                !v105;
                return v105;
            })()) {
            for (let v107 = 0; v107 < 5; v107++) {
            }
            v103++;
        }
        do {
            try { v99.entries(); } catch (e) {}
            v102++;
        } while (v102 < 5)
        new F100();
    } catch(e115) {
    }
}
new F100();
