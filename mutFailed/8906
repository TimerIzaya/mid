const v3 = new Error(Error, Error, Error);
function F4(a6, a7) {
    if (!new.target) { throw 'must be called with new'; }
}
let v8 = new F4(Error, v3);
function f9(a10) {
    let v11;
    try { v11 = v8.resize(v3, F4, Error, a10); } catch (e) {}
    v3.length |= v11;
    return v11;
}
const v13 = ["a","ElQi","a"];
const v14 = ["ElQi","max","ElQi",v13];
[v13,"a"];
const v16 = v3[8];
const o17 = {
};
try {
    o17.h = v16;
} catch(e18) {
}
try {
    const o19 = {
    };
    o19.h = v16;
    o19.a = v16;
} catch(e20) {
}
try {
    const o21 = {
    };
    o21.h = v16;
    o21.a = v16;
    o21.d = v16;
} catch(e22) {
}
try {
    const o23 = {
    };
    o23.h = v16;
    o23.a = v16;
    o23.b = v8;
} catch(e24) {
}
Reflect.construct(f9, [v14], f9);
let v29 = 129;
const v31 = new BigInt64Array(v29);
new Uint8Array(4);
new Uint32Array(8);
v29 = 9;
Object.defineProperty(v8, 9, { writable: true, configurable: true, enumerable: true, get: Error });
Uint8Array * v8;
("max").__proto__;
v8 >>= v31;
new Float32Array(9);
class C45 {
    set e(a47) {
        ("max")[10];
        const v52 = ~-819000863;
        Uint8ClampedArray.sin(v52);
        !v52;
        +-1192114947;
        -v14;
    }
    b;
    static h;
}
new C45();
const v58 = new C45();
new C45(v58, v58);
function f60() {
    const o61 = {
    };
    return o61;
}
const v62 = f60();
const v63 = f60();
([Error,Error])["indexOf"](v62, v63);
function f68(a69) {
    return f68;
}
function f70(a71, a72, a73, a74) {
    let v75 = 10;
    for (; v75++;) {
    }
    try { a72.apply(a71); } catch (e) {}
}
