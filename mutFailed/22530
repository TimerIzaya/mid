function f0() {
    const o4 = {
        "f": 10,
        "b": "atanh",
        ..."repeat",
        ..."repeat",
        "c": "atanh",
        "e": f0,
        "a": "atanh",
        __proto__: "atanh",
        "d": f0,
        1: f0,
        ["repeat"]: "repeat",
        /*
        __proto__: "repeat",
        */
        "a": 10,
        ..."repeat",
        16: 10,
        ..."atanh",
        [10]: 10,
        "e": "atanh",
        "g": "repeat",
    };
    return o4;
}
f0();
const v6 = f0();
const v7 = f0();
v7.b;
new Uint32Array(114);
try {
    new Int32Array(255);
} catch(e15) {
}
[4294967297,3,2059021648,-3997,-1213,9007199254740990,10000,268435440,268435456];
const v17 = [9007199254740991,536870887,-55957,4294967295];
const v18 = [-4294967296,268435456,-60149,4,7];
new Int32Array(255);
const v22 = new Float32Array(255);
v22[87];
const o24 = {
    [v18]: v7,
    __proto__: v17,
};
try { o24.toLocaleString(); } catch (e) {}
let v26 = -1e-15;
v26--;
-2.247444848960991 % -2.247444848960991;
const v32 = new Set();
try { v32.keys(); } catch (e) {}
class C34 {
    static {
        for (let [i118, i119] = (() => {
                let v37 = 10;
                v37--;
                const v44 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
                try { v44.reduceRight(this); } catch (e) {}
                const v46 = [601759695];
                const v47 = v46?.filter;
                try { new v47(v37); } catch (e) {}
                const v49 = [1073741824,1073741823,1376142744,1073741825];
                function f51(a52, a53, a54, a55) {
                    a53 != a53;
                    const v57 = a54 | a54;
                    arguments[2] = arguments;
                    function f59() {
                        const t13 = "Vre";
                        t13.c = "Vre";
                        const v61 = ("Vre").toLocaleUpperCase;
                        try { v61.bind(-4294967297n); } catch (e) {}
                        let v63;
                        try { v63 = v61.toString(); } catch (e) {}
                        try { v63.toWellFormed(); } catch (e) {}
                        let v65;
                        try { v65 = v61(a54, "Vre", a52); } catch (e) {}
                        const v66 = ("Vre").fixed(v65, -4294967297n, a52);
                        v66[6];
                        const v68 = v66.codePointAt();
                        let v70 = -268435456;
                        const v71 = v70--;
                        let v72 = v71 % v71;
                        v72--;
                        const o93 = {
                            "c": -4294967297n,
                            [522675525n](a75, a76) {
                            },
                            ..."Vre",
                            "maxByteLength": -128,
                            "arguments": v46,
                            [v68]: -1547267477n,
                            __proto__: a54,
                            "d": v71,
                            "e": -4294967295,
                            "h": -128,
                            valueOf(a78, a79) {
                                return a53;
                            },
                            ...v49,
                            "f": v57,
                            "a": v65,
                            ...arguments,
                            ...v44,
                            "e": v57,
                            "e": v70,
                            "maxByteLength": -4294967295,
                            "arguments": v44,
                            ...v46,
                            "type": "Vre",
                            ..."Vre",
                            valueOf(a81, a82) {
                                return -4294967295;
                            },
                            "c": v70,
                            "type": "Vre",
                            "type": "Vre",
                            [v44](a84, a85, a86) {
                            },
                            o(a88) {
                                return a88;
                            },
                            "type": "o",
                            "type": "129",
                            toString(a90, a91, a92) {
                            },
                        };
                        return arguments;
                    }
                    f59();
                    %OptimizeFunctionOnNextCall(f59);
                    return a54;
                }
                for (let v95 = 0; v95 < 5; v95++) {
                    const v96 = f51(v46, v95, v95);
                    v96 >>> v96;
                }
                function f98(a99, a100, a101, a102) {
                    const v104 = new BigUint64Array();
                    function F105() {
                        if (!new.target) { throw 'must be called with new'; }
                        try {
                            Object.defineProperty(v104, 0, { writable: true, value: 4096 });
                            try {
                                v7.__proto__ = this;
                            } catch(e108) {
                            }
                            try { v32.entries(); } catch (e) {}
                        } catch(e110) {
                        }
                    }
                    F105.d = F105;
                    const v111 = new F105();
                    const v112 = v111?.constructor;
                    try { new v112(); } catch (e) {}
                    try { v111.constructor(); } catch (e) {}
                    return -128;
                }
                for (let v115 = 0; v115 < 10; v115++) {
                    f98();
                }
                %OptimizeFunctionOnNextCall(f98);
                f98();
                return [0, v37];
            })();
            i118++, i119 < i119, i118 < i119;
            (() => {
                i119 - i119;
                function f126() {
                    return f126;
                }
                const v127 = [601759695];
                const v128 = [1073741824,1073741823,1376142744,1073741825];
                v128[2];
                function f131(a132, a133, a134, a135) {
                    const v137 = arguments?.__lookupSetter__;
                    try { new v137(v128); } catch (e) {}
                    function f139() {
                        try {
                            v17.c = a135;
                        } catch(e140) {
                        }
                        try { v128.reduceRight(f131, a133); } catch (e) {}
                        return a132;
                    }
                    f126();
                    const v144 = new Int8Array();
                    function f145(a146, a147) {
                        return i119;
                    }
                    const v148 = f145(v128, C34);
                    v148 + v148;
                    const v150 = f145(v148);
                    v150 / v150;
                    const v152 = v144.buffer;
                    -2147483648;
                    const v155 = v152.slice(2147483648);
                    try { v155.slice(f131, 255); } catch (e) {}
                    %OptimizeFunctionOnNextCall(f139);
                    try { ("find").split(o24, "find"); } catch (e) {}
                    v7 & v127[52];
                    function F161(a163, a164, a165) {
                        if (!new.target) { throw 'must be called with new'; }
                        const v166 = this?.__defineSetter__;
                        try { new v166(a165, a132); } catch (e) {}
                        a163 >> a163;
                        a165--;
                        try {
                            this.b = f139;
                        } catch(e170) {
                        }
                        try {
                            this.e = Int8Array;
                        } catch(e171) {
                        }
                    }
                    new F161(-2.247444848960991, 255, 114);
                    const v173 = new F161(a134, v150, 255);
                    try { v173.b(); } catch (e) {}
                    new F161(-2.247444848960991, v148, i118);
                    let v176;
                    try { v176 = v128["find"](..."find", a135, ...v127, ...v128, ...522675525n); } catch (e) {}
                    v176 <= a134;
                    return arguments;
                }
                for (let v178 = 0; v178 < 10; v178++) {
                    f131();
                }
                i118++;
            })()) {
        }
    }
}
try { C34.bind(v6); } catch (e) {}
