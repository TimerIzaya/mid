function f0() {
}
new WeakSet();
const v5 = new Map();
const v6 = [v5,f0,f0,v5,f0];
[,v6,WeakSet,Map,v5];
[,Map,f0];
function f9() {
    return WeakSet;
}
const v11 = new BigUint64Array();
const o21 = {
    [v11](a14, a15, a16) {
        class C18 {
            #d = 4096;
            static {
                this.#d;
            }
        }
    },
};
const v22 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
const v23 = /(?:a*)+q(?<a>.)/guds;
function f24(a25) {
    v22.constructor.isArray(v23);
    return a25;
}
for (let i30 = 0, i31 = 10; i30 < i31; i31--) {
    f24(v23);
}
function F40(a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    const v44 = this.constructor;
    const v46 = /[a-zA-Z0-9]/gvisy;
    const v47 = /abc?/gvmy;
    v47[-2] ^= v46;
    v47.exec("Q8F");
    const v50 = new Int16Array();
    const v51 = v50.lastIndexOf(F40, a42);
    v51 ^ v51;
    try { new v44(this, a42); } catch (e) {}
    new Uint32Array(127);
    for (let v57 = 0; v57 < 5; v57++) {
    }
}
const v58 = new v6();
const t46 = v58.constructor;
new t46();
