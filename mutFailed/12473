class C3 {
    static 10;
    2147474349;
    536870887;
    set e(a5) {
    }
    5;
    #d;
    2;
    constructor(a7) {
        Object.defineProperty(a7, "length", { writable: true, configurable: true, enumerable: true, value: a7 });
        function F8(a10, a11) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = a11;
            } catch(e12) {
            }
            try {
                this.e = "unscopables";
            } catch(e13) {
            }
        }
        new F8(a7, a7);
        new F8("unscopables", "F9yQ3");
        new F8(this, "F9yQ3");
    }
}
new C3("unscopables");
new C3("p25");
new C3("unscopables");
const v27 = new Set();
function f28(a29) {
    const o37 = {
        "a": v27,
        o(a31, a32) {
            const v33 = super[a29];
            for (let v34 = 0; v34 < 10; v34++) {
                a29["p" + v34] = v34;
            }
            return v33;
        },
        ...v27,
    };
}
f28(Set);
new Uint32Array(420);
new Int32Array();
const o47 = {
};
o47.h = o47;
const v50 = 1842642860 % !o47;
v50 % v50;
const v52 = new WeakMap();
try { v52.delete(); } catch (e) {}
class C54 {
}
("isInteger")?.replaceAll;
[-2147483647,64098,-9383,1024,129,-5];
[1000,-16,-38597,12,-3399,32508];
[-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v66 = new Uint32Array();
const v68 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v69 = [601759695];
const v70 = [1073741824,1073741823,1376142744,1073741825];
function f71(a72, a73, a74, a75) {
    function f77() {
        let v80 = Float64Array;
        v80 = a73;
        b = v69;
        try {
            v70.forEach(a73);
        } catch(e82) {
        }
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        new Float32Array(10, 10, 10);
        Math.atan2(536870912, -9);
        const o91 = {
        };
        const o106 = {
            "c": -4294967297n,
            "c": v69,
            valueOf(a94, a95) {
            },
            1073741824: v66,
            "maxByteLength": -268435456,
            "b": -4294967295,
            [-4294967297n](a97, a98, a99, a100) {
                class C102 extends Date {
                    static get c() {
                    }
                }
                class C104 {
                }
                arguments[0] = arguments;
            },
            "e": -4294967295,
            "e": -268435456,
            "arguments": v68,
            256: a75,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            6: -268435456,
        };
    }
    f77();
    const v108 = new Int8Array();
    v108.buffer.slice(2147483648);
    const v112 = new Int32Array();
    v112[3];
    for (let v114 = 0; v114 < 10; v114++) {
    }
    %OptimizeFunctionOnNextCall(f77);
    let v116;
    try { v116 = v70["find"]("find", a75, v69, v70); } catch (e) {}
    v116 <= a74;
    return arguments;
}
for (let v118 = 0; v118 < 10; v118++) {
    f71();
}
%OptimizeFunctionOnNextCall(f71);
f71();
[-50328,-14,3,128,-11,64,-65535];
class C122 {
    g;
    c;
    1 = 257n;
}
new C122(1073741825n, 1.0, 7.589647165982214);
const v124 = new C122(411585671n, -1000000.0, -1000000.0, 1.0);
new C122(v124, -1000000.0, 1.0);
/(?:a*)+bU\u0034xyz{1,32}/udi;
/vfoo|(bar|baz)|quux/gvds;
/JO/gvy;
function F130() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v132 = 0;
        do {
            v132++;
        } while (v132 < 5)
        new F130();
    } catch(e137) {
    }
}
new F130();
class C140 {
    #m(a142, a143) {
        function f144() {
            return a143;
        }
        super[a143] = "f";
        %VerifyType(a143);
        return f144;
    }
    static c;
}
try { C140(); } catch (e) {}
const v146 = new C140();
let v147 = 5;
v147--;
class C150 {
}
const v151 = new C150();
function F152(a154, a155, a156, a157) {
    if (!new.target) { throw 'must be called with new'; }
    const v158 = a156.valueOf(a157, this, a156, this, a154);
    v158.__lookupSetter__(v158);
}
new F152("m", C150, v151);
const v161 = new C140();
v161?.constructor;
const v163 = new C140();
v163?.constructor;
class C165 {
    p(a167) {
        this.g ^= this[8];
    }
    static #n(a170, a171, a172, a173) {
    }
    7 = v163;
    #a = v161;
}
const v174 = new C165();
v174[7] = v174;
const v175 = new C165();
v175[7] = v175;
const v177 = [[],"f",v163,381717.6504737276];
Reflect.construct(Int16Array, [[-1,16,65536]]);
class C183 {
}
const v184 = new C183(Int16Array);
const v185 = new C183();
function f187(a188, a189, a190) {
    a188[22] = a188;
    const o191 = {
        ...a190,
        2: v184,
        268435439: C183,
    };
    return o191;
}
f187(v185, "-65537");
[v146];
function F194() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(); } catch (e) {}
}
const v197 = new F194();
function F198(a200, a201) {
    if (!new.target) { throw 'must be called with new'; }
    const v202 = a201?.__lookupGetter__;
    try { v202(); } catch (e) {}
    try { this.constructor(F198, this); } catch (e) {}
    a200.e = a200;
}
F198.arguments = F198;
new F198(v197);
const v207 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const o208 = {
    ...v207,
};
const v210 = new Map();
const v211 = v210.values();
try { v211.next(); } catch (e) {}
("Hyo9")[1];
const t229 = "at";
t229[1] = "at";
([1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0])?.groupToMap?.constructor;
const v218 = [-4.202468609045087];
try { v218.every(v177); } catch (e) {}
[0.8434386161503777];
("4i")?.toWellFormed;
const t235 = "4i";
t235[1] = "4i";
const t239 = "RpXR";
t239[3] = "RpXR";
const t241 = "RpXR";
t241[1] = "RpXR";
("c")?.toLocaleUpperCase.length;
class C228 {
    constructor(a230) {
        ("valueOf").localeCompare(a230, "valueOf");
    }
}
const v232 = new C228();
const t250 = v232.constructor;
new t250(C228);
9 >> 9;
