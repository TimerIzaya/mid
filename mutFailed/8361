class C3 {
    constructor(a5) {
        try {
            const t3 = "boolean";
            t3.length = "boolean";
        } catch(e6) {
            const v7 = async (a8, a9, a10) => {
                let v11;
                try { v11 = this.n(e6, a10); } catch (e) {}
                Reflect.construct(v11, [Reflect,a5], a9);
                await a10;
                return a8;
            };
        }
    }
    ["boolean"] = "boolean";
    h;
    static #f;
    static #d;
    #h = "boolean";
}
new C3("boolean");
const v17 = new C3("boolean");
new C3("-34002");
class C19 extends C3 {
    #a;
    constructor(a21, a22, a23, a24) {
        super("-34002");
        new C3("boolean");
        a22[4] = a23;
        try {
            v17.#a;
        } catch(e27) {
        }
    }
    d;
}
new C19("-34002", "boolean", "boolean", "-34002");
new C19("boolean", "boolean", "boolean", "-34002");
new C19("boolean", "-34002", "boolean", "boolean");
const v31 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f32(a33, a34, a35, a36) {
    a35?.constructor;
    const v38 = /(?:a*)+q(?<a>.)/guds;
    function f39(a40) {
        const v41 = v31.constructor;
        v41(v41);
        a40.constructor.$2;
    }
    for (let [i50, i51] = (() => {
            function f46(a47, a48) {
            }
            return [0, 10];
        })();
        (() => {
            const v52 = i50 < i51;
            !v52;
            return v52;
        })();
        i51--) {
        for (let v59 = 0; v59 < 25; v59++) {
            f39(v38);
        }
    }
    function f61() {
    }
    return f61;
}
for (let v62 = 0; v62 < 10; v62++) {
    f32();
}
%OptimizeFunctionOnNextCall(f32);
f32();
