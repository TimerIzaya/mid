class C3 {
    get prototype() {
        return this;
    }
    static #p(a7) {
        if (a7) {
            try {
                super.toString(a7, a7, this);
            } catch(e9) {
            }
        } else {
        }
        return this;
    }
}
new C3();
const v14 = new C3();
const v15 = new C3();
class C16 extends C3 {
    constructor(a18, a19, a20) {
        super();
        const o24 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o24);
    }
}
const v26 = new C16(C3, v15, C3, v14, "b", "b");
new C16("b", v26, C3);
new C16(C3, v15, v15);
/5*/gi;
const v31 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v32 = [601759695];
const v33 = [1073741824,1073741823,1376142744,1073741825];
function f35(a36, a37, a38, a39) {
    function f41() {
        const o58 = {
            "c": -4294967297n,
            [522675525n](a46, a47) {
            },
            "c": v32,
            valueOf(a49, a50) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v31,
            ...v32,
            "type": "Vre",
            ..."Vre",
            valueOf(a52, a53) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a55, a56, a57) {
                return a36;
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f41();
    const v61 = new Proxy();
    v61.name.slice(2147483648);
    %OptimizeFunctionOnNextCall(f41);
    let v66;
    try { v66 = v33["find"](..."find", a39, ...v32, ...v33, ...522675525n); } catch (e) {}
    v66 <= a38;
    return arguments;
}
const v70 = new parseInt();
const v74 = new BigUint64Array();
for (let v75 = 0; v75 < 10; v75++) {
    f35(v32, v75, false);
}
%OptimizeFunctionOnNextCall(f35);
f35(v74, 40091, v70, 3216);
