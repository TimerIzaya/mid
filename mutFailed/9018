const v0 = [];
[-741.286769335705,4.0,2.220446049250313e-16,3.0,-6.257723434694591,937140.462589904,0.3273982727281617,3.645911515664377];
const v3 = Int32Array.bind(Int32Array, Int32Array, Int32Array);
v3.g = v3;
new Int32Array(127);
const v7 = [-4.0,-0.0,-2.0,-845.119666638372];
const v8 = [2.2250738585072014e-308,Infinity];
const v9 = [v0];
const v11 = [v0,v0,v7,[v8,v8,v7,v9],v9];
try { v11.entries(); } catch (e) {}
-4.0 * -4.0;
class C18 {
}
C18.e = C18;
const v19 = new C18();
const v20 = v19?.constructor;
try { new v20(); } catch (e) {}
const v23 = new Float64Array(Float64Array, Float64Array, Float64Array);
const v25 = new BigUint64Array();
try { v25.entries(); } catch (e) {}
const o37 = {
    toString(a28, a29) {
        const v30 = ~a29;
        const v31 = this.__lookupGetter__;
        const v32 = v31?.constructor;
        try { new v32(v31); } catch (e) {}
        try { new v31(v23); } catch (e) {}
        const v35 = a29 + a29;
        v35 >>> v35;
        v25[3408] = this;
        return v30;
    },
};
try { o37.toString(); } catch (e) {}
const v44 = /(J5a{0,1}?)/y;
v44.b = v44;
class C45 {
    static {
        try { this.apply(Int32Array, v25); } catch (e) {}
        const v49 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v50 = [601759695];
        -4294967295 - -4294967295;
        const o68 = {
            "c": -4294967297n,
            [522675525n](a56, a57) {
            },
            "c": v50,
            valueOf(a59, a60) {
            },
            "e": -4294967295,
            "maxByteLength": -4294967295,
            "arguments": v49,
            ...v50,
            "type": "Vre",
            ..."Vre",
            valueOf(a62, a63) {
            },
            ..."Vre",
            4: "Vre",
            "type": "Vre",
            toString(a65, a66, a67) {
            },
            5: -4294967295,
            6: -12,
        };
        for (let v69 = 0; v69 < 25; v69++) {
            v69 + v69;
            const v71 = [601759695];
            const v72 = [1073741824,1073741823,1376142744,1073741825];
            function f73(a74, a75, a76, a77) {
                a74.length;
                ~a75;
                try { a74(); } catch (e) {}
                const v81 = a76 << a76;
                v81 % v81;
                function f83() {
                    return a74;
                }
                const v84 = f83?.apply;
                try { new v84(v23, v71); } catch (e) {}
                const v87 = new Int8Array();
                try { v87.entries(); } catch (e) {}
                BigUint64Array.length;
                536870887 >>> 536870887;
                const v93 = BigUint64Array * 536870887;
                -v93;
                let v95 = v93 - v93;
                Number.isNaN(v95);
                v95++;
                const v99 = v93 ** v93;
                try { Number(v44); } catch (e) {}
                Number.isNaN(v99);
                const v104 = v87.buffer.__defineGetter__;
                v104.length = v104;
                try { v104(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f83);
                try { ("find").trimLeft(); } catch (e) {}
                let v108;
                try { v108 = v72["find"](..."find", a77, ...v71); } catch (e) {}
                return v108;
            }
            for (let v109 = 0; v109 < 5; v109++) {
                f73(this, v109);
            }
        }
    }
}
C45.length = C45;
