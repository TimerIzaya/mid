function f0() {
}
const v3 = new Uint16Array(128);
127 ^ 127;
const v7 = new Int16Array(127);
try { v7.reduce(127); } catch (e) {}
try { Float32Array.apply(128, v3); } catch (e) {}
new Float32Array(5);
9488 >> 9488;
const v19 = Uint32Array?.constructor;
try { new v19(Uint32Array); } catch (e) {}
const v21 = new Uint32Array();
const v24 = new Float64Array();
const v25 = v24?.entries;
try { new v25(); } catch (e) {}
function f28(a29, a30) {
    return -9223372036854775807;
}
f28.prototype;
[NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
class C33 {
    constructor(a35, a36, a37, a38) {
        const t22 = this.constructor;
        t22();
        a36 >>> a36;
        -0.0 >>> -0.0;
    }
}
const v46 = new Float32Array();
try { v46.lastIndexOf(127); } catch (e) {}
const v48 = [-2.317948391170037,5.380512071963272,1.0,532131.8089454074];
v48.g = v48;
[0.9815406638516286,121.30534539703694,-5.0,Infinity,-611091.1872133282,0.3052766402808791,0.0009368873469747241];
[0.3692093935150569];
class C51 {
    toString(a53, a54, a55, a56) {
        try { this["throw"](); } catch (e) {}
        const v62 = new Uint8ClampedArray(512);
        const v63 = v62?.toString;
        try { new v63(); } catch (e) {}
        eval.name = eval;
        new Uint8ClampedArray(798, ...v62, eval());
    }
    constructor(a69, a70) {
        function F71(a73, a74, a75) {
            if (!new.target) { throw 'must be called with new'; }
        }
        typeof arguments;
        for (let i = 0; i < 5; i++) {
            this[this];
        }
    }
}
try { new C51(Float64Array, v21); } catch (e) {}
new C51();
