const v0 = [4.0,1000000.0,-8.863716444883141e+307,-7.051358581573066,3.738967773003271,1000000000.0,-1000000000000.0,919632.5343997248];
const v1 = [5.878197119827912e+307,4.0,-1000.0,-1e-15,1.210101689507547e+307,1000000.0,882.0338507469542,-128648.86782465293,3.0794122840535034e+307,NaN];
const v2 = [-1.7976931348623157e+308,-871.2461609383993,-1000000000.0,2.2250738585072014e-308];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a5;
    } catch(e7) {
    }
}
const v8 = new F3(v1, v0, v2, v2, F3);
new F3(v1, v2, v1, F3, v8);
new F3(v2, v0);
const v13 = new Array(8);
new Uint32Array(15);
new EvalError(1107);
new Uint16Array(-7531, v13, v0, Array);
class C23 {
    constructor(a25) {
        const v26 = this.constructor;
        try { new v26(this, v26); } catch (e) {}
        const v29 = new Float32Array();
        v29.entries();
    }
}
new C23(C23);
new C23(C23);
for (let v33 = 0; v33 < 5; v33++) {
    function f34() {
        Symbol.e.description.codePointAt(C23);
        return Symbol;
    }
    f34();
    %OptimizeFunctionOnNextCall(f34);
}
