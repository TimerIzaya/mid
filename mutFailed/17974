const v0 = [];
let v1 = -41226;
function F4(a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -9007199254740990;
    } catch(e7) {
    }
    try {
        this.e = a6;
    } catch(e8) {
    }
}
const v9 = new F4(-9007199254740990);
const v10 = new F4(F4);
v10.n = v0;
const v11 = new F4(v1);
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    a15.n = F12;
    function f17() {
        const v20 = new Uint8ClampedArray(64);
        v20.includes(64);
        return this;
    }
    a16.toString = f17;
    try {
        this.e = a15;
    } catch(e22) {
    }
    try {
        this.g = 4;
    } catch(e23) {
    }
    try {
        this.d = a16;
    } catch(e24) {
    }
}
const v25 = new F12(v10, v1, v9);
function f26(a27, a28) {
    const v29 = v1++;
    v29 === v29;
    return v29;
}
v25.valueOf = f26;
const v31 = new F12(v10, v10, v9, 4);
const v32 = new F12(v11, v1, v31);
const v33 = [];
const v35 = new Date();
const v37 = [4,Date,v35.toLocaleDateString()];
const v38 = [F4,v31,Date,v9,v37];
v11[9] = v31;
v31 - v25;
[v38,v31,v32,v33,v37];
const v44 = Date(4);
try { v10.n(F12, v9, v44); } catch (e) {}
const o54 = {
    [null]() {
        try { this.null(this, null); } catch (e) {}
        const v50 = Array(Array, v9);
        for (let v51 = 0; v51 < 5; v51++) {
            const v52 = v51 || v50;
            v52 ** v52;
        }
    },
};
const v59 = 2.2250738585072014e-308 | 2.2250738585072014e-308;
v59 <= v59;
const v66 = [335610671n,0.3352975315574327,-319.91710284458327,15n];
v66.g = v66;
const v67 = [2.2250738585072014e-308];
try { v67.entries(); } catch (e) {}
function f71() {
    return F4;
}
function f72(a73) {
    const v76 = new BigInt64Array(128);
    const v78 = new Uint16Array();
    v76 > v78;
}
Object.defineProperty(Uint32Array, 2, { writable: true, get: f71, set: f72 });
const v80 = new Uint32Array(186);
Float64Array > v80;
const v83 = [v67,0.3352975315574327,15n];
v83[0] = v83;
[15,3,-9066,-7];
let v86 = ([1,-1643840771,4,1111495904,-9007199254740992,-268435456,255,-403790861,268435439])?.filter;
try { v86(490.5202885889528); } catch (e) {}
try { new v86(2.2250738585072014e-308); } catch (e) {}
[21431,50,2015939235,-30775,-9223372036854775808,4294967296,15,-5512,-1711043381];
501822767n ^ 501822767n;
const v92 = 501822767n > 501822767n;
v92 || v92;
function f95() {
    return 501822767n;
}
16 / 16;
new Uint8ClampedArray();
const v102 = new BigUint64Array(4);
try { new Uint32Array(v86, v86, v86); } catch (e) {}
const v105 = new Uint32Array();
function f106() {
    return v83;
}
function f107(a108) {
    const o111 = {
        "maxByteLength": 4096,
    };
    const v113 = new SharedArrayBuffer(4096, o111);
    new BigInt64Array(v113);
}
Object.defineProperty(v105, "b", { get: f106, set: f107 });
v105.b = v105;
class C118 {
    b = "c";
    static {
        this.toString = f71;
        try { this.toString(); } catch (e) {}
        function f121() {
            const o130 = {
                toString(a123, a124) {
                    try { this.toString(); } catch (e) {}
                    const o126 = {
                    };
                    o126.g = a123;
                    try {
                        const o127 = {
                            ...o126,
                        };
                        super.g;
                    } catch(e129) {
                    }
                },
            };
            return o130;
        }
        f121();
        this.e = this;
        function F132(a134, a135) {
            if (!new.target) { throw 'must be called with new'; }
            this.propertyIsEnumerable(this);
            this.constructor;
        }
        const t144 = [-646258.8006221732,5.0,-1000000.0,2.2250738585072014e-308,-2.2250738585072014e-308,1000000.0];
        t144.length = 29;
        class C140 {
        }
    }
    static #h;
    268435439;
}
const v141 = new C118();
v141[268435439];
const v143 = new C118();
v143[268435439] = v143;
const o145 = {
    "call": Date,
    "defineProperty": Date,
    "deleteProperty": Date,
    "get": f95,
    "getOwnPropertyDescriptor": Date,
    "getPrototypeOf": f95,
    "has": f95,
    "ownKeys": Date,
};
new Proxy(v102, o145);
try { new Date(335610671n, 0.3352975315574327, 0.3352975315574327, 0.3352975315574327, 335610671n, 335610671n, Date); } catch (e) {}
Uint32Array.e = Uint32Array;
const v150 = [-1.7976931348623157e+308,-0.0,-Infinity,-3.190059912872913,912.0478784904526,0.6453522452964389,24574.3516569637,-3.0];
Uint8Array[Symbol.iterator] = f26;
const v154 = new Uint8Array(Uint8Array);
function f155(a156, a157, a158, a159) {
    const o160 = {
        ...v154,
    };
    v150.copyWithin(4294967297);
    o160[2] = o160;
    const t178 = o160[2][2];
    t178[Symbol.toPrimitive] = Symbol;
}
const v167 = new Uint32Array(Uint32Array, Uint32Array);
v167.toString = Date;
for (let v168 = 0; v168 < 5; v168++) {
    v167[v168] = v105;
    Array.__proto__ = v66;
    const o173 = {
        get b() {
            const v171 = Array.constructor;
            new v171(this, v66, Array, Array, v171);
            return v66;
        },
    };
    const o174 = {
        ...o173,
    };
}
2.220446049250313e-16 | 2.220446049250313e-16;
2.220446049250313e-16 | 2.220446049250313e-16;
class C178 {
}
try {
} catch(e179) {
    eval("");
}
-788.7260290236088 / -788.7260290236088;
-788.7260290236088 + -788.7260290236088;
const v188 = [2.220446049250313e-16,1.7976931348623157e+308];
function f189(a190, a191, a192, a193) {
    v86 = a192;
    [9007199254740991,7,-1954832415,624057374,4294967297,59864,-673543694,129];
    [1093310320,52944,-7,-1514456266];
    const v196 = [1488228376,65537,64,512,-10,9,4,1073741825];
    try { v196.toSorted(f189); } catch (e) {}
    const v198 = v66[1428717040];
    let v200 = v198 >= F12 ? v198 : F12;
    v200 = v59;
    a190 = a193;
    v80[14] |= a193;
    return a193;
}
new WeakMap();
/8[\cA]v/uisy;
try { v188.with(v167, C118); } catch (e) {}
[-788.7260290236088,C118];
class C207 {
}
const v208 = new C207(C207);
const v209 = v208?.constructor;
try { new v209(); } catch (e) {}
for (let v211 = 0; v211 < 10; v211++) {
    async function f212(a213, a214, a215) {
        -a214;
        a215 % a215;
        const v218 = ~a214;
        const v221 = [-4962,-4096,8,-2,-63512,-1321368508];
        try { v221.entries(); } catch (e) {}
        function F223() {
            if (!new.target) { throw 'must be called with new'; }
            for (let v225 = 0; v225 < 1000; v225++) {
                const v228 = ("p" + v225).fontcolor();
                let v229;
                try { v229 = v228.trimLeft(this); } catch (e) {}
                v229[12];
            }
        }
        new F223();
        function f232(a233, a234, a235, a236) {
            function f237() {
                function f238(a239, a240) {
                }
                class C242 {
                    static #e = "d";
                    static 4;
                    8;
                    static h = "d";
                    584 = "d";
                    #a;
                }
                new C242();
                const o244 = {
                };
                const o251 = {
                    toString(a246, a247) {
                        function f248() {
                        }
                        const o249 = {
                            ...this,
                            "b": a234,
                            __proto__: v105,
                            "h": v218,
                            "e": 1243371022,
                        };
                        function f250() {
                        }
                    },
                };
            }
        }
        for (let v252 = 0; v252 < 10; v252++) {
        }
        const o253 = {
        };
    }
    f212(-788.7260290236088, -1000000000.0, -1000000000.0);
}
