const v2 = new Int32Array(127);
const v5 = new BigUint64Array(165);
const v8 = new BigInt64Array(0);
class C9 {
    static #o(a11, a12, a13, a14) {
        const v15 = v8;
        try {
            v2.toString = Int32Array;
        } catch(e16) {
        }
        return BigUint64Array;
    }
    b;
    set h(a18) {
        let v19;
        try { v19 = a18(); } catch (e) {}
        for (let [v20,v21,...v22] of v19) {
            function f23() {
                return BigUint64Array;
            }
        }
        new BigInt64Array(0, 0, 127);
    }
}
new C9();
const v26 = new C9();
new BigUint64Array();
function f28() {
    return C9;
}
let v29 = /a|b/vdy;
let v30 = /7Z(?:a?)+/gudsy;
const v31 = /\coQ/gdy;
function F32(a34) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v29;
    } catch(e35) {
    }
    try {
        this.g = a34;
    } catch(e36) {
        v31.dotAll >>= e36;
        let v37;
        try { v37 = e36(e36, v30); } catch (e) {}
        v30 = v29;
        return e36;
        v29 = v37;
    }
}
const v38 = new F32(v29);
const v39 = new F32(v30);
const v40 = new F32(v29);
class C41 extends F32 {
    static {
        super[v40] = v29;
        let v43;
        try { v43 = v30(F32); } catch (e) {}
        super.g |= v29;
        const v45 = super[v31.exec(v43)];
        try { v45(this, v45); } catch (e) {}
        v31[4];
        const v49 = v40 === v43 ? v40 : v43;
        try {
            v43.c = this;
        } catch(e50) {
            const o51 = {
                [e50]: this,
                "f": v49,
            };
            v39[Symbol.match];
        }
    }
    #h;
    static #g;
    g = v38;
    #b;
}
const v55 = new v5();
const v56 = new C41();
new C41();
const v58 = [-1077398797,2,1671415104,4294967297];
function f59(a60, a61, a62) {
    function f64(a65) {
        ++a65;
    }
    v58.onmessage = f64;
    try {
        this.fuck(v40, a61);
    } catch(e68) {
    }
}
const v71 = [C41,v39,v29];
const o72 = {
    "arguments": v71,
    "type": "NaN",
    [v31]: "NaN",
    "d": v56,
    __proto__: v56,
    [f59]: v55,
    "e": v58,
};
[-5,-65536,-65537,14311,14,255];
function f74(a75, a76) {
    const v80 = Math.imul(3, a75 % a75);
    Math.log(3);
    v26.constructor(a76);
    return v80;
}
new Promise(f74);
