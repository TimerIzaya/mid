function F0() {
    if (!new.target) { throw 'must be called with new'; }
    function f2(a3) {
        let v5 = +17469;
        v5++;
    }
    Object.defineProperty(this, "g", { writable: true, set: f2 });
    this.a = F0;
    function f8() {
        const o19 = {
            m(a10) {
                const v13 = new Int8Array(3938);
                let v14 = 3;
                let v15 = 0;
                v15 >> v15;
                for (let i = 0; i < 5; i++) {
                    [...v14] = v13;
                    v15++;
                }
                const o18 = {
                };
            },
        };
        o19.m(o19, o19, o19, f8, f8);
        return o19;
    }
    f8();
    f8();
    try {
    const t0 = 6;
    t0(6, 6);
    } catch (e) {}
    try {
        this.g = 536870912;
    } catch(e25) {
    }
    try {
        this.a = 536870912;
    } catch(e26) {
    }
}
new F0();
new F0();
new F0();
const v30 = [-15,-6,4294967296,-2];
const v31 = [-2147483648,1134998561,-2,268435441,2,268435456,4];
const v32 = [-9007199254740990,2089485798];
function F33(a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = this;
    this.f = v31;
    try {
        this.f = a37;
    } catch(e38) {
    }
}
new F33(v32, v30, v30);
new F33(v31, v31, v31);
new F33(v32, v31, v30);
const v42 = [127,-268435456,-9007199254740991,-9007199254740992,1811639722,256,-2,268435441,9007199254740992,129];
[536870889,3,-55279,46874,-4,10000,-6,60808,-4294967295];
[10000,-9,12,-4,1007218525];
function f47(a48, a49) {
    v42.length;
    for (let [i54, i55] = (() => {
            10 >> 10;
            return [0, 10];
        })();
        i54 < i55;
        i54++) {
    }
    return 2;
}
Uint32Array[Symbol.toPrimitive] = f47;
const o73 = {
};
o73[2] = o73;
o73[Uint32Array] -= -2147483649;
256 << -65535;
+20572;
