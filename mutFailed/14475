let v1 = "toString";
class C3 {
    static {
        let v4 = this;
        try {
            super.o(v4, false);
        } catch(e7) {
            e7.message = e7;
        }
        ({"b":v4,"length":v1,} = v1);
    }
    [v1] = v1;
    static [v1] = -464029662;
    static 1;
    static [-3.4101861427743323] = -3.4101861427743323;
}
C3[1] = C3;
const v8 = new C3();
v8.d = v8;
const v9 = new C3();
v9.toString = v9;
v9.toString = v9;
const v10 = new C3();
v10.toString = v10;
let v12;
try {
const t0 = -3.4101861427743323;
v12 = t0(-3.4101861427743323, v8, v8, v8, v8);
} catch (e) {}
const v15 = Reflect.construct(C3, [], v12);
let v16;
try { v16 = new v15(-3.4101861427743323, v15, v15, v15); } catch (e) {}
-10n ^ -10n;
const v18 = -(-10n);
v18 ^ v18;
268435456n - 268435456n;
const v23 = [-9223372036854775808,8,-64294,-128,-60332,9007199254740991];
const v24 = v23?.filter;
try { new v24(-464029662); } catch (e) {}
[8,-9007199254740991,3,384835251,184205416,-51348,1073741825,1690721800,-9007199254740990];
[-128,1,9007199254740991];
const v28 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
v28.g = v28;
function f29(a30, a31, a32, a33) {
    function f34() {
        const v35 = v28.length;
        const v36 = v35 <= v35;
        const v37 = v35 & v35;
        const v38 = v37 >= v37;
        const v39 = v38 && v38;
        for (const v41 of v23) {
            let v42;
            try { v42 = v41(v41); } catch (e) {}
            function F43(a45, a46, a47) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.d = v23;
                } catch(e48) {
                }
                try {
                    this.f = a47;
                } catch(e49) {
                }
            }
            new F43(v38, v42, F43);
            new F43(v42, v39, v16);
            new F43(v39, v42, v36);
        }
        const v54 = new Float32Array(1334);
        v54[1283] = v54;
        return a30;
    }
    f34();
    %OptimizeFunctionOnNextCall(f34);
    return a31;
}
for (let v56 = 0; v56 < 5; v56++) {
    let v57 = ~v56;
    v57--;
    f29();
}
const v60 = [5.065712489635526,-4.0,-1.078367651051927e+308,-1.7976931348623157e+308,0.0,-1000000000.0];
v60[Symbol.toPrimitive] = f29;
try { ("dXSrM").trimStart(); } catch (e) {}
("dXSrM").search(v60);
