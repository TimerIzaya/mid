function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -9007199254740991;
    } catch(e3) {
    }
    try {
        this.h = -9007199254740991;
    } catch(e4) {
    }
    try {
        this.e = -9007199254740991;
    } catch(e5) {
    }
}
let v6 = new F0();
const v9 = new Float64Array(1073741824);
for (const v10 in v9) {
    delete v9?.h;
}
const v12 = new F0();
const v13 = new F0();
v13.d = v13;
const v15 = -(-952.2085081068662);
-820.6988093441405 - -820.6988093441405;
-820.6988093441405 - -820.6988093441405;
let v19 = 1.0378692034711051e+308;
const v20 = [1073741824,1073741823,1376142744,1073741825];
try {
    v20.forEach(-820.6988093441405);
} catch(e22) {
    e22.stack = e22;
}
v19--;
const v24 = v19 + v19;
class C25 {
    get f() {
        v6 = v13;
        new Uint8ClampedArray(2112);
        new v13(256);
        new Uint32Array(236);
        return Uint32Array;
    }
    constructor(a37) {
        const v38 = this.constructor;
        try { new v38(v20); } catch (e) {}
        function f40(a41, a42) {
            let v43 = a41[5];
            v43++;
            return v38;
        }
        f40(1073741824);
        f40(a37);
    }
    #f = v12;
    #d;
}
const v47 = C25?.apply;
try { new v47(v24, -820.6988093441405); } catch (e) {}
const v49 = new C25();
const v50 = v49?.constructor;
v50.prototype;
try { new v50(); } catch (e) {}
const v53 = new C25();
const v54 = v53?.__lookupGetter__;
try { new v54(v49); } catch (e) {}
const v56 = v53?.__defineSetter__;
try { v56(v56, v56); } catch (e) {}
try { new v56(v50, v53); } catch (e) {}
new C25();
const v61 = 8 << 8;
const v64 = [601759695];
const v65 = [1073741824,1073741823,1376142744,1073741825];
function f66(a67, a68, a69, a70) {
    function f72() {
        const o91 = {
            "c": -4294967297n,
            [arguments](a76, a77) {
            },
            "maxByteLength": v65,
            [-4294967297n](a79, a80) {
            },
            [v61]: 0,
            "type": "Vre",
            "f": "Vre",
            "c": v64,
            valueOf(a82, a83) {
            },
            "maxByteLength": -4294967295,
            "type": "Vre",
            valueOf(a85, a86) {
            },
            toString(a88, a89, a90) {
            },
        };
    }
    f72();
    %OptimizeFunctionOnNextCall(f72);
}
for (let v93 = 0; v93 < 5; v93++) {
    f66(v64, v93, v93, v65);
}
Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
const v96 = new Uint32Array(F0);
const v97 = v96?.join;
const v98 = [1073741824,1073741823,1376142744,1073741825];
function f99(a100, a101, a102, a103) {
    function f104() {
        try {
            v98.forEach(a101);
            let v108 = BigUint64Array * 536870887;
            v108--;
        } catch(e110) {
        }
        return a103;
    }
    return f104();
}
for (let v112 = 0; v112 < 10; v112++) {
    f99();
}
try { v97(v15); } catch (e) {}
try { new v97(v13); } catch (e) {}
const v118 = new Int32Array(64);
try { v118.set(v118); } catch (e) {}
const v122 = Int32Array.name;
try { v122.replaceAll(v118, v97); } catch (e) {}
for (const v127 of Array(4087)) {
    let v128 = v127 - v127;
    v128++;
}
const v130 = new Int32Array(257);
const v131 = v130[139];
v131 & v131;
const v134 = new BigUint64Array();
function F135() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v137 = 0;
        for (let i = 0; i < 5; i++) {
            v134.entries();
            const v139 = v137++;
            const v140 = v139 - v139;
            v140 >>> v140;
            const v142 = v139 ^ v139;
            v142 ^ v142;
            5 - 5;
            v137 < 5;
        }
        new v137();
    } catch(e148) {
        e148.message = e148;
        e148.name = e148;
        e148.b = e148;
        class C150 extends Uint8Array {
        }
        function F151(a153, a154, a155) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v156 = new F151();
        v156 || undefined;
    }
}
F135.arguments = F135;
const v159 = new F135();
const v160 = v159?.constructor;
try { new v160(); } catch (e) {}
const v162 = v159?.__lookupGetter__;
try { new v162(v53); } catch (e) {}
