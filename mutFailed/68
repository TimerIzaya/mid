const v3 = [536870889,8877,-4294967295,-15,4,15,-6,256,1000];
let v4;
try { v4 = v3.push(128); } catch (e) {}
class C5 {
}
v4.length = C5;
const v6 = new C5();
try { v6.propertyIsEnumerable(-4294967296); } catch (e) {}
const v8 = new C5();
const v9 = [v8,v6];
try { v6.entries(); } catch (e) {}
function F11(a13, a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try { a13.lastIndexOf(a15); } catch (e) {}
    a13.unshift(v6);
}
const v19 = new F11(v9);
const v20 = v19?.constructor;
try { new v20(128, C5, v19, 128); } catch (e) {}
const t19 = -4294967296;
new t19(v9);
const v23 = [-2,536870888];
const v24 = [536870889,-256,4,9007199254740990,-1911011798,19853,1114655047,-3099,1];
const v25 = [v24,-4294967296,-4294967296];
try { v24.from(1741); } catch (e) {}
const v29 = new Uint8ClampedArray();
for (let v30 = 0; v30 < 25; v30++) {
}
Float32Array in v29;
[v25,1741,v25,v3];
try { Uint8ClampedArray.map(v23); } catch (e) {}
const v34 = [-4294967296,v3];
const v35 = [5.0,-Infinity];
const v36 = [-1000.0,-4.866559765024149e+307,1000000.0,-251.96029382863912,0.0,-1.6000442866882517e+306,-5.0,-285460.9342038041,1.1779845361322394];
const v37 = [-2.220446049250313e-16,0.0,0.185676255722089];
[1741,-4294967296,[v25,v37,128,1741,v37]];
const v40 = [1741,v36,v23,v35,v34];
v40[3] = v40;
const v41 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
class C42 {
}
try { new v19(); } catch (e) {}
C42[Symbol.replace] = v41;
