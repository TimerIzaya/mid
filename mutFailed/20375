class C3 {
    constructor(a5, a6) {
        const t2 = "symbol";
        t2[-0.0] = a5;
        try { ("symbol").substring(..."symbol", ...-0.0, this, ..."symbol", a6, ..."symbol"); } catch (e) {}
    }
    static #o(a9) {
        function f10() {
            return f10;
        }
        class C11 {
        }
        class C12 {
        }
        const v13 = new C12();
        for (let v15 = 0; v15 < 5; v15++) {
            try { new C11(v13, v15, Float32Array, ...v15); } catch (e) {}
        }
        this["symbol"] *= a9;
        const v17 = -0.0 != this;
        const v19 = super[v17 ? -0.0 : this];
        try { new v19(v17, v17, v19); } catch (e) {}
        return v17;
    }
    #o(a22, a23, a24) {
    }
    g = "symbol";
    static #d;
}
new C3(-0.0, 276175.6597058831);
const v27 = new C3(C3, -0.0);
new C3("symbol", v27);
class C35 {
    65535;
    static set d(a37) {
        try {
            delete v27["symbol"];
        } catch(e39) {
            this ** e39;
        }
    }
    valueOf(a42, a43, a44) {
        return "EqtJP";
    }
    #g = -0.0;
    constructor(a49, a50, a51) {
    }
    /*
    constructor(a53, a54, a55) {
        const v56 = a55.concat();
        v56[1] = v56;
    }
    */
}
new C35();
new C35();
new C35();
class C60 {
}
const v61 = new C60();
const v62 = v61.constructor;
do {
} while (0 < 9)
let v66 = new v62();
const v67 = /[\11]/gm;
function f68() {
    return v66 >>>= f68 != v67;
}
%PrepareFunctionForOptimization(f68);
f68();
%OptimizeFunctionOnNextCall(f68);
f68();
