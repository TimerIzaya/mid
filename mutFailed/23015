function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    const v7 = this?.constructor;
    try { new v7(0.11417573159060845, F3); } catch (e) {}
    try {
        this.d = -834.1482067839936;
    } catch(e9) {
    }
    try {
        this.b = a5;
    } catch(e10) {
    }
}
const v11 = new F3(-834.1482067839936, 5.0);
const v12 = new F3(0.11417573159060845, v11);
const v13 = new F3(-834.1482067839936, 5.0);
function f14(a15, a16) {
    a16.length = a16;
    const o34 = {
        ...v11,
        2147483647: -834.1482067839936,
        [a15](a18, a19, a20) {
            new Float64Array(6);
            gc();
            Math.cos(a18);
            Math.clz32(this);
            Math.cbrt(~-834.1482067839936);
            return -834.1482067839936;
        },
    };
    o34[2147483647] = o34;
    return o34;
}
try { f14.toString(); } catch (e) {}
const v36 = f14(F3, v12);
f14(v36, v12);
const v38 = f14(F3, v11);
v38[2147483647] = v38;
[-4.556894260834262e+307,5.0,2.2250738585072014e-308,-5.0,338290.8792571055,-5.716810855897687e+307,1000.0];
const v42 = Map?.toString;
try { new v42(); } catch (e) {}
class C44 extends Map {
}
C44.f = C44;
class C46 {
    static {
        try { this(); } catch (e) {}
        const v49 = [601759695];
        const v50 = [1073741824,1073741823,1376142744,1073741825];
        v50[1];
        function f52(a53, a54, a55, a56) {
            a53.length = a53;
            a54 ^ a54;
            a55 ^ a55;
            try { gc.bind(a54); } catch (e) {}
            const o63 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o63);
            let v65;
            try { v65 = new a53(); } catch (e) {}
            try { v65.toLocaleString(); } catch (e) {}
            a55 << a55;
            function f68() {
                return a53;
            }
            const v70 = new Int8Array();
            try { v70.reduceRight(Date); } catch (e) {}
            BigUint64Array.BYTES_PER_ELEMENT = BigUint64Array;
            let v74 = BigUint64Array * 536870887;
            v74--;
            Number.isNaN(v74 ** v74);
            function f79(a80, a81) {
            }
            try { f79(f79, this); } catch (e) {}
            try { f79(); } catch (e) {}
            const v84 = v70.buffer;
            const v85 = v84.__defineGetter__;
            try { v85(); } catch (e) {}
            Object.defineProperty(v84, "constructor", { writable: true, configurable: true, value: Date });
            %OptimizeFunctionOnNextCall(f68);
            let v88;
            try { v88 = v50["find"](..."find", a56, ...v49); } catch (e) {}
            const o89 = {
            };
            o89.e = o89;
            o89.e = this;
            o89.e = o89;
            v88 <= a55;
        }
        try { f52(v36, Array, v13, this); } catch (e) {}
        for (let v92 = 0; v92 < 5; v92++) {
            f52(this, v92, v92);
        }
    }
}
