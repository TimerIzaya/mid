const v3 = [128,128,128,-48943,-48943];
const v5 = [];
Reflect.construct(v3, v5, -48943);
const v10 = [-48943];
const v11 = [v3,-48943,128,v3];
const v12 = [-2.2250738585072014e-308,1000000.0];
const v13 = [0.0,0.0,-1e-15,-1e-15,0.7043922387334313,0.160900149085497,-231.3439040545178,-297702.5223795555,2.0,-0.0];
const v14 = [-1.7976931348623157e+308,1.567547754457685];
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    v5[-2] = F15;
    function F22(a24, a25, a26, a27) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.d = -2123000623;
        } catch(e28) {
        }
        try {
            this.b = v10;
        } catch(e29) {
        }
        try {
            this.a = a18;
        } catch(e30) {
        }
    }
    new F22(6n, -163161969, v13, -8);
    new F22(16n, -48943, v14, -2123000623);
    new F22(-5072n, -163161969, a17, Reflect);
    try {
        this.c = 128;
    } catch(e34) {
    }
}
new F15(v11, 128);
new F15(v12, 16);
const v37 = new F15(v12, 128);
const v39 = new Uint32Array(Uint32Array);
const v41 = Symbol.matchAll;
v37[v41] = v14;
v41[0] = Reflect;
try {
    Reflect.__proto__ = v11;
} catch(e42) {
}
new Int16Array(v39);
