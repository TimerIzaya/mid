function f0() {
}
const v3 = new BigUint64Array(251);
const v5 = /(?:a*)+q(?<a>.)/guds;
v5.dotAll = v5;
function F6(a8) {
    if (!new.target) { throw 'must be called with new'; }
    const v9 = this.constructor;
    v9.prototype;
    v9.caller = v9;
    try { new v9(); } catch (e) {}
}
const v13 = new Int32Array(16);
new Uint8Array(3417);
class C17 {
    constructor(a19, a20, a21) {
        function f22() {
            return a21;
        }
        super.b;
        a20 === this ? a20 : this;
        new f22();
        const o29 = {
            "maxByteLength": 444677045,
        };
        const v31 = new ArrayBuffer(10, o29);
        new BigInt64Array(v31);
    }
}
const v34 = new C17(251, 16, 3417);
new C17(v34, 3417, 3417);
const v36 = new C17(251, 3417, 251);
[251,v36,v34];
[BigUint64Array,Int32Array,C17,v3];
const v39 = [v13,16];
const v40 = [];
const v41 = [v40];
class C43 extends Map {
    constructor(a45, a46) {
        super(v41);
    }
}
const v47 = new C43(v40, v41);
const v48 = new C43(v41, v47);
const v49 = new C43(v48, v47);
const v53 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v55 = new Uint32Array();
let v56 = -4294967297n;
function f59(a60, a61, a62, a63) {
    BigInt64Array + a60;
    const v66 = new BigInt64Array(4046, 136);
    let o67 = {
    };
    [,...o67] = v66;
}
const v68 = v56--;
const v69 = [601759695];
const v70 = [1073741824,1073741823,1376142744,1073741825];
function f72(a73, a74, a75, a76) {
    try { a73.toLocaleString(); } catch (e) {}
    const v78 = a73?.constructor;
    try { v78(); } catch (e) {}
    try { v78(); } catch (e) {}
    const v82 = arguments.length;
    Object.defineProperty(v47, "e", { configurable: true, enumerable: true, value: f72 });
    const v84 = v48["entries"](a75, ...v49, BigUint64Array, ..."entries", a74, v82);
    const v86 = Symbol.toStringTag;
    v48[v86] = v86;
    function f87() {
        let v89;
        try { v89 = ("Vre").charAt(4096); } catch (e) {}
        try { v89.lastIndexOf(); } catch (e) {}
        let v91;
        try { v91 = ("Vre").codePointAt(v53); } catch (e) {}
        v91 - v91;
        v91 ^ v91;
        let v94 = Float64Array;
        v94 = a74;
        let v95 = v53.length;
        v95++;
        try {
            v70.forEach(a74);
        } catch(e98) {
            e98.stack = e98;
        }
        const o109 = {
            "c": v56,
            "EPSILON": v69,
            valueOf(a100, a101) {
                return a100;
            },
            1073741824: v55,
            [v56](a103, a104, a105, a106) {
                eval();
            },
            "arguments": 5,
            256: a76,
        };
        return v95;
    }
    f87();
    const v112 = Array();
    let v113;
    try { v113 = v112.findLast(f72, v55); } catch (e) {}
    v112.unshift("entries", v84, "entries", v113);
    let v115 = -4294967295;
    v115++;
    v39.forEach(v70);
    const o118 = {
    };
    let v120;
    try { v120 = Int8Array.of(); } catch (e) {}
    try { v120.join(v78); } catch (e) {}
    const v122 = new Int8Array(v69);
    v122.c = v122;
    const v123 = v122.buffer;
    v123.maxByteLength;
    const v125 = v123.slice(v78);
    try { Int32Array(v125, arguments, v56); } catch (e) {}
    function f128(a129, a130, a131, a132) {
        return a132;
    }
    const v133 = new Int32Array();
    const v134 = v133[3];
    v134 + v134;
    for (let v136 = 0; v136 < 5; v136++) {
    }
    %OptimizeFunctionOnNextCall(f87);
    try { v70["find"](..."find", a76, ...v69, ...v70, ...522675525n); } catch (e) {}
    return a73;
}
for (let v139 = 0; v139 < 10; v139++) {
    f72(v55);
}
%OptimizeFunctionOnNextCall(f72);
f72(v69, v40, v68, f72);
