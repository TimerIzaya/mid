const v2 = new Float64Array(8);
const v7 = new Uint16Array(5);
v7[3] = 1695802898;
new Uint16Array(5);
const v12 = new Float64Array(16);
class C13 extends Float64Array {
    [-1];
    2050;
    static #h;
    constructor(a15, a16, a17) {
        super(v2, a16, a15);
        try {
            v2.#h;
        } catch(e19) {
        }
        super[v2] = v12;
        v2[a16];
    }
    static #f = Float64Array;
}
new C13(5, 8, 8);
new C13(8, 16, 5);
new C13(16, 8, 16);
for (let v27 = 0; v27 < 250; v27++) {
    v27 < 0;
}
function f30() {
    Number.isNaN(Math.fround(Math));
    return f30;
}
f30();
for (let i46 = 0, i47 = 10;
    (() => {
        const v48 = i46 < i47;
        const o52 = {
            n(a50, a51) {
                return this;
            },
        };
        const v55 = new BigUint64Array(3375);
        const v56 = ["minor","minor"];
        const o57 = {
            "arguments": v56,
        };
        [-256,13351,5138,2,-4294967295,1000,268435440];
        class C59 {
            3164398692 = "minor";
        }
        let [v60,,v61,...v62] = v55;
        return v48;
    })();
    i46++) {
}
[[-9007199254740990,49004,536870889,1000,257,65536,-9007199254740990,-9007199254740992]];
function f83() {
    const v85 = Symbol.for();
    const o86 = {
        [v85]: f83,
    };
    return f83;
}
new Float32Array(99);
class C91 {
}
class C94 {
}
class C95 extends C94 {
    constructor(a97) {
        super();
        const v99 = -4294967297n ^ -4294967297n;
        const o106 = {
            [-4294967297n](a101, a102, a103, a104) {
                super[v99];
            },
        };
        for (let v107 = 0; v107 < 25; v107++) {
            this["p" + v107] = v107;
        }
    }
}
new C95();
