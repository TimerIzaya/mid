const v0 = [-4096,4096,-1073741824,128,268435440,-6,268435456,1,3];
new Uint32Array(381);
Uint8ClampedArray[0] = 381;
const v6 = new Float32Array(Uint8ClampedArray, Uint8ClampedArray, Float32Array);
function f7(a8) {
    function f9(a10, a11) {
        function F12(a14, a15) {
            if (!new.target) { throw 'must be called with new'; }
            const v16 = this.constructor;
            let v17;
            try { v17 = new v16(); } catch (e) {}
            try { this.constructor(a10, f9, v17, F12); } catch (e) {}
        }
        new F12(a10, a11);
        return f9;
    }
    return a8;
}
const v21 = Symbol.toPrimitive;
v6[v21] = f7;
v6[0] = v6;
const v22 = [536870912,10406,0,-12,2422,-816868481,268435456,-28271,-9007199254740990,-15];
let v23 = [2147483648,-1515777129,671795663];
class C24 {
    constructor(a26) {
        function f27() {
            for (let v28 = 0; v28 < 32; v28++) {
                v6["p" + v28] = v28;
            }
            return Symbol;
        }
        a26.toString = f27;
        v23 ^ a26;
        try {
            v22.length = 1073741824;
        } catch(e33) {
        }
    }
    [v22] = v23;
    1101519902 = v23;
    8 = v0;
}
function f34() {
    new Int16Array(305);
    return v21;
}
Object.defineProperty(C24, Symbol.toPrimitive, { writable: true, enumerable: true, value: f34 });
new C24(v23);
new C24(C24);
new C24(v0);
new Int16Array(9);
const v46 = [];
function* f47(a48, a49) {
    yield* v46;
    return a48;
}
new Int16Array(8);
new Int16Array(115);
function F56() {
    if (!new.target) { throw 'must be called with new'; }
}
const v58 = new F56();
const o59 = {
};
function f60(a61, a62) {
    v23 = a62;
    o59 >> a61;
    return a61;
}
o59.constructor = f60;
const v64 = o59.constructor;
function F65(a67, a68, a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    let v71 = /a\sca+/uimsy;
    const v72 = /\1\2(a(?:\1(b\1\2))\2)\1(?:a+){0,0}o\bNe?/uy;
    class C73 {
    }
    const v74 = new C73();
    let v75 = new C73();
    const o76 = {
    };
    function F77(a79, a80, a81, a82) {
        if (!new.target) { throw 'must be called with new'; }
        for (let v83 = 0; v83 < 100; v83++) {
            v71 += a82;
            const v84 = o76 in v72;
            v75 = v74;
            const o90 = {
                p(a86, a87) {
                    this[F77] **= v83;
                    return v84;
                },
                valueOf(a89) {
                    return a89;
                },
            };
        }
    }
    a68.caller = a70;
}
try { new F65(v58, v64); } catch (e) {}
