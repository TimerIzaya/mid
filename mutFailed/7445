const v2 = new Float64Array(214);
let v3 = 119;
const v5 = new Int16Array(v3);
const v8 = new Float32Array(2);
function f9(a10, a11) {
    const o40 = {
        2: 2,
        __proto__: v8,
        ...v5,
        m(a13) {
            return a13;
        },
        n(a15, a16) {
            class C25 extends Int32Array {
            }
            function F31() {
                if (!new.target) { throw 'must be called with new'; }
            }
            class C34 {
                static get b() {
                }
            }
            return Float32Array;
        },
        ...v5,
        [a11]: v8,
        "e": a11,
        n(a37, a38) {
            v3 &&= a38;
            super.c <<= 214;
            try {
                v5.toString = a38;
            } catch(e39) {
            }
            return v2;
        },
    };
    return o40;
}
f9(v3, v3);
f9(214, 214);
f9(214, v3);
/i/uds;
const v45 = /O[\cA]/vms;
/j(?:ab)+/guims;
new BigUint64Array(2147483647);
const o52 = {
};
o52.c = 2147483647;
o52.c = o52;
new Uint8Array(4096);
const v56 = Math.random();
const v57 = [Infinity];
v57.g = v56;
new Uint16Array(8);
let v62 = 0;
v62++;
v62 < 9;
Symbol.iterator;
const v70 = v45.constructor;
let v71;
try { v71 = new v70(v70, Int8Array); } catch (e) {}
typeof v71;
Math.atan2(v57, -40875);
const o88 = {
    [-4294967297n](a82, a83, a84, a85) {
        eval(Symbol);
    },
};
new Float32Array(59);
function F95(a97, a98, a99, a100) {
    if (!new.target) { throw 'must be called with new'; }
    const v101 = this.constructor;
    try { new v101(v101, a99, v101, Uint8Array, v101); } catch (e) {}
    const v103 = [this,this,this];
    const o104 = {
        "e": v103,
    };
}
(1260).bind();
const v108 = new Date();
const v109 = [];
const v110 = [];
function f111(a112, a113) {
    const o123 = {
        129: v109,
        __proto__: v57,
        o(a115, a116, a117, a118) {
            [a112];
            Reflect.apply(a116.reduce, a113);
            return a113;
        },
        "f": v110,
        "e": v108,
        ...a113,
    };
    return o123;
}
new Map();
