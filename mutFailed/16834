let v1 = -1024;
class C3 {
    #e = v1;
    [1000000000000.0];
    constructor(a5) {
        Reflect.construct(a5, [Reflect,v1,"pow",v1], a5);
        try {
            Reflect.#e;
        } catch(e10) {
        }
    }
    ["pow"] = 1000000000000.0;
    #c;
    [v1];
    static b;
}
const v11 = new C3("pow");
[] = "pow";
v1 >>>= v1;
const v12 = v11;
delete v11[512];
[-4.7152486980125445];
[967.6359297569531,0.0,2.0,0.04109399369145361,0.2611831883007528,0.5950394027035734,0.16728837361590598,-1e-15,-1.2739998291135165e+308];
[1000000000.0,0.5984243665802353,0.9354124031762238,-4.0,-8.483486628287453,-2.2250738585072014e-308,-686508.172941104,-Infinity,4.0,0.7540825414176278];
new C3(C3);
const v18 = new C3(C3);
const v19 = [-1000000.0,-Infinity,5.0,1.3887391962841088e+308];
const v20 = [1e-15,-4.0,1000000.0,-2.2250738585072014e-308,-993.7122641218709];
const v21 = [-1000000000.0,-1000000.0,-104.85090283620173,1000000.0];
["pow",v19,v21,v20 instanceof C3];
[v18];
const v25 = ["pow"];
try { v25.reverse(); } catch (e) {}
class C27 {
    7;
    static [C3] = "pow";
    [C3];
    toString(a29, a30, a31) {
        new Float64Array(1701);
        new Int32Array(3094);
        new Uint16Array(255);
        return this;
    }
}
new C27();
new C27();
new C27();
new Int16Array(16);
new BigInt64Array(4096);
new Uint32Array(1783);
function f54(a55, a56) {
    const v60 = new Uint16Array(3225);
    for (const v61 of v60) {
        const v63 = 9007199254740991 * v61;
        v63 | v63;
    }
}
BigUint64Array[Symbol.toPrimitive] = f54;
BigUint64Array * 536870887;
function F69(a71, a72, a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
}
const v75 = new F69();
v75.valueOf = f54;
"" >= v75;
