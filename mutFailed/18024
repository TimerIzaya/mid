const v2 = new Uint8Array(1024);
function f3(a4, a5) {
    v2[268435441] |= a5;
    throw a5;
    return v2;
}
v2[Symbol.toPrimitive] = f3;
v2.buffer *= 129;
let v13 = 536870887;
let v15 = --v13;
const v16 = v15++;
const v17 = +v2;
!v15;
Math.hypot(v13);
v16 % v17;
new Float64Array(129);
new Float64Array(128);
[10634,1073741823,426505427,-8,-12,-1569958463];
[9448,268435440,-2147483647,-1,4096,-22312,-9007199254740992,-16,268435441,-256];
[3,599916425,-35997,-28861,13,-4096];
const v33 = Math.log2();
const v34 = Math.cosh();
const v35 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    function f42() {
        const o45 = {
            "maxByteLength": 429,
        };
        const v47 = new SharedArrayBuffer(6, o45);
        new Int32Array(v47);
        return a39;
    }
    a38[Symbol.toPrimitive] = f42;
    for (let v52 = 0; v52 < 100; v52++) {
        const o53 = {
        };
        function f54(a55, a56, a57) {
            Int8Array.prototype;
            const v61 = [65537,268435441,63298,-5,1235122603];
            function F62(a64, a65, a66, a67) {
                if (!new.target) { throw 'must be called with new'; }
                const v68 = v34.constructor;
                try { new v68(1024, 1024, v61, this); } catch (e) {}
                a65.caller;
                a67[1];
                this.c = a66;
                const v73 = [Reflect];
                const o74 = {
                    __proto__: Reflect,
                    "e": v73,
                };
                this.f = a65;
            }
            const o75 = {
                "a": o53,
            };
            let v76 = 0;
            while ((() => {
                    let v77 = 10;
                    v77++;
                    return v76 < a38;
                })()) {
                const v80 = v35.__proto__;
                try { v80.findLastIndex(this, v76, v52); } catch (e) {}
                delete v35[v33];
                v76++;
            }
        }
        const v84 = f54();
        const v85 = [0,2147483647,9223372036854775807,9007199254740990,9007199254740990];
        const o86 = {
        };
        new Int8Array();
        const v91 = new Uint16Array(512);
        new Float32Array(v91);
        v85.concat(v34);
        const v97 = new Uint32Array(2091);
        for (const v99 in v97[0]) {
        }
        f54(v52, v52, v84);
    }
}
const v101 = new F36();
new F36(F36, v34, v101, v34);
