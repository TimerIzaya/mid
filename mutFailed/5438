const v0 = [2.0];
[1000000000.0,1.7976931348623157e+308,-7.577908590707838,NaN,-4.0,-1.2965222782345005e+307,1.3107994153453953e+308,1000000000000.0];
[2.220446049250313e-16];
let v3 = 3977;
const v5 = new Uint32Array(v3);
const v8 = new v3(7);
new Float32Array(201);
class C12 extends Float32Array {
    1;
    set d(a14) {
        const v17 = --v3;
        -this;
        Math.random();
        +v17;
        super.byteOffset = this;
    }
    127 = v8;
    [v5] = v0;
    d;
    a;
}
new C12();
new C12();
new C12();
const v28 = new Uint8Array();
const v31 = new Uint32Array();
function f32(a33, a34, a35, a36) {
    a33 - a33;
    a35--;
    a36 >>> a36;
    Float32Array + a34--;
    a36 + a35;
    const o46 = {
        "b": a33,
        "c": a36,
        ...v28,
        n(a44, a45) {
            v31[a33] = v31;
            return a45;
        },
    };
    try { o46.n(o46, -2); } catch (e) {}
    return a35;
}
f32(2, 2, 1, 2);
for (let v49 = 0; v49 < 500; v49++) {
    f32(Uint8Array, 2, v49, 2);
}
