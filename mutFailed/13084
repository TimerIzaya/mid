let v2 = 128;
function f3(a4, a5) {
    a4 + a4;
    a5 - a5;
    const o20 = {
        131: a5,
        "h": a4,
        7: -536870912,
        m(a9) {
            return -1;
        },
        o(a11, a12) {
            return a5;
        },
        [-536870912]: a5,
        n(a14) {
            delete this?.h;
            super.g;
            v2++;
            super.g;
            return -536870912;
        },
    };
    return o20;
}
f3(-1, -1);
const v22 = f3(-536870912, -1);
const v23 = f3(-1, -536870912);
const v26 = new Uint8Array(129);
function F29(a31) {
    if (!new.target) { throw 'must be called with new'; }
    const v32 = this.constructor;
    try { new v32(); } catch (e) {}
    try {
        2856 % (this / -1478256740);
    } catch(e37) {
    }
}
try { new F29(v22); } catch (e) {}
new BigInt64Array(2856);
Int8Array.prototype = Int8Array;
const v42 = new Int8Array(3569);
v42[2341];
function F44() {
    if (!new.target) { throw 'must be called with new'; }
    this.b = this;
    try {
        this.d = -4;
    } catch(e47) {
    }
    try {
        this.b = -4;
    } catch(e48) {
    }
}
F44.name = F44;
function f49() {
    return f49;
}
let v51;
try { v51 = ("0x2I").sup(); } catch (e) {}
v51[9];
const v53 = new F44();
try {
    v53.__proto__ = v53;
} catch(e54) {
}
const v58 = v53?.constructor;
try { new v58(); } catch (e) {}
const v60 = new F44();
const v61 = new F44();
v61.f = v61;
const v65 = new Int8Array(582);
try { v65.join(v51); } catch (e) {}
let v69 = 0;
while (v69 < 2) {
    new BigInt64Array(-1);
    v69++;
}
try { new BigInt64Array(65535, 65535, F44); } catch (e) {}
const v75 = new BigInt64Array(2001);
try { v75.fill(BigInt64Array); } catch (e) {}
const v80 = [[v53,65535,[F44,Uint8Array,582],v75,v65],v60,Int8Array];
const v81 = `
    v61.d;
    -(-1000000000.0);
    const v87 = new Int16Array(2183);
    Uint8Array.length;
    const v92 = new Int16Array(8);
    v92[4] = v92;
    async function f93(a94, a95, a96) {
        delete v92[-1000000000.0];
        let [v98,v99,...v100] = v87;
        v87[5];
        await v99;
        return Uint8Array;
    }
    v80.__proto__;
`;
["function",[9007199254740992,-13,1,206834672,5792,16,856414023,8,2147483648]];
v23.__proto__;
const o108 = {
};
try {
    o108.f = v69;
} catch(e109) {
}
try {
    const o110 = {
    };
    o110.f = v69;
    o110.b = Int8Array;
} catch(e111) {
}
try {
    const o112 = {
    };
    o112.f = v69;
    o112.b = Int8Array;
    o112.d = v51;
} catch(e113) {
}
try {
    const o114 = {
    };
    o114.f = v69;
    o114.b = Int8Array;
    o114.c = v26;
} catch(e115) {
}
let v117 = -(-1e-15);
v117--;
const v120 = eval(v81);
try { v120.flatMap(v120); } catch (e) {}
Object.defineProperty(v120, "isExtensible", { configurable: true, enumerable: true, value: 129 });
try { v120.isExtensible(v65, Uint8Array, Int8Array); } catch (e) {}
