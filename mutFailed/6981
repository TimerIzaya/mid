[0.28073005915367477,-1e-15,-1.0,0.7237791099370092,-1.7976931348623157e+308,-3.0,-5.0,0.1082368479956426,-1e-15,-Infinity];
[-5.0,3.0,9.223017521074517e+307,-5.8074944286304735,0.7503106506506846,-1000000000.0,9367.628130491357,-4.0,-3.0];
[2.355030739780123e+307,-6.850143735544315e+307,-1000000000.0,2.0,-2.6852932981181987e+307,-4.893546451403095];
-5.0 ^ -5.0;
[1073741823,-9007199254740991,9223372036854775807,-128,-1303839158,62930,-65529];
[268435439,-6,257,-9223372036854775807,9,-364733841,10000,65190];
[34587,19250,12,-2147483647,-8,3,268435456,1,1073741824,-256];
const v13 = [-34,536870887,268435440,14525];
const v14 = [6,127,-128,13,65537,-13];
const v15 = v14[5];
const v16 = [-536870912,-4608,-9223372036854775808,15];
let v18;
try { v18 = ("object").substring(v14, v16); } catch (e) {}
try { v18.matchAll("object"); } catch (e) {}
const v24 = new v15(2);
try { v13.entries(); } catch (e) {}
const v27 = 8 & 8;
const v29 = new Int16Array(8);
v29[7];
3225 > 3225;
const v35 = new Uint16Array(3225);
try { v35.toSorted(v35); } catch (e) {}
const v37 = v35[877];
for (const v38 of v35) {
    v38 - v38;
    v38 ^ v38;
    v38[3] = 5n;
    const v42 = 9007199254740991 * v38;
    const v43 = v42 | v42;
    v43 + v43;
}
Int32Array.length;
const v48 = new Int32Array(23);
let v49 = v48[1];
v49--;
Math.expm1(-366687.8544616379);
925.1427495594241 - 925.1427495594241;
1000000.0 >>> 1000000.0;
1000000.0 >>> 1000000.0;
const v60 = [7,128];
const v61 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
-v16[4];
const v65 = v61[4] | v18;
v65 / v65;
const v67 = [40213,422333454,47387,65536,-51830];
v67[2] = v67;
0 - 0;
0 - 0;
let v71 = 15135;
const v72 = v71--;
v72 & v72;
8 >>> 8;
let v77 = -1628878962;
v77++;
try { gc(); } catch (e) {}
gc();
const v83 = new BigInt64Array();
let v84;
try { v84 = v83.entries(); } catch (e) {}
const v85 = v84?.next;
try { new v85(); } catch (e) {}
let v88;
try { v88 = ("boolean").slice(v35, v24); } catch (e) {}
try { v88.strike(); } catch (e) {}
let v90;
try { v90 = ("boolean").repeat(1000000.0); } catch (e) {}
v37[1322328];
const t66 = "toString";
t66[6] = "toString";
const v93 = "toString" == "toString";
v93 || v93;
("boolean").split("toString");
-256 >>> -256;
const v98 = -256 >> -256;
v98 ^ v98;
function f100(a101, a102) {
    a101--;
    let v104 = a102++;
    v104--;
    const v106 = a102--;
    v106 | v106;
    a101 | a101;
    const o122 = {
        "c": v27,
        "a": v71,
        "d": a101,
        __proto__: a102,
        "g": v77,
        "type": "boolean",
        "a": a101,
        set b(a110) {
        },
        "g": "boolean",
        "b": a102,
        get f() {
            super[1000000.0] = this;
            try {
                new Int8Array(9);
                function f115() {
                    return f115;
                }
                const o117 = {
                    [f115]() {
                    },
                };
                [o117];
                v61.copyWithin(8, -268435456, -256);
            } catch(e121) {
            }
            return this;
        },
    };
    o122.g = o122;
    return o122;
}
v90.length;
let v124;
try { v124 = f100(v71, v71); } catch (e) {}
v124[1000000];
f100(925.1427495594241, v60);
f100(317008.8127941969, -4);
f100(1000000.0, v61);
const v130 = 268435441n ^ 268435441n;
v130 - v130;
268435441n - 268435441n;
const v134 = new BigUint64Array();
v134[2445191368] = 268435441n;
