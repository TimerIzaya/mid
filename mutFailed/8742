function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = -65537;
    } catch(e3) {
    }
    try {
        this.g = -65537;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v7;
    } catch(e12) {
    }
    try {
        this.e = v7;
    } catch(e13) {
    }
}
const v14 = new F8(v6, v7);
const v15 = v14?.constructor;
let v16;
try { v16 = new v15(F8, v7); } catch (e) {}
const v17 = new F8(v7, v7);
new F8(v7, v5);
let v22 = 591114.0785999324;
const v23 = v22++;
const v24 = v23 & v23;
const v26 = [v22,v22,v22];
4 | 4;
function F29() {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = this?.__defineGetter__;
    let v32;
    try { v32 = new v31(v5, 11n); } catch (e) {}
    let v33;
    try { v33 = this.toString(this, F29, F29, this); } catch (e) {}
    try { v33.trimStart(); } catch (e) {}
    [-2.220446049250313e-16,-6.9960895637188125,4.1724406514239416e+307,0.22217900637554078,1000000000.0,-1e-15,1000000000.0,0.39864764958879706,1000000.0,2.2250738585072014e-308];
    try { Date.toString(F29, v24); } catch (e) {}
    v32();
    let v42;
    try { v42 = new Uint32Array(Uint32Array, Uint32Array, 4); } catch (e) {}
    try { v42.findIndex(9007199254740990n); } catch (e) {}
    Uint32Array.BYTES_PER_ELEMENT = Uint32Array;
    const v44 = new Uint32Array(5);
    let v45;
    try { v45 = v44.reduce(Date); } catch (e) {}
    try { v45.replaceAll(v42, v45); } catch (e) {}
    const v49 = new Set(v26);
    try { v49.forEach(v5); } catch (e) {}
    const v51 = v49?.add;
    try { new v51(v42); } catch (e) {}
    let v54;
    try { v54 = ("delete").blink(); } catch (e) {}
    v17[4] = v54;
    const v55 = v49["delete"](839612.5677247904);
    v55 || v55;
    const v57 = v55 || v55;
    v57 || v57;
    const v59 = v57 && v57;
    !v59;
    19793 >>> 19793;
    const o63 = {
    };
    o63.b = o63;
    o63.e = 19793;
    try { new Array(9223372036854775807); } catch (e) {}
    let v67;
    try { v67 = ("getPrototypeOf").blink(); } catch (e) {}
    const v68 = v67[28];
    let v69;
    try { v69 = v67.strike(v22); } catch (e) {}
    try { v69.replace(19793, v14); } catch (e) {}
    -1.7976931348623157e+308 - -1.7976931348623157e+308;
    class C73 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    class C74 extends C73 {
        ["getPrototypeOf"] = C73;
    }
    try { new C74(); } catch (e) {}
    try { new C74(); } catch (e) {}
    C74.e = C74;
    const v77 = new C74();
    const v78 = v77?.getPrototypeOf;
    try { v78(); } catch (e) {}
    let v80;
    try { v80 = new v78(); } catch (e) {}
    const v81 = v80?.constructor;
    try { new v81(); } catch (e) {}
    const v83 = v77.constructor;
    let v84;
    try { v84 = new v83(F29, v59); } catch (e) {}
    const v85 = v84?.getPrototypeOf;
    try { new v85(); } catch (e) {}
    const v87 = Array(v24);
    for (const v88 of v87) {
    }
    const v89 = [v87,v87,v87,v87,v87];
    v89.g = v89;
    let v90;
    try { v90 = v89.includes(839612.5677247904); } catch (e) {}
    v90 || v90;
    const v92 = v90 && v90;
    v92 || v92;
    BigUint64Array.e = BigUint64Array;
    const v95 = new v68();
    try { v95.reduceRight(v26); } catch (e) {}
    for (let v97 = 0; v97 < 5; v97++) {
        v97 >> v97;
    }
    [v89,v89,v89];
    ([v26])[0];
}
new v16();
const v103 = new F29();
const v104 = v103?.constructor;
try { new v104(); } catch (e) {}
const v107 = new BigInt64Array();
try { v107.entries(); } catch (e) {}
function f109() {
    const v111 = v107[undefined] instanceof f109;
    const o112 = {
    };
    o112.h = o112;
    o112.g = o112;
    const o113 = {
    };
    o113.h = o113;
    try {
        const o114 = {
        };
        o114.h = o114;
        o114.a = v22;
        o114.h = v111;
    } catch(e115) {
    }
    -12n << -12n;
    return undefined;
}
f109.e = f109;
%PrepareFunctionForOptimization(f109);
const o118 = {
    "apply": f109,
};
try { o118.apply(); } catch (e) {}
const v120 = o118.apply;
try { v120.apply(f109, f109); } catch (e) {}
const v122 = new v16();
try { v122.constructor(); } catch (e) {}
%OptimizeFunctionOnNextCall(f109);
f109();
