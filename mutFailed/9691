[3.336079883548768,1000.0,-28496.955146478023,1.7976931348623157e+308,0.8357973745238638,-2.220446049250313e-16,-8.194222258309277e+307];
const v1 = [-3.0,175101.61907766364,4.042641414892644,3.0];
const v2 = [-0.0,882817.6606323265,-Infinity,2.0,1e-15,5.427002823600763,0.1023768007828324,5.907875304814912,825.0658832719912];
256 >>> 256;
const v7 = [v1,-998282061,v2,256];
const v8 = [v2,v7];
[v8,v2,v8];
function F10(a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    ~a14;
    try {
        this.e = a13;
    } catch(e16) {
    }
    try {
        this.b = a14;
    } catch(e17) {
    }
    try {
        this.g = v2;
    } catch(e18) {
    }
}
F10.arguments;
new F10(v2, v8, 536870888);
new F10(v7, 256, v8);
const v22 = new F10(v7, v1, v7);
let v24 = 4.0;
const v27 = new Date("undefined");
try { v27.getUTCDay(); } catch (e) {}
v27.getYear();
v24 **= v24;
const o36 = {
    set d(a32) {
        for (let v33 = 0; v33 < 5; v33++) {
        }
        this["cos"]();
    },
};
class C37 {
    constructor(a39) {
        o36.d = a39;
    }
}
try { C37.call(v22); } catch (e) {}
const v42 = new WeakSet();
v42[4] = -8.576381465737261e+307;
new Map();
-719616954n ^ -719616954n;
class C49 {
    e;
    constructor(a51, a52, a53, a54) {
        super[a52] = this;
        const o55 = {
        };
        function f56(a57, a58) {
            return BigInt64Array;
        }
        o55.set = f56;
        function F61() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C64 extends F61 {
        }
        this[Symbol.match];
        v42[Symbol.asyncIterator];
    }
    [v27];
    #e;
    a;
    #g;
    static {
        this.e = this;
        for (let [i75, i76] = (() => {
                0 - 0;
                return [0, 10];
            })();
            i75 < i76;
            (() => {
                function f80() {
                    return f80;
                }
                try { f80(); } catch (e) {}
                const v82 = [601759695];
                v82[0] = v82;
                const v83 = [1073741824,1073741823,1376142744,1073741825];
                let v84 = 522675525n;
                v84--;
                function f86(a87, a88, a89, a90) {
                    function f92() {
                        return a87;
                    }
                    const v93 = f80();
                    Int8Array.length;
                    const v96 = new Int8Array();
                    try { v96.entries(); } catch (e) {}
                    function f98(a99, a100) {
                        return v93;
                    }
                    f98();
                    const v103 = f98()?.constructor;
                    try { new v103(this); } catch (e) {}
                    const v105 = v96.buffer;
                    Object.defineProperty(v105, "constructor", { writable: true, configurable: true, value: Date });
                    new Int8Array();
                    let v108 = 1000000000000.0;
                    const v109 = v108--;
                    v109 >>> v109;
                    v105.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f92);
                    let v113;
                    try { v113 = v83["find"](..."find", a90, ...v82, ...v83, ...v84); } catch (e) {}
                    Symbol.hasInstance = Symbol;
                    Symbol("find");
                    const v117 = new Uint8ClampedArray();
                    const o118 = {
                        ...v117,
                    };
                    v113 <= a89;
                    return arguments;
                }
                for (let v120 = 0; v120 < 10; v120++) {
                    f86();
                }
                let v122 = i75++;
                v122--;
            })()) {
            i76 & i76;
        }
    }
}
C49.e;
