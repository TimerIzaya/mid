let v1 = 16;
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    function f7(a8) {
        v1 = -268435456;
        const v11 = new Uint8ClampedArray(4);
        return v11.indexOf();
    }
    this.valueOf = f7;
    this.d = this;
    try {
        this.g = this;
    } catch(e13) {
    }
    try {
        this.d = a5;
    } catch(e14) {
    }
    try {
        a6.f = -268435456;
    } catch(e15) {
    }
}
const v16 = new F3(v1, -268435456);
new F3(-268435456, -268435456);
let v18 = new F3(v1, -22940);
try { v18.constructor(F3, v16); } catch (e) {}
1.4487048435757028 + 1.4487048435757028;
[-3.0,952.1054171388887,404324.27216332033,-1000000000000.0,1.7976931348623157e+308,-2.0,Infinity,2.0];
function f29(a30, a31) {
    for (let v33 in this) {
        v33 -= v33;
        try { new a30(...v33, -6.441557670402009, v33); } catch (e) {}
    }
}
[];
const o39 = {
    "type": "function",
};
o39.arguments = o39;
const v40 = new Worker(f29, o39);
let v41;
try { v41 = v40.terminate(); } catch (e) {}
const o43 = {
};
o43.h = v41;
o43.h = o43;
for (;
    (() => {
        const v47 = v18--;
        v47 - v47;
        return v47;
    })();
    ) {
    for (let v49 = 0; v49 < 32; v49++) {
        "p" + v49;
    }
}
[-6.695596969959072];
~220;
const v56 = [0.03568519099872258];
try { v56.toString(); } catch (e) {}
function f58(a59, a60, a61, a62) {
}
const v64 = f58?.__lookupSetter__;
try { new v64(v56); } catch (e) {}
