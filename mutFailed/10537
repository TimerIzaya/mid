class C3 {
    [-2] = 1638412294;
    get f() {
        const v8 = -477361345 | -21076;
        let v9 = this << -21076;
        v8 ^ v9;
        const v11 = v9++;
        if (v11 < v11) {
            try {
                Math.fround(undefined);
            } catch(e15) {
            }
        } else {
            const o16 = {
            };
            new Proxy(this, o16);
        }
        return v11 >> -477361345;
    }
}
new C3();
new C3();
new C3();
new Int32Array(55);
const v28 = new Int32Array(512);
new Uint16Array(257);
const v33 = new Float32Array(Float32Array);
for (let v34 = 0; v34 < 25; v34++) {
    function f35(a36, a37, a38, a39) {
        a36[0] = a36;
        let v40;
        try { v40 = v28.reduce(a39, v34); } catch (e) {}
        Object.defineProperty(v40, f35, { writable: true, enumerable: true, get: f35, set: f35 });
        try {
            new Int32Array(257, 512, 257);
        } catch(e42) {
        }
        a37 <= a37;
        const v45 = arguments?.__lookupGetter__;
        try { v45(v45, f35, a37, arguments); } catch (e) {}
        function f47(a48, a49) {
            return f47;
        }
        let v50 = -1073741824n;
        const v51 = v50--;
        function F53(a55, a56, a57, a58) {
            if (!new.target) { throw 'must be called with new'; }
            const v59 = this?.constructor;
            try { new v59(a55, 268435441n, a57, a58); } catch (e) {}
            a57 + a57;
            a58 << a58;
            try {
                this.c = 268435441n;
            } catch(e63) {
            }
            try {
                this.e = v51;
            } catch(e64) {
            }
        }
        try { undefined(); } catch (e) {}
        new Int8Array(v33);
        "find" == "find";
        return v33;
    }
    for (let v71 = 0; v71 < 10; v71++) {
        f35(v33, v34);
    }
    let v74 = new Date();
    v74 **= v74;
    const v77 = new BigUint64Array(255);
    v77.buffer.slice();
}
