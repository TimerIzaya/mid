let v0 = -496416928;
class C3 {
    static #o(a5, a6) {
        super.d = this;
        super.c = this;
        for (let [v10,v11,v12] of v0 = a6) {
            %VerifyType(v10);
            try { C3("async", 268435440, a5); } catch (e) {}
            this[C3] <<= v0;
        }
        const o14 = {
            "execution": "async",
            "type": "major",
        };
        gc(o14);
        return v0;
    }
}
C3.length;
const v17 = new C3();
new C3();
const v19 = new C3();
function f20(a21, a22) {
    return -45095n;
    return v17;
}
v19.constructor = f20;
const v24 = v19?.constructor;
try { new v24(); } catch (e) {}
-47108;
class C31 {
}
function f32(a33, a34) {
    class C35 {
        constructor(a37) {
            for (let v38 = 0; v38 < 32; v38++) {
                v38 === v38;
                for (let v40 = 0; v40 < 50; v40++) {
                }
                new Int8Array(520);
                for (let v44 = 0; v44 < 5; v44++) {
                }
                0 || Int8Array;
                Math.tanh();
                function f49() {
                    return this;
                }
            }
        }
    }
    return C35;
}
const v51 = Symbol.toPrimitive;
C31[v51] = f32;
new C31();
const v53 = [];
function f54(a55, a56) {
    %VerifyType(v17);
    try {
        v51.toString = a55;
    } catch(e57) {
    }
    return a55;
}
v53[Symbol.toPrimitive] = f54;
function f60(a61, a62) {
    const v64 = new Uint8Array(47108);
    for (const v65 in v64) {
        v65[0] = v65;
    }
}
v53.toString = f60;
const v66 = [v53];
v66[0];
let v68 = [C31,v66];
v68.valueOf = Symbol;
Number.isNaN(v68--);
