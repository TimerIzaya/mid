const v2 = new Array(3186);
class C3 extends Array {
    static f;
    static e;
    static #p(a5) {
        this.#p();
    }
    #valueOf(a8, a9) {
        let v10 = Math;
        (++v10).sinh(a8);
        3186 << 7;
        a8 * a9;
        class C16 {
            static {
                for (let v21 = 0; v21 < 32; v21++) {
                }
            }
        }
        const v23 = new C16();
        function f24(a25, a26, a27) {
            const o28 = {
                8: a26,
                4: v23,
                1838408335: a26,
                ...v2,
            };
            return o28;
        }
        v10.tanh(-v2);
        return a9;
    }
    f;
}
const v31 = new Array();
function f32(a33, a34) {
    return f32;
}
const v37 = [v31];
const o38 = {
    "arguments": v37,
    "type": "function",
};
new Worker(f32, o38);
const v40 = new C3();
const v41 = new C3();
new v41();
function f45() {
    return Uint32Array;
}
const v48 = new BigInt64Array(9);
try { v40.toLocaleString(v48); } catch (e) {}
new WeakMap();
function f51() {
    return Array;
}
const v55 = /8/vdiy;
Object.defineProperty(v40, 130, { value: 1000 });
let v57 = -1e-15;
const v58 = v57++;
const v59 = [];
function F60() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v59;
    } catch(e62) {
    }
}
const v63 = new F60();
const o72 = {
    "h": v63,
    199: v58,
    "b": F60,
    "a": v59,
    n(a65, a66, a67) {
        try {
        } catch(e71) {
        }
    },
};
class C73 {
    constructor(a75, a76) {
        const v80 = new Float64Array(1);
        v80["indexOf"](4, 4);
        try {
            b = v55;
        } catch(e83) {
        } finally {
        }
    }
}
new C73(v55, C73);
