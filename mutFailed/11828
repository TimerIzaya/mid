const v3 = -25283n >> (-25283n && -25283n);
v3 | v3;
const v7 = new Uint8ClampedArray(9);
let v9;
try { v9 = BigInt64Array.from(v7); } catch (e) {}
const v11 = new BigInt64Array();
const v13 = v11.buffer.__defineGetter__;
try { v13(); } catch (e) {}
function f17(a18, a19) {
    const o76 = {
        4: a19,
        "e": "source",
        __proto__: a18,
        set c(a21) {
            const o23 = {
                ...v7,
                get d() {
                    return this;
                },
            };
            d = o23;
            super[a19];
            const o30 = {
                "maxByteLength": 8,
                n(a28, a29) {
                    return a19;
                },
                ...8,
            };
            const v32 = new ArrayBuffer(8, o30);
            function F34() {
                if (!new.target) { throw 'must be called with new'; }
                F34 & F34;
                const o43 = {
                    set b(a38) {
                    },
                    toString(a40, a41) {
                        return f17;
                    },
                    get d() {
                        return v9;
                    },
                };
                try {
                    for (let [v44,v45,v46,v47] of F34) {
                    }
                } catch(e48) {
                }
            }
            function f49() {
                function f50(a51, a52, a53, a54) {
                    const v55 = a51.length;
                    a51.BYTES_PER_ELEMENT = a51;
                    let v56 = 8 | a52;
                    v56++;
                    const v58 = a51 / a51;
                    v58 % v58;
                    a52 < a51;
                    const o64 = {
                        n(a62, a63) {
                            return v55;
                        },
                    };
                    return a53;
                }
                const o72 = {
                    set e(a66) {
                    },
                    "type": "2",
                    [ArrayBuffer](a69, a70, a71) {
                    },
                };
                return o72;
            }
            F34[Symbol.iterator] = f49;
            new Int8Array(v32);
        },
    };
    return o76;
}
const v77 = f17(f17, "2");
f17(f17, "d");
const v79 = f17(v77, "d");
for (let i = 0; i < 10; i++) {
    v79[v79];
}
const v86 = [-1000000.0,1.2447871437442695e+308,2.0,-1.7099107331057683e+308,0.0];
function F87() {
    if (!new.target) { throw 'must be called with new'; }
    const v89 = this.constructor;
    try { new v89("constructor", "constructor", v89, v89); } catch (e) {}
    const v91 = this.valueOf(F87);
    switch (v86) {
        case "constructor":
            v91 < v89;
            break;
    }
}
new Uint8ClampedArray(6);
-425087802 >>> -425087802;
("128").fontsize();
/4H/gvisy;
(1073741824).compile(/[m]/gvdimsy);
16 >> (1073741824 ** 5);
new Int32Array(16);
new BigUint64Array(1655);
function f113() {
    for (const v116 of Array()) {
        const v117 = v116 | v116;
        v117 !== v117;
    }
    return f113;
}
%OptimizeFunctionOnNextCall(f113);
f113();
