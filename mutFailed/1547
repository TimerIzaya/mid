let v0 = 56828;
function f3(a4, a5) {
    a4 * a4;
    a4--;
    a5 + a5;
    try { ("toString").indexOf("toString"); } catch (e) {}
    try { ("message").toWellFormed(); } catch (e) {}
    function F13(a15) {
        if (!new.target) { throw 'must be called with new'; }
        const v16 = this?.__lookupGetter__;
        try { new v16(a15); } catch (e) {}
        const v18 = this.constructor;
        try { v18("toString"); } catch (e) {}
        a15[5];
        this.d = "message";
    }
    const v21 = new F13("toString");
    Int8Array.e = Int8Array;
    const v24 = new Int8Array(7);
    const v25 = v24?.constructor;
    try { v25.from(-404712598); } catch (e) {}
    const v27 = new v25(7, v21, v21);
    let v28;
    try { v28 = v27.keys(); } catch (e) {}
    try { v28.next(); } catch (e) {}
    const o59 = {
        __proto__: 9,
        "b": a5,
        /*
        __proto__: a4,
        */
        "maxByteLength": v0,
        [7]: 9,
        get g() {
            return -404712598;
        },
        [9]: a5,
        set g(a32) {
            this[0] >>>= a32;
            for (const v33 in this) {
                const o34 = {
                };
                new Proxy(this, o34);
                function F37() {
                    if (!new.target) { throw 'must be called with new'; }
                    const v39 = this?.constructor;
                    try { new v39(); } catch (e) {}
                }
                const v41 = new F37();
                const v42 = new F37();
                function f43(a44, a45) {
                    const o49 = {
                        "b": v42,
                        n(a47, a48) {
                            return a44;
                        },
                        "a": v41,
                    };
                    return o49;
                }
            }
        },
        [9](a51) {
        },
        "type": "toString",
        m(a53, a54, a55, a56) {
            a56[Symbol.toStringTag] = a56;
            return a56;
        },
        "h": a5,
        [a5]: -404712598,
    };
    return o59;
}
const v60 = f3(-404712598, 9);
f3(9, v0);
const v62 = f3(v0, -404712598);
v62.d = v62;
let v63 = 10;
try { BigUint64Array.of(); } catch (e) {}
v60[v62];
v0 = v63;
const v70 = new BigUint64Array(v63);
v70[0] = v70;
v70.g = v70;
186 - 186;
const v74 = 186 >> 186;
try { new Uint32Array(186, v74, 186); } catch (e) {}
Uint16Array.length = Uint16Array;
const v79 = new Uint16Array(2785);
const v81 = v79.fill()[792];
v81 * v81;
const v85 = new Uint16Array();
let v86;
try { v86 = v85.lastIndexOf(v79); } catch (e) {}
~v86;
v85.length <<= 1439;
const v88 = new Uint32Array(186);
try { ("-4294967295").split(BigUint64Array, "-4294967295"); } catch (e) {}
("-4294967295").replace();
-5.161103313394506 | -5.161103313394506;
class C96 {
    static e;
    e;
    static 3 = -5.161103313394506;
    toString(a98) {
        let v97 = this;
        v97.e *= 0.8199829542463926;
        v97 += v97;
        for (let v99 = 0; v99 < 10; v99++) {
            a98["p" + v99] = v99;
        }
        return 0.8199829542463926;
    }
}
C96[3] = C96;
try { new C96(); } catch (e) {}
Float64Array.BYTES_PER_ELEMENT = Float64Array;
const v105 = new Float64Array(186, 186, 16);
v105[104] = v105;
v105[3] = v105;
const v106 = [Float64Array,v105];
try { v106.copyWithin(2785, BigUint64Array); } catch (e) {}
class C108 {
    constructor(a110, a111) {
        const v112 = this?.__defineSetter__;
        try { new v112(6, 6); } catch (e) {}
        a110--;
        a111.name;
        const v116 = Float64Array > v88;
        v116 || v116;
        if (v116) {
            new Uint32Array(v106);
        } else {
            function F119(a121, a122, a123) {
                if (!new.target) { throw 'must be called with new'; }
            }
        }
    }
}
try { C108.call(v105); } catch (e) {}
try { new C108(6, Float64Array); } catch (e) {}
function f127() {
}
f127.caller = f127;
v63 = 2785;
let v129 = 33815;
v129 | v129;
const v131 = v129++;
v131 >= v131;
let v134 = Math.atan2(-15, v129);
v134--;
Math.atanh(v129);
v129 >>> -15;
const v138 = ~f127;
v138 >> v138;
function f140() {
    let v141 = 1000000000000.0;
    new C96();
    try {
        v105.toLocaleString();
    } catch(e144) {
    }
    v141--;
    class C147 {
    }
    new C147();
    const v149 = new C147();
    [v149,C147];
    [257828.6336153492,v149];
    const v152 = [v149];
    class C153 extends C147 {
    }
    function f154(a155, a156) {
        return a155;
    }
    Set.toString = f154;
    Set.constructor(Set);
    v152.constructor;
}
new Uint8ClampedArray(6);
BigInt64Array.d = BigInt64Array;
new BigInt64Array(9);
try { String.call(v70); } catch (e) {}
let v168;
try { v168 = new String(4294967297n); } catch (e) {}
try { v168.small(); } catch (e) {}
const v170 = new String();
const v171 = [-9223372036854775808,-12];
try { v171.sort(-15); } catch (e) {}
const v173 = new Float64Array(v171);
v173[1] = v173;
1000 >> 1000;
function f177(a178, a179) {
    a179 - a179;
    const o184 = {
        "f": a179,
        [a178]: -12,
        set e(a182) {
        },
    };
    return o184;
}
const v185 = f177(1000, 1000);
v185[1000];
f177(v185, 1000);
f177();
Object.defineProperty(v170, 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
-0.0 >>> -0.0;
-0.0 * -0.0;
Math.atan2(-0.0, 2.0);
function f195(a196, a197) {
    const v198 = a196 >> a196;
    v198 - v198;
    arguments.length;
    let [v202,v203,,...v204] = arguments;
    v202 != v202;
    try { v204.findLast(v106); } catch (e) {}
    try { v204.splice(v202, 4294967297n); } catch (e) {}
    return 48680;
}
try { f195(v106, v106); } catch (e) {}
f195.g = f195;
const v209 = f195(48680);
v209 + v209;
-v209;
