const v2 = new BigInt64Array(2736);
const v5 = new Int8Array(2736);
class C7 extends v5.constructor {
    c;
    b = 6;
}
new C7();
const v11 = new Uint32Array(1484);
function f12() {
    v11[BigInt64Array];
    f12();
    %PrepareFunctionForOptimization(f12);
    f12();
    f12();
    %OptimizeMaglevOnNextCall(f12);
    f12();
    return v11;
}
const v21 = [-128,973242685,5,-6,9223372036854775807,536870912,16,9007199254740991];
[-13,9007199254740991,928,-128,-1635341996,749029415,-2022343746];
[-42925,24756,536870912,-9007199254740991,-4294967296];
function f25(a26) {
    return a26;
}
class C27 extends f25 {
    static #c = f12;
    c = 165;
    #g;
}
let v29 = 0;
do {
    Object.defineProperty(v2, "length", { writable: true, configurable: true, enumerable: true, set: f12 });
    try { v21.splice(v29, 165, Uint8Array, v21); } catch (e) {}
    v29++;
} while (v29 < 2)
const v34 = new Uint8Array(165);
v34.lastIndexOf();
