const v2 = new Uint8ClampedArray(64);
try { Float64Array.bind(v2); } catch (e) {}
const v6 = new Float64Array(7);
let v7 = v6[2];
class C11 {
    c = -261.99102172609366;
    ["localeCompare"];
    static [-1.0];
    toString(a13, a14) {
        do {
            function F16(a18, a19, a20, a21) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.a = "localeCompare";
                } catch(e22) {
                }
            }
        } while (0 < 6)
    }
}
new C11();
v7--;
new Uint8Array(255);
const v30 = [142026.36415256164,-1000000000000.0,160593.91457975493,-1.9364523595671663,0.10652337324779793,0.4591098029687508,0.2689630899972745];
const v32 = new WeakMap();
function f33(a34, a35, a36) {
    return a35;
}
const v39 = [f33,v32,v30];
const o40 = {
    "arguments": v39,
    "type": "function",
};
new Worker(f33, o40);
536 + 536;
Int32Array.b = Int32Array;
const v45 = new Int32Array(536);
new Float64Array(200);
const v49 = /(ab|cde)\118\P{sc=Greek}+/gdims;
v49.exec(v49);
const v51 = v45?.constructor;
try { new v51(Int32Array, Float64Array, 536); } catch (e) {}
function f55() {
}
f55.e = f55;
new Uint8ClampedArray();
const v59 = new Int32Array(Int32Array, Int32Array, Int32Array);
~v59;
const t47 = Worker.prototype;
new t47("c");
("-4294967295").replace();
class C68 extends Set {
}
const o70 = {
    "type": "function",
};
("function").normalize();
const t56 = "g";
t56[14] &&= 14;
Math.asinh(-(-63523));
for (let v79 = 0; v79 < 25; v79++) {
}
function f80(a81, a82, a83, a84) {
    const o89 = {
        [f80](a86, a87, a88) {
        },
    };
    return a84;
}
%OptimizeFunctionOnNextCall(f80);
new Worker(f55, o70);
let v91 = 15;
v91--;
try { Set(Set); } catch (e) {}
Array(1102693041);
const v101 = new Uint8Array();
const o102 = {
    ...v101,
};
("boolean").normalize();
