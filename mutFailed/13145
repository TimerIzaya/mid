let v1 = -65535;
class C3 {
    a = v1;
    static [v1];
    #b = -65536;
    static [-65536];
    e = -65536;
    static {
        v1 ||= 255;
        255 | 255;
    }
    c;
    #a;
    5;
    #e;
}
const v6 = new C3();
const v7 = new C3();
new C3();
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = 255;
    try {
        this.c = a13;
    } catch(e14) {
    }
}
new F9(-65536, v7, v7);
new F9(v1, v7, 255);
new F9(255, v7, v6);
new Int16Array(5);
new Int8Array(3075);
new Int32Array(64);
function f27() {
    const o30 = {
        129: "m",
        1: "m",
        "f": "m",
    };
    return o30;
}
function F31() {
    if (!new.target) { throw 'must be called with new'; }
    const v33 = this?.constructor;
    try { new v33(); } catch (e) {}
}
const v35 = new F31();
Object.defineProperty(v35, "length", { configurable: true, value: v35 });
const v36 = v35?.constructor;
let v37;
try { v37 = v36(); } catch (e) {}
v35.length;
const v39 = new F31();
v39.toString = f27;
const v40 = [v39,v39,v39,v39,v39];
const v43 = new Uint32Array(1000);
const v44 = delete v40.length;
("cbrt").toLocaleUpperCase(v37, v44);
try { v44["cbrt"](v43, Uint32Array, v35); } catch (e) {}
f27();
f27();
const v50 = f27();
Number.isNaN(NaN);
65537 >> 65537;
536870912 + 536870912;
const v62 = [-42643,-2,-327102325,-1073741824,5];
function f63(a64, a65) {
    [9,1024,256,268435440,-1916992432,7,-2147483648,20126,-2,1645963617];
}
class C69 {
}
const v70 = new C69();
function f71(a72, a73) {
    a72[Symbol.toPrimitive] = f27;
    let v76 = a72.BYTES_PER_ELEMENT;
    v76++;
    class C78 {
    }
    const v79 = C78.length;
    v79 !== v79;
    try { ("0x2I").sup(); } catch (e) {}
    class C84 {
    }
    try { C84(); } catch (e) {}
    const v86 = C84?.call;
    v86.length;
    try { v86(null); } catch (e) {}
    class C89 extends C84 {
        constructor(a91, a92, a93, a94) {
        }
    }
    try {
        Number(a72);
    } catch(e96) {
    }
    try { v39.toString(); } catch (e) {}
    C89.e = C89;
    try { C89(NaN, v70, NaN, v50); } catch (e) {}
    const v99 = a73?.propertyIsEnumerable;
    try { v99(C84); } catch (e) {}
    let v101;
    try { v101 = v99(); } catch (e) {}
    class C102 {
    }
    C102.name = C102;
    try { C102.call(); } catch (e) {}
    const v104 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
    try { v104.includes(v101); } catch (e) {}
    class C106 {
    }
    function f107(a108) {
        +-1.0406565190769766e+308;
    }
    Object.defineProperty(C106, Symbol.replace, { writable: true, enumerable: true, set: f107 });
    try { C106(); } catch (e) {}
    try { C106.apply(1.7976931348623157e+308, f71); } catch (e) {}
    Symbol.toPrimitive;
    Symbol.b = Symbol;
    C106[Symbol.replace] = v104;
    const v118 = [];
    function f119(a120) {
        +20572;
        return 3075;
    }
    v118[Symbol.toPrimitive] = f119;
    try { v118.findLast(1.7976931348623157e+308); } catch (e) {}
    function f127(a128, a129) {
        const o130 = {
            "f": a129,
            [a128]: -12,
        };
        return o130;
    }
    try { f127.toString(); } catch (e) {}
    let v132;
    try { v132 = v118.with(v118, v118); } catch (e) {}
    const v134 = new Float64Array(v118, v132);
    const v135 = new Float64Array(v134, a72, v132);
    v135.values().next();
    return v135;
}
f71.name;
f71.length = f71;
function f140() {
    try {
        new f71(Uint32Array, C69);
    } catch(e142) {
    }
    return v36;
}
Uint16Array.toString = f140;
%PrepareFunctionForOptimization(f71);
f71(Uint16Array, v70).length;
%OptimizeFunctionOnNextCall(f71);
f71(v70, v70);
[3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
let v148 = undefined;
const o149 = {
    __proto__: undefined,
};
o149.h = v36;
o149.h = o149;
v148 = v62;
let v151;
try { v151 = BigInt64Array(4.0, v148); } catch (e) {}
try { v151.lastIndexOf(BigInt64Array); } catch (e) {}
