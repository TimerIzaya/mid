new Array(64);
[-1000000000000.0,6.955230001948216,-681319.8065144399,-576.6745271839719,NaN];
[1.0,-1000000000000.0,1.7976931348623157e+308];
[-1.0];
new Int16Array(116);
new BigUint64Array(3);
new Int16Array(3);
new Uint32Array(174);
new Float32Array(1018);
const o25 = {
};
class C26 {
}
const v27 = new C26();
v27[Symbol.toPrimitive] = Array;
v27 << -1557853178;
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = F33;
}
const v37 = F33?.bind;
try { new v37(o25); } catch (e) {}
const v39 = new F33();
new F33();
new F33("function", v39);
let v42 = 4096;
v42--;
new Float32Array();
class C45 {
    static {
        try { new this(); } catch (e) {}
        for (let v48 = 0; v48 < 10; v48++) {
            const v49 = [-65537,-24143,-1293542190,14907,3476,-65083];
            const v50 = [65537,3,-25535,268435440,-2,9007199254740990,1,-128,9007199254740990];
            const v51 = [6,-536870912];
            v51.toString = Symbol;
            const v53 = new Date();
            function F54(a56) {
                if (!new.target) { throw 'must be called with new'; }
                this.f = v53;
                this.g = Date;
            }
            new F54(v49);
            const v58 = new F54();
            class C59 {
                constructor(a61, a62) {
                    function f63(a64, a65, a66, a67) {
                        const o68 = {
                            "deleteProperty": Date,
                            "ownKeys": Date,
                        };
                        return v58;
                    }
                    f63(v50, Date);
                }
                [v51];
                g = v58;
            }
            new C59();
            new C59();
            const v73 = new Uint16Array();
            const v76 = new Float64Array(453);
            const v77 = v76.toSorted();
            const o78 = {
                "c": Float64Array,
                "f": v51,
                __proto__: v73,
            };
            Date();
            Date.valueOf = v77;
            v48 % v48;
            function f81() {
                return v48;
            }
            const v82 = [601759695];
            const v83 = [1073741824,1073741823,1376142744,1073741825];
            function f85(a86, a87, a88, a89) {
                f81();
                let v92;
                try { v92 = v83["find"](..."find", a89, ...v82, ...v83, ...522675525n); } catch (e) {}
                const v93 = v92 <= a88;
                v93 && v93;
            }
            for (let v95 = 0; v95 < 10; v95++) {
                f85();
            }
        }
        ("object").__proto__?.trimRight;
    }
}
