function f0() {
    const o10 = {
        [-719301.5378308592](a5) {
            function f9() {
                return -856514664;
            }
            return -719301.5378308592;
        },
        "g": 368237833,
        "f": 0.2629081054629583,
        "c": -719301.5378308592,
        [0.2629081054629583]: 368237833,
        "e": -719301.5378308592,
    };
    return o10;
}
new Int32Array();
let v13 = 1024;
for (let v14 = 0; v14 < 25; v14++) {
    Array(36862);
    v13++;
    ([-833.5530374606573,-46757.76096849947,-2.220446049250313e-16,-1000000.0,0.0,1.0,0.042648320103989557,1.4570589756852907,145338.1606694283]).groupToMap;
}
const v22 = f0();
const v23 = f0();
const v24 = f0();
const o37 = {
    [128](a30, a31, a32) {
    },
    set b(a34) {
    },
    set b(a36) {
    },
};
function F38(a40, a41, a42, a43) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        function f44(a45, a46) {
            const o47 = {
            };
            return o47;
        }
        this.d = a41;
    } catch(e48) {
    }
    try {
        this.b = -1.7976931348623157e+308;
    } catch(e49) {
    }
    try {
        a43.e = a43;
        const v52 = new Int8Array(127);
        const v54 = new WeakSet();
        for (const v55 in v52) {
            v54[v55] = v55;
        }
    } catch(e56) {
    }
    BigInt.asUintN(-15843, 45011n);
    const v64 = new Int16Array(41);
    v64.fill(725);
}
const v66 = new F38(v23, v24, v23, -1.7976931348623157e+308);
const v67 = new F38(v24, v22, v22, -0.0);
const v68 = new F38(v22, v24, v22, -1.1122779883167826e+308);
new Date();
const v72 = /(?:a*)+q(?<a>.)/guds;
function f73(a74) {
    a74.dotAll;
    const o77 = {
        get d() {
            return v72;
        },
    };
    return v72;
}
for (let [i81, i82] = (() => {
        let v78 = 0;
        v78++;
        return [v78, 10];
    })();
    (() => {
        const v83 = 9 < i82;
        v83 || v83;
        return v83;
    })();
    i82--) {
    for (let v90 = 0; v90 < 10; v90++) {
        f73(v72);
        new Uint16Array();
        const v95 = new BigUint64Array();
        function F96(a98, a99) {
            if (!new.target) { throw 'must be called with new'; }
            function f100() {
                v95.toLocaleLowerCase();
                return a98;
            }
            Object.defineProperty(this, Symbol.toPrimitive, { writable: true, value: f100 });
        }
        new F96();
    }
}
function F105(a107, a108, a109, a110) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        a109.b = a107;
    } catch(e111) {
    }
    try {
        this.a = a107;
    } catch(e112) {
    }
    try {
        a108.h = v23;
    } catch(e113) {
    }
}
new F105(v66, v68, F105, v68);
new F105(v68, v68, v23, F105);
new F105(v67, v68, -0.0, -0.0);
gc();
