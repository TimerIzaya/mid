function f0() {
    const o4 = {
        ..."qr",
        __proto__: "qr",
        ..."qr",
        "c": "qr",
        [1000000000000.0]: 16,
        [16]: "qr",
        "g": 16,
        "d": 16,
        "b": 1000000000000.0,
        ["qr"]: 16,
    };
    return o4;
}
f0.toString = f0;
const v5 = f0();
const v6 = f0();
const v7 = f0();
class C8 extends f0 {
    static #g;
    e = f0;
    constructor(a10, a11) {
        super();
        const v12 = /hFa\sc/udim;
        let v13;
        try { v13 = a10(v5); } catch (e) {}
        try {
            v13.g = a11;
        } catch(e14) {
        }
        const v15 = /\u0034/vi;
        const v16 = /v/visy;
        function f17(a18) {
            v15 >> v12;
        }
        Object.defineProperty(v16, 2738922695, { configurable: true, enumerable: true, set: f17 });
        v16[2738922695] = a11;
    }
    static [f0] = v5;
}
const v20 = new C8(v7, v7);
const v21 = new C8(v6, v20);
function F22() {
    if (!new.target) { throw 'must be called with new'; }
    function F24() {
        if (!new.target) { throw 'must be called with new'; }
        for (let v26 = 0; v26 < 25; v26++) {
            const v27 = [601759695];
            const v28 = [1073741824,1073741823,1376142744,1073741825];
            function f29(a30, a31, a32, a33) {
                Math.cos(-1073741824);
                try { v28["find"](..."find", a33, ...v27, ...v28); } catch (e) {}
                return v26;
            }
            for (let v39 = 0; v39 < 5; v39++) {
                f29();
            }
        }
    }
    new F24();
}
new F22();
const v43 = new C8(v20, v5);
[v6,[v20,C8,[v20,v21,v21]],v43,v7,v43];
function F47() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F47();
        /Ckza\Wb?/vis;
        /Ma\W+/gudm;
    } catch(e52) {
    }
}
new F47();
new F47();
let v56 = 4096;
new SharedArrayBuffer(v56);
const v58 = [];
function f59(a60, a61) {
    class C62 {
    }
    const v65 = new WeakSet();
    const v66 = v65 * C62;
    v56 &&= v66;
    [f59];
    [v6,SharedArrayBuffer];
    [f0,v66];
}
Object.defineProperty(f59, Symbol.species, { writable: true, configurable: true, enumerable: true, value: f0 });
v58.constructor = f59;
let v73 = -1024;
function F74(a76, a77, a78, a79) {
    if (!new.target) { throw 'must be called with new'; }
}
const v80 = new F74(F74, F74, v73, v73);
const v81 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v82 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
class C84 {
}
const v87 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v88 = [601759695];
function f90(a91, a92, a93, a94) {
    function f95() {
        let v98 = Float64Array;
        try { new v98(a94); } catch (e) {}
        v98 = a92;
        b = v88;
        const v100 = v81.length;
        try {
            v81.forEach(v98);
        } catch(e102) {
        }
        const v103 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        let v104 = Symbol.toPrimitive;
        Symbol.for(v104.description);
        const o112 = {
            toString(a108, a109) {
                const v110 = a94 && v98;
                a108 *= v104;
                v110 <= v103;
                return v104;
            },
        };
        const o133 = {
            "c": -4294967297n,
            [522675525n](a115, a116) {
            },
            "c": v88,
            valueOf(a118, a119) {
                return a93;
            },
            "b": -4294967295,
            [-4294967297n](a121, a122, a123, a124) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v87,
            ...v80,
            [v104]() {
            },
            "type": C84,
            ..."Vre",
            valueOf(a127, a128) {
                return f95;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            toString(a130, a131, a132) {
            },
            5: -4294967295,
            6: -268435456,
        };
        v104 = v98;
        new Float32Array(1334);
        v73 %= -268435456;
        new Uint32Array(v82, v100);
        return v80;
    }
    f95();
    %OptimizeFunctionOnNextCall(f95);
    return v88;
}
for (let v139 = 0; v139 < 5; v139++) {
    f90();
}
v58["concat"]();
