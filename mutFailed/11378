const v3 = [2.220446049250313e-16,-1000000000.0,-0.0,262.6611499149469,-1.3655973077464165e+308,3.0,-2.220446049250313e-16,3.0,1.3801679428113223e+308];
const v4 = [428444.2385517091,0.7548597006191199,Infinity,1.7976931348623157e+308,8.647486971547359,1.4492527959388339e+308,-5.0];
v4[2];
const v6 = [5.360166841580807e+307,0.18481236523613376,-856.5029023849493,-675311.232435818];
try { ("bigint").bold(); } catch (e) {}
function F11(a13, a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    const v17 = this?.constructor;
    try { new v17(this, this, a15, a16); } catch (e) {}
    a15 / a15;
    a16.length;
    try {
        this.b = a13;
    } catch(e21) {
    }
}
const v22 = new F11("bigint", v3, v4, "512");
v22.length = v22;
new F11(v6, v6, -4n, "bigint");
1 * 1;
Int16Array.length;
1000 & 1000;
try {
    class C37 extends [Number,Number,Number,Number] {
    }
} catch(e38) {
}
const v43 = new F11("bigint", v6, -256n, "bigint", Array, Number);
v43.length;
for (let v45 = 0; v45 < 5; v45++) {
    ~v45;
    function f47() {
        const v49 = Symbol.toPrimitive;
        v45.for(v22.description);
        const v54 = v49.description.codePointAt();
        ([-1.5424212036356715e+308]).shift();
        [1073741824,1073741823,1376142744,1073741825];
        return v54;
    }
    f47();
    %OptimizeFunctionOnNextCall(f47);
}
