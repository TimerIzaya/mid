new BigInt64Array(4096);
class C5 {
}
const v6 = new C5();
const v7 = v6.constructor;
let v8 = new v7();
const v9 = /[\11]/gm;
function f10() {
    return v8 >>>= f10 != v9;
}
const v12 = new BigInt64Array(0);
const v15 = new Uint32Array(128);
v15[91];
const v21 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
let v22 = -4294967297n;
const v23 = v22--;
const v24 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
try { v24.flatMap(v23); } catch (e) {}
const v26 = [601759695];
const v27 = [1073741824,1073741823,1376142744,1073741825];
let v28;
try { v28 = v27.entries(); } catch (e) {}
function f29(a30, a31, a32, a33) {
    a30 + a30;
    -a31;
    a32[6] = a32;
    function f36() {
        try { ("Vre").anchor(v7); } catch (e) {}
        let v39;
        try { v39 = ("Vre").codePointAt(); } catch (e) {}
        v39 === v39;
        let v41 = Float64Array;
        v41.prototype = v41;
        v41 = a31;
        b = v26;
        v21.length;
        try {
            v27.forEach(a31);
        } catch(e44) {
            e44.g = e44;
        }
        const o55 = {
            "c": v22,
            "c": v26,
            valueOf(a46, a47) {
                return a46;
            },
            [v22](a49, a50, a51, a52) {
                eval();
            },
            "arguments": v24,
            256: a33,
        };
        o55[256] = o55;
    }
    f36();
    %OptimizeFunctionOnNextCall(f36);
    return f29;
}
f29.b = f29;
for (let v57 = 0; v57 < 5; v57++) {
    const v58 = f29(v57, v22, v24, v57);
    try { v58(v58, v21, v58, 128); } catch (e) {}
}
const v60 = new WeakSet();
const v63 = new Int32Array(129, 129, 129);
const v65 = new BigInt64Array();
const v66 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
const v67 = [-1.7976931348623157e+308];
function f68(a69, a70, a71, a72) {
    const o79 = {
        toString(a74, a75, a76) {
            try { this.toString(); } catch (e) {}
            [v63,v63,v63,v63,v63];
            a71[a70] = a69;
        },
        "e": v65,
        "a": v67,
        __proto__: v12,
        "g": a71,
        "c": v15,
    };
    return o79;
}
const v80 = f68(v65, 129, v67);
const v81 = f68(v63, 129, v66);
for (let v82 = 0; v82 < 5; v82++) {
    v81 % v80;
}
const v84 = [-620100541,-64845,-268435456,-7,-268435456,1024,-536870912];
try { v60.delete(f10); } catch (e) {}
f10();
try {
    v8.f = Int32Array;
} catch(e87) {
}
function F88(a90, a91, a92) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = v84;
    } catch(e93) {
    }
    try {
        this.c = f29;
    } catch(e94) {
        ([974836.255416306,7.54270135293536,0.0,0.35539841926815563,1.385396251341163,-1000000000000.0,NaN,-1.7976931348623157e+308]).toLocaleString();
        function f97() {
            let v98 = -9223372036854775808n;
            v98 %= 45725n;
            return 45725n;
        }
        for (let v100 = 0; v100 < 5; v100++) {
            f97();
            %OptimizeFunctionOnNextCall(f97);
        }
    }
}
F88.length;
const v104 = new Uint32Array(v84);
const v105 = v104[2];
function f106() {
    return f106;
}
f106 >= v6;
class C108 {
}
class C109 extends Uint32Array {
    static #h = v28;
    [v105];
}
new C109();
new C109();
new C109();
try { new C108(); } catch (e) {}
const v114 = new C108();
const v115 = v114?.constructor;
try { new v115(); } catch (e) {}
