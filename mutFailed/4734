new BigInt64Array(256);
try { new BigInt64Array(BigInt64Array, 5, BigInt64Array); } catch (e) {}
const v6 = new BigInt64Array(5);
try { v6.map(BigInt64Array); } catch (e) {}
Int32Array.g = Int32Array;
new Int32Array(5);
3073 * 3073;
const v14 = Float64Array.BYTES_PER_ELEMENT;
v14 & v14;
class C16 {
    4259938026;
}
("1866165091").normalize();
new Float64Array(3073);
new Int32Array();
const v22 = [];
class C23 {
    constructor(a25, a26, a27) {
        function f28(a29, a30, a31) {
            v22.copyWithin();
            try {
                f28(-268435456, 0.6683462416314783, [-268435456]);
            } catch(e37) {
            }
            const v38 = this >> -268435456;
            v38 >> this;
            return -v38;
        }
        f28(this, this, a25);
    }
}
~187;
try { new BigUint64Array(187, 3073, 187); } catch (e) {}
try { new BigUint64Array(BigUint64Array, Float64Array, BigUint64Array); } catch (e) {}
new BigUint64Array(187);
new BigInt64Array(512);
9.187362692894364 <= 9.187362692894364;
class C53 {
    static 9 = 9.187362692894364;
}
C53.name = C53;
C53.length = C53;
for (const v54 in C53) {
    function f55(a56, a57, a58) {
        function f60(a61) {
            return a58;
        }
        %PrepareFunctionForOptimization(f60);
        return this;
    }
    Worker(f55);
    v54[0] = v54;
}
