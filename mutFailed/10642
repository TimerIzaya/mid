function f0() {
}
function f1() {
    return f0;
}
function F5(a7) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -9223372036854775808;
    } catch(e8) {
        if (e8) {
            const o11 = {
                "maxByteLength": 10,
            };
            const v13 = new SharedArrayBuffer(10, o11);
            new Float64Array(v13);
        } else {
            const o18 = {
                "maxByteLength": 65537,
                [this]: f0,
                "d": e8,
                [f0]: 1109859588,
                __proto__: ArrayBuffer,
                [e8]: ArrayBuffer,
            };
            const v20 = new ArrayBuffer(256, o18);
            new Uint32Array(v20);
        }
    }
    try {
        this.a = a7;
    } catch(e23) {
    }
    try {
        this.f = f1;
    } catch(e24) {
    }
}
function f25(a26, a27) {
    const v30 = new BigInt64Array(65537, a27);
    new BigUint64Array(10, v30);
    new Int32Array(1024);
    return v30;
}
f25(-9223372036854775808, 1109859588);
new F5(1109859588);
const v39 = new F5(1109859588);
new F5(1109859588);
function F47() {
    if (!new.target) { throw 'must be called with new'; }
}
const v49 = new F47();
function F50(a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
    function f54() {
        return a53;
    }
    const v55 = f54();
    class C57 {
    }
    const v58 = new C57();
    function f59(a60, a61) {
        const v62 = a60.BYTES_PER_ELEMENT;
        class C63 {
        }
        C63.length;
        try { ("0x2I").sup(); } catch (e) {}
        class C68 {
        }
        v39["0x2I"] += NaN;
        NaN !== NaN ? NaN : NaN;
        function f71() {
            return -9223372036854775808;
        }
        const v72 = C68.call;
        try { v72(); } catch (e) {}
        class C74 extends C68 {
        }
        try { C74(NaN, v58, NaN, v55); } catch (e) {}
        try {
            v58.__proto__ = v62;
        } catch(e76) {
        }
        function F77(a79, a80) {
            if (!new.target) { throw 'must be called with new'; }
            this.e = a61;
        }
        const v81 = new F77(a61, v72);
        const v82 = new F77(v81, v81);
        new F77(v49);
        const v84 = a61?.propertyIsEnumerable;
        try { v84(); } catch (e) {}
        class C86 {
            static m(a88, a89, a90, a91) {
                const v92 = v82.__proto__;
                try { new v84(v92, NaN, a90); } catch (e) {}
                return 1109859588;
            }
        }
        try { C86.call(NaN, v55, v49); } catch (e) {}
        [Infinity,-3.0159653357902965,-3.0,0.7442310308217029,5.0,0.5045562160596381,908.6399453231966,1e-15,-3.711662912829507e+306,3.0];
        class C96 {
        }
        try { C96.apply(1.7976931348623157e+308); } catch (e) {}
        Symbol.b = Symbol;
        Symbol.replace;
        const v100 = [];
        try { v100.with(); } catch (e) {}
        new Reflect();
        const v104 = new Reflect();
        const v105 = v104.values();
        let v106;
        try { v106 = v105.next(); } catch (e) {}
        return v106;
    }
    %PrepareFunctionForOptimization(f59);
    f59(Uint16Array);
    %OptimizeFunctionOnNextCall(f59);
    f59(v58);
    new BigInt64Array(1073741824);
}
new F50();
new F50();
