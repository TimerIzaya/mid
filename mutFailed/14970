const v3 = [0.6573681746605003,1.0,-1000000.0,1e-15];
try { v3.fill(-268435456); } catch (e) {}
[1000000000.0,4.0,-6.072657320416344e+307,-899.4218960522726,0.49008092580415796,0.6491014034444158,-577.2102863236616,-596.5728129479504,-Infinity];
[880378.864584958,0.030420285764995114,0.044617542398379895,236.73607883325758,-1000000000000.0,938201.2575902038,4.31779935935811,5.137314505632219,Infinity];
268435441 - 268435441;
35775 >> 35775;
-1000000.0 >>> -1000000.0;
new Int16Array(Int16Array);
const v24 = new Int8Array(0);
let v25;
try { v25 = v24.lastIndexOf(16); } catch (e) {}
const v26 = v25 / v25;
Uint8Array.e = Uint8Array;
const v29 = new Uint8Array(0);
const v31 = [[Int16Array,v29,16,16,16]];
try { v31.map(-268435456); } catch (e) {}
const v33 = [Int8Array,v24,v31];
try { v33.copyWithin(35775, v29); } catch (e) {}
948737.12760097 >> 948737.12760097;
2.2250738585072014e-308 + 2.2250738585072014e-308;
let v42 = 135.68951961804942;
-(v42++);
const v47 = new Int16Array(2183);
Uint8Array.name;
Uint8Array.e = 2.2250738585072014e-308;
Uint8Array.e = Uint8Array;
const t26 = 2.2250738585072014e-308;
new t26(255);
8 - 0;
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v55 = new v26(8);
parseFloat.d = parseFloat;
try { parseFloat(16); } catch (e) {}
async function f58(a59, a60, a61) {
    a60 >>> a60;
    a61 ^ a61;
    const v64 = delete v55[-1000000000.0];
    v64 && v64;
    let [v66,v67,...v68] = v47;
    try { v68.toLocaleString(); } catch (e) {}
    let v70 = v47[5];
    v70--;
    await v67;
    return Uint8Array;
}
const v74 = +1000000000.0;
v74 === v74;
v74 || (v42 / (-36313 + v42));
