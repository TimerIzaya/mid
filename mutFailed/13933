[Infinity,0.8754217637695192,908.2118634188055,-2.0,6.628337750042418e+307,-4.726310416724216];
[1.8501632237794237,1000000.0,0.0,-2.0,-484622.28927713033,1000000000000.0,8.642654706052351e+307,-3.0,1.3797435808151083e+308];
[-1000000000.0,1.701402430577221e+308,0.39709230928664163,481.63767922680654];
function f8() {
    class C9 {
    }
    const v10 = new C9();
    try { v10.isPrototypeOf(v10); } catch (e) {}
    return v10;
}
new Float32Array(1386);
new Float64Array(512);
new BigUint64Array(255);
const v19 = [-0.6149395169662668,2.264458813811361e+307,-945.2801378445339];
const v20 = [1000000000000.0,-1.0821679916006571e+308,4.092945393267847,1000000000.0,-822637.9284357226];
class C23 {
}
const v24 = new C23();
const v25 = new C23();
const v29 = Float64Array.round();
async function f30(a31, a32, a33) {
    a33 >>> a33;
    Number.isNaN(await v29);
    const v39 = [0.8307152163010869,1.0,0.0];
    v39[2] = v39;
    v39.length = 1386;
    %VerifyType(v39 instanceof -24894);
    return f30;
}
const v41 = f30(Math, "b", v29);
try { v41.hasOwnProperty(-788.7260290236088); } catch (e) {}
function F43(a45, a46, a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = this.constructor;
    try { new v49(a45, F43, 16, a48); } catch (e) {}
    a48[16] = a48;
}
new F43(v19, v25, v19, v24);
const v54 = this.Realm.dispose;
try { v54(); } catch (e) {}
let v56 = 4.150176177212824;
[v56 &= -2.0];
new F43(v20, v20, v19, v20);
