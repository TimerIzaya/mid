function f0() {
}
642208285 << 642208285;
let v9 = -2n;
v9--;
536870887n | 536870887n;
const v17 = new BigUint64Array();
try { v17.lastIndexOf(-1024); } catch (e) {}
const v20 = new BigUint64Array(1448);
function f21(a22, a23, a24) {
    a23 * a23;
    ~a24;
    return a24;
}
v20.toLocaleString(([-1000000000000.0,-1.7976931348623157e+308,294500.85018206923,-Infinity,-0.0,-7.010036940344757e+307,1.0,-Infinity,-1000.0,-1.1645821156926988e+308]).reduce(f21), v17);
try { new BigUint64Array(undefined, BigUint64Array, BigUint64Array); } catch (e) {}
new BigUint64Array(2864);
let v33 = 2549;
const v34 = v33--;
BigInt64Array.d = BigInt64Array;
new BigInt64Array(v33);
642208285 < 2864;
try {
} catch(e40) {
    function F41() {
        if (!new.target) { throw 'must be called with new'; }
    }
    function f43() {
        return e40;
    }
}
try { Float32Array(v33, v33, undefined); } catch (e) {}
new Float32Array(3);
const v46 = /(J5a{0,1}?)/y;
const v47 = /u?/udms;
v47.b = v47;
const v48 = /bf/gvms;
v48.dotAll = v48;
32 ^ 32;
32 >>> 32;
let v52 = 32 + 32;
v52--;
const v55 = new Uint8ClampedArray(32);
try { v55.join(642208285); } catch (e) {}
let v57 = 4096;
v57++;
const v59 = v57 & v57;
v59 / v59;
let v62;
try { v62 = new Uint8Array(BigUint64Array, BigUint64Array, 3); } catch (e) {}
v62[2];
new Uint8Array(v57);
let v66 = 1582 >> 1582;
let v67 = v66--;
v67++;
new Int8Array(1582);
const v72 = 4 - 4;
v72 !== v72;
-54813 - -54813;
8 & 8;
const v78 = [-54813,1582,-54813,8];
v78[0];
const v80 = [-54813];
const v81 = [-54813];
try { v81.map(4); } catch (e) {}
function f83(a84, a85, a86, a87) {
    try { a84.toString(); } catch (e) {}
    try { a85.groupToMap(a86); } catch (e) {}
    a86[0] = a86;
    let v90;
    try { v90 = a84.copyWithin(undefined, a85); } catch (e) {}
    v90[0];
    const o109 = {
        n(a93, a94, a95, a96) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a87;
        },
        ...v81,
        "b": v78,
        ...a86,
        o(a101, a102, a103, a104) {
            [v47];
            Reflect.apply(a102.reduce, v66);
            return v66;
        },
        ...v81,
        129: 4,
        ...a84,
    };
    o109[2] = o109;
    return o109;
}
const v111 = f83(v80, 8, f83(v80, v81, v78, 4), 4);
new Uint8Array();
const v115 = new Date();
v115.toLocaleString();
v111[129] = v111;
const v117 = f83(v81, 4, 4, 4);
v117[129] = v117;
v117.d = v117;
-26206 > -26206;
-26206 - -26206;
let v124;
try { v124 = new Map(); } catch (e) {}
try { v124.set(v124, v34); } catch (e) {}
const v126 = /ND2/gds;
v126.d = v126;
class C127 extends Map {
}
const v128 = new C127();
try { v128.get(Uint8Array); } catch (e) {}
const v130 = v128.isPrototypeOf();
!v130;
const v132 = v130 && v130;
v132 && v132;
const v134 = v130 && v130;
v134 && v134;
-7;
const v139 = Date.name;
v139[1] = v139;
let v140;
try { v140 = Date.parse(4); } catch (e) {}
-v140;
class C142 {
    static {
        this.name = this;
        for (let v144 = 0; v144 < 25; v144++) {
            v144 >> v144;
            v144 >>> v144;
            const v147 = [601759695];
            const v148 = [1073741824,1073741823,1376142744,1073741825];
            function f150(a151, a152, a153, a154) {
                let v155;
                try { v155 = new a151(); } catch (e) {}
                const v156 = v155?.__defineGetter__;
                try { new v156(a151, a151); } catch (e) {}
                a152 & a152;
                ~a152;
                try { new a151(); } catch (e) {}
                const v161 = a153 << a153;
                v161 % v161;
                function f164() {
                }
                f164.name;
                const v167 = new Int8Array();
                const v170 = BigUint64Array * 536870887;
                let v171 = v170 - v170;
                v171++;
                const v173 = v170 ** v170;
                v173 - v173;
                try { Number.bind(v57); } catch (e) {}
                try { Number.parseInt(v171, v171); } catch (e) {}
                let v178;
                try { v178 = new Number(v46); } catch (e) {}
                let v179;
                try { v179 = v178.valueOf(); } catch (e) {}
                v179++;
                Number.isNaN(v173);
                function f182(a183, a184) {
                    return Number;
                }
                let v185;
                try { v185 = f182(); } catch (e) {}
                v185.length;
                const v188 = v167.buffer.__defineGetter__;
                v188.d = v188;
                %OptimizeFunctionOnNextCall(f164);
                try { v148["find"](..."find", a154, ...v147); } catch (e) {}
                const o191 = {
                };
                o191.b = o191;
            }
            for (let v192 = 0; v192 < 5; v192++) {
                f150(this, v192, v192);
            }
        }
    }
}
try { new C142(); } catch (e) {}
