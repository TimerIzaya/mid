const v0 = [];
function f1(a2) {
    try {
        v0.some(a2, true);
        function F6(a8) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = 145253519;
            } catch(e9) {
            }
        }
    } catch(e10) {
        e10.b = e10;
        const v11 = e10.stack;
        try { v11.includes(a2); } catch (e) {}
    }
    return a2;
}
v0.toString = f1;
const o15 = {
    "maxByteLength": 268435439,
};
o15.maxByteLength = o15;
const v17 = new SharedArrayBuffer(6, o15);
v17.b = v17;
function f18() {
    const o42 = {
        1: v0,
        "maxByteLength": 6,
        "arguments": v0,
        __proto__: v0,
        [v0]() {
            class C21 {
                toString(a23, a24) {
                    super.g = "-9223372036854775808";
                }
                n(a26) {
                }
            }
            const v28 = Symbol.unscopables;
            const v31 = new Uint16Array(2);
            const v32 = new Uint16Array(v31);
            for (const v33 in v32) {
            }
            v0[v28] = v28;
            try {
                const o36 = {
                };
                o36.d = Set;
                o36.e = "string";
                this.e = v0;
            } catch(e37) {
            }
            return this;
        },
        "g": v0,
        ...SharedArrayBuffer,
        [268435439](a39) {
        },
        "arguments": v0,
        set h(a41) {
        },
        /*
        __proto__: v0,
        */
    };
    return o42;
}
let v43;
try { v43 = new f18(); } catch (e) {}
v43[268435439] = v43;
Uint8ClampedArray.name;
new Uint8ClampedArray(1000);
try { new Uint32Array(Uint32Array, 268435439, v43); } catch (e) {}
const v50 = new Uint32Array();
v50.d = v50;
Float64Array > v50;
Int8Array.BYTES_PER_ELEMENT = Int8Array;
const v55 = new Int8Array(3816);
v55.BYTES_PER_ELEMENT = v55;
const v56 = v55[1];
v56 !== v56;
v0.a = v56;
let v58 = 0;
const v59 = v58++;
v59 % v59;
v58 < 7;
const v63 = f18();
const v64 = f18();
v64.length = v64;
const v65 = f18();
try { v65.some(Float64Array); } catch (e) {}
-1073741824n;
7984n | 7984n;
const v73 = new Set();
v73.size;
function F75(a77, a78) {
    if (!new.target) { throw 'must be called with new'; }
    a78 - a78;
    const v80 = this.constructor;
    v80.name = v80;
    const v82 = new Int16Array(a78);
    const v83 = v82.lastIndexOf(F75, a77);
    v83 ^ v83;
    try { new v80(this, a77); } catch (e) {}
}
[[-1073741824n,v0,v65,Set,v73],v63,-1073741824n,Set];
const v88 = [f18,v63];
try { v88.map(SharedArrayBuffer); } catch (e) {}
-65536 !== -65536;
function f93() {
    function F94(a96, a97, a98) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C99 {
        536870887;
    }
    new C99();
    function* f101(a102, a103, a104) {
        return a103;
    }
    f101();
    [-946345318n] > 8n;
    return 36924;
}
try { f93.toString(); } catch (e) {}
function f111(a112, a113, a114, a115) {
    a112 >> a112;
    a113 - a113;
    const v118 = a113 + a113;
    const v119 = a114?.constructor;
    try { new v119(v118); } catch (e) {}
    let v121;
    try { v121 = new v119(a113); } catch (e) {}
    v121.prototype = v121;
    const o122 = {
        __proto__: a114,
        ...a114,
    };
    o122.arguments;
    return o122;
}
f111.caller = f111;
const v124 = f111(-65536, 36924, f93);
v124.c = v124;
v124.e = v124;
