[-34126];
[-1997846426,-20009,1024,-5,2147483647,268435440];
[-23782,7,-982447410,-2147483647];
new WeakMap();
/B?/msy;
/F9C/gdim;
/[1Pth]/gis;
let v11 = 1000;
v11++;
const v14 = new BigInt64Array(v11);
try { v14.reduce(BigInt64Array); } catch (e) {}
new BigUint64Array(7);
new BigInt64Array(47);
const v23 = new Float32Array(Float32Array);
const v24 = v23?.findLastIndex;
try { new v24(WeakMap); } catch (e) {}
for (let v26 = 0; v26 < 10; v26++) {
    ~v26;
    function f28() {
        return f28;
    }
    f28.prototype;
    const v30 = [601759695];
    v30[0] = v30;
    const v31 = [1073741824,1073741823,1376142744,1073741825];
    function f33(a34, a35, a36, a37) {
        try { a34.reduce(522675525n); } catch (e) {}
        a36[0];
        a37 >>> a37;
        function f42() {
            return v23;
        }
        v24();
        const v45 = new Int8Array();
        try { v45.join(v45); } catch (e) {}
        function f47(a48, a49) {
            a48[1] = a48;
            return a48;
        }
        const v50 = f47(v31, v23);
        try { v50.reduce(v50); } catch (e) {}
        v45.buffer.slice(2147483648);
        %OptimizeFunctionOnNextCall(v50);
        try { ("find").strike(); } catch (e) {}
        let v57;
        try { v57 = v31["find"](..."find", v24, ...v30, ...v31, ...522675525n); } catch (e) {}
        !(v57 <= a36);
        return arguments;
    }
    f33.name;
    for (let v61 = 0; v61 < 10; v61++) {
        v61 / v61;
        f33(v31, v61, v30, v61);
    }
}
function f65(a66, a67, a68, a69) {
    const v70 = a66.length;
    v70 - v70;
    const v72 = new Float32Array();
    const v74 = 2 - 2;
    const v75 = new Float32Array(2);
    v75[1] = v75;
    new Int32Array(v75);
    const v78 = v75;
    v74.fill(...v78);
    return v72;
}
for (let v80 = 0; v80 < 625; v80++) {
    f65(Uint8Array);
}
