function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 1024;
    } catch(e3) {
    }
    try {
        this.e = 1024;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new v5();
const v7 = new F0();
function f11() {
    return v7;
}
class C12 extends f11 {
    constructor(a14, a15, a16) {
        super();
        function F17(a19, a20, a21) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.c = a19;
            } catch(e22) {
            }
            try {
                this.h = a20;
            } catch(e23) {
            }
            try {
                this.f = a21;
            } catch(e24) {
            }
        }
        new F17(a15, a15, this);
        const v26 = new F17(v6, v7, v7);
        new F17(v5, v5, v26);
    }
}
new C12(536870889, v7, 536870889);
new C12(10, v6, 6);
const v30 = new C12(536870889, v6, 536870889);
const v36 = new Float64Array(v30, Float64Array);
class C37 extends Int16Array {
}
new C37();
const o39 = {
    __proto__: F0,
};
try { v36.every(o39); } catch (e) {}
