const v0 = [-1073741824,-1833244934];
const v1 = [-1,-56619,-53200,-21429,52280,5];
const v2 = [256,-839228021,11,-1600835042,9223372036854775807,1073741823,1000,8,3,-256];
const v3 = [v0,v0,v1,v2];
[v3,v3];
class C5 {
}
class C6 {
}
const v7 = new C6();
function f8() {
    return v7;
}
Object.defineProperty(v7, "b", { enumerable: true, get: f8 });
function f12(a13, a14) {
    return 4;
}
function f15() {
    const o16 = {
    };
    o16.valueOf = f12;
    return o16;
}
f15();
class C18 {
}
const v19 = new C18();
class C20 extends C18 {
    static set d(a22) {
        "9" / (12 && v19);
    }
}
[v0,v1,v2,v1];
new Int32Array(257);
const v30 = [4294967297,-4096,3];
try {
    v30.concat(v19, v1);
} catch(e32) {
}
v2.toSorted();
([2.220446049250313e-16,4.688311165693396,-4.0])[8];
function f36() {
    for (let v37 = 0; v37 < 5; v37++) {
        const v38 = [1073741824,1073741823,1376142744,1073741825];
        for (let v39 = 0; v39 < 5; v39++) {
            let v41;
            try { v41 = v38["find"](); } catch (e) {}
            v41 <= v39;
        }
    }
    return f36;
}
const v43 = f36();
f36();
class C47 {
    constructor(a49, a50) {
        Object.defineProperty(this, "constructor", { writable: true, configurable: true, enumerable: true, value: Date });
        const v51 = this.constructor;
        try { new v51(-15n); } catch (e) {}
    }
}
const v56 = new WeakSet();
function f57() {
    for (let v58 = 0; v58 < 32; v58++) {
        v56["p" + v58] = v58;
    }
    ([]).constructor;
    const v64 = new Date(-118.8024069268339);
    const v65 = new v64();
    v65.constructor;
    function F67(a69, a70) {
        if (!new.target) { throw 'must be called with new'; }
        const v71 = a70?.__lookupGetter__;
        try { v71(a69); } catch (e) {}
        try { this.constructor(F67, this); } catch (e) {}
        a69.e = a69;
    }
    F67.arguments = F67;
    let v74 = 268435440;
    for (let v75 = 0; v75 < 5; v75++) {
        %OptimizeFunctionOnNextCall(v75);
    }
    const v78 = Symbol.isConcatSpreadable;
    const v79 = Array();
    v79[267] = v78;
    const o81 = {
    };
    const v82 = [-1.0,1.0];
    const v83 = [0.3389850054688205,-1000000000000.0,-4.0,-3.0,-600308.3959127744,291.59824712736395,0.6069772072034008,6.4812569442123475,-1.0,1.7976931348623157e+308];
    const v84 = [3.1218977390328977,0.7567869002132325,0.0,2.030990796557246,4.641380514017136];
    function F85(a87) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v88 = new F85(v82);
    const v89 = new F85(v88);
    class C90 extends F85 {
    }
    let v91 = new C90(v84, C90);
    const v92 = new C90(v83, v89);
    const v93 = new C90(v82, v92);
    const v95 = 1922 % 1922;
    const v96 = v95 == v95;
    const v97 = v74++;
    function f98() {
        return f98;
    }
    function f99(a100, a101, a102, a103) {
        function f104() {
            return a100;
        }
        f104.h = f104;
        const v105 = f104.length;
        const v106 = f98();
        v106.arguments = v106;
        v106.constructor;
        Object.defineProperty(a101, 11, { configurable: true, enumerable: true, get: v43, set: f99 });
        v91 >>= v105;
        const o111 = {
            "execution": "async",
            "type": "minor",
        };
        const v112 = gc(o111);
        for (let i = 0; i < 5; i++) {
        }
        try {
            try {
                const o113 = {
                };
                const o114 = {
                };
                const o115 = {
                };
                const o116 = {
                };
                return v112;
                function f117(a118, a119, a120, a121) {
                }
                function f122(a123, a124, a125, a126) {
                }
            } catch(e127) {
            }
        } catch(e128) {
        }
        BigUint64Array * 536870887;
    }
    for (let v132 = 0; v132 < 10; v132++) {
        if (v97 < v93) {
        } else {
        }
        f99(v96, v43, v97, f98);
    }
    v79["concat"]();
    function f137() {
        return f137;
    }
    const v140 = new Float64Array(1);
    [v140];
    for (let v142 = 0; v142 < 10; v142++) {
        function f143(a144, a145, a146) {
            return a144;
        }
        const t161 = f143.constructor;
        t161();
        gc();
    }
    new Uint8Array(v74);
}
f57();
%OptimizeFunctionOnNextCall(f57);
f57();
