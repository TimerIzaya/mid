const v0 = [];
11n + 11n;
const v8 = new Int8Array(7);
new Uint32Array(v8);
function f10() {
    return 1000n;
}
const v11 = [-1.0,1.7976931348623157e+308,143294.23963665427,-1000000000000.0,NaN,270.63527401495753,-412.04950129962015];
try { v11.pop(); } catch (e) {}
const v14 = new Uint8Array();
const v15 = 7 in v14;
const v17 = new BigInt64Array();
v17.copyWithin(-9223372036854775808);
[-2.220446049250313e-16,-2.2250738585072014e-308,1e-15,1000000000000.0,1000000000.0];
[753147.4669224683,1e-15,-1.1033460680615339e+308,8.231174431211862,-1.729143351039145e+308,0.3438129649498124,-430256.756770612];
const v25 = [5.0,-2.0,-1.0,-5.0];
try { v25.sort(v0); } catch (e) {}
const v27 = [-1000000000.0,-0.0,-141.76195031251473];
v27.g = v27;
const t19 = -9223372036854775808;
new t19();
const v30 = Array(v15);
v30[v30];
Math.sinh();
[0.9863383845915745,-1e-15,0.07505458189995007,1.0,-2.2250738585072014e-308,Infinity];
function F35() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = this;
    try {
    } catch(e38) {
    }
}
class C39 {
    toString(a41, a42, a43, a44) {
        try { this["throw"](); } catch (e) {}
        const v50 = new Uint8ClampedArray(512);
        new Uint8ClampedArray(798, ...v50, eval());
    }
    n(a55, a56) {
        let v57 = 10;
        let v59 = Int16Array.name;
        const v60 = new Int16Array(v59);
        v59 &= v60;
        class C61 {
        }
        try {
            const t46 = 2.220446049250313e-16;
            t46.__proto__ = C61;
        } catch(e62) {
        }
        for (; v57--;) {
            try {
            } catch(e64) {
                Symbol.for(Symbol);
                function f67(a68) {
                    return v0;
                }
                const o71 = {
                    "type": "function",
                };
                new Worker(f67, o71);
            }
        }
    }
}
C39.name = C39;
const v75 = new Date();
v75.getFullYear();
class C77 {
}
const o79 = {
    "execution": "async",
};
function F80(a82, a83, a84, a85) {
    if (!new.target) { throw 'must be called with new'; }
    const v86 = a82.push();
    const v87 = this.__defineGetter__;
    try { v87.call(v86); } catch (e) {}
}
gc(o79);
