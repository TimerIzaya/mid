[];
new Uint16Array(512);
const v9 = new Int8Array(1159);
const v11 = new Uint8ClampedArray();
const v12 = v9[1];
const v13 = v9[2];
try { v11["forEach"](...v13, v12, ..."forEach"); } catch (e) {}
const v18 = new BigInt64Array(129);
const v21 = new BigInt64Array();
const o22 = {
    __proto__: v18,
    "g": 512,
    "c": Int8Array,
    "b": 129,
    "a": 129,
    /*
    __proto__: v21,
    */
};
try { o22.indexOf(); } catch (e) {}
new Float32Array(66);
for (let [i33, i34] = (() => {
        v21 - v21;
        const v29 = new Float64Array(453);
        v29[437] = v29;
        v29.toSorted();
        return [0, 10];
    })();
    i33 < i34;
    (() => {
        const v39 = -25283n && -25283n;
        const v40 = -25283n >> v39;
        v40 | v40;
        function f42(a43, a44) {
            function f46(a47, a48) {
                return f46;
            }
            const o51 = {
                "type": "function",
            };
            const v52 = new Worker(f46, o51);
            v39[0] = v52;
            for (let v53 = 0; v53 < 100; v53++) {
                f46(v40, 129);
            }
        }
        const v58 = [];
        v58.toString = f42;
        v58.toString();
        i34--;
        Math.fround(Math);
        v9 << v9;
        const o65 = {
            get e() {
                return this;
            },
        };
        function f66() {
            return o65;
        }
    })()) {
}
function f70() {
    const v72 = new Int32Array(Int32Array, Int32Array, Int32Array);
    function F73(a75, a76) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v77 = new F73(Int32Array, v72);
    function F79(a81, a82) {
        if (!new.target) { throw 'must be called with new'; }
        const v83 = this.constructor;
        try { new v83(a82, -418967591n); } catch (e) {}
        a82 == a82;
        a81 !== a81;
        this.g = a82;
    }
    function f87(a88) {
        let v89;
        try { v89 = v77.resize(v72, F73, Int32Array, a88); } catch (e) {}
        v72.length |= v89;
        return v89;
    }
    let v90 = f87();
    const o92 = {
        "c": Array,
    };
    const t86 = o92.c;
    const v94 = t86();
    (-1.4618325192014402e+308) ** -724330360;
    const v100 = new Float32Array(4096);
    const v101 = v94.forEach(Uint32Array);
    class C102 {
    }
    const v103 = new C102();
    function f104() {
        return v103;
    }
    Object.defineProperty(v103, "b", { enumerable: true, get: f104 });
    for (const v107 of Array(4087)) {
        v107[v100] = v9;
        v90 = o22;
        try {
            new BigInt64Array(4087);
        } catch(e110) {
        }
    }
    return v101;
}
%PrepareFunctionForOptimization(f70);
function f111(a112, a113) {
    const o114 = {
        ...a112,
    };
    o114.d;
    return f111;
}
function f116() {
}
try { Int32Array.from(512n); } catch (e) {}
const v122 = new BigUint64Array(5);
let v123;
try { v123 = v122.join(1159); } catch (e) {}
try { v123.replace(Int32Array, f116); } catch (e) {}
f70();
%OptimizeFunctionOnNextCall(f70);
f70();
