[1000.0,1000.0,-532242.3745232977,1000000000.0];
const v1 = [3.0,2.0,-3.565971535787316];
[-644.1158238718989];
class C3 {
    static get e() {
        this[392293437] = this;
        const o8 = {
            "execution": "async",
            "type": "major",
        };
        gc(o8);
        return "major";
    }
    #h = v1;
    static #e;
}
try { C3.apply(v1, C3); } catch (e) {}
const v11 = new C3();
const v12 = v11?.constructor;
try { new v12(); } catch (e) {}
const v14 = new C3();
const v15 = v14?.__lookupGetter__;
try { new v15(v1); } catch (e) {}
const v17 = new C3();
true && true;
/\q/gy;
/s8foo|(bar|baz)|quux(ab|cde)\1/umy;
/Y70b/gumsy;
function f27() {
    class C28 {
    }
    const v29 = new C28();
    class C30 extends C28 {
        [v29];
    }
    try { C30.bind(-8); } catch (e) {}
    for (let v32 = 0; v32 < 5; v32++) {
        v32 - v32;
        const v34 = [1073741824,1073741823,1376142744,1073741825];
        function f35(a36, a37, a38, a39) {
            const v40 = a37.e;
            v40(a39, v40, v32);
            v34["find"]();
            return v34;
        }
        for (let v44 = 0; v44 < 5; v44++) {
        }
    }
    return v29;
}
f27.caller = f27;
%PrepareFunctionForOptimization(f27);
const v45 = f27();
try { v45.hasOwnProperty(v14); } catch (e) {}
%OptimizeFunctionOnNextCall(f27);
const v47 = f27();
const v48 = v47?.constructor;
try { new v48(); } catch (e) {}
class C52 {
    static #valueOf(a54) {
        const t60 = "boolean";
        t60[-8] = a54;
        a54[5] = -1.0654615543745536e+308;
        const v59 = new Int8Array(128);
        v59.indexOf();
        new Float32Array(9);
        new Float32Array(2823);
        new Uint16Array(512);
        return Float32Array;
    }
}
const v68 = new C52();
const v69 = v68?.constructor;
const v70 = v69?.constructor;
try { new v70(v47); } catch (e) {}
let v72;
try { v72 = new v69(); } catch (e) {}
const v73 = new C52();
const v74 = v73?.constructor;
try { new v74(); } catch (e) {}
const v76 = new C52();
class C77 {
    constructor(a79, a80, a81, a82) {
        a79.name = a79;
        const v83 = this?.__lookupGetter__;
        try { new v83(C77); } catch (e) {}
        try { a81.isPrototypeOf(a81); } catch (e) {}
        try { v76(); } catch (e) {}
        try {
            a82.b = a81;
        } catch(e87) {
        }
    }
    #g;
    valueOf(a89, a90, a91, a92) {
        0.6920828961713477 % 1;
        -8 && 0.6920828961713477;
        +v68;
        let v99 = -8 && -8;
        return v99++;
    }
}
let v101;
try { v101 = C77.bind(-8); } catch (e) {}
try { v101.bind(true); } catch (e) {}
const v103 = new C77(C77, "boolean", v76, v76);
const v104 = v103?.constructor;
try { new v104(v72, v14, v72, v14); } catch (e) {}
const v106 = new C77(v76, v73, C52, C52);
try { v106.valueOf(v17, -8, -8, v17); } catch (e) {}
new C77(v76, C52, C77, v106);
[-4.0,5.0,1e-15,-1000000.0];
const v110 = [4.0,1.7976931348623157e+308,-1.6746280838181564e+308,Infinity,0.02995849684218521,8.253324943521243e+307,-4.753315469426976e+307,1000000.0];
v110[3] = v110;
[-1.5131061856231655e+308,0.9940081941996022,-1000000000.0,-9.722353359280868,9.968489719443777e+307,-5.0,-374352.7778849256,-Infinity,1000000000.0,0.05917465816222045];
const v113 = new Float32Array(Float32Array);
for (let v114 = 0; v114 < 25; v114++) {
    function f115(a116, a117, a118, a119) {
        try { a116.reverse(); } catch (e) {}
        a117 / a117;
        let v122;
        try { v122 = a116.join(v114); } catch (e) {}
        v122[2];
        a117--;
        a117 <= a117;
        const v127 = arguments?.__lookupGetter__;
        v127.length = v127;
        try { v127(v127, f115, a117, arguments); } catch (e) {}
        const v130 = "find" == "find";
        v130 && v130;
    }
    for (let v132 = 0; v132 < 10; v132++) {
        v132--;
        f115(v113, v114);
    }
}
