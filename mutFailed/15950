new Uint32Array(11);
function F5(a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    const v9 = this.constructor;
    try { new v9(268435440n, a8); } catch (e) {}
    this.f = 268435440n;
    function* f11(a12) {
        return f11;
    }
    /c(?:ab)|cde/vdmy.exec();
}
const v15 = new F5();
const v16 = new F5();
const v18 = new Float32Array();
try { v18.entries(); } catch (e) {}
try { new BigInt64Array(-832267.262043573); } catch (e) {}
let v23 = 65536;
v23--;
function f25(a26) {
    const v27 = [601759695];
    b = v27;
    new WeakMap();
    let v30 = [-5.034735835956977e+307,-385.25474675985527];
    --v30;
    const o43 = {
        ...v23,
        5: v23,
        valueOf(a33) {
            return v15;
        },
        "f": v27,
        get f() {
        },
        [268435440n](a36, a37) {
        },
        "g": v23,
        n(a39, a40) {
            return a39;
        },
        set g(a42) {
        },
    };
    const v49 = new Float64Array(127);
    class C50 {
        static b = Int16Array;
        5;
        f;
        #e = 257;
        static 2;
        static #p(a52, a53) {
            try {
                this.#e;
            } catch(e55) {
            }
            this.b;
            %VerifyType(a53);
            return v49;
        }
    }
    new C50();
    const v59 = new BigInt64Array(128);
    for (const v60 in v59) {
    }
    return v16;
}
new Date();
new Float32Array(165);
%PrepareFunctionForOptimization(f25);
f25();
f25();
%OptimizeFunctionOnNextCall(f25);
f25(268435440n);
new Int16Array(255);
new BigUint64Array(1166);
new Uint16Array(512);
new BigInt64Array(2);
%VerifyType(f25());
const t77 = [];
t77.g = 165;
const v85 = Math.hypot(Symbol, 2.220446049250313e-16, 2.220446049250313e-16);
const o91 = {
    valueOf(a87, a88, a89, a90) {
        super.c **= v85;
        return a90;
    },
};
const v94 = new Uint32Array(16);
for (let v95 = 0; v95 < 5; v95++) {
    function f97(a98, a99, a100, a101) {
        try {
            139837843 in "deleteProperty";
        } catch(e105) {
        }
        return a101;
    }
    f97(16, f97, 16, f97);
    function f107() {
        return f107;
    }
    function F108(a110, a111, a112, a113) {
        if (!new.target) { throw 'must be called with new'; }
        const v114 = this.constructor;
        let v115;
        try { v115 = new v114(v114, a113); } catch (e) {}
        const v116 = typeof v115;
        const o119 = {
            get b() {
                return v114;
            },
        };
        v116 === "symbol";
    }
    const o126 = {
        get e() {
            this.d;
            return v94;
        },
        get c() {
        },
        "execution": "async",
        "type": "minor",
    };
    gc(o126);
}
const o129 = {
};
const v130 = new WeakRef(o129);
v130.deref();
