let v3 = 10;
for ((() => {
        async function f5(a6, a7) {
            class C8 {
                [C8] = 10000;
            }
            return a6;
        }
    })();
    (() => {
        const v9 = v3--;
        class C11 {
            constructor(a13) {
                const v14 = this.constructor;
                try { new v14(); } catch (e) {}
                let v17 = ("size").g?.[7];
                [...v17] = "size";
            }
        }
        return v9;
    })();
    ) {
    class C18 {
    }
    Int8Array.e = Int8Array;
    const v22 = new Int8Array(1);
    function f23() {
        eval();
        return Int8Array;
    }
    v22.toString = f23;
    const v26 = [520126.03439582814,827116.4087908485,-3.0];
    const v28 = new Int16Array(442, Int16Array);
    v28.constructor = f23;
    try { v28.slice(v22, 1); } catch (e) {}
    Date.d = v22;
    for (let v31 = 0; v31 < 25; v31++) {
        function f32(a33, a34, a35, a36) {
            a35 != a35;
            a36.d = a36;
            class C39 {
            }
            C39.length;
            [-1024];
            for (let v42 = 0; v42 < 5; v42++) {
                v42 - v42;
            }
            const v45 = 0 <= 0;
            new Int8Array(v26, v31, v31);
            0 * v45;
            function f48(a49, a50) {
            }
        }
        try { f32(f32, v28, f32, 1); } catch (e) {}
        for (let v52 = 0; v52 < 5; v52++) {
            f32(v26, v26, v31, Date);
        }
    }
    ("tHrG")["lastIndexOf"]("lastIndexOf", v3);
}
new Int16Array(4);
const v61 = new Uint8Array(2);
const v64 = new Float64Array(2409);
class C65 {
    static get f() {
        let v67;
        try { v67 = v61.reduce(4, this); } catch (e) {}
        try {
            v64.byteOffset = v67;
        } catch(e68) {
        }
        for (let v69 = 0; v69 < 5; v69++) {
            function f70() {
                return ([-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574]).slice();
            }
            f70();
            %OptimizeFunctionOnNextCall(f70);
        }
        return this;
    }
    static {
        function f75(a76) {
            const v77 = ("call").constructor;
            try { new v77("call"); } catch (e) {}
            return 2;
        }
        this.toString = f75;
        ("call")[this];
    }
}
new C65();
new C65();
new C65();
for (const v89 of Array(19793)) {
}
/Wlb(?!(a))\1yja\b!/gui;
function f97() {
    return gc;
}
function f98(a99) {
    class C101 {
        constructor(a103) {
            let v104 = "atan2";
            try { a103[v104](); } catch (e) {}
            v104++;
        }
    }
    new C101(30492);
}
Object.defineProperty(Date, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, get: f97, set: f98 });
const v110 = new Date(Date);
v110.setUTCDate();
for (let i115 = 0, i116 = 10;
    (() => {
        const v117 = i115 < i116;
        const v119 = ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced();
        v119[3] = v119;
        const v121 = new BigUint64Array(3375);
        let [v122,,v123,...v124] = v121;
        return v117;
    })();
    i115++) {
}
function f131() {
    class C134 extends ([f131]).constructor {
    }
    const v135 = new C134();
    return v135.constructor;
}
