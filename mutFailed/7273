function f2() {
    try {
        Int8Array.length = 253;
    } catch(e4) {
    }
    return 253;
}
Int8Array[Symbol.toPrimitive] = f2;
const v7 = new Int8Array(2);
v7[Int8Array] = v7;
new Float64Array(571);
const v13 = new Uint8Array(10);
new Float64Array(2713);
let v18 = Int32Array;
const v19 = new v18(16);
const v22 = new Uint8Array(9);
function F23(a25, a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    this.c = this;
    try {
        this.c = v22;
    } catch(e28) {
    }
    try {
        this.e = v19;
        const v37 = new Uint8ClampedArray(16);
        v37[Symbol.toPrimitive] = Symbol;
        v37[10] = v37;
        const v41 = -1322;
        v37["536870889"] = "536870889";
        try {
            new Uint8ClampedArray(v13);
        } catch(e43) {
        }
        const v45 = new Uint8ClampedArray(1322);
        let v46 = v45[315];
        function F47(a49, a50, a51, a52) {
            if (!new.target) { throw 'must be called with new'; }
            this[Symbol.toPrimitive] = Symbol;
            try {
                this.a = "536870889";
            } catch(e55) {
            }
            try {
                this.b = a52;
            } catch(e56) {
            }
        }
        new F47(1073741824n, 1073741824n, 257n, "6");
        const v58 = new F47(1073741824n, 257n, 257n, v41);
        const v59 = new F47(v46, 257n, 257n, "536870889");
        new BigUint64Array(6);
        3768 >>> 3768;
        const v67 = new BigInt64Array(4046);
        v67[123];
        -115;
        function f72(a73, a74) {
            a73++;
            a74 + a74;
            const v77 = a73++;
            v77 >> v77;
            try {
                v58.toString = a74;
            } catch(e79) {
            }
            Object.defineProperty(v59, v59, { configurable: true, enumerable: true, get: f72 });
            let o81 = {
                "d": a73,
                ...a73,
                get e() {
                    return a74;
                },
            };
            [,...o81] = v67;
            a74[4046];
            const o85 = {
                "maxByteLength": 3035,
            };
            const v87 = v46--;
            v45[v87] ||= v87;
            [v18,...a25] = "536870889";
            try { o85.n(Int8Array, Worker); } catch (e) {}
            new ArrayBuffer();
            new Float32Array();
            return 115;
        }
        f72(4046, 3768);
        try { Uint8ClampedArray.bind(f72); } catch (e) {}
    } catch(e96) {
    }
}
new F23(2, 9, 2);
new F23(9, 16, 16);
new F23(16, 2, 2);
const v100 = /(ab|cde)\118\P{sc=Greek}+/gdims;
function f101(a102) {
    return Int8Array;
    return Int8Array;
}
v100.toString = f101;
v100.exec(v100);
