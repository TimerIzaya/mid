new Float32Array(6);
const o10 = {
    ["536870889"]: "toString",
    set e(a8) {
    },
    get e() {
        return "536870889";
    },
};
new Int32Array(8);
const v14 = new Uint32Array(64);
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = Int32Array;
        [1073741824,1073741823,1376142744,1073741825];
        try { new this(Float32Array, Float32Array, a18); } catch (e) {}
        new Float64Array([-65536,-432658450,256]);
    } catch(e24) {
        new a18();
        const v27 = [586209.1308562411,9.273207833056233,-793.5051180378861,-88.02009084622205,1000.0,5.993768942190951e+307,0.6895260767593681,3.203916786355496,1.7976931348623157e+308,-1.0422896205696638e+308];
        v27.fill(64, -27205);
        for (let i30 = 6; i30 < 9; i30++) {
            v14[i30] = v27;
        }
    }
    try {
        this.c = 8;
    } catch(e36) {
    }
    let v38;
    try { v38 = new BigInt64Array(BigInt64Array); } catch (e) {}
    function f39(a40, a41) {
        const o42 = {
        };
        return o42;
    }
    const v43 = v38();
    function F44(a46, a47) {
        if (!new.target) { throw 'must be called with new'; }
        a46.g = a46;
        const v48 = this?.constructor;
        try { new v48(f39, v43); } catch (e) {}
    }
}
new F15(64, 6);
new F15(8, 8);
new F15(8, 64);
function f54() {
    return f54;
}
class C55 {
}
for (const v57 in "1487412280") {
}
function f58() {
    Object.defineProperty(arguments, 13, { enumerable: true, set: f54 });
    const v60 = [-536870912,12,65535,268435440,59916,438058862,-15,1073741823,-9007199254740990];
    v60.push(v60);
    function f62() {
        const o63 = {
        };
        return o63;
    }
    return arguments;
}
f58();
