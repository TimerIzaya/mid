new Int32Array(808);
Uint16Array.prototype = Uint16Array;
new Uint16Array(16);
1024 >>> 1024;
const v10 = new Int8Array(1024);
try { v10.filter(Int32Array); } catch (e) {}
3247 + 3247;
new BigUint64Array(3247);
let v18;
try { v18 = Uint8Array.toString(); } catch (e) {}
new v18(1024);
new BigUint64Array(2);
const v23 = [-1000000.0,-1.0,952.4163692749257,41232.51719836402,-2.220446049250313e-16,869.918809614255,0.6566814488589754,-2.299816654271874,1000000000.0];
for (let v24 = 0; v24 < 5; v24++) {
    function f25() {
        let v26 = -268435456;
        v26 ^ v26;
        v26++;
        const o29 = {
            __proto__: v23,
        };
        try { o29.every(); } catch (e) {}
        return v23;
    }
    try { f25(); } catch (e) {}
    f25();
    %OptimizeFunctionOnNextCall(f25);
}
