[-1341309309];
const v4 = [-256,-34125,16,-546973738,536870887,-1,-61503,268435456,-54014,55120];
[1,-65535,552003562,9007199254740991,553833995,-676063276,-128,1];
const v7 = new Map();
function f8() {
    return v7;
}
const v9 = [-0.685155357392599,5.0];
function F10(a12, a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor;
    try { new f8(); } catch (e) {}
    v9.length &= 1;
}
const v19 = new F10();
const v27 = [601759695];
const v28 = [1073741824,1073741823,1376142744,1073741825];
function f30(a31, a32, a33, a34) {
    function f36() {
        try {
            v28.forEach();
        } catch(e40) {
        }
        function f41() {
            return f41;
        }
        const v42 = f41(-4294967295);
        const o66 = {
            [522675525n](a44, a45) {
            },
            valueOf(a47, a48) {
                return a48;
            },
            [-4294967297n](a50, a51, a52, a53) {
            },
            "e": -4294967295,
            ...v27,
            "type": "Vre",
            valueOf(a55, a56) {
                return 1073741824;
            },
            ..."Vre",
            valueOf() {
                return v19;
            },
            4: "Vre",
            toString(a59, a60, a61) {
                return v4;
            },
            4: "Vre",
            toString(a63, a64, a65) {
                return a65;
            },
        };
        return v42;
    }
    %OptimizeFunctionOnNextCall(a32(-4294967297n));
    try { v28["toString"]("toString", a34, ...v27, ...v28); } catch (e) {}
    return a34;
}
for (let v70 = 0; v70 < 10; v70++) {
    f30(v70, v70, -4294967297n, 522675525n, -1024);
}
%OptimizeFunctionOnNextCall(f30);
f30();
