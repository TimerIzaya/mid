const v0 = [-9.346853636234695e+307,1.0,0.7862201644245774,-842698.3238590029];
const v1 = [-1.0,-6.210716864595838,-2.0];
const v2 = [-1000000000000.0,5.446468322302801e+307,1000000.0,3.0,1e-15,3.0,5.61073463797338,0.4503161608142009,-1000000000.0,84782.33672557864];
const v4 = new Map();
function F5(a7, a8) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = v4;
    function f9() {
        return this;
    }
    new f9();
    for (let v11 = 0; v11 < 32; v11++) {
        v0["p" + v11] = v11;
    }
    try {
        this.e = v2;
    } catch(e14) {
    }
}
new F5(v4, v1);
const v16 = new F5(Map, v0);
const v17 = new F5(v16, v0);
const v18 = [v17,v1];
const v19 = [v2,Map,v2,v1,v18];
[v4,v19,v18,F5];
function F21() {
    if (!new.target) { throw 'must be called with new'; }
    for (let i25 = 0, i26 = 10; i25 < i26; i26--) {
    }
    v19["at"](v1["reduce"](v4, this));
    for (let v40 = 0; v40 < 10; v40++) {
        for (let v41 = 0; v41 < 5; v41++) {
        }
        const o43 = {
            __proto__: null,
        };
        try { o43.valueOf(); } catch (e) {}
    }
}
new F21();
