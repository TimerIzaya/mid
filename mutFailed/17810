class C3 {
    g;
    static set e(a5) {
        let v6;
        try { v6 = a5(745726.2337444522, "symbol", 745726.2337444522, this); } catch (e) {}
        const v7 = super.d;
        function F8(a10, a11, a12) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = a10;
            } catch(e13) {
                const v14 = /o(\xed\xb0\x80)\x01/gudims;
                const v16 = Symbol.toPrimitive;
                v14[v16] = v16;
                Math.tanh();
                745726.2337444522 || 745726.2337444522;
                class C21 {
                }
                function F22(a24, a25, a26) {
                    if (!new.target) { throw 'must be called with new'; }
                    48979n instanceof C21;
                    const v28 = a25 === a25;
                    const v29 = v28 ** v28;
                    v29 - v29;
                }
                function f31() {
                    for (let v32 = 0; v32 < 5; v32++) {
                        new F22(f31, f31, v32);
                    }
                }
                f31();
                %OptimizeFunctionOnNextCall(f31);
                function f35(a36, a37, a38) {
                    return a36;
                }
                const t35 = f35.constructor;
                t35();
            }
        }
        const v41 = new F8(this, "a", v6);
        const v42 = new F8(745726.2337444522, "symbol", F8);
        new F8(v42, v41, v7);
        class C45 {
            m(a47, a48) {
                super[a48];
                a48?.[11];
                return 745726.2337444522;
            }
            constructor(a52) {
                class C53 {
                    static [11] = this;
                    static d = 11;
                    static [this] = this;
                }
                new C53();
                new C53();
                new C53();
            }
        }
    }
}
function F57(a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    a59[4294967295] = a59;
}
const v62 = F57.prototype;
let v64;
try { v64 = ("getPrototypeOf").blink(); } catch (e) {}
v64[28];
function F66() {
    if (!new.target) { throw 'must be called with new'; }
}
v62.constructor;
new C3();
const v70 = new C3();
const v71 = new C3();
new Int8Array(1073741823);
v71.stack;
const v77 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f78(a79) {
    return f78;
}
function f81(a82, a83, a84, a85) {
    function f86() {
        return f78;
    }
    function f87(a88) {
        return a88;
    }
    Object.defineProperty(a84, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f86, set: f87 });
    a84.entries();
    for (let i93 = 0, i94 = 10; i93 < i94--;) {
    }
    return a82;
}
for (let v101 = 0; v101 < 5; v101++) {
    f81(v101, v101, v77);
}
function f105() {
    const v109 = new Set();
    for (let [v110,v111] of v70) {
        new Array(2);
        new Int8Array(253);
        new Uint32Array(16);
        new Int16Array(0);
        try {
            v109.values();
        } catch(e123) {
        }
    }
    const o129 = {
        210: "valueOf",
        __proto__: Set,
        "type": "symbol",
        "execution": "valueOf",
        [f105]() {
        },
        ..."replace",
        get c() {
            super[this] = -4.0;
        },
        12: "replace",
    };
    return o129;
}
class C136 {
    #valueOf(a138, a139, a140) {
    }
}
const v144 = new BigUint64Array(10);
v77[16] = 2.220446049250313e-16;
Symbol.toPrimitive;
const v149 = new f105();
function f150(a151, a152, a153, a154) {
    return v149;
}
for (const v155 in v144) {
    new Float64Array(2147483647);
}
function F157(a159, a160, a161) {
    if (!new.target) { throw 'must be called with new'; }
    const v162 = this?.constructor;
    try { new v162(this, F157, a161); } catch (e) {}
    const t143 = a161?.constructor;
    new t143();
}
