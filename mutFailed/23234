const v0 = [4,1988946291,268435456];
const v1 = [-1817809459,-1024];
const v2 = [1024,2147483649,536870888,-2147483647,2,1073741825];
const v3 = [268435440,1126051204,795166519,1073741824];
try { v3.map(v2); } catch (e) {}
const v5 = [-14,65536,9,8,127,-128,256,-1073741824,127];
const v6 = [-16,268435439,32027,1073741825,-9223372036854775808,536870889,257];
new Map();
function F9() {
    if (!new.target) { throw 'must be called with new'; }
    const v13 = Array(19793);
    try { v13.reduce(); } catch (e) {}
    for (const v15 of v13) {
    }
    [[v13,v13]];
    ("function")[0];
    new Set();
    const v22 = [];
    v22.toSpliced();
    v22 >= Uint16Array;
}
const v26 = new F9();
v26.constructor;
function F28(a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    a30[3];
    const v34 = `7${this}dm${"unicode"}m`;
    function F35(a37, a38, a39) {
        if (!new.target) { throw 'must be called with new'; }
    }
    F35(F35(), "unicode", v34);
    try { a31.findLastIndex(v1); } catch (e) {}
    try {
        this.g = v2;
    } catch(e43) {
    }
    const v45 = new Uint32Array(Uint32Array);
    new Int16Array(v45);
    ([16,54285,440810918])["includes"](0.4878574089255555, 8.37300093017014);
}
const v53 = new F28(v3, v6);
try { v53.hasOwnProperty(v0); } catch (e) {}
const v55 = new F28(v1, v53);
function f56() {
    return Float64Array;
}
function f58(a59, a60) {
    const o66 = {
        valueOf(a62, a63) {
            ([]).group(f58);
            return a60;
        },
    };
    return o66;
}
new F28(v6, v55);
function F68() {
    if (!new.target) { throw 'must be called with new'; }
    const v70 = this?.constructor;
    try { new v70(); } catch (e) {}
}
("bigint")[3];
class C77 {
}
class C78 {
}
const o80 = {
};
const v82 = new Proxy(Uint32Array, o80);
v82.bind(v82, Uint32Array, Uint32Array, Proxy);
const v85 = [1000000.0,-1.7976931348623157e+308];
try { v85.group(v1); } catch (e) {}
const o93 = {
    ...v85,
    ...v5,
    __proto__: v2,
    set b(a88) {
    },
    [v2](a90, a91, a92) {
    },
};
try { o93.propertyIsEnumerable(o93); } catch (e) {}
