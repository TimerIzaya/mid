function f2(a3, a4) {
    for (let i7 = 0, i8 = 10; i7 < i8; i8--) {
    }
    return a4;
}
Uint8Array[Symbol.toPrimitive] = f2;
const v17 = new Uint8Array(2);
v17[Symbol.toPrimitive] = f2;
const v22 = v17[2701];
let v23;
try { v23 = v17.forEach(v22, v22); } catch (e) {}
const v24 = v23?.f;
const v25 = v17 > (v23 = Uint8Array);
v25 || v25;
const v27 = new Uint32Array(3959);
const v30 = new Uint8Array(2747);
const t16 = "pow";
t16[2] = "pow";
class C38 {
    static #o() {
        const v40 = [-2147483648,-46456,1200954989,-4294967296,1];
        const v41 = [10,-13,-4294967297,-11,984,9,-24883,1024,5,10];
        const v42 = [23955,1426598775,2147483649];
        try {
            v41.#o(v41, v42, null, v41, v40);
        } catch(e44) {
        }
        return null;
    }
    #p() {
        const v46 = this[223];
        const v47 = super.g;
        let v48;
        try { v48 = v46.p(this, v47, v47, v47); } catch (e) {}
        this[null] = v48;
        new Map();
        return v47;
    }
}
const v51 = new C38();
const v52 = new C38();
const v53 = new C38();
try { v53.hasOwnProperty(v24); } catch (e) {}
class C55 {
    p(a57) {
        const v58 = null - a57;
        %VerifyType(v51);
        super[v51] = v58;
        a57?.[1858] ^ v58;
        for (let i63 = 0; i63 < 7; i63++) {
            try { v52.valueOf(i63, a57, v51, i63, i63); } catch (e) {}
        }
        const v74 = new BigUint64Array();
        v74.buffer.slice();
        Math.cos(Math);
        return C38;
    }
}
const v79 = new C55();
const v80 = new C55();
const v81 = new C55();
v81.constructor = Symbol;
let v84 = -1024;
v84 ^ v84;
function F86(a88, a89, a90, a91) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a90;
    try { a89.constructor(); } catch (e) {}
    const v93 = a90?.__lookupGetter__;
    try { new v93(a90); } catch (e) {}
    this.e = a90;
    try {
        this.f = C38;
    } catch(e95) {
    }
    try {
        this.e = v81;
    } catch(e96) {
    }
    try {
        this.a = a89;
    } catch(e97) {
    }
}
new F86(38767, v79, v51, v52);
const v99 = new F86(38767, v81, C55, v79);
const v100 = new F86(v84, v80, v51, C38);
const v101 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v102 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
try { v102.map(v100); } catch (e) {}
Int32Array.d = 1107285182;
Int32Array.d = Int32Array;
0 >>> 0;
const v109 = new Uint32Array(v101, 0, 0);
v109.byteLength;
function F111(a113, a114) {
    if (!new.target) { throw 'must be called with new'; }
    a113[Symbol.toPrimitive] = f2;
    const v117 = this?.__defineSetter__;
    try { new v117(this, a113); } catch (e) {}
    a114 & a114;
}
F111.e = v100;
F111.e = F111;
const v120 = new F111(v102, 0);
const v121 = new F111();
class C123 {
}
try { C123.bind(v27); } catch (e) {}
let v126 = 0;
while (v126 < 3) {
    const v130 = Symbol.iterator;
    const o139 = {
        [v130]() {
            let v132 = 10;
            const o138 = {
                next() {
                    v132--;
                    const v136 = v132 == 0;
                    const o137 = {
                        "done": v136,
                        "value": v132,
                    };
                    return o137;
                },
            };
            return o138;
        },
    };
    o139.c = v52;
    o139.c = o139;
    v126++;
}
const o145 = {
    valueOf() {
        return "D2z";
    },
};
const v147 = /5*/gi;
const v148 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v149 = [601759695];
v149[0] = v149;
const v150 = [1073741824,1073741823,1376142744,1073741825];
try { ("B").codePointAt(v102); } catch (e) {}
const t144 = "b";
t144.e = "B";
function f154(a155, a156, a157, a158) {
    function f159() {
        -4294967295 - -4294967295;
        let v163 = Float64Array;
        try { v163.call(v149); } catch (e) {}
        v163 = a156;
        b = v149;
        const v165 = v101.length;
        try {
            v101.forEach(v163);
        } catch(e167) {
        }
        const v168 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        let v170 = Symbol.toPrimitive;
        const o188 = {
            toString(a172, a173) {
                const v174 = a158 && v163;
                function f175() {
                    a172 *= v170;
                    return v163;
                }
                f159();
                Symbol("D2z");
                new Uint16Array(6);
                new Float32Array(0);
                new Int32Array(153);
                return v174 <= v168;
            },
        };
        const o212 = {
            "c": -4294967297n,
            [522675525n](a191, a192) {
            },
            "c": v149,
            valueOf(a194, a195) {
                return this;
            },
            "b": -4294967295,
            [-4294967297n](a197, a198, a199, a200) {
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v148,
            ...v100,
            [v170]() {
                const o204 = {
                    next() {
                        return v147;
                    },
                };
            },
            "type": C123,
            ..."Vre",
            valueOf(a206, a207) {
                return a207;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a209, a210, a211) {
            },
            5: -4294967295,
            6: -268435456,
        };
        v170 = v163;
        new Float32Array(1334);
        v84 %= -268435456;
        new Uint32Array(v102, v165, v170);
        v120 - f159;
        let v219 = -1000000.0;
        v219--;
        8.049156342486981 >> 8.049156342486981;
        new Float64Array(3);
        ~2;
        new Uint16Array(2);
    }
    function f230() {
        function f231() {
            class C232 {
            }
            const v233 = new C232();
            return v233;
        }
        return f231;
    }
    function f234(a235) {
        new WeakMap();
    }
    Object.defineProperty(f159, Symbol.toPrimitive, { writable: true, get: f230, set: f234 });
    f159();
    Int8Array.d = Int8Array;
    new Int8Array();
    %OptimizeFunctionOnNextCall(f159);
    try { ("find").fontsize(Uint32Array); } catch (e) {}
    try { v150["find"]("find", a158, v149, v150, 522675525n); } catch (e) {}
}
for (let v246 = 0; v246 < 10; v246++) {
    f154();
}
%OptimizeFunctionOnNextCall(f154);
const v248 = f154();
let v249;
try { v249 = ("undefined").lastIndexOf(v17, 56680); } catch (e) {}
try {
    v249.__proto__ = v30;
} catch(e250) {
}
function f253(a254, a255, a256, a257) {
    a254.toString = Symbol;
    a254 + a254;
    a256 >>> a256;
    return arguments;
}
const v261 = f253(64, 118, 64, 118);
const v262 = f253(v261, f253);
function f263() {
    return f2;
}
function f264(a265) {
    Math.atanh(0.033437543729764596);
}
Object.defineProperty(v262, "constructor", { writable: true, configurable: true, get: f263, set: f264 });
const v269 = v262.constructor;
const v270 = v269.values(v262);
try { v270.push(v99); } catch (e) {}
function F272(a274, a275, a276) {
    if (!new.target) { throw 'must be called with new'; }
    const v277 = this?.constructor;
    try { new v277(v121, a276, v27); } catch (e) {}
    try {
        this.f = v27;
    } catch(e279) {
    }
    try {
        this.b = Uint32Array;
    } catch(e280) {
    }
}
function f281(a282) {
    const v287 = ("-1723624938").slice(9, "g").normalize();
    class C288 {
        constructor(a290, a291) {
            a291.sup(v287, "-1723624938").toLocaleLowerCase();
        }
    }
    return "Z7gjh";
}
F272.constructor = f281;
const v294 = F272?.constructor;
try { new v294(v248); } catch (e) {}
new F272(Uint8Array, 2, v262);
const v297 = new F272(v269, 2, 15);
v297.f = v297;
new F272(v249, 3959, v261);
const v299 = v269(118);
Object.defineProperty(v299, "valueOf", { writable: true, value: f263 });
try { v299.valueOf(); } catch (e) {}
v299.toExponential(64)[3];
