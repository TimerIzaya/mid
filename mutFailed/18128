const v0 = [];
let v1 = -1073741824n;
const v2 = v1--;
try {
    v0.e = v2;
} catch(e3) {
}
[] = v0;
new WeakMap();
function f13() {
    Uint32Array.toString();
    const v16 = [1073741824,1073741823,1376142744,1073741825];
    function f17() {
        v16.forEach(v0);
    }
    return v0;
}
function f21() {
    Array.__proto__ = this;
    return Array;
}
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    const v28 = this.constructor;
    try { new v28(); } catch (e) {}
    f21();
}
new F24();
[829954.2190027854,205.45260231486327,-988457.6264010421,-3.0,1000000000.0,0.8722581429583979,1000.0,1.3955845499585032e+308];
[1000000.0,738579.7710467896,-1.5545247395240027e+308,-2.2250738585072014e-308,1000000000.0,-4.0,-3.0];
[-944896.1242418991,0.7662446061835868,1000000000000.0,3.091277083702975];
const v41 = new Float32Array(2);
const v44 = new Uint16Array(8);
v44.toSorted();
function F46() {
    if (!new.target) { throw 'must be called with new'; }
}
v41[1] = v41;
v44.buffer;
v41[12] &= 2;
Object.defineProperty(v41, 888901762, { writable: true, configurable: true, get: f13 });
new Int32Array(v41);
