class C3 {
    static {
        Object.defineProperty(C3, 6, { writable: true, enumerable: true, value: 65535 });
        !3;
        new Array(5);
    }
    #h;
    get c() {
        super.g = 65535;
        const v10 = typeof 3;
        class C14 {
        }
        const v15 = new C14();
        function F16(a18, a19) {
            if (!new.target) { throw 'must be called with new'; }
            const v20 = a18?.__lookupSetter__;
            try { new v20(a18, ...v20, -534568.6902183883, this); } catch (e) {}
            try {
                v15.__proto__ = a18;
            } catch(e22) {
            }
            try { v20(6); } catch (e) {}
            a19[2147483648] = a19;
            const v25 = new Int8Array();
            for (const v26 in v25) {
                for (let v27 = 0; v27 < 32; v27++) {
                    C3["p" + v27] = v27;
                }
            }
        }
        v10 === "number";
        return "number";
    }
    static #f = 10000;
    static #d;
    static 0;
    [3];
    static f;
    static 10;
    static g = 3;
    static f;
    [10000] = 65535;
}
const v32 = new C3();
const v33 = new C3();
function f34() {
    function f36(a37) {
        65535 + v32;
    }
    this.onmessage = f36;
    Math.min(1073741825);
    const v43 = 1073741825 >> 1073741825;
    const v44 = [536870888,8];
    const v45 = [2147483649,2147483649,-65537,-268435456,10,9223372036854775807];
    function f46(a47) {
        const o51 = {
            set g(a49) {
            },
            get g() {
                return a47;
            },
            __proto__: a47,
            ...v44,
            4096: v45,
        };
        return o51;
    }
    const v52 = +1073741825;
    const v53 = v43 - v43;
    -v52;
    v53 >>> 10000;
}
const v58 = [];
const o59 = {
    "arguments": v58,
    "type": "function",
};
const v60 = new Worker(f34, o59);
const v61 = new C3();
function F62(a64, a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a64;
    } catch(e67) {
    }
    try {
        this.g = v33;
    } catch(e68) {
    }
    const o69 = {
    };
    try {
        o69.f = "function";
    } catch(e70) {
    }
    try {
        const o71 = {
        };
        o71.f = "function";
        o71.d = 10000;
    } catch(e72) {
    }
    let v74 = 1000000000000.0;
    const v75 = v74--;
    class C78 {
        static #m(a80) {
        }
        constructor(a82) {
            const v84 = new Float32Array();
            try { v84.entries(); } catch (e) {}
            const v86 = new Uint16Array(12, -4294967296, v75);
            new Float32Array(v86, -4294967296);
        }
    }
    new C78();
    try {
        const o95 = {
            [65535]: this,
            ...a64,
            "f": a64,
            "b": 3,
            o(a90) {
                return a90;
            },
            "g": f34,
            [v60](a92, a93, a94) {
                switch (o69) {
                    default:
                        break;
                }
            },
            0: v32,
        };
        o95.f = "function";
        o95.d = 10000;
        o95.e = a64;
    } catch(e96) {
    }
    try {
        const o97 = {
        };
        o97.f = "function";
        o97.d = 10000;
        o97.e = v61;
    } catch(e98) {
    }
    try {
        this.f = a66;
    } catch(e99) {
    }
}
const v100 = new F62(v32, 3, 65535);
try {
    const v102 = [[o59],3];
    class C104 {
        static 9 = 9.187362692894364;
    }
    class C105 {
    }
    [v102,v33,3,v61,v102];
} finally {
    f34();
    %PrepareFunctionForOptimization(f34);
    const v108 = f34();
    const t164 = "function";
    t164[64] **= 3;
    const v110 = [v108,v108];
    Reflect.apply(v60.postMessage, v100, v110);
    f34();
    %OptimizeMaglevOnNextCall(f34);
    f34();
}
new F62(v33, 65535, 65535);
new F62(v32, 3, 65535);
[-Infinity];
[-2.0,9.812473874394867e+307,339.30630632855855,NaN,-17033.435957132024,-2.220446049250313e-16];
[-1.0681735035224004e+308,0.0,0.6477249431792175,1.0,1.7976931348623157e+308,0.0,-8.946779086523414,-429.2084332616935,-1000000.0,Infinity];
-256n >> -256n;
