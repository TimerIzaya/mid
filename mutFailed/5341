new BigInt64Array(16);
new BigInt64Array(2);
new Int16Array(13);
function F14(a16, a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    a19[1][1];
}
function f22(a23, a24) {
    const o26 = {
        get d() {
        },
    };
}
new Map();
new Map();
function f31(a32, a33, a34, a35) {
    const o36 = {
    };
    return o36;
}
const v37 = f31("search", "m");
const v38 = f31("m", "m");
Object.defineProperty(v38, "length", { writable: true, configurable: true, value: "m" });
let v41 = 129;
v41++;
new Float32Array(v41);
let v47;
try { v47 = new BigInt64Array(v38, 16, Map); } catch (e) {}
new BigInt64Array();
~-4294967297n;
const v52 = [601759695];
let v53;
try { v53 = v52.sort(); } catch (e) {}
[1073741824,1073741823,1376142744,1073741825];
function f55(a56, a57, a58, a59) {
    function f61() {
        -(-268435456 + -268435456);
    }
    f61();
    const v67 = new Int8Array();
    v67.buffer;
    %OptimizeFunctionOnNextCall(f61);
    try { ("find").strike(); } catch (e) {}
    try {
    } catch(e71) {
        const v74 = new Set();
        function F75(a77, a78) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = a77;
            } catch(e79) {
                for (let [v80,v81] of a77) {
                }
            }
            try {
                const v82 = v74[this];
                ([WeakSet,WeakSet])[1];
                new F75(v82, -268435456n);
            } catch(e87) {
            }
        }
    }
    const o88 = {
    };
    o88.g = arguments;
    o88.g = -4294967297n;
    const o89 = {
    };
    o89.g = -4294967297n;
    o89.d = v37;
}
f55();
%PrepareFunctionForOptimization(f55);
const v91 = v47();
%OptimizeFunctionOnNextCall(f55);
class C92 {
    #toString(a94, a95, a96) {
    }
}
function F97(a99, a100, a101, a102) {
    if (!new.target) { throw 'must be called with new'; }
}
const v103 = new F97(F97, F97, F97, F97);
const v104 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
v104[1] = v104;
const v105 = [601759695];
function f107() {
    try {
        v104.forEach(v37);
    } catch(e111) {
    }
    const v112 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
    const v114 = Symbol.toPrimitive;
    v114.description;
    Symbol.for("b7Fa");
    const o122 = {
        toString(a118, a119) {
            const v120 = v53 && v37;
            a118 *= v114;
            return v120 <= v112;
        },
    };
    const o142 = {
        "c": -4294967297n,
        [522675525n](a125, a126) {
        },
        "c": v105,
        valueOf(a128, a129) {
            return -4294967295;
        },
        [-4294967297n](a131, a132, a133, a134) {
        },
        "maxByteLength": -4294967295,
        "arguments": v52,
        ...v103,
        "type": v53,
        ..."Vre",
        valueOf(a136, a137) {
            return this;
        },
        ..."Vre",
        4: v91,
        "c": 16,
        "type": "Vre",
        toString(a139, a140, a141) {
            return v112;
        },
        5: -4294967295,
        6: -268435456,
    };
    o142[5] = o142;
}
f55();
