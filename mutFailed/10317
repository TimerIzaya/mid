function f2(a3) {
    return 1636559996;
}
Object.defineProperty(BigUint64Array, Symbol.toPrimitive, { writable: true, enumerable: true, value: f2 });
const v9 = new BigUint64Array(-14);
let v12;
try { v12 = v9.indexOf(BigUint64Array, 11); } catch (e) {}
const v14 = v9["subarray"](11);
function f15(a16) {
    return Uint32Array;
}
const v19 = new Date();
function f20(a21) {
    function F22() {
        if (!new.target) { throw 'must be called with new'; }
    }
    F22.fuck = F22;
    class C24 extends F22 {
    }
    for (const v25 in C24) {
    }
    return f2;
}
v19.valueOf = f20;
try { v19.setFullYear(BigUint64Array, v19, v12); } catch (e) {}
let v27;
try { v27 = v14(v14, 11, BigUint64Array, 11, "subarray"); } catch (e) {}
const v30 = new Uint8Array(5);
try { v30.at(v27); } catch (e) {}
new BigUint64Array(243, v19, f2, 11);
new Uint32Array(4);
new BigInt64Array(11);
Float32Array.prototype = Float32Array;
const v41 = new Float32Array(255);
try { v41.join("subarray"); } catch (e) {}
const v43 = [v41,BigInt64Array,v41,11,-14];
const v44 = [v43,v43,v9];
v44[2] = v44;
const v45 = [BigUint64Array];
class C46 {
    static c;
    static 1000;
    constructor(a48, a49) {
        a49.reduce = Float32Array;
        try { a49.reduce(v45); } catch (e) {}
        const v53 = new Uint8ClampedArray(255, 11, a49, a48);
        try { v53.filter(this); } catch (e) {}
        new Float32Array(5);
        const v60 = new Float32Array(1);
        try { v60.set(255); } catch (e) {}
    }
}
try { new C46(Uint32Array, 4); } catch (e) {}
const v63 = new C46(255, v43);
try { v63.constructor("subarray", 4); } catch (e) {}
new C46(-14, v45);
const v66 = new C46(255, v63);
const v67 = v66?.constructor;
try { new v67(255, 255); } catch (e) {}
const o72 = {
    [Infinity]: -0.0,
    [-16]: Infinity,
    "h": -16,
    ...-0.0,
    "NEGATIVE_INFINITY": Infinity,
    "e": -0.0,
};
o72.h = o72;
