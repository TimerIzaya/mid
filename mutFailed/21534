function f0() {
    const o11 = {
        "g": NaN,
        "f": 0.99728709190749,
        [NaN](a5, a6) {
            let v7;
            try { v7 = NaN(0.99728709190749, a5, a6, a5, 0.99728709190749); } catch (e) {}
            return v7[Symbol.match];
        },
        ...-1.0,
    };
    function f12(a13) {
        function f14(a15) {
            return a15;
        }
        class C16 extends f14 {
        }
        return NaN;
    }
    o11.toString = f12;
    return o11;
}
const v17 = f0();
const v18 = f0();
const v19 = f0();
const v21 = Symbol.toPrimitive;
v19[v21] = f0;
class C22 {
    #toString(a24, a25) {
        a25 == a24 ? a25 : a24;
        try { a25(v19); } catch (e) {}
        Object.defineProperty(this, -2, { enumerable: true, get: f0 });
        return v18;
    }
    static [v19] = f0;
    static [f0];
    0 = v18;
    b = C22;
    static g;
    static #h = v17;
    static 3263;
    [f0] = f0;
}
new C22();
new C22();
new C22();
new Date();
let v34 = 1024;
for (let i38 = 0, i39 = 10;
    (() => {
        const v40 = i38 < i39;
        class C41 extends Date {
        }
        return v40;
    })();
    i38++) {
}
function f48() {
    class C49 {
        constructor(a51, a52, a53) {
            for (let v54 = 0; v54 < 5; v54++) {
                function f56() {
                    const o64 = {
                        [-4294967297n](a58, a59, a60, a61) {
                            eval(C49);
                        },
                    };
                    return f56;
                }
                f56();
                %OptimizeFunctionOnNextCall(f56);
            }
        }
    }
    return v21;
}
Int32Array.valueOf = f48;
Int32Array[2] = Int32Array;
new Int32Array(v34);
new Uint8ClampedArray(2698);
new Uint32Array(204);
class C73 {
    static #m(a75, a76, a77) {
    }
    constructor(a79, a80, a81, a82) {
        this.#m();
    }
}
[-6.672391061426152e+307];
Int32Array.valueOf = f0;
new Int32Array(Int32Array);
function f90(a91, a92, a93, a94) {
    const o95 = {
    };
}
class C96 {
    static get c() {
        const v98 = `
        `;
    }
}
function F100(a102, a103, a104, a105) {
    if (!new.target) { throw 'must be called with new'; }
    a105[1];
}
for (let v108 = 0; v108 < 10; v108++) {
}
for (let v109 = 0; v109 < 25; v109++) {
    Array(36862);
    v34++;
    ([-833.5530374606573,-46757.76096849947,-2.220446049250313e-16,-1000000.0,0.0,1.0,0.042648320103989557,1.4570589756852907,145338.1606694283]).groupToMap;
}
