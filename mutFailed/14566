class C9 {
    static #d = 51519;
    static set a(a11) {
        function F12(a14, a15, a16) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                const v17 = [601759695];
                const v18 = [1073741824,1073741823,1376142744,1073741825];
                function f19(a20, a21, a22, a23) {
                    try {
                        v18.forEach(a21);
                    } catch(e25) {
                    }
                    const v27 = new Int8Array();
                    const v30 = new Int32Array(1024);
                    v30[3];
                    let [v32] = v27;
                    try { v18["find"](..."find", a23, ...v17); } catch (e) {}
                }
                f19();
                this.g = this;
            } catch(e36) {
            }
            try {
                this.f = 54182n;
            } catch(e37) {
                Math.tanh(0.3840861739144876);
                function f41(a42, a43) {
                    const o44 = {
                        "b": 0.3840861739144876,
                    };
                    return a43;
                }
                const v45 = Math.constructor;
                try { new v45(f41); } catch (e) {}
            }
        }
        const v47 = new F12(a11, a11, a11);
        new F12(-8n, a11, 9007199254740992);
        new F12(54182n, this, v47);
    }
}
async function f50(a51, a52, a53, a54) {
    return (await 9007199254740992).call();
}
f50.call(9007199254740992, 9007199254740992, f50, f50, f50);
const t45 = -8n;
new t45();
const v59 = new C9();
new C9();
function F61() {
    if (!new.target) { throw 'must be called with new'; }
    function f63(a64) {
        const o65 = {
        };
        return o65;
    }
}
new F61();
const o67 = {
};
const v70 = new o67();
const v72 = new BigInt64Array();
const v73 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
try { v73.toLocaleString(); } catch (e) {}
const v75 = [-1.7976931348623157e+308];
function f76(a77, a78, a79, a80) {
    function f81() {
    }
    function f83() {
        let v84 = 1000000000000.0;
        v84--;
        class C88 {
            constructor(a90) {
                const v91 = this.constructor;
                try { new v91(a90, f83); } catch (e) {}
                new Uint16Array(12, -4294967296);
            }
        }
        const v94 = new C88();
        new C88(-4294967296);
        class C96 extends C88 {
            [v94];
        }
        new C96();
    }
    const o99 = {
        valueOf() {
            v73[v75] /= 2;
            return 2;
        },
        __proto__: a80,
    };
    return o99;
}
const v100 = f76(v72, 129, v75);
const v101 = f76(v70, 129, v73);
for (let v102 = 0; v102 < 5; v102++) {
    v101 % v100;
}
class C104 {
    #p(a106, a107, a108, a109) {
        Date[-22872n] = Date;
        const o113 = {
            "arguments": v59,
            "type": "function",
        };
    }
}
for (let v114 = 0; v114 < 24; v114++) {
}
function F115() {
    if (!new.target) { throw 'must be called with new'; }
}
const o117 = {
};
function F118(a120, a121, a122, a123) {
    if (!new.target) { throw 'must be called with new'; }
}
