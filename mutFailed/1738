class C3 {
    268435441 = 4294967295;
    set b(a5) {
        const v6 = super.e;
        let v7;
        try { v7 = a5(v6, v6, this, v6, this); } catch (e) {}
        try {
            this.fuck(442256982, v7, -8, true);
        } catch(e11) {
        }
    }
}
const v12 = C3.length;
const v13 = new C3();
const v14 = new C3();
new C3();
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    -a19;
    a20 >> a20;
    a21 + a21;
    try {
        this.c = v14;
    } catch(e25) {
    }
    try {
        this.h = v14;
    } catch(e26) {
    }
    try {
        this.g = a20;
    } catch(e27) {
    }
}
new F16(-65536, 4294967295, -65536, 442256982);
new F16(442256982, 442256982, 442256982, 4294967295);
const v30 = new F16(442256982, 442256982, 4294967295, 4294967295);
const v31 = v30?.constructor;
let v32;
try { v32 = new v31(v13, v30, 442256982, v13); } catch (e) {}
let v35 = 10000;
const v36 = v35--;
-9007199254740991 - -9007199254740991;
-33478 == -33478;
512 != 512;
const v50 = [];
class C51 {
}
const v52 = new v32();
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    try { a56.reduceRight(this); } catch (e) {}
    this.c = a56;
}
const v58 = new F53(v52, v50);
function f59(a60, a61) {
}
try { Worker(); } catch (e) {}
try { ("function").strike(); } catch (e) {}
const v66 = [v58];
const o67 = {
    "arguments": v66,
    "type": "function",
};
new Worker(f59, o67);
try { new WeakMap(); } catch (e) {}
const v79 = [1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0];
"findIndex" == "findIndex";
const v83 = v79["findIndex"](gc);
v83 ^ v36;
const v85 = new Uint16Array();
v85.b = v85;
v83.BYTES_PER_ELEMENT = Float32Array;
const v89 = new Float32Array();
try { v89.filter(); } catch (e) {}
let v92;
try {
const t0 = 4294967295;
v92 = t0();
} catch (e) {}
new v92();
const o106 = {
    m() {
        for (let v99 = 0; v99 < 10; v99++) {
            v99 < 10;
        }
    },
};
try { o106.m(); } catch (e) {}
let v109;
try { v109 = Int32Array(); } catch (e) {}
const v110 = new Int32Array();
v12.c = v110;
function F111(a113, a114, a115) {
    if (!new.target) { throw 'must be called with new'; }
    const v116 = this.constructor;
    try { new v116(Uint16Array, a115, a115); } catch (e) {}
    a113 * a113;
    this.d = a113;
}
new F111(F111, 256);
class C121 {
}
const v124 = new v109(186);
Float64Array > v124;
