class C3 {
    constructor(a5) {
        const v7 = (a8, a9, a10, a11) => {
            new Uint8ClampedArray(10);
            new Int8Array(2474);
            new Uint32Array(256);
            return 2474;
        };
        const o22 = {
            "maxByteLength": 171,
            "c": a5,
            "b": 80.90975922754455,
            1185: "n",
            "g": this,
            ...this,
        };
        class C25 {
        }
        new C25();
        new C25();
        const v28 = new C25();
        class C29 extends C25 {
        }
        const v30 = new C29(C25, v28, C25);
        new C29("b", v30, C25);
        new C29(C25, v28);
        [-128,-204399241,1126169676,-39466,-37076,268435456,9223372036854775807,536870888,15798,-1632967117];
        "D2z" < v30;
        /5*/gi;
        const v38 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v39 = [601759695];
        const v40 = [1073741824,1073741823,1376142744,1073741825];
        const t32 = "b";
        t32.e = "B";
        function f43(a44, a45, a46, a47) {
            function f49() {
                const v53 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
                const v55 = Symbol.toPrimitive;
                const o62 = {
                    toString(a57, a58) {
                        const v59 = a47 && Float64Array;
                        function f60() {
                            a57 *= v55;
                            return Float64Array;
                        }
                        Object.defineProperty(v59, "valueOf", { value: f60 });
                        v59 <= v53;
                        return this;
                    },
                };
                const o85 = {
                    "c": -4294967297n,
                    [522675525n](a65, a66) {
                    },
                    "c": v39,
                    valueOf(a68, a69) {
                    },
                    "b": -4294967295,
                    [-4294967297n](a71, a72, a73, a74) {
                        [0.8549471140289917,-3.0,4.0,-5.0,-2.0,-1.7976931348623157e+308,5.31145436861636,NaN,1.2778157707013417e+308];
                        [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
                        return [923.3408061449261,-6.350919708227568e+307,-2.220446049250313e-16,0.04850379751250988,4.009495502233909];
                    },
                    "e": -4294967295,
                    "e": -268435456,
                    "maxByteLength": -4294967295,
                    "arguments": v38,
                    ...v39,
                    "type": "Vre",
                    ..."Vre",
                    valueOf(a79, a80) {
                    },
                    ..."Vre",
                    4: "Vre",
                    "c": -268435456,
                    "type": "Vre",
                    "type": "Vre",
                    toString(a82, a83, a84) {
                        return a44;
                    },
                    5: -4294967295,
                    6: -268435456,
                };
            }
            f49();
            const v88 = new Int8Array();
            v88.buffer.slice(2147483648);
            %OptimizeFunctionOnNextCall(f49);
            let v93;
            try { v93 = v40["find"](..."find", a47, ...v39, ...v40, ...522675525n); } catch (e) {}
            v93 <= a46;
            return arguments;
        }
        for (let v95 = 0; v95 < 10; v95++) {
            f43();
        }
        %OptimizeFunctionOnNextCall(f43);
        f43();
        function F98() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v100 = new SharedArrayBuffer(4, o22);
        new Int32Array(v100);
    }
}
new C3("n");
new C3(C3);
new C3(2.2250738585072014e-308);
for (let v106 = 0; v106 < 81; v106++) {
    [559.9377821158566,-1000000000.0,420.1719780111184,1.7976931348623157e+308,-1.2694283529691412e+308,-3.912717678064865e+307,NaN,0.11418676421729046,-1e-15];
    [9.150154433280882,0.31256003979096714,-0.0];
    [-1.0986783510761259e+308,5.0,640.9503830114231,1000.0,9.90773085393099e+307,4.0,-2.0,4.0,2.914324928473153,-4.952214424908217];
}
function F113() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v117 = Array(19793);
        for (const v118 of v117) {
        }
        const v119 = [v117,v117,v117,v117,v117];
        [[v119,v119,v119]] >= Uint16Array;
    } catch(e124) {
    }
}
new F113();
new F113();
