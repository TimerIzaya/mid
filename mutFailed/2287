function f0() {
    const v3 = [Uint32Array];
    const o4 = {
        "arguments": v3,
        "type": "function",
    };
    new Int32Array(3, 114, 3);
    for (let v9 = 0; v9 < 10; v9++) {
        function F11(a13, a14) {
            if (!new.target) { throw 'must be called with new'; }
            const v15 = this?.constructor;
            try { new v15(a13, F11); } catch (e) {}
            this.b = "b";
            this.d = a14;
        }
        const v17 = new F11();
        const o18 = {
            ...v17,
        };
        o18.d = o18;
    }
    function F19(a21, a22) {
        if (!new.target) { throw 'must be called with new'; }
    }
    gc(256);
    const v27 = /((?<=a))/gudm;
    const v28 = /gk4b*/vmsy;
    let v30;
    try {
    const t0 = -1.3832922122240728e+307;
    v30 = t0(2);
    } catch (e) {}
    try { v30(v27, 114, v28, 114, 256); } catch (e) {}
    return v28;
    const o43 = {
        "g": "p",
        ["p"]: 0.7977491853951403,
        ["e"]: 0.7977491853951403,
        valueOf(a36, a37) {
            a36?.[this["p"]];
            for (let v40 = 0; v40 < 32; v40++) {
                const t41 = "p";
                t41["p" + v40] = v40;
            }
            return "e";
        },
        3156801732: "p",
        "e": "p",
    };
    Symbol.replace;
    class C47 {
        static {
            this[Symbol.hasInstance];
        }
        #p() {
            let v53;
            try { v53 = this.p(undefined, this, this, this, this); } catch (e) {}
            try {
                v53.#p(undefined, v53, v53, undefined);
            } catch(e55) {
            }
            return undefined;
        }
        static #a = undefined;
        c = undefined;
    }
    const v56 = new C47();
    try {
        C47.c = v56;
    } catch(e57) {
    }
    return o43;
}
const v58 = f0();
f0();
const v60 = f0();
function f61() {
    return v60;
}
1024 + 1024;
const v65 = new Uint32Array(1024);
try { v65.join(v65); } catch (e) {}
const v69 = new Int8Array(128);
try { v69.filter(Int8Array); } catch (e) {}
new Int8Array(2428);
try { ("number").codePointAt(v58); } catch (e) {}
try { Date.apply("number", 1024); } catch (e) {}
class C80 extends Date {
    ["-47437"] = "number";
    static {
        Symbol.hasInstance = Symbol;
        this[Symbol.hasInstance];
    }
}
const v85 = new C80();
v85.toGMTString();
const v87 = [155533.8602852358,2.0];
function F89() {
    if (!new.target) { throw 'must be called with new'; }
    const v91 = this?.__defineGetter__;
    try { new v91(Int8Array, this); } catch (e) {}
    const v93 = this?.__lookupGetter__;
    v93.name = v93;
    function f94() {
    }
    %OptimizeFunctionOnNextCall(f94);
    const v96 = ("Hyo9")[1];
    try { v96.toWellFormed(); } catch (e) {}
    try { v96.fixed(); } catch (e) {}
    let v99;
    try { v99 = new v93(); } catch (e) {}
    for (const v103 of Array(v99)) {
        v87[658291203] = null;
        v93.g = Math;
        let v106 = Math.cbrt(19793);
        const v107 = v106--;
        v107 >>> v107;
        const v109 = 0.4890055133608564 || 0.4890055133608564;
        v109 + v109;
        class C111 {
            #f;
            [19793];
        }
        C111.e = C111;
        try { Math.round(v109); } catch (e) {}
        let v114 = -1567809689;
        v114++;
        Math.cos(v114);
    }
    const v117 = [];
    v117.g = v117;
    [C80,C80];
    class C121 {
    }
    class C122 extends C121 {
        static valueOf(a124, a125) {
            super[268435441] = 1479696428;
        }
    }
    C122.prototype = C122;
    try { v99.fill(); } catch (e) {}
    const v127 = [v117,v117,v117,v117];
    v127.g = v127;
    try { v127.entries(); } catch (e) {}
}
F89.name;
const v130 = new F89();
v130.c = v130;
new F89();
