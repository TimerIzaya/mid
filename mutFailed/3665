const v0 = [];
const v2 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
const v6 = v2.toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4");
const v7 = v6[7];
new Uint8ClampedArray(v6);
const v10 = v7?.with;
let v11;
try { v11 = new v10(v7, "-4"); } catch (e) {}
1336316832 & 1336316832;
function f15() {
    return 1073741823;
}
const v16 = f15?.apply;
let v17;
try { v17 = new v16(-1148418937, v11); } catch (e) {}
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    const v22 = this?.constructor;
    try { new v22(this, -1148418937); } catch (e) {}
    v22.b = 1073741823;
    try {
        this.f = 1336316832;
    } catch(e24) {
    }
    try {
        this.b = a20;
    } catch(e25) {
    }
    try {
        this.g = a21;
    } catch(e26) {
    }
}
new F18(1336316832, 1073741823);
new F18(-6, -6);
new F18(1073741823, 1336316832);
50880n << 50880n;
const v34 = [-460.307183313349,116746.1734742194,2.0,0.7612507062467385,-1.7352454748688924e+308];
try { v2.find(-6); } catch (e) {}
function f36(a37, a38) {
    try { a37.search(a37); } catch (e) {}
    function f40(a41, a42) {
        return a41;
    }
    return a38;
}
f36.d = f36;
v34[Symbol.toPrimitive] = f36;
const v45 = [0.38491475396310426,1.7976931348623157e+308,-1e-15,924251.5567374192,NaN,1.5098751561946018e+308,-1.1124820518145282e+308,-3.0,-0.0,-467.0550866857337];
class C46 {
    valueOf(a48) {
        let v49;
        try { v49 = v45(a48, this, this, a48, this); } catch (e) {}
        try { v49(v0, v49, v49); } catch (e) {}
        return v34;
    }
    1000;
    static #d = v0;
    static [v34] = v45;
    static #a;
    [v34] = v45;
    static [v0];
    static #e = v45;
}
C46.undefined;
const t64 = "128";
t64[2] = "128";
("128").fontsize();
function F56(a58, a59, a60, a61) {
    if (!new.target) { throw 'must be called with new'; }
    const v62 = this.constructor;
    v62.prototype = v62;
    try { new v62(); } catch (e) {}
    try { new Float32Array(Float64Array, Float64Array, Float64Array); } catch (e) {}
    typeof Float32Array;
}
const v67 = new F56();
const v68 = v67?.constructor;
try { new v68(Float64Array, 2.220446049250313e-16, Float64Array, 1073741823); } catch (e) {}
const v70 = new F56(F56, v67, F56, v67);
v70.e = v70;
const v71 = new v17();
class C73 {
}
class C74 {
    constructor(a76, a77, a78, a79) {
        let v80;
        try { v80 = this.propertyIsEnumerable(a78); } catch (e) {}
        try { a78(...a76, "e", v80, a79, ...C73); } catch (e) {}
        return arguments;
    }
}
C74.name = C46;
const v83 = new C74();
v83.length = v83;
const v84 = v71.constructor;
v84.e = v10;
const v85 = new v84(821);
const v86 = v85.lastIndexOf();
v86 / v86;
const v89 = new Float32Array(821);
v89[357];
v89.indexOf();
function f92() {
    class C95 {
        constructor(a97, a98) {
            const v99 = this.constructor;
            try { new v99(f92, C95, -7); } catch (e) {}
            this[-2147483648] >>>= -7;
            for (let v101 = 0; v101 < 5; v101++) {
            }
        }
    }
    new C95();
    return -7;
}
