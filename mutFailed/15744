const v2 = new Int16Array(4);
const v3 = v2.findIndex(4, 4, Int16Array, 4, Int16Array);
v2.byteLength /= 4;
v2[v2] = 4;
v2 - Int16Array;
const v5 = v2.byteLength;
function f7(a8, a9) {
    const o10 = {
        "f": v5,
        "c": a8,
    };
    return o10;
}
const v11 = f7(v5, v3);
f7(169, v3);
f7(v3, 169);
169 | 169;
new Uint8ClampedArray(169);
const v19 = new Uint8Array(1024);
v19.g = v19;
v19.g = v19;
[1e-15,4.0,0.9005793228884597,19.168527260684755,-1.7976931348623157e+308,358613.30626016343,-3.0,-9.31671886495016,-5.560252747169142e+307];
[1e-15,-462.3811100411059,0.47654845065375073,-866943.8878068475];
const v22 = [NaN,-7.588868186462845,1000.0,-1.0,-385.3206618463172,0.8617846534002503];
try { v22.copyWithin(v22, v22); } catch (e) {}
("6Ct").normalize();
try {
    v11.__proto__ = v22;
} catch(e29) {
}
