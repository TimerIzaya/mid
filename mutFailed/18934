Date.toString = Date;
try { new Date(Date, 9007199254740990, 1254475981, 1959057735, Date, 9007199254740990, 1254475981); } catch (e) {}
const v5 = new Date();
try { v5.setFullYear(1254475981, 1959057735, Date); } catch (e) {}
function F7(a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 1254475981;
    } catch(e10) {
    }
    try {
        function f12(a13, a14, a15, a16) {
            return -261.99102172609366;
        }
        f12.g = this;
        f12.g = f12;
        this.h = a9;
    } catch(e20) {
    }
    const v21 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    v21.p10 = a9;
    for (let v22 = 0; v22 < 25; v22++) {
        v22 + v22;
        v21["p" + v22] = v22;
    }
}
const v26 = new F7(9007199254740990);
const v27 = new F7(1254475981);
Object.defineProperty(v27, Symbol.toPrimitive, { value: Date });
const v30 = new F7(1254475981);
v30[Symbol.toPrimitive] = Symbol;
v30.e = v30;
const v33 = [268435441,-128,256,65536];
const v34 = [256,65537];
const v35 = [16,-10,-6213,1011165079,9007199254740990,10,12];
class C36 {
    4 = F7;
    #g = v26;
    #c;
    static [v27];
    static toString(a38, a39) {
        const v41 = super[a39];
        try {
            const v42 = delete this[v41];
            v42 && v42;
            this[v26];
        } catch(e45) {
        }
    }
    [v30] = v34;
    m(a47, a48, a49) {
        a49[0] = a47;
        const v50 = super.h;
        try {
            new F7(9007199254740990);
            class C52 {
                constructor(a54, a55, a56, a57) {
                }
                /*
                constructor(a59, a60, a61, a62) {
                }
                */
            }
        } catch(e63) {
        }
        return v50;
    }
    g = 1254475981;
    a;
}
new C36();
const v65 = new C36();
const v66 = new C36();
v66[4] = v66;
Uint8Array.toString = Symbol;
const v69 = new Date(Uint8Array);
const v70 = v69.setTime(Uint8Array);
v70 - v70;
try { new Date(1254475981, v65, v65, v65, 1254475981, 1254475981, v26); } catch (e) {}
const v75 = Reflect.construct(Date, v35);
try { v75.getUTCDate(); } catch (e) {}
function f78(a79, a80) {
    let {"a":v81,"c":v82,} = a80;
    Object.defineProperty(v26, "b", { get: Date });
    return v26;
}
Uint32Array[Symbol.iterator] = f78;
const v85 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
class C86 {
    constructor(a88, a89, a90, a91) {
        a91[Symbol.toPrimitive] = f78;
        const v94 = this.constructor;
        try { new v94(); } catch (e) {}
        for (let v96 = 0; v96 < 5; v96++) {
            v85[v96] = a91;
        }
    }
}
try { C86.bind(v33); } catch (e) {}
new C86(v85, Uint32Array, Uint32Array, Uint32Array);
