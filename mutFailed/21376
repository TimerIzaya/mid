new Float32Array(184);
function f4(a5, a6) {
    function f7(a8, a9) {
    }
    try { Set.apply(a5, f7); } catch (e) {}
    return Float32Array;
}
f4();
Array(184);
let v18 = (BigUint64Array * 7) - 184;
v18++;
const v20 = new Float32Array(7);
const v23 = [4096,1000,17593,14,569949084,536870888,3,4];
const v26 = new Uint32Array(9, 9, 9);
const v27 = v26.buffer;
v23[1855803377] = v27;
new Float64Array(10);
let v32;
try { v32 = new BigInt64Array(-832267.262043573); } catch (e) {}
function f33() {
    let v35 = v32.codePointAt(7);
    v35 ^ v35--;
    return Float32Array;
}
f33();
let v41 = 144;
v41++;
function F43() {
    if (!new.target) { throw 'must be called with new'; }
}
new F43();
function f47() {
    return v20;
}
function f51(a52, a53) {
    const o55 = {
        [F43]: a52,
        "h": f47,
        512: v20,
        166: "bigint",
        get d() {
            Object.defineProperty(this, v27, { writable: true, set: f47 });
            return this;
        },
        "d": a53,
        "g": Float32Array,
    };
    return o55;
}
const v57 = f51(f51(v20, "8Yr"), "-1024");
const o62 = {
    "e": "bigint",
    ...v57,
    get f() {
        class C59 {
            static [-2];
            16;
        }
        new C59();
        new C59();
    },
};
class C63 {
    constructor(a65, a66) {
        this.propertyIsEnumerable(C63);
    }
}
function f68(a69, a70) {
    a69 <<= a69;
    return C63;
}
C63[Symbol.toPrimitive] = f68;
function f76(a77) {
    const v79 = new Set();
    const o88 = {
        [-4294967297n](a82, a83, a84, a85) {
            eval();
        },
    };
    return v79;
}
new BigUint64Array();
const o93 = {
    set d(a92) {
    },
    "a": f51,
};
C63[Symbol.toPrimitive] = f76;
function f95(a96) {
    return v41;
}
C63[Symbol.toPrimitive] = f95;
new v57();
