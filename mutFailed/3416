const v0 = [-Infinity,-2.220446049250313e-16,-674.0185643490656,567.4149670011836];
const v1 = [563485.1168897953,-3.0,276.2728833069673,-1.7976931348623157e+308,-2.2250738585072014e-308,734.6790167342858,6.871012829352862e+307,4.645433068792359];
const v2 = [-3.0,2.771314955976896,0.9937586855049679,1.0];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v0;
    } catch(e6) {
    }
    try {
        this.d = v2;
    } catch(e7) {
    }
    try {
        this.e = a5;
    } catch(e8) {
    }
}
const v9 = new F3(v0);
new F3(v1);
const v11 = new F3(v2);
class C12 {
    static {
        this % v1;
        new BigUint64Array(257);
        new Float32Array(5);
        new Int8Array(257);
    }
    4;
}
new C12();
const v25 = new v11();
const v26 = new C12();
class C27 {
    set d(a29) {
        const o30 = {
            "b": v9,
            [this]: v9,
            [v2]: v26,
            "f": C12,
            __proto__: C12,
        };
        new Proxy(v25, o30);
    }
    static #c;
    h = v9;
    static set a(a34) {
        try {
            v2.#c;
        } catch(e36) {
        }
        try {
            v11.#c = F3;
        } catch(e37) {
        }
    }
}
new C27();
new C27();
new C27();
const v43 = new Float32Array(9);
v43.fill();
function f45(a46, a47, a48, a49) {
    const v50 = a47 >>> a47;
    const v51 = v50 >>> v50;
    new Int8Array();
    v25.entries();
    v51.next();
    function f56(a57, a58) {
        f56.arguments = a57;
        return f56;
    }
    const v59 = f56(f56);
    Math.sinh(-1549415938);
    -0.0;
    Math.max(a47);
    class C67 extends Date {
        static [v59];
        static [0.0] = v26;
        0;
        c = C12;
        static #b = Float32Array;
    }
    const v68 = new C67();
    v68.getDay();
    return v59;
}
for (let v70 = 0; v70 < 10; v70++) {
    f45(v70, v70, v70, 9);
}
%OptimizeFunctionOnNextCall(f45);
f45(9, Float32Array, v43, f45);
