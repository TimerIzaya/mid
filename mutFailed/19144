function f0() {
    let v1 = -611.1566419603391;
    const o3 = {
    };
    new Proxy(f0, o3);
    new Uint8ClampedArray(4);
    new BigUint64Array(1628);
    new Uint8Array(127);
    const o41 = {
        set e(a17) {
            function f18() {
                a17[201] = -1776574200;
                d = f0;
                f0 && 3.0;
                try {
                    new f0();
                } catch(e21) {
                    for (let v22 = 0; v22 < 5; v22++) {
                        function f23() {
                            const v25 = new Float64Array();
                            v25[2];
                            return v22;
                        }
                        f23();
                        %OptimizeFunctionOnNextCall(f23);
                    }
                }
                return this;
            }
            new Float32Array(10);
            const v33 = new BigInt64Array(256);
            const v36 = new Uint32Array(127);
            Object.defineProperty(v33, -1776574200, { value: f0 });
            this[127] = v36;
            v1 = 3.0;
            f18();
        },
    };
    1126838905 - 1126838905;
    [1126838905];
    function f45() {
        return f45;
    }
    function f47(a48, a49, a50, a51) {
        a48--;
        try { a50(); } catch (e) {}
        a51 - a51;
        return a51 >= a51;
    }
    for (let v56 = 0; v56 < 10; v56++) {
        v56 >> v56;
        f47(v56, v56, f45, 522675525n);
    }
    f47(f47, 522675525n, f45, f45);
    return o41;
}
const v60 = f0();
const v61 = f0();
const v62 = f0();
try { Map.propertyIsEnumerable(v62); } catch (e) {}
const v65 = new Map();
let v66;
try { v66 = v65.keys(); } catch (e) {}
9n ^ 9n;
function f71() {
    return v62;
}
let v72 = 1871;
v72--;
const v74 = [1.0,-6.818981069405753e+307];
try { v74.shift(); } catch (e) {}
const v76 = [v74];
let v77 = v76 + v76;
try { v77.italics(); } catch (e) {}
v77 >>> v77;
%PrepareFunctionForOptimization(Date);
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v82 = new Int16Array(v72);
try { v60["toString"](v61, v62, v61, v82); } catch (e) {}
/ab\b\d\bcdc(?!\1(a\1)\1)\1/vims;
/a\sY((((.).).).)?/vims;
/[Na\W]/gvis;
try { Int32Array(v65, v72, Int32Array); } catch (e) {}
new Int32Array(9);
-1024;
const v95 = new BigInt64Array(1024);
v66 % 536870889n;
v95[5];
+v77;
v77 % v77;
Math.exp(v77);
Math.tanh(--v77);
function F105() {
    if (!new.target) { throw 'must be called with new'; }
}
const v107 = new F105();
const v108 = v107?.constructor;
try { new v108(); } catch (e) {}
function f110() {
    try { Array.from(v76); } catch (e) {}
    const v114 = Array(4087);
    v114[1959] = v107;
    for (const v115 of v114) {
    }
    return 4087;
}
%PrepareFunctionForOptimization(f110);
f110();
%OptimizeFunctionOnNextCall(f110);
f110();
for (let v118 = 0; v118 < 10; v118++) {
    ("p").length;
    f71["p" + v118] = v118;
}
