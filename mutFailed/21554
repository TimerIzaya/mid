function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 10;
    } catch(e3) {
    }
    class C4 {
    }
    try {
        BigInt(BigInt);
    } catch(e7) {
    }
}
const v8 = new F0();
const v9 = new F0();
const v10 = new F0();
function f11(a12) {
    try { v9.toSpliced(a12, F0, a12); } catch (e) {}
    return ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
}
v10.toString = f11;
function f18(a19) {
    const o20 = {
        "d": v8,
        1824: v10,
        [a19]: a19,
        "h": v9,
        "b": F0,
        "f": F0,
        "g": F0,
        "c": v8,
        ...v9,
        ...v8,
    };
    return o20;
}
f18(v10);
f18(v10);
f18(v8);
[0.3369746912722752,0.781630452998678];
[0.43476863709863367,3.0,NaN,-1.3512285729978484e+308,-2.220446049250313e-16,0.3001158493889651,-1000000000.0,-1e-15,221961.0779879829];
[5.0,197.4744356864628,8.343624009698967,0.5225823298831972,1.4948702573864843,-1.3195489182000047e+308,1000.0,0.5334945954738101,1000000000.0];
function f27() {
    ("-536870912").normalize;
    const v30 = ("-536870912").g;
    const v33 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    for (let v34 = 0; v34 < 5; v34++) {
        class C35 {
            constructor(a37, a38) {
            }
        }
        class C39 extends v8 {
        }
        function f40() {
            try {
                v33.forEach();
            } catch(e42) {
                e42.a = e42;
            }
            const v44 = Symbol.toPrimitive;
            v44.description;
            Symbol.for();
            return v44;
        }
        f40();
        %OptimizeFunctionOnNextCall(f40);
    }
    const v48 = new Uint16Array(209);
    v48[145] = v30;
}
[140693.55968437064,-1.1852842353837545,1.7976931348623157e+308,0.2891882798796017,1000000.0,-405533.57654950966,-476160.9672552756,-1.2913968641498632e+308,-1.7976931348623157e+308,1000000.0];
[0.0,2.439947332797196];
[3.554050204802966,2.0,-0.9893540922478827,835.4687088452995,1.0,-1000000000000.0,537.8799696886636,-129821.05993193889] <= "Z";
const v57 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
function f58(a59) {
    a59 ^ a59;
    return 36002;
}
function f61(a62, a63) {
    return f58;
}
const v65 = new Promise(f61);
v65[v57] += 36002;
new BigInt64Array(1000);
new BigUint64Array(127);
class C74 {
}
class C75 extends C74 {
    ["getPrototypeOf"] = C74;
}
new C75();
try { (-9007199254740992).log2(-9007199254740992); } catch (e) {}
class C79 extends f27 {
}
for (const v80 in C79) {
    class C81 {
    }
    const v83 = new C81();
    v83.toString = Symbol;
    const o88 = {
        [v83](a85, a86, a87) {
        },
    };
    function F89(a91, a92, a93) {
        if (!new.target) { throw 'must be called with new'; }
        const v96 = new Float32Array(this, a93, a93);
        const v98 = new Uint8Array(268435440);
        new Uint8ClampedArray(129);
        v98[6] = v96;
    }
}
let v104 = 10;
for (; v104--;) {
}
new Int8Array();
(3).pop();
function F110(a112) {
    if (!new.target) { throw 'must be called with new'; }
}
class C113 {
}
function* f114(a115, a116) {
}
new Int8Array(268435456);
for (let v119 = 0; v119 < 10; v119++) {
    Float64Array.of();
    const v124 = new Date();
    v124.setFullYear();
    Array();
}
