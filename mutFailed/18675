new Float64Array(15);
new Float32Array(128);
new Int32Array(1);
function F13(a15) {
    if (!new.target) { throw 'must be called with new'; }
}
const v17 = new F13("4294967297");
const v18 = [Infinity,1.0,-1.2272545370579378e+308,-1000000.0,5.0,1.7976931348623157e+308,5.0];
function F19() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        Array(19793);
        [[]] >= Uint16Array;
    } catch(e28) {
        v18.findLastIndex;
    }
}
const v30 = new F19();
try { Set.bind(v17); } catch (e) {}
new Set(F19, F19, v30);
1000 - 1000;
const v37 = new Uint8Array(1000);
const v41 = Array();
try { v41.findLast(v41); } catch (e) {}
const v45 = Array(1000);
let v46;
try { v46 = v45.push(1000); } catch (e) {}
const v47 = new RegExp(257);
const v48 = Uint8Array in v47;
v48 && v48;
try {
    for (let v51 = 0; v51 < 100; v51++) {
        Array(v46);
    }
    v47.d = v37;
} catch(e53) {
}
const v56 = new Float32Array(4);
v56[3] = v56;
~4096;
SyntaxError.name;
SyntaxError.e = SyntaxError;
const v63 = Float32Array?.constructor;
try { new v63(v45); } catch (e) {}
Float32Array.name?.toLocaleUpperCase;
function f68() {
    return f68;
}
let v69 = -2n;
v69--;
function f72() {
    return 536870887n;
}
try { f72(); } catch (e) {}
let v74;
try { v74 = f72(); } catch (e) {}
v74 * v74;
let v76 = 2;
v76++;
Map.prototype;
Uint8Array.prototype = Uint8Array;
function F83() {
    if (!new.target) { throw 'must be called with new'; }
    const v86 = Date();
    try { v86.small(); } catch (e) {}
    for (const v91 of Array(19793)) {
    }
    try {
    } catch(e92) {
    }
}
const v93 = new F83();
const v94 = v93?.constructor;
try { new v94(); } catch (e) {}
function F96(a98, a99, a100) {
    if (!new.target) { throw 'must be called with new'; }
    for (let i103 = 0, i104 = 10;
        (() => {
            const v105 = i103 < i104;
            const v106 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
            try {
            } catch(e107) {
            }
            const v108 = v106.toSpliced();
            v108[3] = v108;
            return v105;
        })();
        ) {
    }
}
for (const v117 of Array(4087)) {
}
class C118 {
    constructor(a120) {
        try {
        } catch(e121) {
        }
        try {
        } catch(e122) {
            class C123 extends Map {
            }
        }
        for (const v124 of "bigint") {
        }
    }
}
const v125 = C118?.toString;
try { new v125(); } catch (e) {}
class C127 extends C118 {
}
const o128 = {
};
