[];
let v1 = [-4294967296,4294967296,1073741825,268435441];
const v2 = [-4294967297,4294967295,-1670208820,256,-268435456,65535];
const v3 = [-9007199254740990,-2147483647];
/nG[\xe2\x81\xa3]foo(?<=bar)baz?/guimsy;
const v5 = /Cot(?:ab){4,7}/vims;
/(?: foo )/dims;
class C13 {
    #b = C13;
    static [-65536];
    static get a() {
        super[this] = 26507;
        Math.clz32(-5.559010083759133);
        --v1;
        ~v2;
        let v22 = v2 ^ v2;
        const v24 = v22 * --v22;
        try {
            arguments.#b <<= arguments;
        } catch(e26) {
            try { e26(v2, e26, arguments, -9007199254740991, e26); } catch (e) {}
            let v28;
            try { v28 = SharedArrayBuffer.n(5, arguments, v24, v2); } catch (e) {}
            try { v28(v3); } catch (e) {}
            function F30(a32, a33) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.a = v28;
                } catch(e34) {
                }
                try {
                    const t31 = -9007199254740991;
                    t31.g = v3;
                } catch(e35) {
                }
            }
            new F30(v24, 268435440n);
            new F30(e26, 268435440n);
            new F30(268435440n, 268435440n);
        }
        return SharedArrayBuffer;
    }
}
const v39 = new C13();
function f40(a41, a42) {
    a41.e >>>= -35417;
    return a42;
}
v39.constructor = f40;
const v44 = v39?.constructor;
function f45() {
    return v5;
}
Object.defineProperty(v44, "d", { configurable: true, enumerable: true, get: f45 });
v44.name = v44;
class C46 {
}
new C46();
new C46();
const v49 = new C46();
class C50 extends C46 {
    constructor(a52, a53) {
        super();
        try {
            a52.__proto__ = C46;
        } catch(e54) {
        }
        new C46();
    }
}
new C50(v49);
new C50();
new C50();
new C46();
let v60;
try { v60 = new v44(); } catch (e) {}
const v61 = v60?.constructor;
v61.d = v44;
try { new v61(); } catch (e) {}
new C13();
let v64 = 0;
while (v64 < 6) {
    v61?.d;
    v64++;
}
const v72 = new C13();
try { v72.constructor(); } catch (e) {}
const v74 = [536870888,-536870912,-1292028157,-35163,1073741825,1126124502,-1269619973,1000,-128,9];
try { v74.findLastIndex(C13); } catch (e) {}
const v76 = [-9007199254740991,22341,65537];
const v77 = [9007199254740990,2147483647,-9223372036854775808];
const v79 = new Date();
const v80 = v79?.getHours;
try { new v80(); } catch (e) {}
let v82;
try { v82 = v79.setUTCSeconds(v74, v72); } catch (e) {}
v82++;
for (let v84 = 0; v84 < 5; v84++) {
    const v89 = new BigInt64Array(4046);
    v89.g = v89;
    let v90 = undefined;
    const v91 = v90++;
    v91 + v91;
    %VerifyType(4046);
    v72[v77];
    v72[undefined] = v79;
    try {
        v89.g = v90;
    } catch(e94) {
    }
    const v95 = v91 >> v91;
    v95 >> v95;
    const v97 = v95 >>> v77;
    let v98 = v97 % v97;
    v98--;
    const o100 = {
    };
    o100.e = v76;
    o100.e = o100;
    for (let i103 = 0, i104 = 10; i103 < i104; i103++) {
    }
}
