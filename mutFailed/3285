const v2 = new BigInt64Array(26);
new Int32Array(131);
4080 + 4080;
4080 + 4080;
new Int16Array(4080);
class C12 {
    set e(a14) {
        Math.fround();
        Math.ceil();
    }
    m(a19) {
    }
    e;
}
try { C12.bind(C12); } catch (e) {}
const v21 = new C12();
const v23 = new BigInt64Array(6);
try { v23.findLast(4080); } catch (e) {}
try { new Uint32Array(v21, Int16Array, Int16Array); } catch (e) {}
new Uint32Array(9);
15 * 15;
Uint16Array.g = Uint16Array;
new Uint16Array(15);
Int32Array.name = Int32Array;
const v35 = new Int32Array(127);
v35.BYTES_PER_ELEMENT = v35;
function f36(a37, a38) {
    a37[1];
    const v40 = a37.length;
    v40 - v40;
    a38.length = a38;
    const v42 = v35.toSorted();
    try { v42.some(f36); } catch (e) {}
    return v42;
}
let v44;
try { v44 = new f36(v2, v23); } catch (e) {}
try { v44.entries(); } catch (e) {}
try { Promise.all(Promise); } catch (e) {}
Promise.prototype;
new Promise(f36);
const v52 = 9n | 9n;
v52 - v52;
1073741824n << 1073741824n;
/(?:a+)*xyz?0xyz{93}/gudi;
