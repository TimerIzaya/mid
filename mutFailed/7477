let v0 = 1024;
for (let i4 = 0, i5 = 10;
    (() => {
        const v6 = i4 < i5;
        class C7 extends v0 {
        }
        return v6;
    })();
    i4++) {
}
Int32Array[2] = Int32Array;
new Int32Array(v0);
const v17 = new Uint8ClampedArray(2698);
new Uint32Array(204);
class C21 {
    static #m(a23, a24, a25) {
    }
    constructor(a27, a28, a29, a30) {
        this.#m();
    }
}
const v35 = [-6.672391061426152e+307];
const t21 = -65535n;
new t21(Int32Array);
function f38(a39, a40, a41, a42) {
    const o43 = {
    };
    return o43;
}
v17[0] = v35;
class C44 {
    static get c() {
        const v46 = `
        `;
        eval();
    }
}
function F50(a52, a53, a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    a55[1][1];
}
new Uint8ClampedArray();
for (let v60 = 0; v60 < 10; v60++) {
    (8n).__defineGetter__;
}
for (let v62 = 0; v62 < 25; v62++) {
    Array(36862);
    v0++;
    new BigUint64Array(36862);
    const v70 = ([-833.5530374606573,-46757.76096849947,-2.220446049250313e-16,-1000000.0,0.0,1.0,0.042648320103989557,1.4570589756852907,145338.1606694283]).groupToMap;
    try { new v70(); } catch (e) {}
}
[10000];
