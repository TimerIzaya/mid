class C6 {
    constructor(a8, a9, a10, a11) {
        const v12 = super[15180n];
        try { v12["findLast"]("findLast", "findLast", "findLast"); } catch (e) {}
        const v17 = !-2147483647;
        Math.floor(v17);
        Math.pow(-2147483647, 9);
        Math.imul(-2147483647, v17);
        Math.cos(9);
    }
    #e;
    static #h;
}
const v22 = new C6(3, 9223372036854775807n, -1907143292, 9);
new C6(3, -1907143292, -1907143292, 3);
new C6(9, 9223372036854775807n, 3, 9);
[1.130268265797243,780551.735644805];
[-1000000000.0,0.3687895001890398];
[-0.0,1000.0,-2.2250738585072014e-308,7.156932406309881e+307,-1000000000000.0,-1e-15,1000000.0];
new Uint8ClampedArray(128);
new Int16Array(109);
new v22(127);
function f37() {
}
const v38 = [601759695];
const v39 = [1073741824,1073741823,1376142744,1073741825];
function f40(a41, a42, a43, a44) {
    function f46() {
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        (15180n).toPrimitive;
    }
    f37();
    const v56 = new Int8Array();
    v56.buffer.slice();
    %OptimizeFunctionOnNextCall(f46);
    let v61;
    try { v61 = v39["find"](..."find", a44, ...v38); } catch (e) {}
    v61 <= a43;
    return arguments;
}
/(?:a*)+q(?<a>.)/guds;
for (let i66 = 0, i67 = 10;
    i66 < i67;
    (() => {
        i67--;
        const v74 = new BigInt64Array(3768);
        function f75(a76, a77) {
            const v78 = a77++;
            const v79 = v78 >> v78;
            let o80 = {
            };
            [,...o80] = v74;
            function f82(a83, a84) {
                const o85 = {
                    [10000n]: a84,
                };
                return o85;
            }
            f82(10000n, f82);
            const v87 = new BigInt64Array();
            v87.valueOf = f82;
            return v79;
        }
        f75(BigInt64Array, v74);
    })()) {
    const o91 = {
    };
}
