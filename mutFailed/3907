const v2 = new Int32Array(10);
new BigInt64Array(2);
-10 ^ -10;
new Int16Array(-10);
class C11 {
    static get h() {
        const o16 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o16);
        return 268435441;
    }
}
new C11();
new Uint16Array(99);
function f22() {
    const v23 = [];
    v23[6] = v23;
    const o26 = {
        set b(a25) {
        },
    };
    return v2;
}
function f28(a29) {
}
const v32 = new Date("undefined");
v32.getYear();
function f36() {
    return v2;
}
const v37 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v38 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
new Uint32Array(v37, 0, 0);
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
}
const v50 = new Int16Array(9);
("valueOf").localeCompare(v50, "valueOf");
new F44(v38, 0);
new F44();
class C56 {
}
("undefined").constructor;
Int32Array.bind();
const v62 = /8[\cA]v/uisy;
const v63 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v63.length = v62;
} catch(e64) {
}
/5*/gi;
const v66 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v67 = [601759695];
const v68 = [1073741824,1073741823,1376142744,1073741825];
const t56 = "b";
t56.e = "B";
function f71(a72, a73, a74, a75) {
    function f76() {
        let v79 = Float64Array;
        const v83 = new Uint16Array(3225);
        for (const v84 of v83) {
            v84[3] = 5n;
            9007199254740991 * v84;
        }
        v79 = a73;
        b = v67;
        v37.length;
        try {
            v68.forEach(v79);
        } catch(e89) {
        }
        const v90 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const o93 = {
            "maxByteLength": 1468,
        };
        new ArrayBuffer(2, o93);
        const v97 = Symbol.toPrimitive;
        const o104 = {
            toString(a99, a100) {
                const v101 = a75 && v79;
                function f102() {
                    a99 *= v97;
                    return v79;
                }
                return v101 <= v90;
            },
        };
        const v108 = new Float32Array(1750);
        v108 - 581587.2441596473;
        const o131 = {
            "c": -4294967297n,
            [522675525n](a112, a113) {
            },
            "c": v67,
            valueOf(a115, a116) {
                return this;
            },
            "b": -4294967295,
            [-4294967297n](a118, a119, a120, a121) {
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v66,
            [v63]() {
            },
            "g": Int32Array,
            ...v90,
            "type": "Vre",
            ...v67,
            "type": "Vre",
            ..."Vre",
            valueOf(a125, a126) {
                return a126;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a128, a129, a130) {
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f76();
    new Int8Array();
    %OptimizeFunctionOnNextCall(f76);
    try { v68["find"]("find", a75, v67, v68, 522675525n); } catch (e) {}
}
for (let v137 = 0; v137 < 10; v137++) {
    f71();
}
%OptimizeFunctionOnNextCall(f71);
f71();
