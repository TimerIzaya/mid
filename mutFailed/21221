function f3(a4) {
    const o13 = {
        "a": 256,
        __proto__: 1073741824,
        valueOf(a6) {
            if (a6 > this) {
                try {
                    a4.toString = f3;
                } catch(e8) {
                }
            } else {
            }
            a6 / this;
            this.e ^= 256;
            const v12 = Symbol.match;
            this[v12] = a4;
            return v12;
        },
    };
    return o13;
}
const v14 = f3(256);
const v15 = f3(256);
f3(256);
function F17(a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = f3;
    } catch(e21) {
    }
    try {
        this.c = a20;
        a19 % (a19 > v15);
        for (let v24 = 0; v24 < 32; v24++) {
            this["p" + v24] = v24;
        }
    } catch(e27) {
        Object.defineProperty(v14, 12, { set: 1073741824 });
        try { a19.toString(); } catch (e) {}
        %VerifyType(256);
        try {
            this.c = this;
        } catch(e29) {
        }
    }
}
new F17(1073741824, 256);
const t47 = 256;
new t47(1073741824, 1073741824);
new F17(256, 256);
function f33(a34, a35, a36, a37) {
    this.printErr(this, this, a34, this, a36);
    const v41 = new Int32Array(a35, a34, a36);
    const v42 = (a43, a44, a45, a46) => {
        try { a43.n(a44, a35); } catch (e) {}
        try {
            a37.c = a35;
        } catch(e48) {
        }
        return a44;
    };
    try {
        const t62 = null;
        t62.e = v41;
    } catch(e50) {
        e50.message.search();
    }
    return f33;
}
for (let v53 = 0; v53 < 500; v53++) {
    f33(f33, v53, f33, v53);
}
