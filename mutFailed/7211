const v2 = new BigInt64Array(69);
typeof v2 === "bigint";
const o10 = {
    "execution": "sync",
    "type": "minor",
};
gc(o10);
const v13 = new Int32Array(4);
const v16 = new Uint16Array(2803);
const v19 = !v16;
const v20 = !2803;
Math.sqrt(v16);
2 && v20;
Math.exp(69);
Math.imul(69, v16);
const v25 = Math.sqrt(v19);
Uint16Array !== v16;
const v30 = new Int32Array(BigInt64Array, 69, ...v13, ...v16, v25, -2 instanceof Int32Array);
v30[5] = v30;
try { ("bigint").indexOf(gc, 2); } catch (e) {}
const v38 = v2[-2];
1.1660447917673544e+308 | 1.1660447917673544e+308;
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
}
const v52 = new F48();
const v53 = new v38();
const v56 = new Uint32Array();
("minor").length;
try {
    const o59 = {
    };
    new Uint16Array(o59, -65337, 93);
} catch(e62) {
}
[v53,v52,v56[0.6822080711934364]];
