function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 9;
    } catch(e3) {
    }
    try {
        this.c = 9;
    } catch(e4) {
    }
}
new F0();
const v6 = new F0();
new F0();
const v8 = [1655682377,268435440,268435456,-16,-5,2147483647,-557352910,2147483649,-12];
[-33561,257,2,3];
let v10 = [-60832,-460016468,-5,-65073,35975,6,257,-9007199254740991,238];
/Ja+(a)/gudmsy;
/a[a]/vds;
/hk(?<a>.)?/gvimsy;
new BigUint64Array(3290);
new Int16Array(13);
const t22 = 13;
new t22(75);
function f23() {
}
class C24 extends f23 {
}
const t28 = 13;
new t28();
new C24();
class C27 {
}
try {
    new BigUint64Array(v6, 3290);
} catch(e33) {
}
v10 = v8;
function f34() {
}
const o35 = {
};
function F36() {
    if (!new.target) { throw 'must be called with new'; }
}
[-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v39 = [601759695];
const v40 = [1073741824,1073741823,1376142744,1073741825];
function f43(a44, a45, a46, a47) {
    function f49() {
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        arguments.toPrimitive;
    }
    f23();
    const v59 = new a46();
    v59.buffer;
    ("B").slice();
    %OptimizeFunctionOnNextCall(f49);
    let v64;
    try { v64 = v40["find"](..."find", a47, ...v39); } catch (e) {}
    v64 <= a46;
    return arguments;
}
for (let v66 = 0; v66 < 10; v66++) {
    f43();
}
%OptimizeFunctionOnNextCall(BigInt64Array);
f43();
