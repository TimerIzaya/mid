class C3 {
    static #toString(a5) {
        let v6 = 0;
        while (v6 < 3) {
            Math.random();
            Math.sin(this);
            ++v6;
            Math.clz32(this);
            --v6;
            !1680472700;
            v6++;
        }
        return 7;
    }
}
try {
    C3.valueOf = "number";
} catch(e19) {
}
const v23 = 3 & 7;
const v24 = 7 & C3;
let v25 = Math.log2(13);
const v26 = C3 << v24;
const v27 = v24 | 13;
const v28 = v27 || v23;
new C3();
const v30 = new C3();
const v31 = new C3();
class C32 extends C3 {
    static [v31] = "symbol";
    static [v30];
    static set g(a34) {
        super.d = a34?.["symbol"];
    }
    static 6 = v31;
    static o(a37, a38, a39) {
        v31[4];
        try {
            new C3();
        } catch(e42) {
        }
        return a38;
    }
}
const v43 = new C32();
const v44 = new C32();
new C32();
class C46 extends C32 {
    #m(a48, a49, a50, a51) {
        const o52 = {
        };
        try {
            o52.a = this;
        } catch(e53) {
        }
        try {
            const o54 = {
            };
            o54.a = this;
            o54.__proto__ = 7;
        } catch(e55) {
        }
        try {
            const o56 = {
            };
            o56.a = this;
            o56.e = 7;
            o56.b = v31;
        } catch(e57) {
        }
        try {
            const o58 = {
            };
            o58.a = v27;
            o58.e = 7;
            v28.d = this;
        } catch(e59) {
        }
        return "symbol";
    }
}
new C46();
new v44();
let v65 = v26 / -4.0;
v25++;
const v67 = v65--;
v43 ** v26;
v65 * v26;
new C46();
const v73 = new Uint16Array();
function F74(a76, a77, a78) {
    if (!new.target) { throw 'must be called with new'; }
}
for (let v81 = 0; v81 < 25; v81++) {
    const v82 = [-587,-11,-5];
    const v83 = v82.filter;
    let v84;
    try { v84 = v83(); } catch (e) {}
    const v85 = [1073741824,1073741823,1376142744,1073741825];
    function f86(a87, a88, a89, a90) {
        -a87;
        a88 >>> a88;
        const v93 = a87 >>> a87;
        let [] = v85;
        let v95 = v73["toSorted"]();
        v84 <= v67;
        v95 = -4.0;
        v93 | v93;
        const v98 = a89[3];
        v98 + v98;
        ("find").codePointAt(v85);
        try { v85["find"](..."find", a90, ...v82); } catch (e) {}
        return a89;
    }
    for (let v103 = 0; v103 < 10; v103++) {
        f86(v103, v103, v85);
    }
}
