function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 536870912;
    } catch(e3) {
    }
    268435456 >>> (268435456 % 268435456);
    const v8 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
    const v10 = new Int32Array(v8, 268435456);
    class C11 {
        static #d = 268435456;
        constructor(a13, a14) {
            try {
                v8.#d += v10;
            } catch(e15) {
            }
        }
    }
}
const v16 = new F0();
const v17 = new F0();
const v18 = new F0();
([4.0,1.0,1000000.0,2.220446049250313e-16,533350.8402277301,-2.2250738585072014e-308,1000000.0,1.566394140636886]).toLocaleString().toUpperCase();
function F23(a25) {
    if (!new.target) { throw 'must be called with new'; }
    const v26 = this.constructor;
    v26.prototype;
    try { new v26(); } catch (e) {}
}
new Set();
function f36() {
    return -2.220446049250313e-16;
}
f36.length = f36;
const v39 = new Int8Array(4);
try { v39.reduce(4); } catch (e) {}
8 - 8;
for (const v44 in "1024") {
}
class C45 {
}
try { new C45(); } catch (e) {}
("1073741823").trimRight()[8];
const v51 = [];
function f52(a53, a54) {
    class C55 {
    }
    5.0 / -2.220446049250313e-16;
    const v63 = new Float64Array(127);
    new Uint8ClampedArray(v63);
    new Uint8Array(257);
    class C70 extends Uint16Array {
        constructor(a72, a73, a74) {
            super();
        }
    }
    Math.exp();
    Math.log(-23525);
    function f78() {
        return f78;
    }
}
v51.constructor = f52;
new Float32Array(8);
const v81 = /abc?/gvmy;
try { v81.toString(); } catch (e) {}
v81.exec("Q8F");
const v84 = /(x)(x)(x)\1/uis;
function f85(a86, a87, a88, a89) {
    const o96 = {
        2: a88,
        __proto__: a89,
        [v84](a91, a92, a93, a94) {
            super.test();
        },
    };
    o96[2];
    return a86;
}
const v98 = f85();
const v99 = f85();
Math.tanh("1");
function F104(a106, a107, a108) {
    if (!new.target) { throw 'must be called with new'; }
    return arguments;
}
const v111 = new F104();
v111.e = Uint8ClampedArray;
function F112() {
    if (!new.target) { throw 'must be called with new'; }
}
2 >>> 2;
Math.cos(2);
try { BigUint64Array(v98, v99, -2.220446049250313e-16); } catch (e) {}
new BigUint64Array(215);
class C126 {
    #c = "toUpperCase";
    get a() {
        const v128 = this << "toUpperCase";
        const v129 = v128 ^ v128;
        let v130;
        try { v130 = v129(v129, this, v129, v129, v128, this); } catch (e) {}
        v130[v129] <<= 1.1922093890401552e+308;
        return "Tx";
    }
    constructor(a133, a134) {
        super();
        let v135 = 0;
        for (let i = 0; i < 5; i++) {
            v135 < 7;
            try {
                Math.#b;
            } catch(e139) {
            }
            v135++;
        }
    }
    static b;
}
new C126();
new C126();
function f144(a145, a146, a147) {
}
class C148 {
}
function F149(a151, a152, a153) {
    if (!new.target) { throw 'must be called with new'; }
    const v154 = this.constructor;
    try { new v154(a153, C148); } catch (e) {}
}
class C156 extends F0 {
    7;
    static #g = F0;
    constructor(a158, a159, a160) {
        super();
        F0 === 4096;
        v16[9];
        new Set();
        function f166() {
            const o169 = {
                __proto__: 2,
                ...2,
            };
            const v170 = new Uint16Array(o169, 2, 2);
            v170[1] = v170;
            return 2;
        }
        const o171 = {
        };
        new Proxy(v16, o171);
    }
    static c = -1;
    69;
}
new C156(v18, v16, Set);
const v175 = new C156(Set, v17, v18);
new C156(v175, v16, v16);
("aZ4O").normalize();
