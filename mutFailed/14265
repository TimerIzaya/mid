const v0 = [];
const v3 = new Float32Array(6);
let v6;
try { v6 = new BigUint64Array(62995, BigUint64Array, 6); } catch (e) {}
const v7 = new BigUint64Array(v6);
let v8;
try { v8 = v7.toReversed(); } catch (e) {}
let {"byteLength":v11,"c":v12,"length":v13,...v14} = v7;
v12[268435441] = v0;
v6 **= Float32Array;
%VerifyType(v0);
v0[v6] = Float32Array;
const v15 = new Float32Array(3);
v15[2] = v15;
/a*?xyz{1,32}?/gvdsy;
const v18 = /a(?!bbb|bb)c+/dimy;
try {
    v18.valueOf = v8;
} catch(e19) {
}
const o23 = {
    "execution": "async",
    "type": "major",
};
gc(o23);
const v25 = /a(?:b)/vdiy;
function f26(a27, a28, a29, a30) {
    const v31 = a27 ^ a27;
    ("Vre").charAt();
    const v35 = new Float32Array(a28);
    try { v31.indexOf(a29); } catch (e) {}
    for (let v37 = 0; v37 < 5; v37++) {
    }
    let [v38] = v35;
    return a29;
}
for (let v39 = 0; v39 < 10; v39++) {
    v39 ** v39;
    f26(v39, v39, f26, f26);
}
%OptimizeFunctionOnNextCall(f26);
f26(v25, v3, v7);
