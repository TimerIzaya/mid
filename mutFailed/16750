new Uint8Array(257);
1 !== 1;
new Uint32Array(1);
new Int8Array(6);
const v10 = [2.0];
try { v10.toString(); } catch (e) {}
[-1000000.0];
const v13 = [-1000.0,-1.0,-4.0,-2.2250738585072014e-308,0.4498534148659352,1.1238920827456947e+308,774237.3672800853,-3.0,1000000000.0];
try { v13.with(257, 257); } catch (e) {}
function F15() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 0;
}
const t13 = "undefined";
t13["256"] <<= 4.0;
class C27 {
    static #a;
    static n(a29, a30) {
        const v31 = super.d;
        try { v31(); } catch (e) {}
        return a29;
    }
    [1];
    static #a;
    static d;
    toString(a34, a35, a36, a37) {
        const v41 = new Uint8ClampedArray();
        Math.floor(-6 / -6);
        new Uint8ClampedArray(798, ...v41, eval());
    }
    static [1] = 255;
    [255];
    f = -65536;
}
const v49 = new C27();
new C27();
try { (-9007199254740992).log2(-9007199254740992); } catch (e) {}
Array(52572);
function f55(a56, a57, a58, a59) {
    const v60 = a56 / a56;
    const v61 = a57 < a57;
    const o68 = {
        m(a63, a64) {
            return v61;
        },
        n(a66, a67) {
            return a66;
        },
    };
    a57 **= v60;
    return a59;
}
for (let v69 = 0; v69 < 625; v69++) {
    f55();
}
const v71 = new C27();
Math.log1p(255);
function f74() {
    return f74;
}
function f75(a76, a77) {
    a77.then = f74;
    return a77;
}
let v78 = 1n;
new Date();
function F81(a83, a84, a85, a86) {
    if (!new.target) { throw 'must be called with new'; }
    const v87 = this.constructor;
    v87.prototype = v87;
}
v78--;
let v89 = -65536n;
let v91;
try { v91 = v49.m(v78, 10000n, 10000n, 1); } catch (e) {}
function f92(a93, a94, a95) {
    let v96;
    try { v96 = v91(a94); } catch (e) {}
    v96 = a95;
    v89 >>= a95;
    v49[10] = v78;
    ~268435440n;
    const o99 = {
    };
    function f100() {
        new Uint16Array(209);
        return 209;
    }
    -v71.f;
    return v89;
}
try { f92.bind(v13); } catch (e) {}
let v107 = f92(255, 255, v78);
v107--;
