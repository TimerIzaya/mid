const v2 = new Array(16);
const v4 = URIError();
v4.valueOf = Array;
const v5 = [601759695];
const v6 = [1073741824,1073741823,1376142744,1073741825];
let v9;
try { v9 = v6["find"](..."find", URIError, ...v5, ...v6, ...522675525n); } catch (e) {}
v9 <= v4;
new Array(370);
const v15 = [Array,16];
new Function("1532738280");
const v21 = new Float32Array(2);
const v23 = new Int32Array(v21, 2);
const v24 = v21;
v23.fill(...v24);
[v15,16];
[v2];
Object.defineProperty(Uint16Array, Symbol.iterator, { configurable: true, value: Array });
let v31 = new Uint16Array(Uint16Array, Uint16Array, Uint16Array);
let v32 = Uint8ClampedArray;
let v34 = "g";
({"d":v34,"length":v32,...v31} = "unscopables");
const v41 = new Int16Array();
Object.defineProperty(v41, Symbol.unscopables, { writable: true, configurable: true, enumerable: true, value: 1000 });
for (const v47 in v41) {
    Math.expm1(v47);
}
Uint8ClampedArray[1] = Uint8ClampedArray;
new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray);
0 * 0;
"p" + v32;
("128").fontsize();
class C59 {
    #m(a61, a62) {
        function f63() {
            return a62;
        }
        super[a62] = "f";
        %VerifyType(a62);
        return f63;
    }
    static c;
}
const v64 = new C59();
const v65 = new C59();
class C66 {
    p(a68) {
        this.g ^= this[8];
    }
    static #n(a71, a72, a73, a74) {
        class C75 {
            4;
            static a;
        }
        C75();
        C75();
        C75();
    }
    7 = v65;
    #a = v64;
}
const v79 = new C66();
v79.toString = URIError;
function F80() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.propertyIsEnumerable(v79); } catch (e) {}
}
new F80();
