function f1(a2) {
    return a2;
}
const v4 = new Float32Array();
v4[4294967295] = v4;
const v5 = new Map();
const v9 = !(77758918n >= 77758918n);
class C11 extends Map {
    static #f;
    constructor(a13, a14) {
        const v15 = this.__lookupGetter__;
        try { new v15(); } catch (e) {}
        const v18 = ~a14[2];
        function f22(a23, a24, a25, a26) {
            a23.length;
            a25++;
            const o32 = {
                n(a30, a31) {
                    return v18;
                },
            };
            return o32;
        }
        f22(v5, Uint8Array, f22);
        for (let v34 = 0; v34 < 625; v34++) {
            v34 >>> v34;
            f22(Uint8Array);
        }
    }
    toString(a39) {
        const v40 = super.size;
        v40 + v40;
        try {
            v5.#f;
        } catch(e43) {
            e43.a = e43;
        }
        const v44 = [-1000000.0,0.1600379490765781,-1.6243694690977962e+307,817210.0157459241,1.0,5.0,0.9202958446582343,-1.7976931348623157e+308,-382.2774365702321,-5.737866676165018e+307];
        class C46 {
            static #e;
            m(a48, a49, a50, a51) {
                v44.#e;
                a49.#e = -1;
            }
        }
        return a39;
    }
    [Map];
    #d;
    static [-1] = Map;
    set d(a60) {
        super.d = this;
    }
    g = -28821n;
}
try { C11(); } catch (e) {}
let v65;
try { v65 = new C11(); } catch (e) {}
const v66 = v65?.constructor;
const v70 = new Float64Array(6);
v70["toLocaleString"](Int32Array, 6);
try { new v65(); } catch (e) {}
let v74;
try { v74 = new v66(); } catch (e) {}
const v75 = new C11();
try { v75.keys(); } catch (e) {}
const v77 = new Map();
try { v77.toString(v74); } catch (e) {}
const v79 = new C11();
function f80() {
    return Map;
}
function f81(a82, a83, a84, a85) {
    a82 ^ a82;
    const v87 = a84 ^ a84;
    const v88 = a82?.constructor;
    try { new v88(v87); } catch (e) {}
    try { new v88(); } catch (e) {}
    try { a84.delete(a83); } catch (e) {}
    a85 & a85;
    const o98 = {
        "g": a83,
        19: v77,
        "c": a84,
        ...a82,
        "e": v5,
        "b": a85,
        [C11](a94, a95, a96) {
            super[f80()] = v5;
            return f80;
        },
        "h": Map,
        "d": Map,
    };
    function f100(a101, a102, a103, a104) {
        for (let v106 = 0; v106 < 5; v106++) {
            v106++;
            arguments | v106;
        }
        const v109 = typeof 522675525n;
        ("undefined").codePointAt();
        v109 === "undefined";
    }
    o98[19];
    ([Float32Array])["concat"]().pop();
    o98[19] = o98;
    return o98;
}
const v119 = f81?.constructor;
try { new v119(v9); } catch (e) {}
let v121;
try { v121 = f81(-28821n, C11, -28821n, f81); } catch (e) {}
v121[19] = v121;
f81(v5, 61805n, v77, -28821n);
const v123 = f81(v79, 61805n, v79, -28821n);
v123[19] = v123;
f81(v77, v75, v77, -28821n);
1000 | 1000;
const v128 = new Uint8ClampedArray(1000);
v128[390] = v128;
const v130 = v128.includes(undefined);
v130 || v130;
