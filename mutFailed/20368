[6.473470564063213,1000000.0,1000.0];
const v4 = [-511269.75623097026,-1000000000000.0];
v4[1] = v4;
([NaN,833777.7675598687,5.0,-0.5104709181479432,9.993255105022111e+307,1000000000000.0,2.0,-1000000000.0,377.1014796929121,5.0])[5];
const v7 = [-1073741824,39901,-252051855,-62435,9,19313,-4096,7];
let v8;
try { v8 = v7.splice(-1.7976931348623157e+308, v7); } catch (e) {}
v7[7] = v7;
const v9 = [13,-8,129,-12,1073741823,-6];
const v10 = [-810218527,34651,52163,127,-18232,-1];
~7;
let v14 = 13077;
v14--;
let v16 = -851989.090059624;
v16++;
const v20 = -4.985042137559354 - -4.985042137559354;
v20 << v20;
const v22 = [];
try { v22.findLast(v10); } catch (e) {}
const v24 = [v22];
try { v24.toLocaleString(); } catch (e) {}
class C27 extends Map {
}
try { new C27(); } catch (e) {}
const v29 = new v8();
try { v29.get(Map); } catch (e) {}
const v31 = new C27(v24);
const v32 = v31?.constructor;
try { v32.apply(v9, v32); } catch (e) {}
try { new v32(); } catch (e) {}
const v35 = new C27(v31);
const v37 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
Uint32Array.BYTES_PER_ELEMENT;
const v40 = new Uint32Array(v22);
const v42 = [601759695];
try { v42.slice(v42, v29); } catch (e) {}
const v44 = [1073741824,1073741823,1376142744,1073741825];
function f46(a47, a48, a49, a50) {
    const v51 = a47.toLocaleString();
    try { v51.link(v51); } catch (e) {}
    const v53 = a47.constructor;
    v53.prototype = v53;
    function f54() {
        try { ("pop").anchor(v4); } catch (e) {}
        let v57 = v42["pop"]();
        v57++;
        return v57;
    }
    f54();
    let v60;
    try { v60 = v53(); } catch (e) {}
    let v61;
    try { v61 = v53(); } catch (e) {}
    for (let v62 = 0; v62 < 5; v62++) {
        let v64;
        try { v64 = ("p").trimEnd(); } catch (e) {}
        try { v64.toLocaleLowerCase(); } catch (e) {}
        v40["p" + v62] = v62;
    }
    const v68 = arguments.length;
    v68 ^ v68;
    const v70 = v68 >>> v68;
    v70 >>> v70;
    Object.defineProperty(v29, "e", { configurable: true, enumerable: true, value: f46 });
    const v73 = v31["toString"](a49, ...v35, BigUint64Array, ..."toString", a48);
    v73[9] = v73;
    let v74;
    try { v74 = v73.italics(); } catch (e) {}
    v74[11] = v74;
    Symbol.iterator = Symbol;
    Symbol.prototype;
    const v77 = v61.toStringTag;
    Symbol.for(v77.description);
    v31[v77] = v77;
    function f81() {
        const t75 = "Vre";
        t75[1] = "Vre";
        const v83 = ("Vre").charAt();
        try { v83.codePointAt(v68); } catch (e) {}
        v83[0] = v83;
        const v85 = v83.lastIndexOf();
        const v86 = ("Vre").codePointAt(v68);
        v86 - v86;
        let v88 = v86 ^ v86;
        v88++;
        let v90 = Float64Array;
        v90 = a48;
        let v91 = v37.length;
        v91++;
        try {
            v44.forEach();
        } catch(e94) {
            const v95 = e94.message;
            try { v95.italics(); } catch (e) {}
            e94.stack = e94;
        }
        const o109 = {
            "c": -4294967297n,
            "EPSILON": v42,
            valueOf(a98, a99) {
                return BigUint64Array;
            },
            1073741824: v40,
            [-4294967297n](a101, a102, a103, a104) {
                eval();
            },
            o(a108) {
                return v85;
            },
            256: a50,
        };
        return v29;
    }
    try { f81(); } catch (e) {}
    f81();
    v73.d = Array;
    const v113 = Array(v60);
    let v114;
    try { v114 = v113.findLast(Symbol, v37); } catch (e) {}
    v113.unshift();
    const v118 = Int8Array.of().join(Array);
    try { v118.concat(Int8Array); } catch (e) {}
    const v120 = new Int8Array();
    try { v120.toSorted(v74); } catch (e) {}
    v120.c = v120;
    const v122 = v120.buffer;
    const v123 = v122?.slice;
    try { new v123(v122, v122); } catch (e) {}
    v122.maxByteLength;
    const v126 = v122.slice(v68, a50);
    let v127;
    try { v127 = v126.slice(C27, v68); } catch (e) {}
    try { v127.slice(f54, f54); } catch (e) {}
    try { Int32Array("toString", v114, v68); } catch (e) {}
    const v131 = new Int32Array(Symbol, v68, a50);
    const v132 = v131[3];
    v132 + v132;
    try { ("find").padEnd(v132); } catch (e) {}
    let v136;
    try { v136 = v44["find"](..."find", a50, ...v42, ...v44, ...522675525n); } catch (e) {}
    return v136;
}
for (let v137 = 0; v137 < 10; v137++) {
    v137 >>> v137;
    v137 - v137;
    f46(v40);
}
%OptimizeFunctionOnNextCall(f46);
f46(v42);
