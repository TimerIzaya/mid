const v2 = new Array(2);
const v5 = new Float64Array(9);
class C7 {
    constructor(a9, a10) {
        function f11(a12) {
            function f13(a14) {
            }
            const v17 = new Uint16Array(1024);
            v17[7] = v17;
            return C7;
        }
        const o20 = {
            "type": "function",
        };
        new Worker(f11, o20);
    }
}
216 & 216;
const v24 = new Float32Array(216);
v24[95] = v24;
let v27;
try { v27 = new Uint16Array(Uint16Array, 9, 2); } catch (e) {}
new Uint16Array(16);
const v29 = /(?<a>.)\k<a>?/vdimsy;
class C30 {
    set f(a32) {
        v2.length;
        const o35 = {
            "apply": Array,
            "call": Array,
            "isExtensible": Array,
            "preventExtensions": Array,
            "set": Array,
            "setPrototypeOf": Array,
        };
        new Proxy(Array, o35);
    }
    constructor(a39) {
        const v40 = this?.constructor;
        try { new v40(this); } catch (e) {}
        function f42() {
            return f42;
        }
        Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f42 });
    }
}
const v43 = new C30();
const v44 = v43.length;
const v45 = v44?.constructor;
let v46;
try { v46 = new v45(9); } catch (e) {}
let v47;
try { v47 = v5.copyWithin(v27, 216, v45); } catch (e) {}
try { v47["p"](v46, C7); } catch (e) {}
Object.defineProperty("p", "f", { writable: true, configurable: true, enumerable: true, value: Float64Array });
Object.defineProperty(C30, 536870887, { writable: true, enumerable: true, set: Array });
v29.exec(v44);
