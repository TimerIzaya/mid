new Int16Array(658);
let v4 = Uint8ClampedArray;
function f5(a6, a7) {
    const v10 = ++a6;
    v4++;
    a7--;
    Math.imul(v10, a7 * v10);
    ++v4;
    return Math.atan(268435440);
}
v4.valueOf = f5;
new v4(1665);
10 + 10;
function f21() {
    return f5;
}
Object.defineProperty(Int8Array, Symbol.toPrimitive, { enumerable: true, get: f21 });
try { new Int8Array(Int16Array, Int16Array, Int8Array); } catch (e) {}
const v25 = new Int8Array(10);
v25.BYTES_PER_ELEMENT;
const v28 = [null,658,Int16Array];
try { v28.splice(10, v4); } catch (e) {}
const v31 = [[v28,Int16Array],null];
try { v31.at(Int8Array); } catch (e) {}
const v36 = [0.0,929.5949523232657,-1e-15,726.5380916090323,-4.0,-1e-15,2.2250738585072014e-308,-523.120508415708,421.61672852170136,0.5459629191822911];
try { v36.sort(0.06014031100068884); } catch (e) {}
function f38(a39, a40, a41) {
    a41[Symbol.toPrimitive] = f21;
    const o47 = {
        [a41]: a40,
        "g": 1024,
        set a(a46) {
        },
        "a": -2.220446049250313e-16,
        "g": a39,
    };
    return o47;
}
f38[Symbol.toPrimitive] = f21;
f38(f38(0.06014031100068884, f38(6.873822427940361, f38, f38), 6.873822427940361), v36, 6.873822427940361);
