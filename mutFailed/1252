function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = F0;
    try {
        this.a = -60105;
    } catch(e3) {
        try {
            this.e = this;
        } catch(e4) {
        }
        try {
            this.fuck("source", -60105);
        } catch(e7) {
        }
    }
}
const v8 = new F0();
const v9 = new F0();
const v10 = new F0();
[2,4096,1737276602,-904921168,48737,-31945033,1020098506,7,145191567,4294967297];
const v12 = [0,6,-31630];
const v13 = [0,-1924423128,64,0,-1,4,9007199254740990,7,-9007199254740992,-2147483648];
class C18 extends F0 {
    static {
        let v20;
        try { v20 = this(1024, this, v12, v12, v9); } catch (e) {}
        function F21(a23, a24) {
            if (!new.target) { throw 'must be called with new'; }
            function f25(a26, a27) {
                const v29 = [63570];
                try {
                    new BigInt64Array(v29);
                } catch(e32) {
                }
                return v10;
            }
            this[Symbol.toPrimitive] = f25;
            function f35() {
                function* f36(a37, a38, a39, a40) {
                    return a38;
                }
                return a23;
            }
            a23.valueOf = f35;
            a24++;
            try {
                this.e = a23;
            } catch(e42) {
            }
            try {
                this.b = v20;
            } catch(e43) {
            }
        }
        const v44 = new F21(v9, 0);
        v44.e = v44;
        const v45 = new F21(v20, 0);
        function f46() {
            C18[v10] = C18;
            -25283n >> (-25283n && -25283n);
            return -25283n;
        }
        v45.valueOf = f46;
        new F21(v45, v45);
    }
}
try { C18.call(v10); } catch (e) {}
new C18();
new C18();
const v54 = [-6,129,-911213823,-8265,9007199254740990,65536,410,5];
[-4564,-7438,268435456,-4294967295,2,-256,-9,2147483648,7,-4294967296];
const v56 = [6,-1355842668,-2147483649,64];
try { v56.with(v13, v13); } catch (e) {}
new Uint32Array(1676);
3444 / 3444;
BigUint64Array.prototype = BigUint64Array;
new BigUint64Array(3444);
const v67 = new Uint32Array(13);
v67[8] = v67;
const v68 = new C18();
v68.a;
const v70 = [];
try { v70.sort(v56); } catch (e) {}
Float32Array.e = v8;
Float32Array.e = Float32Array;
("has").matchAll("has").next();
const v78 = new Uint16Array();
const v79 = v78[877];
let v80 = 15135;
const v81 = v80--;
gc();
const v85 = new BigInt64Array();
const v86 = v85.entries();
try { v86.__defineSetter__(v79, v81); } catch (e) {}
const v88 = new Float32Array(4061, 4061);
class C90 extends v70.constructor {
    static #a;
    #f;
    static #g = v54;
    static g = undefined;
    static f;
    [4061] = v88;
    3;
}
try { new C90(); } catch (e) {}
new C90();
