const v5 = new Int16Array(128);
v5[10] = 15;
try { Math.abs(15); } catch (e) {}
-268435456 <= -268435456;
const v12 = 14 >> -9;
function f13(a14) {
    return a14;
}
class C15 extends f13 {
    2147483649 = 14;
}
~15;
const v17 = v12 << -3.834426523657857;
v17 >> v17;
Math.atan(-268435456);
const v22 = new Int32Array(8);
const v23 = v22?.constructor;
try { new v23(14, C15, C15); } catch (e) {}
new Int16Array(3246);
const v28 = 8 < -268435456;
try {
    Math.atanh(undefined);
} catch(e31) {
}
v28 ? 8 : -268435456;
-812934162;
const v36 = -9007199254740992;
26103 != 26103;
function f39() {
    return f39;
}
class C40 extends f39 {
}
C40.toString = f39;
class C41 extends C40 {
}
C41[Symbol.toPrimitive] = f39;
C41.length = C41;
function f46(a47) {
    class C48 {
    }
    new C48();
    return v36;
}
Uint8Array.valueOf = f46;
Uint8Array.BYTES_PER_ELEMENT;
function f51(a52, a53, a54, a55) {
    a52.BYTES_PER_ELEMENT;
    let v57;
    try { v57 = a52(a55, 3, 3); } catch (e) {}
    a53 & a53;
    const v59 = -9 | C41;
    v59 * v59;
    a52 / a52;
    a53 < a52;
    const o66 = {
        n(a64, a65) {
            return a55;
        },
    };
    return v57;
}
for (let v67 = 0; v67 < 500; v67++) {
    f51(Uint8Array);
}
