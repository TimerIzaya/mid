const v0 = [];
class C1 {
    p() {
        super[-4096] = -4096;
        super[this] = -10 * v0;
        v0["every"](v0, "every");
        return v0;
    }
    #d = v0;
    #f;
    f;
    static 5;
    #b = v0;
    static #a;
}
const v9 = new C1();
const v10 = new C1(v9);
const v11 = new C1();
const v12 = [v11,v11];
let v14 = 2048;
new Int8Array(Array(v14));
const v18 = [v11,v10];
new Set();
const v21 = [286977509,536870889,-380982641,1073741825,-14496,-9223372036854775807];
const v22 = [64918,-21903,65536,-65537,-9007199254740991,268435440];
function f23(a24, a25, a26, a27) {
    const v28 = /(?:a*)+q(?<a>.)/guds;
    function f29(a30) {
        return a24;
    }
    for (let [i38, i39] = (() => {
            v21.toLocaleString(f29);
            for (let v33 = 0; v33 < 5; v33++) {
                v22[a25];
                v28["exec"]();
            }
            return [0, 10];
        })();
        (() => {
            const v40 = i38 < i39;
            !a24;
            return v40;
        })();
        (() => {
            i39--;
            const v46 = Symbol.toPrimitive;
            const o48 = {
                [v46]() {
                },
            };
        })()) {
        for (let v51 = 0; v51 < 5; v51++) {
        }
    }
    return a25;
}
[v11,C1,v12,v12];
Array >> Array;
const v55 = v14++;
class C56 {
    static [v55];
}
new Float32Array(7);
const t63 = 1000n;
new t63(179);
new Float32Array(1972);
class C69 extends Int16Array {
    constructor(a71, a72, a73, a74) {
        super();
        function f75(a76) {
            function f78(a79) {
                delete a71[a79];
                return a72;
            }
            this.onmessage = f78;
            return Int16Array;
        }
        const o83 = {
            "type": "function",
        };
        new Worker(a71, o83);
    }
}
const v85 = new C69(Int16Array, C69, C69, Int16Array);
new C69(v85, v18, v85);
