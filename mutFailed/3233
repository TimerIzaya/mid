[-2.0,-51528.454200266046,-1000000000.0,8.084151131528441e+307,261.180666273415,900.9638989514028,-3.1923105046537685,0.0,-1000000000.0,3.0];
const v1 = [274.5556693697515,1000000.0,40.278291847126866,1e-15];
[-2.2250738585072014e-308,-384.5225094223965,-0.0,-491.61329444787174,1.7976931348623157e+308];
new BigInt64Array(187);
new Int8Array(140);
new BigInt64Array(-4294967297, BigInt64Array, BigInt64Array, v1);
const v15 = Reflect.iterator;
const t7 = "string";
t7[v15] = v15;
new Uint16Array(4294967295, 4294967295);
const v22 = new Float32Array(7);
const o26 = {
    m() {
        const o25 = {
        };
    },
};
const v28 = new Int32Array();
function F29(a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    const v34 = this?.constructor;
    try { new v34(Uint16Array, a33, a33); } catch (e) {}
    a31 * a31;
    a33++;
    this.d = a31;
    this.g = Int32Array;
}
new F29(F29, 256, 256);
const v39 = new F29(256, v28, 4294967295, BigInt64Array, Reflect, 256);
const t29 = v39.g;
new t29(Uint16Array, v22, 7);
class C43 {
    #a;
    constructor(a45, a46, a47) {
    }
}
new F29(256, Float32Array);
Math.asinh();
const v53 = new DataView(DataView, DataView);
v53.h = v53;
Math.sin();
