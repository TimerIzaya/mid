class C5 {
    get e() {
        try {
            super.setHours(this, this, 2.9788133947234406e+306, this, "MV");
        } catch(e8) {
        }
        return ("MV").__proto__;
    }
    static #f = 2.9788133947234406e+306;
    static 8;
    static #b;
    e = 2.9788133947234406e+306;
    static 65535 = 1e-15;
}
const v10 = new C5();
try { v10.toLocaleString(); } catch (e) {}
const v12 = new C5();
function f13(a14, a15) {
    v10.d = 0.4962403185419135;
    return "-28331";
}
v12.toString = f13;
const v17 = new C5();
v17.e = v17;
const v21 = new Date(-4.0);
Object.defineProperty(v21, 1024, { configurable: true, value: v10 });
function F25(a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
}
new F25(5, 5);
Object.defineProperty(Array, "prototype", { writable: true, value: "MV" });
let v32;
try { v32 = Array.bind(-195224844); } catch (e) {}
const v34 = [1024];
const v35 = Reflect.construct(Date, v34, v32);
const v36 = v21[v34];
const v39 = new Uint8Array(10);
let v40;
try { v40 = v39.reduce(129); } catch (e) {}
function f41() {
    let v44 = -65535;
    const v45 = v44 / v44;
    const o82 = {
        next() {
            v44--;
        },
        m(a49) {
            try { a49.next(); } catch (e) {}
            const o51 = {
            };
            o51.e = v35;
            try {
                o51.e = v44;
            } catch(e52) {
                const v56 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v56, o51);
            }
            try { v36["getDate"]("", Float64Array); } catch (e) {}
            try {
            } catch(e60) {
            }
            let v62;
            try { v62 = ("EV").link(v45); } catch (e) {}
            let v63 = 0;
            class C64 {
                o(a66, a67, a68, a69) {
                    return v63;
                }
            }
            const v72 = new Int8Array(3938);
            let v73 = 3;
            let v75 = 0 >> 0;
            [...v73] = v72;
            try {
                let v76 = 0;
                do {
                    ({"c":v40,"d":v63,...v75} = v62);
                    v76++;
                } while (v76 < 5)
                const o80 = {
                };
            } catch(e81) {
            }
        },
    };
    try { o82.m(o82); } catch (e) {}
    class C85 {
    }
    const v86 = new C85();
    v86[Symbol.iterator] = Date;
    const v90 = new Float32Array(v86, "nt", Float32Array);
    v90.toString = f13;
    const t92 = "nt";
    const v91 = delete t92[v90];
    let v92;
    try { v92 = v86.floor(v91); } catch (e) {}
    for (const v93 in v92) {
    }
}
f41();
f41();
function f96(a97, a98, a99, a100) {
}
function f101(a102, a103) {
    const o106 = {
        set b(a105) {
        },
    };
}
function F107(a109, a110, a111) {
    if (!new.target) { throw 'must be called with new'; }
}
try {
} catch(e112) {
}
function f113(a114, a115, a116, a117) {
    const o126 = {
        "e": a117,
        [a117](a119, a120) {
            [2.0,-1.4136594990615852e+308,990839.6347160602];
            [1.7402501030817658e+308,0.4407518532850566];
            const o125 = {
                "execution": "async",
            };
        },
    };
    return o126;
}
const v127 = f113(v17, v10, v17, v12);
v127.e = v127;
function f128(a129, a130, a131) {
    const o134 = {
        get c() {
            const o133 = {
            };
        },
    };
}
function f135() {
    const o138 = {
        set e(a137) {
        },
    };
}
class C139 {
}
function f141() {
    return "symbol";
}
[488377.59735962795,-1e-15,-2.0,-2.2250738585072014e-308,-2.2250738585072014e-308,3.6042447008365066];
[357912.78893197514,934.1194665621135,-5.0,4.503001149985243e+307,132.693026250324];
[918371.5681374874,203.7225333383035,-709.4772725465527,0.7671047739569937,1.6676510375963023,1000000.0,4.742632022863681,5.117168821240081e+307];
let v151 = 333;
const v152 = [1073741824,1073741823,1376142744,1073741825];
function f153(a154, a155, a156, a157) {
    let v158 = a156 && a156;
    arguments[3] = a156;
    arguments[3] = arguments;
    ({"h":v158,"length":a154,...v151} = v152);
    ("find").startsWith(a157);
    for (let v162 = 0; v162 < 5; v162++) {
    }
}
for (let v163 = 0; v163 < 5; v163++) {
    f153();
}
f153();
%OptimizeFunctionOnNextCall(f153);
f153();
