new Map();
function f6() {
    const v7 = [f6];
    v7.constructor = f6;
    class C9 extends v7.constructor {
    }
    const v10 = new C9();
    const v11 = v10.fill();
    try { v11.map(); } catch (e) {}
    return f6;
}
const v13 = f6();
new Int16Array(129);
new Float64Array(3849);
function f24(a25, a26, a27, a28) {
    const v29 = ++a27;
    const v30 = v29 >>> v29;
    let v31 = v29 * v29;
    const v32 = v31--;
    const o33 = {
    };
    const v34 = o33[2];
    try { v34.hasOwnProperty(v32); } catch (e) {}
    return v30;
}
new Uint32Array(256);
function f39() {
    return f6;
}
function f40(a41) {
    ([1000000.0,0.218433446981681,-5.0,-919787.2036172998,872389.6270716691]).pop;
}
Object.defineProperty(Float32Array, 2, { writable: true, configurable: true, enumerable: true, get: f39, set: f40 });
const v44 = new Float32Array(Float32Array, Float32Array, Float32Array);
new v13();
const o51 = {
    get a() {
        eval("-9007199254740990");
        return 6;
    },
};
const v54 = new BigInt64Array(10);
function f55() {
    return f55;
}
class C56 extends f55 {
    constructor(a58, a59, a60, a61) {
        new Float32Array();
        Math.pow(-2.220446049250313e-16, 9906);
        const v69 = [a59];
        Reflect.apply(v44.toLocaleString, v54, v69);
        return f6;
        Float32Array.bind();
        class C74 {
        }
        [C74,C74];
    }
}
try {
    f55("-9007199254740990", "-9007199254740990");
    class C78 extends Int8Array {
        [129];
    }
    const v79 = [f55];
    try {
        const v82 = new BigUint64Array(4);
        [v82];
    } catch(e84) {
    }
    new C56(Int8Array, v79);
} catch(e86) {
}
