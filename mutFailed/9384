const v3 = ["n","3","3","64"];
["n"];
["n","3",v3];
const v9 = /abc+r\P{Any}*/imsy;
/xyz{0,1}?[\cz]f*/udm;
/(Sy\P{Decimal_Number})/gums;
new Int8Array(243);
new Float64Array(1238);
new Uint8ClampedArray(257);
const v25 = new Uint32Array();
function f26() {
    function f27() {
        Math.sinh(Uint8ClampedArray);
        const v32 = 10000 / Uint8ClampedArray;
        !v9;
        const v35 = +10000 << v9;
        Math.tanh(v32);
        return 10000 << v35;
    }
    return f27;
}
Object.defineProperty(v25, "valueOf", { configurable: true, enumerable: true, get: f26 });
Object.defineProperty(v25, "constructor", { writable: true, configurable: true, enumerable: true, value: Symbol });
function f39(a40, a41, a42, a43) {
    a40[Symbol.toPrimitive] = Symbol;
    const v46 = a40.keys;
    try { v46(); } catch (e) {}
    function f48() {
        return Uint32Array;
    }
    a40.constructor = f48;
    const v49 = a40.constructor;
    v49.valueOf = f26;
    ("64").normalize();
    function F51(a53, a54) {
        if (!new.target) { throw 'must be called with new'; }
        class C55 {
            static {
                if (this) {
                }
            }
        }
    }
    if (a40 > v49) {
        const t44 = "4294967296";
        t44.toString = a42;
    }
    const o65 = {
        [-4294967297n](a59, a60, a61, a62) {
            eval();
        },
    };
    return a40;
}
for (let v66 = 0; v66 < 10; v66++) {
    f39(v25);
}
%OptimizeFunctionOnNextCall(f39);
f39(5);
