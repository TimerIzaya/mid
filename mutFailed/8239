const v0 = [];
2 - 2;
const v7 = new Uint32Array(2);
try { v7.indexOf(v0); } catch (e) {}
const v11 = new Uint32Array(64);
BigInt64Array.name = BigInt64Array;
const v14 = new BigInt64Array(243);
try { v14.entries(); } catch (e) {}
new Map();
try { new Uint8ClampedArray(6.478325372259107, 202, 6.478325372259107); } catch (e) {}
new Uint8ClampedArray(202);
new BigUint64Array(2864);
const v27 = new BigUint64Array(210);
new Set();
116 >> 116;
new Uint16Array(116);
Int16Array[0] = Map;
try { Int16Array.from(Int16Array); } catch (e) {}
const v37 = new Int16Array(512);
try { v37.toLocaleString(); } catch (e) {}
try { new Int32Array(Int32Array, Int32Array, v11); } catch (e) {}
new Int32Array(9);
317008.8127941969 / 317008.8127941969;
class C47 {
}
try { new C47(); } catch (e) {}
function F49(a51, a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
}
try { new F49(Uint32Array, 317008.8127941969, Uint16Array, v7); } catch (e) {}
const v56 = new F49();
const v57 = v56?.__defineGetter__;
try { new v57(Uint16Array, v27); } catch (e) {}
new F49(v56, F49, F49, v56);
const v60 = [7,128];
const v61 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
const v62 = v61[4];
v62 | v62;
const v64 = [40213,422333454,47387,65536,-51830];
v64[2] = v64;
0 - 0;
8 / 8;
gc.prototype = gc;
try { gc(); } catch (e) {}
gc();
const t44 = [8.360030709333259,416819.70671931445,1000.0,-1.0513464134302462e+307,2.2250738585072014e-308,-999.1393293497049];
t44.length = 1;
const v77 = /xyz{1,32}?/gusy;
class C78 {
    268435440 = v77;
}
new BigInt64Array();
try { ("boolean").repeat(1000000.0); } catch (e) {}
const t53 = "toString";
t53[6] = "toString";
"toString" == "toString";
let [,...v86] = [1e-15,1.0,-3.0,1.43935350979979e+308,-0.0];
const v87 = v86?.find;
try { new v87(Int16Array); } catch (e) {}
function f89() {
    const o93 = {
        ...1.0,
        set b(a92) {
        },
    };
    return o93;
}
f89().b;
const v96 = ("boolean").split("toString");
try { v96.values(); } catch (e) {}
8 < "boolean";
Uint8ClampedArray.prototype;
const v102 = new Uint8ClampedArray();
let v103;
try { v103 = v102.findLast(v27); } catch (e) {}
try { v102.reduceRight(v102); } catch (e) {}
try { ("I").trimRight(); } catch (e) {}
("I").localeCompare();
-256 >> -256;
function f109(a110, a111) {
    a111.toString = f109;
    a111 << a111;
    a111--;
    new Float32Array([-37102.6674218484,-969411.635186719,-1.3592557640113297e+308,0.9054806195219168,1000000000000.0,-0.0,-3.0,-0.0]);
    class C117 {
        static {
            try { new this(); } catch (e) {}
            this < this;
        }
    }
    C117.prototype = C117;
    a110 | a110;
    const o157 = {
        "c": 15135,
        "a": 15135,
        "d": a110,
        __proto__: a111,
        "g": -1628878962,
        "type": "boolean",
        "a": a110,
        set b(a123) {
        },
        "g": 15135,
        "b": a111,
        get f() {
            super[1000000.0] = this;
            Math.exp(-359.60295377780096);
            const v128 = [-503399.81061701436,0.07820891042711386,-100.04924869632453,-Infinity];
            [[[-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757],v128,v128]];
            try {
                new Int8Array(9);
                function f135() {
                    return f135;
                }
                new Uint16Array();
                !0.8843420658768774;
                function F139() {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v142 = new F139();
                const o150 = {
                    [v142](a145, a146, a147, a148) {
                        "D2z" < a145;
                    },
                };
                const o152 = {
                    [f135]() {
                    },
                };
                [o152];
                v61.copyWithin(8, -268435456, -256);
            } catch(e156) {
            }
            return this;
        },
    };
    o157[1000000] = 2864;
    o157.g = o157;
    return o157;
}
let v158;
try { v158 = f109(15135, 15135); } catch (e) {}
v158[1000000] = v103;
v158.a = v158;
v158[1000000];
f109(925.1427495594241, v60);
const v161 = f109(317008.8127941969, -4);
v161.a = v161;
f109(1000000.0, v61);
268435441n ^ 268435441n;
268435441n - 268435441n;
const v167 = new BigUint64Array();
try { v167.entries(); } catch (e) {}
v167[2445191368] = 268435441n;
