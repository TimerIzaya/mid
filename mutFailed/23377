const v0 = /aab\b\d\bcd/gum;
const v1 = /abc|def/g;
const v2 = /ggBU/uisy;
function f3() {
    const v4 = [];
    const v6 = new Date();
    const v7 = v6.setMilliseconds(v6);
    ([v4]).with(v4, v7).toLocaleString();
    return v2;
}
new Set();
const v14 = [0.71465078532354,-2.2250738585072014e-308,1.0,-2.2250738585072014e-308,2.2250738585072014e-308,-620.8633845139873,0.0,-1.0,3.3358719500528515];
const v15 = [-7.462188141503825,-3.070207201828062e+307,0.6861416475431791,1000000000.0,-3.0];
function F16() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v18 = 0; v18 < 500; v18++) {
        const v23 = ("p" + v18).fontcolor(v18).trimLeft()[12];
        ("p")[v23.substring(v23, v23)];
    }
}
const o31 = {
    ...v14,
    [Set](a28, a29, a30) {
    },
    "b": v15,
};
[-11,o31];
const v33 = [-20301,64,49477,536870889,6,4294967296,-1024,-9223372036854775808,129];
[5,2147483649,-62973,22297,65536,-9007199254740990];
const v35 = [3,-1360574132,64,-9007199254740991];
function f36(a37, a38) {
    const o99 = {
        "a": a38,
        "b": v1,
        get e() {
            function f40(a41) {
                return Set;
            }
            class C42 extends f40 {
                static #e = Set;
                static {
                    for (let v44 = 0; v44 < 25; v44++) {
                        v44 >>> v44;
                        const v46 = [601759695];
                        const v47 = [1073741824,1073741823,1376142744,1073741825];
                        function f49(a50, a51, a52, a53) {
                            try { new a50(); } catch (e) {}
                            a51 & a51;
                            ~v0;
                            try { new v35(); } catch (e) {}
                            const v58 = a52 << a52;
                            v58 % v58;
                            function f61() {
                            }
                            const v63 = new Int8Array();
                            const v66 = BigUint64Array * 536870887;
                            let v67 = v66 - v66;
                            v67++;
                            const v69 = v66 ** v66;
                            try { Number.parseInt(v67, v67); } catch (e) {}
                            let v72;
                            try { v72 = new Number(v2); } catch (e) {}
                            try { v72.valueOf(); } catch (e) {}
                            Number.isNaN(v69);
                            function f75(a76, a77) {
                                return Number;
                            }
                            v46["unshift"]();
                            v46.push(0.0);
                            const v82 = [-1000000.0,-1.0,952.4163692749257,41232.51719836402,-2.220446049250313e-16,869.918809614255,0.6566814488589754,-2.299816654271874,1000000000.0];
                            for (let v83 = 0; v83 < 5; v83++) {
                                function f84() {
                                    let v85 = -268435456;
                                    v85 ^ v85;
                                    v85++;
                                    const o88 = {
                                        __proto__: v82,
                                    };
                                    try { o88.every(); } catch (e) {}
                                    return v66;
                                }
                                f84();
                                %OptimizeFunctionOnNextCall(f84);
                            }
                            try { f75(); } catch (e) {}
                            v63.buffer.__defineGetter__;
                            %OptimizeFunctionOnNextCall(f61);
                            try { v47["find"](..."find", a53, ...v46); } catch (e) {}
                            const o96 = {
                            };
                        }
                        for (let v97 = 0; v97 < 5; v97++) {
                            f49(this, v97, v97);
                        }
                    }
                }
                #b = Set;
            }
            return a37;
        },
    };
    return o99;
}
Array(Array);
[-6.672391061426152e+307];
function f104() {
    const v106 = v14["pop"]();
    ~v106;
    -v106;
    return DataView;
}
f104();
f36(v1, f3);
const v111 = f36(v1, v1);
f36(v2, v33);
const v115 = new v111(1024);
v115[3];
for (let v117 = 0; v117 < 25; v117++) {
}
