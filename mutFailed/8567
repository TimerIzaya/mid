function f3() {
    return 268435439;
}
f3.toString = f3;
const v4 = f3?.toString;
let v5;
try { v5 = new v4(); } catch (e) {}
try { v5.propertyIsEnumerable(3); } catch (e) {}
const v7 = [-65535,-65535];
v7[1] = v7;
const v8 = [3,268435439];
let v9;
try { v9 = v8.fill(f3); } catch (e) {}
v9[1] = v9;
const v10 = [f3];
class C11 {
    constructor(a13, a14, a15, a16) {
        this[2611] = this;
        try { a14.constructor(); } catch (e) {}
        try { a13.toSorted(v8); } catch (e) {}
        a14 + a14;
        try {
            super.n(-65535, a15);
        } catch(e21) {
            const v22 = e21?.constructor;
            v22.prototype = v22;
            let v23;
            try { v23 = new v22(e21); } catch (e) {}
            v23.b = v23;
        }
    }
    [268435439];
    static #g = v8;
    static e;
    2611;
}
const v24 = C11?.apply;
try { new v24(3, v7); } catch (e) {}
try { new C11(-65535, v5, v7, v7); } catch (e) {}
C11.e = C11;
const v27 = new C11(v8, 3, v10, 268435439);
v27[268435439] = v27;
const v28 = v27[268435439];
const v29 = v28 & v28;
const v30 = new C11(v10, 268435439, v10, 3);
v30[268435439] = v30;
const v31 = new C11(v30, 3, v10, 268435439);
v31[268435439] = v31;
v31[268435439] = v31;
v31[268435439] = v31;
const v32 = [601759695];
const v33 = [427812215,61195,-2147483647,4096,-2147483647,30905];
try { v33.map(v27); } catch (e) {}
522675525n / 522675525n;
function f37(a38, a39, a40, a41) {
    try { a38.map(268435439); } catch (e) {}
    a38[1] = a39;
    a38[3] = a38;
    const v43 = a41++;
    v43 | v43;
    function f45() {
        let v47 = -1073741824;
        v47--;
        let v49 = -268435456;
        const v50 = v49++;
        v50 / v50;
        const o55 = {
            "h": v47,
            ..."Vre",
            valueOf(a53, a54) {
                return 522675525n;
            },
            ..."Vre",
            "c": a41,
            5: v47,
            6: v49,
        };
        return a41;
    }
    let v56;
    try { v56 = f45(); } catch (e) {}
    v56 | v56;
    try { f45(); } catch (e) {}
    const v59 = f45();
    v59 ^ v59;
    v59 & v59;
    %OptimizeFunctionOnNextCall(f45);
    try { ("find").anchor("find"); } catch (e) {}
    let v64;
    try { v64 = v33["find"](..."find", a41, ...v32, ...v33, ...522675525n); } catch (e) {}
    const v65 = v64 <= a40;
    v65 && v65;
    return a40;
}
try { new f37(3, v27, v27, v29); } catch (e) {}
f37.arguments;
const v69 = f37(v33, v33, v32, 522675525n);
v69[0];
try { v69.findIndex(v32); } catch (e) {}
for (let v72 = 0; v72 < 5; v72++) {
    v72 + v72;
    const v75 = f37(v32, v72, false, v72);
    !v75;
    !v75;
}
%OptimizeFunctionOnNextCall(f37);
const v78 = f37(522675525n, v32, f37, v69);
try { v78(v33, v8, 522675525n, 522675525n); } catch (e) {}
