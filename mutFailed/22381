const v2 = new Uint32Array(160);
let v3 = 4;
v3--;
try { new Float32Array(Uint32Array, v3, 160); } catch (e) {}
const v7 = new Float32Array(v3);
16 | 16;
new Int16Array(127, 127, 127);
function f13(a14, a15, a16) {
    return f13;
}
const o17 = {
    ...v2,
};
[4];
new Int16Array(16);
new Int32Array(148);
function f25() {
    function f26() {
        return 16;
    }
    return f26.call(16);
}
f25();
const v31 = new BigUint64Array();
try { Math.cos(v31); } catch (e) {}
Int16Array?.constructor;
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    function f42() {
        return 154;
    }
    class C43 extends f42 {
        constructor(a45) {
        }
    }
}
function f47(a48, a49, a50) {
    a48.fill();
    return a49;
}
let v53 = -7.6926559070141725;
v53--;
const v56 = new v7();
const v57 = [v56];
class C58 {
    constructor(a60, a61, a62) {
        function f63(a64, a65, a66) {
            v57.indexOf(v7, a65);
            try {
                f63(C58, a64, v56);
            } catch(e69) {
            }
            return f63;
        }
        f63();
    }
}
class C71 extends C58 {
}
new C71();
new Int16Array(4096);
function f79(a80) {
    return f79;
}
const v83 = [4096];
const o84 = {
    "arguments": v83,
    "type": "function",
};
class C85 {
    toString(a87, a88) {
        class C89 {
            constructor(a91) {
                for (let v92 = 0; v92 < 32; v92++) {
                    v92 - v92;
                    for (let v94 = 0; v94 < 5; v94++) {
                    }
                    try { a91(); } catch (e) {}
                }
            }
        }
        const v96 = new C89(a87);
        new C89(v96);
        new C89();
    }
}
const v99 = new C85();
function f100(a101, a102, a103, a104) {
    const o105 = {
        [v99]: a102,
    };
    return v99;
}
new Worker(f79, o84);
function f107() {
}
class C108 {
    1855;
    8;
    [Int16Array];
    static 3;
}
try { new C108(); } catch (e) {}
new C108();
const v111 = new C108(f107, 4096, 256, 64);
v83.includes;
Symbol.species;
"p" & 64;
const v117 = v111?.constructor;
try { new v117(); } catch (e) {}
