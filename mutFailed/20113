const v1 = new Map();
[-74397553,-9,1024,1304665909,7,-7663,65537,-9007199254740990];
const v3 = [536870888,-1024,7,-618957885,-51106,268435440,1112086168,298894640];
try { v3.every(Map); } catch (e) {}
const v5 = [38771,9223372036854775807,-457029991,54521,-65537,6,9,-41346];
class C6 {
    get f() {
        this[Map] ||= v1[v5];
        try {
            v1.length = 2;
        } catch(e10) {
        }
        return v1;
    }
    [v5] = Map;
}
C6.name = C6;
const v11 = new C6();
new C6();
new C6();
const v14 = [7,65535,-268435456,146457631];
[713141881,-458579086,-714488291,38429,-65537,-34011];
const v16 = [-4294967297,-1,-9170,-8,-13];
try { v16.lastIndexOf(v16); } catch (e) {}
for (let v18 = 0; v18 < 5; v18++) {
    function f19() {
        const v20 = [];
        try {
            v20.some();
        } catch(e22) {
            function F24(a26, a27) {
                if (!new.target) { throw 'must be called with new'; }
            }
            F24.toString = f19;
            F24.arguments = F24;
            function f29(a30, a31, a32, a33) {
                Uint8Array / a30;
                a31 < F24;
                const o39 = {
                    n(a37, a38) {
                        return v18;
                    },
                };
                try { o39.n(o39, v11); } catch (e) {}
                return v18;
            }
            for (let v41 = 0; v41 < 500; v41++) {
                e22 = Uint8Array;
                try {
                    v14.f = Uint8Array;
                } catch(e42) {
                }
                const v43 = f29();
                v43 + v43;
            }
            const v45 = eval(e22);
            v45.message = v45;
        }
        return f19;
    }
    const v46 = f19();
    try { new v46(); } catch (e) {}
    %OptimizeFunctionOnNextCall(f19);
}
