function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 1024;
    } catch(e3) {
    }
    try {
        this.d = 1024;
    } catch(e4) {
    }
}
new F0();
new F0();
function F7(a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a10;
}
const v11 = [-1000000.0,-3.1923473210656557,-1.721355656202141e+308,4.0,0.3955838142797843,-3.0,1.1463753586867827e+308];
function f12(a13) {
    const o14 = {
    };
    o14[213] = v11;
    return o14[213];
}
const v16 = new F0();
Int16Array.d = Int16Array;
const v19 = new F0(F0);
v19.toString = f12;
class C20 {
    static [v19];
}
new Int16Array(1000);
function f25(a26, a27, a28, a29) {
    try { new a26(); } catch (e) {}
    a27 & a27;
    const v32 = 3 | a27;
    v32 * v32;
    a26 / a26;
    const v35 = a27 < a26;
    a28 >>> a28;
    const o40 = {
        n(a38, a39) {
            return v35;
        },
    };
}
f25(Uint8Array, 2);
129 + 129;
const v45 = new BigUint64Array(129);
class C46 {
}
try { Reflect.defineProperty(-12); } catch (e) {}
try { v45.includes(v16); } catch (e) {}
Float64Array.e = Float64Array;
const v53 = new Float64Array(3765);
class C54 {
}
try { new C54(v45, 3765); } catch (e) {}
let v56;
try { v56 = new C54(); } catch (e) {}
const v57 = v56?.__defineSetter__;
try { new v57(Float64Array, 129); } catch (e) {}
const v59 = new C54();
const v60 = v59?.constructor;
v60.name = v60;
let v61;
try { v61 = new v60(); } catch (e) {}
const v62 = v61?.e;
try { new v62(v53, v59); } catch (e) {}
0.3050534209767637 > 0.3050534209767637;
const o66 = {
};
const v68 = Array?.growable;
try { new v68(v53); } catch (e) {}
const v70 = new Array(v59, o66);
v70[v70] = 0.3050534209767637;
