new Int8Array(6);
const v5 = new Int8Array(4);
const v6 = [1000000.0,-1.7976931348623157e+308];
const o7 = {
    ...v6,
};
new Uint8Array(481);
Uint8Array.indexOf(Uint8Array, 481);
const v14 = new Int8Array(129);
const t9 = 6;
new t9();
/9f8\xf0\x9f\x92\xa9/diy["compile"]();
new BigInt64Array(129);
function F22(a24) {
    if (!new.target) { throw 'must be called with new'; }
}
new F22();
let [] = v14;
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a28;
    } catch(e30) {
    }
    try {
        this.h = a28;
        new Uint8ClampedArray(1907);
        const t27 = 7;
        t27["255"] &= 7;
        for (const v37 in "9007199254740992") {
        }
    } catch(e38) {
        ("c")?.toLocaleUpperCase;
        a28.atan2(257, 257);
    }
    try {
        const v45 = [9,1024,256,268435440,-1916992432,7,-2147483648,20126,-2,1645963617];
        try { v45.group(BigInt64Array); } catch (e) {}
        function F49(a51) {
            if (!new.target) { throw 'must be called with new'; }
            const v52 = a51 ^ a51;
            let v53 = v52 * v52;
            v53--;
            const v55 = this.constructor;
            v55.length = v55;
            try { new v55(3n); } catch (e) {}
        }
        new F49(0n);
        this.c = v5;
    } catch(e58) {
    }
}
([NaN,3.0])["concat"](-483497369);
const v63 = [4.0,-1.7976931348623157e+308];
function F64(a66, a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
}
const v69 = new F64(F64, v63, F64);
new F64(v69, v69, v69);
new F26(F22, 4);
new F26(Int8Array, 4);
new F26(Int8Array, 4);
class C74 {
    g;
    constructor() {
        const v76 = this.constructor;
        try { new v76(); } catch (e) {}
    }
}
function f78(a79, a80) {
    return a79;
}
class C81 {
}
new C74();
