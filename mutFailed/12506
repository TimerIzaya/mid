let v2 = "51904";
new Map();
const v6 = -Infinity;
function f9(a10, a11) {
    const o14 = {
        "c": v2,
        set f(a13) {
            this.c >>= v6;
        },
        "g": a10,
        ..."U",
        ...a10,
        [Map]: a10,
        "e": v2,
        6: v6,
        "d": a10,
        "a": Map,
    };
    return a11;
}
function f16() {
    return 2147483648n;
}
try { ("imul").padEnd(1073741824); } catch (e) {}
const v20 = f9(v2, -1e-15);
const v21 = f9(v2, -585512.0015733843);
const v22 = f9("U", -585512.0015733843);
v22.h = v2;
({"h":v2,} = v22);
function f24(a25, a26, a27, a28) {
    const o29 = {
    };
    return o29;
}
try {
    v21.c = v22;
} catch(e32) {
}
const v33 = f9("U", 6);
const v37 = (a38, a39, a40, a41) => {
    function F42(a44, a45, a46, a47) {
        if (!new.target) { throw 'must be called with new'; }
    }
    return -585512.0015733843;
};
try { v20("EJy6", 1073741825n, v33, 2147483648n, Int8Array); } catch (e) {}
Math.sinh(2147483648n);
const v55 = v22 ^ 20075;
Math.atan2(20075, v22);
-2.220446049250313e-16 >> v55;
function F58(a60, a61, a62) {
    if (!new.target) { throw 'must be called with new'; }
    return arguments;
}
const v64 = new f24();
let {...v65} = v64;
