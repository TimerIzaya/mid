class C3 {
    static {
        let v4 = this;
        v4.length = v4;
        v4.d = v4;
        try { Infinity(v4); } catch (e) {}
        ++v4;
        16 === 16;
        const v9 = 16 !== 16;
        v9 && v9;
        !(v9 || v9);
    }
    static f = Infinity;
    #c = 1073741825;
    e = 1.263848426042065;
    static a;
}
const v15 = new C3();
const v16 = v15.e;
const v17 = v16 * v16;
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    a20.b = a20;
    a21 >> a21;
    const v23 = a20.e;
    v23 | v23;
    Number.isFinite(a21);
    const v27 = this?.constructor;
    try { new v27(v15, Infinity); } catch (e) {}
    a21 & a21;
    try {
        this.a = a21;
    } catch(e30) {
    }
}
try { new F18(v15, v17); } catch (e) {}
const v32 = new F18(v15, Infinity);
const v33 = new F18(1.263848426042065, 1.263848426042065);
new F18(F18, v32);
new C3();
const v36 = new C3();
new Array(128);
class C40 {
    toString(a42, a43) {
        super.e &= 1073741825;
        super[v36] = 1.263848426042065;
        return this;
    }
    static valueOf(a45, a46, a47) {
        Array(128);
        %PrepareFunctionForOptimization(Array);
        Array(128);
        const v50 = Array(128);
        try {
            v33.__proto__ = v50;
        } catch(e51) {
        }
        try {
            super.setInt16(128, C3, C3);
        } catch(e53) {
        }
        %OptimizeMaglevOnNextCall(Array);
        Array(128);
        return v36;
    }
}
try { C40(); } catch (e) {}
new C40();
new C40();
new C40();
function f60(a61) {
    return f60;
}
f60.length;
const v63 = f60(undefined);
function f64() {
    return f64;
}
const v65 = [v63,,];
v65[0] = v65;
v65.group(f64);
