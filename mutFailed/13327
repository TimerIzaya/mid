let v2 = -1e-15;
class C3 {
    get c() {
        const t3 = "vF";
        t3[this] += -1.7976931348623157e+308;
        const v7 = v2 ^ v2;
        const v8 = v2--;
        Math.cosh(v7 && v2);
        Math.log(v8);
        v7 ** v2;
        return v8;
    }
}
C3.b = C3;
let v13;
try { v13 = C3.valueOf(); } catch (e) {}
const v14 = new C3();
const v15 = new C3();
const v16 = v15?.constructor;
let v17;
try { v17 = new v16(); } catch (e) {}
const v18 = v17?.__lookupGetter__;
try { new v18(v13); } catch (e) {}
const v20 = new C3();
const v21 = v20?.constructor;
let v22;
try { v22 = new v21(); } catch (e) {}
class C23 {
    static #n(a25, a26, a27) {
        const v28 = this[2914];
        try { v20.acosh(v28, "vF", v28, this, v28); } catch (e) {}
        new Float32Array(2827);
        new Int32Array(3045);
        new BigInt64Array(14);
        new Float64Array();
        function f41() {
            const o42 = {
            };
            return o42;
        }
        const v43 = f41();
        class C46 {
        }
        const v47 = new C46();
        function f48(a49, a50) {
            a49.BYTES_PER_ELEMENT;
            class C52 {
            }
            C52.length;
            try { ("0x2I").sup(); } catch (e) {}
            class C57 {
            }
            const v58 = C57?.call;
            try { new v58(null); } catch (e) {}
            class C60 extends C57 {
            }
            try { new C60(NaN, v47, NaN, v43); } catch (e) {}
            const v62 = a50?.propertyIsEnumerable;
            try { v62(); } catch (e) {}
            class C64 {
            }
            try { C64.call(C57); } catch (e) {}
            const v66 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
            class C67 {
            }
            try { C67.apply(1.7976931348623157e+308, f48); } catch (e) {}
            Symbol.b = Symbol;
            C67[Symbol.replace] = v66;
            const v71 = [];
            let v72;
            try { v72 = v71.with(v71); } catch (e) {}
            const v74 = new Float64Array(v71, v72);
            const v75 = new Float64Array(v74, a49, v72);
            const v76 = v75.values();
            try { v76.next(); } catch (e) {}
            return v75;
        }
        return Float32Array;
    }
}
const v78 = new C23();
v78.b = v14;
const v79 = v78?.b;
try { new v79(); } catch (e) {}
try { v78.isPrototypeOf(-1.7976931348623157e+308); } catch (e) {}
const o83 = {
    "execution": "async",
};
for (let v84 = 0; v84 < 5; v84++) {
    const t89 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
    t89.length >>>= -65536;
}
const v87 = new C23();
function f88(a89, a90) {
    for (const v94 of Array(19793)) {
    }
    return v13;
}
v87.constructor = f88;
const v95 = v87?.__lookupGetter__;
try { new v95(v15); } catch (e) {}
const v97 = v87?.constructor;
v97.prototype;
let v99;
try { v99 = new v97(); } catch (e) {}
v99.b = f88;
const v100 = v99?.b;
let v101;
try { v101 = new v100(); } catch (e) {}
const v102 = new C23(v20, v22, v101);
const v103 = v102?.constructor;
try { new v103(); } catch (e) {}
function f105() {
    return -1.7976931348623157e+308;
}
let v106;
try { v106 = f105(); } catch (e) {}
v106 - v106;
function f109(a110) {
    %OptimizeFunctionOnNextCall(f105);
    Float32Array * v78;
    return v100;
}
Float32Array[Symbol.iterator] = f109;
Float32Array.c = Float32Array;
const v114 = new Float32Array(Float32Array, Float32Array);
for (let v115 = 0; v115 < 25; v115++) {
    -v115;
    function f117(a118, a119, a120, a121) {
        a118[0] = a118;
        ~(a119 <= a119);
        const v125 = arguments?.__lookupGetter__;
        try { new v125(v114); } catch (e) {}
        try { v125(v125, f117, a119); } catch (e) {}
        let v128 = -1073741824n;
        let v129 = v128--;
        v129--;
        function F131(a133, a134, a135, a136) {
            if (!new.target) { throw 'must be called with new'; }
            this.e = v129;
        }
        try { undefined(); } catch (e) {}
        return v115;
    }
    const v140 = [-9.109766292519199,-1.3811947064786667e+308,0.09110445091766706,5.0,-385647.03832885576,0.2888431306471019];
    try { v140.filter(59890n); } catch (e) {}
    new Int8Array();
    for (let v144 = 0; v144 < 10; v144++) {
        f117(v114);
    }
}
