this[256] = BigUint64Array;
class C7 extends Float64Array {
}
const v8 = new C7();
v8.reverse();
~-754089042n;
class C14 {
    [-55801.39760616061];
}
new Uint32Array(16);
new Uint8Array(16);
new Float32Array(3);
new Int8Array(64);
new Float64Array(257);
new Int32Array(6);
const v33 = ~2.220446049250313e-16;
function F35(a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    a37 >>> a37;
    const v41 = this.constructor;
    v41.name;
    try { new v41(a37, -1000000000000.0); } catch (e) {}
    a38 % a38;
    this.a = a37;
}
new F35(2.220446049250313e-16, v33, v33);
new Uint8ClampedArray();
function f48(a49, a50, a51, a52) {
    function f53() {
        const o68 = {
            valueOf(a55, a56) {
                function F57(a59, a60) {
                    if (!new.target) { throw 'must be called with new'; }
                    this.hasOwnProperty(a55, a60, a55);
                    a59 >= a59;
                    const v63 = this.constructor;
                    try { new v63(); } catch (e) {}
                }
                class C65 extends F57 {
                }
                new C65();
                new C65();
                return F57;
            },
        };
        o68.valueOf();
        return a51;
    }
    f53();
    f53();
    return a52;
}
for (let v72 = 0; v72 < 5; v72++) {
    f48(f48, v72, v72, v72);
}
f48(f48, f48, f48, f48);
new F35();
const v77 = 9007199254740991n * 9007199254740991n;
v77 & v77;
([]).some();
class C81 extends F35 {
}
new C81();
new C81();
