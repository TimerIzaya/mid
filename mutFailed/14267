[1000000000.0,-3.0];
[1.6492839608307299e+308,1.7976931348623157e+308];
[-Infinity,7.410761351135385,-Infinity,5.0];
[1.076072248809246e+308,-3.0,52003.731703987345,-2.0,327.8563316621744,-1.1230257398200076e+307];
[546397.3936454577];
[-931600.9406100663,-4.0,144.11018888197714,Infinity,-2.220446049250313e-16,4.0,-1.7976931348623157e+308,-2.2250738585072014e-308];
11 | 11;
let v11 = 11 + 11;
v11++;
new Int8Array(11);
const v17 = new Float64Array(127);
v17[75];
try { v17.join("toDateString"); } catch (e) {}
const v21 = 0 - 0;
const v22 = v21 > v21;
new Float32Array(0);
const v25 = [-460.307183313349,116746.1734742194,2.0,0.7612507062467385,-1.7352454748688924e+308];
function f26(a27) {
    Reflect.preventExtensions(Reflect);
    return a27;
}
f26.d = f26;
const v30 = [];
try { v30.findLast(0); } catch (e) {}
function f32() {
    function f33() {
        return v22;
    }
    for (let i36 = 0, i37 = 77416.31322776643; i36 < i37; i37--) {
    }
    const o47 = {
        toString() {
            super[this];
        },
        ...v30,
        n() {
            return this;
        },
    };
    try { o47.toString(); } catch (e) {}
    let v49;
    try { v49 = o47.n(); } catch (e) {}
    try { v49.toString(); } catch (e) {}
    return v30;
}
%PrepareFunctionForOptimization(f32);
f32();
const v52 = f32();
try { v52.forEach(v11); } catch (e) {}
try { v52.every(v17); } catch (e) {}
%OptimizeFunctionOnNextCall(f32);
const v56 = f32().length;
v56 >>> v56;
Symbol.hasInstance = Symbol;
const v59 = Symbol.toPrimitive;
v25[v59] = f26;
function f60(a61, a62) {
    Math.log1p(2.220446049250313e-16);
    class C66 {
    }
    try { a61.findLast(a61); } catch (e) {}
    function f68(a69, a70) {
        return a69;
    }
    return a62;
}
let v71;
try { v71 = f60(v30, "toDateString"); } catch (e) {}
v71.length;
f60.d = f60;
f60.d = f60;
try { new Symbol(); } catch (e) {}
const v75 = Symbol.toPrimitive;
gc();
const o82 = {
    [122188848n](a80, a81) {
    },
};
o82[122188848] = o82;
o82[122188848] = o82;
let v84;
try { v84 = Symbol(); } catch (e) {}
const v85 = v75.description;
v85[11] = v85;
function F86() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = 2;
}
F86.length = F86;
4294967296 * 4294967296;
4294967296 & 4294967296;
Symbol.for(v85);
v25[v75] = f60;
try { new o82(); } catch (e) {}
let [] = [];
[Int32Array,Int32Array,Int32Array,Int32Array];
const v97 = [618.1593022982238,-670.4331556988014,-598.8215888934105,1e-15,0.6439103075146282,996419.0616454568,-1.0,-1000000000.0,1e-15,-566.0187654378863];
Symbol.g = Symbol;
const v99 = Symbol.toPrimitive;
Symbol.for(v99.description);
v97[v99] = Symbol;
const v105 = new v84();
const v106 = new v84();
function f107(a108, a109) {
    const o116 = {
        512: v84,
        4294967295: a108,
        valueOf(a111, a112) {
            return a112;
        },
        "e": v105,
        o(a114, a115) {
            return a115;
        },
    };
    return o116;
}
f107(f107, 3.1466442940809625);
f107(f107, -1000.0)[v106];
v97.toString = Symbol;
const v120 = [0.38491475396310426,1.7976931348623157e+308,-1e-15,924251.5567374192,NaN,1.5098751561946018e+308,-1.1124820518145282e+308,-3.0,-0.0,-467.0550866857337];
v120[5];
v120[5];
class C123 {
    valueOf(a125) {
        let v126;
        try { v126 = v120(a125, this, this, a125, this); } catch (e) {}
        try { v126(v97, v126, v126); } catch (e) {}
        return v25;
    }
    1000;
    static #d = v97;
    m(a129, a130, a131, a132) {
    }
    constructor(a134, a135, a136) {
        a135.e = a135;
        class C138 extends a135.constructor {
        }
        const v139 = new C138();
        try { v139(); } catch (e) {}
    }
    static [v25] = v120;
    static #a;
    [v25] = v120;
    static [v97];
    static #e = v120;
}
new C123();
const v142 = new C123();
v142[1000] = v142;
const v143 = new C123();
v143[1000];
v143[1000];
const v147 = new WeakMap();
const v148 = v147?.constructor;
try { new v148(); } catch (e) {}
const v150 = v147?.constructor;
try { v150.apply(v11, f26); } catch (e) {}
let v152;
try { v152 = new v150(); } catch (e) {}
try { v152.delete(v59); } catch (e) {}
let v154;
try { v154 = v147.has(WeakMap); } catch (e) {}
v154 || v154;
const v156 = v154 || v154;
v156 && v156;
new Date();
let v161;
try { v161 = new Array(Array); } catch (e) {}
v161[0];
const v164 = Array(4087);
const v165 = v164?.constructor;
try { new v165(v165); } catch (e) {}
try { new v165(v164); } catch (e) {}
for (const v168 of v164) {
}
function F170() {
    if (!new.target) { throw 'must be called with new'; }
}
([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).forEach();
const o175 = {
    4294967296: 1733353236,
};
const o177 = {
    get h() {
        return o175;
    },
    ...o175,
};
255n / 255n;
!(1371215815n == 1371215815n);
[,,,,,];
