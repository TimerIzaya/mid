const v0 = [0,-1866672430,7,127,3,-7,268435456];
const v1 = [536870889,1073741823,536870889];
const v2 = [-314224446,8,1,521169527,2,8,-52857,360299223,-65535];
function f3() {
    return v1;
}
const v4 = f3?.bind;
let v9;
try { v9 = Array.bind(-195224844); } catch (e) {}
Reflect.construct(Date, [1024], v9);
let v13;
try { v13 = new v4(v0); } catch (e) {}
function f14(a15, a16) {
    try { a15.sort(v0, a15, a15, a15); } catch (e) {}
    a16[8] = a16;
    const o33 = {
        "g": v2,
        "e": v1,
        [a16]: a15,
        set d(a19) {
            const o20 = {
            };
            new Proxy(f3, o20);
            try { o20.toString(o20, a19, a15); } catch (e) {}
            try {
                o20.a = f3;
                const v25 = [v0,a16];
                for (let v26 = 0; v26 < 10; v26++) {
                    delete v25.length;
                    let v28;
                    try { v28 = o20(); } catch (e) {}
                    const v30 = [Reflect];
                    const o31 = {
                        __proto__: Reflect,
                        "e": v30,
                    };
                    const t36 = "J";
                    t36.length += v28;
                }
            } catch(e32) {
            }
        },
        "b": v0,
    };
    return o33;
}
f14(v1, v2);
const v35 = f14(v0, v2);
const v36 = f14(v0, v2);
function f38() {
    return v36;
}
function f40(a41, a42, a43, a44) {
    2147483648 ^ 2147483648;
    const v56 = new Int32Array(Symbol);
    v56[492];
    v56[3];
    return "find";
}
f40(-195224844, 522675525n, f40, -195224844);
const v62 = ([54117,42702,2,268435441,-1154645385,-9007199254740991,2,536870912,257,-1693844130])[4];
const v63 = [-32389,-991864825,10,268435441];
function F64() {
    if (!new.target) { throw 'must be called with new'; }
}
function f68(a69, a70, a71, a72) {
    return arguments;
}
f68(f68(64, 118, 64, 118), f68).constructor;
[-21497,4294967297,14,-2,2,13];
class C78 extends f38 {
    static #m(a80, a81, a82, a83) {
        const o84 = {
        };
        try {
            o84.h = a80;
        } catch(e85) {
        }
        try {
            const o86 = {
            };
            o86.h = a80;
            o86.f = a80;
        } catch(e87) {
        }
        try {
            const o88 = {
            };
            o88.h = a80;
            this.f = a80;
            o88.g = null;
        } catch(e89) {
        }
        try {
            const o90 = {
            };
            o90.h = a80;
            o90.f = a80;
            o90.e = a80;
        } catch(e91) {
        }
        return v35;
    }
}
try { new C78(v62); } catch (e) {}
new C78();
let v99 = new WeakMap();
class C100 {
    constructor(a102, a103) {
        super[a102]?.[1];
    }
    c = "U2pI";
    static 268435439;
    static get d() {
        v99 ||= this;
        return [-679038690,7,-65536,3,1461677839,9];
    }
    static d = WeakMap;
}
const v108 = new C100("-19084", 5);
function f109(a110, a111) {
    v13(v108);
    [Float64Array,Float64Array,Float64Array,v13,a111];
    [[5],Uint8Array];
}
new C78();
const v118 = new C78(f3);
v118.g;
for (let v120 = 0; v120 < 5; v120++) {
    function f121() {
        const v122 = [];
        try { v122.every(v120); } catch (e) {}
        try {
            v122.some();
        } catch(e125) {
            e125.iterator = e125;
            function F127(a129, a130) {
                if (!new.target) { throw 'must be called with new'; }
            }
            function f132(a133, a134, a135, a136) {
                (Uint8Array / a133) | v63;
                const v141 = new String();
                Object.defineProperty(v141, 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
                try { Reflect.set(); } catch (e) {}
                a134 < F127;
                const o148 = {
                    n(a146, a147) {
                        return v120;
                    },
                };
                try { o148.n(o148, e125); } catch (e) {}
                return v120;
            }
            f132.prototype;
            for (let v151 = 0; v151 < 500; v151++) {
                -v151;
                new Map("268435441");
                1000000000.0 * [-9.578589124662172e+307,0.5803164764357316,1e-15];
                f132();
            }
            const v161 = eval(e125)?.message;
            try { new v161(); } catch (e) {}
        }
        return f121;
    }
    f121();
    %OptimizeFunctionOnNextCall(f121);
}
