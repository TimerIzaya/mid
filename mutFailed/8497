function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = 892566480;
        this in this;
        new F0();
    } catch(e8) {
        Object.defineProperty(e8, 189, { writable: true, configurable: true, enumerable: true, value: e8 });
        try {
            this.fuck(1000.0, 1000.0, F0, false);
        } catch(e12) {
        }
    }
}
const v13 = new F0();
const v14 = new F0();
const v15 = new F0();
function f16(a17, a18) {
    const o30 = {
        __proto__: v13,
        [a17](a20, a21, a22) {
            [-2.8371800061043917];
            [-4.1763055822668206e+307,-1000000000000.0,-2.145458166415512,-3.0,-3.0];
            const v25 = [1.6133545833636087e+308,1.286401543903396e+306];
            super[v14] >> a17;
            try {
                new F0();
            } catch(e29) {
            }
            return v25;
        },
        "h": F0,
        "b": a17,
        5: a18,
        /*
        __proto__: v15,
        */
        "e": v15,
        ...v13,
        "d": F0,
        [a18]: a18,
        ...v14,
        ...a17,
        [a18]: a18,
    };
    class C32 {
    }
    const v33 = new C32();
    with (v33) {
        try { ("NaN").startsWith(h); } catch (e) {}
    }
    return o30;
}
f16(v13, v15);
let v37 = BigInt64Array;
const v38 = [v37,v37];
const v39 = /((((.).).).)rfoo|(bar|baz)|quux*/uims;
v39[v38];
class C41 {
}
class C42 {
}
const o43 = {
};
function f44() {
    return ([f44,f44]).constructor.isArray();
}
f16(v14, v15);
f16(v15, v15);
function F50() {
    if (!new.target) { throw 'must be called with new'; }
    const v52 = this.constructor;
    try { new v52(); } catch (e) {}
    try {
        const v54 = /Ma\W+/gudm;
        v54.dotAll = v54;
    } catch(e55) {
    }
}
new F50();
for (let [v57,v58] of v38) {
    v39.global;
}
v37 /= C41;
try { v14.p(F0, C42); } catch (e) {}
const v65 = new Int32Array();
function F66(a68, a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        new F66();
        v65.length;
    } catch(e73) {
    }
    class C74 extends F66 {
        128 = a68;
    }
    new C74();
    new C74();
    new C74();
}
const v79 = new Float32Array();
new Float32Array([v79]);
