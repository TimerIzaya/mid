function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -1;
    } catch(e3) {
    }
    try {
        this.d = -1;
    } catch(e4) {
    }
    try {
        this.g = -1;
    } catch(e5) {
        function F6(a8, a9, a10) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a9;
            } catch(e11) {
            }
        }
    }
}
const v12 = new F0();
const v13 = new F0();
function f14(a15) {
    const v16 = [];
    const v19 = new Array(228);
    class C20 {
        [Array] = v16;
        static {
            function F22(a24, a25) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.b = a25;
                } catch(e26) {
                }
            }
            const v27 = new F22(v19, this);
            new F22(Array, F22);
            new F22(v27, v19);
        }
    }
    const v30 = new C20();
    let v33;
    try { v33 = v13.o(C20, v30, -1n, v19); } catch (e) {}
    try {
        const t46 = "7MU";
        t46.valueOf = v33;
    } catch(e34) {
    }
    return Array;
}
v13[Symbol.toPrimitive] = f14;
class C37 {
}
C37[Symbol.toPrimitive] = f14;
const v40 = new C37();
const v41 = [C37,C37,C37,C37,C37];
class C42 {
    constructor(a44, a45, a46) {
        function f47(a48, a49, a50) {
            v41.indexOf(C37, a49);
            try {
                f47(C42, a48, v40);
            } catch(e53) {
            }
            return C37;
        }
        f47();
    }
}
const v55 = new F0();
const v56 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
v56.__proto__;
const v58 = [1073741824,1073741823,1376142744,1073741825];
try { v58["find"](); } catch (e) {}
v55.g = v55;
v55.b = v55;
function f61() {
    return v12;
}
try { f61(); } catch (e) {}
let v64 = 1;
v64++;
function f67(a68, a69, a70) {
    function f71() {
        const v74 = new Uint8ClampedArray(255);
        v74[3] = Uint32Array;
        return f67;
    }
    a68.valueOf = f71;
    a68.b = a68;
    a70 >> a70;
    let v77 = a68.b;
    v77.toString = f71;
    v77--;
    const o84 = {
        toString() {
            super[this];
            return this;
        },
        ...v56,
        "b": a70,
        "c": 16,
        __proto__: v12,
        "a": 16,
        [a70]: a69,
        get e() {
            try {
                f61();
            } catch(e83) {
            }
            return this;
        },
    };
    return o84;
}
f67(v12, v64, v64);
const v86 = f67(v13, 16, v64);
class C88 {
    toString(a90) {
        const t121 = super["bigint"];
        t121[9] = 0;
    }
}
v86[1] = v86;
f67(v13, v64, 16);
let v94 = 2.220446049250313e-16;
v94++;
Uint32Array[2] = Symbol;
Uint32Array[2] = 1;
new Uint32Array(Uint32Array);
class C100 {
}
new C100();
class C103 {
    constructor(a105, a106, a107, a108) {
    }
    /*
    constructor(a110, a111, a112, a113) {
    }
    */
}
const v115 = 2.220446049250313e-16 != 2.220446049250313e-16;
-0.0 - -0.0;
([]).copyWithin();
class C121 {
}
function f122() {
    return f122;
}
f122[Symbol.toPrimitive] = f14;
class C125 extends f122 {
}
function f126(a127) {
    function F128(a130, a131) {
        if (!new.target) { throw 'must be called with new'; }
        const v132 = this.constructor;
        try { new v132(this, a131); } catch (e) {}
        this.c = a130;
    }
    new F128();
    return v115;
}
C125.toString = f126;
try {
    C37 &= C125;
} catch(e135) {
}
let v137 = 127;
v137--;
v137 >>> v137;
ArrayBuffer.prototype = ArrayBuffer;
Uint8ClampedArray.g = Uint8ClampedArray;
-16;
1073741824 & 1073741824;
class C149 {
}
const t178 = [C149];
t178.length = 18074;
