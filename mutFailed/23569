const v0 = [-2.0,-340288.1247584282,402523.12020139117,-1.6014667336799066e+308,59.10447183988276,0.7727360494567658,-3.0];
const v1 = [466.490935965222,-8.629107572797798];
const v4 = new BigInt64Array(255);
let v5 = 10;
v5--;
v4.length;
const o8 = {
};
function f9(a10, a11) {
    a11 instanceof a10;
    return -2147483649n;
}
o8.constructor = f9;
const v17 = o8.constructor;
const v19 = 1922 % 1922;
const v20 = v19 == v19;
for (let v21 = 0; v21 < 25; v21++) {
    function f22() {
        return f22;
    }
    function f23(a24, a25, a26, a27) {
        a27 + a27;
        function f29() {
        }
        const v31 = -f29.length;
        const v33 = f22().constructor;
        let v34;
        try { v34 = v33(); } catch (e) {}
        const o37 = {
            "maxByteLength": 1269,
        };
        const v39 = new SharedArrayBuffer(64, o37);
        new Int32Array(v39);
        const v42 = v34.bind();
        const v43 = v42.bind(v42, 1269, v17);
        v33 * v20;
        const v45 = typeof f29;
        v45.italics(v45, v31, v43);
        const v48 = v45 === "n";
        const v50 = new Int8Array();
        const v51 = v50.entries();
        v51.next(v51, a25, f22, o8);
        v51.next(1.185961373472971e+308);
        function f54() {
            return v19;
        }
        f54();
        const v56 = [65535,-10,4294967296,-10,36724,65536,-2147483647,52881,2,4096];
        function f58(a59, a60, a61) {
            [Array,a61];
            v56.filter;
            return SharedArrayBuffer;
        }
        f58.caller = f58;
        const v66 = ("find").blink().replaceAll;
        let v67;
        try { v67 = v66(v48); } catch (e) {}
        return v67;
    }
    for (let v68 = 0; v68 < 5; v68++) {
        f23(v68, v17, v17, 1922);
    }
}
[-508303.6835335404];
-1.7976931348623157e+308 + -1.7976931348623157e+308;
const v75 = [v0,0.23755378696371365,-1.7976931348623157e+308,0.03175068784610702,0.03175068784610702];
try { v75.push(-1.7976931348623157e+308); } catch (e) {}
[v75,0.03175068784610702,v1];
[v75,0.23755378696371365,0.23755378696371365];
function f83(a84, a85) {
    var f = a85 & a85;
    return a85;
}
Int16Array[Symbol.iterator] = f83;
const v89 = new Int16Array(Int16Array, Int16Array, Int16Array);
Object.defineProperty(v89, "constructor", { configurable: true, value: Symbol });
try { v89.includes(v89); } catch (e) {}
class C91 {
}
with (C91) {
    try { ("subarray").sub(); } catch (e) {}
    const v94 = v89["subarray"]();
    v94[1];
    function f96() {
        return v94;
    }
}
