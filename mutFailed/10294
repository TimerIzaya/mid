const v3 = /\u{12345}(a|bqet[\p{Script_Extensions=Mongolian}&&\p{Number}])/vm;
const v4 = /Wa|bc*/gdy;
const v5 = /I(?:a+)*i?/uiy;
function F6(a8, a9, a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a9;
    } catch(e12) {
        Math.cbrt(v3);
        let v17 = ++e12;
        v17++;
        e12 + v3;
    }
    try {
        this.e = a10;
    } catch(e20) {
    }
    try {
        this.h = a10;
    } catch(e21) {
    }
}
new F6(-256, -18950, v4, 256);
new F6(-256, 256, v5, 256);
new F6(256, 256, v5, -256);
new Int8Array(13);
new Float32Array(15);
new Uint8ClampedArray(13);
const v34 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
function F35(a37, a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    function f41(a42, a43, a44) {
        const v45 = v34.__proto__;
        a44 = v45;
        let v46;
        try { v46 = v4.test(a44); } catch (e) {}
        v46 = a43;
        const o49 = {
            "maxByteLength": 1314270308,
        };
        const v51 = new ArrayBuffer(235, o49);
        new Uint32Array(v51);
        try { v45.findLastIndex(this); } catch (e) {}
        return a42;
    }
    f41(a39, a39, a39);
}
new F35();
