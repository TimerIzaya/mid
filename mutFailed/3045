class C3 {
    #m(a5) {
        new Int8Array(3541);
        new Float32Array(2365);
        new Int16Array(0);
        return a5;
    }
    #d;
    static #e = "-12";
    static e = C3;
}
const v15 = new C3();
const v16 = new C3();
const v17 = new C3();
const v21 = Math.log1p(0.04879611221991542);
function F22() {
    if (!new.target) { throw 'must be called with new'; }
}
new F22();
const v25 = new WeakSet();
Symbol.toPrimitive;
const v30 = 0 == 268435440n;
function f31() {
    return WeakSet;
}
[["-12",v16,v16,["filter",v15,WeakSet]],v16];
function f35() {
    return v16;
}
function f36(a37, a38) {
    function f39() {
        function f40() {
            try {
                new C3();
            } catch(e42) {
            }
            return a37;
        }
        return f40;
    }
    Object.defineProperty(a38, Symbol.toPrimitive, { writable: true, get: f39 });
    const o59 = {
        [a38]: a38,
        __proto__: v21,
        "c": 0,
        [v30]: 0.04879611221991542,
        set e(a46) {
        },
        "b": a37,
        "h": v25,
        "d": "filter",
        "g": a38,
        "f": v25,
        "e": f31,
        2: v17,
        m(a48, a49) {
            new C3();
            new Int16Array(16);
            const o55 = {
            };
            new C3();
            return 230501136;
        },
    };
    o59.toString = Symbol;
    return o59;
}
f36("filter", f36(v17, v25));
Math.log10(0);
const o64 = {
};
const v66 = new Set();
function F67(a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    this.toString = f36;
    try {
        this.d = a69;
    } catch(e71) {
    }
    try {
    } catch(e72) {
    }
    v66[this];
    try {
        new F67(a70, v66);
    } catch(e75) {
    }
}
new F67();
f36(v15, v16);
Math[0];
const v82 = Symbol.__proto__;
v66[268435441] >>= 0.04879611221991542;
Object.defineProperty(Symbol, 0, { configurable: true, set: Symbol });
Object.defineProperty(v82, 10, { configurable: true, value: "-12" });
/na(?:ab)|cde(?:a+)?/;
