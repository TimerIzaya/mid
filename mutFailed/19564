let v1 = "-1";
class C3 {
    static set d(a5) {
        const v6 = super[v1];
        let v7;
        try { v7 = new a5(this, 2.2250738585072014e-308, a5, this); } catch (e) {}
        class C8 {
            static #h = C3;
            static 8 = 2.2250738585072014e-308;
        }
        new C8();
        new C8();
        new C8();
        super[v7];
        v1 = v6;
    }
    static #h = 2.2250738585072014e-308;
    a;
    static [v1] = 2.2250738585072014e-308;
    #d;
}
new C3();
new C3();
const v15 = new C3();
/(?:a+){0,0}/gdimsy;
/[ya{0}]/vm;
/h\P{Decimal_Number}/gvimy;
let v19 = 1024;
for (let i23 = 0, i24 = 10;
    (() => {
        const v25 = i23 < i24;
        class C26 extends Date {
        }
        return v25;
    })();
    i23++) {
}
Int32Array[2] = Int32Array;
new Int32Array(v19);
const o34 = {
    "d": v15,
    "c": Date,
};
`object${Date}10000`;
new Uint8ClampedArray(2698);
new Uint32Array(204);
class C42 {
    static #m(a44, a45, a46) {
    }
    constructor(a48, a49, a50, a51) {
        this.#m();
    }
}
[-6.672391061426152e+307];
new Int32Array(Int32Array);
function f59(a60, a61, a62, a63) {
    const o64 = {
    };
}
class C65 {
    static get c() {
        const v67 = `
        `;
    }
}
function F69(a71, a72, a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    a74[1];
}
for (let v77 = 0; v77 < 10; v77++) {
}
for (let v78 = 0; v78 < 25; v78++) {
    Array(36862);
    v19++;
    ([-833.5530374606573,-46757.76096849947,-2.220446049250313e-16,-1000000.0,0.0,1.0,0.042648320103989557,1.4570589756852907,145338.1606694283]).groupToMap;
}
