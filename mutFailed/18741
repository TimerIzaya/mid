const v0 = [-1.3479840914834522,-375.31565077106086,9.28299965974474e+307,2.2250738585072014e-308];
let v1 = [-3.9015858296224016e+307,NaN,-4.0,-9.865089690717418e+307,-2.2250738585072014e-308,-0.0,923157.3339762616,-2.220446049250313e-16,6.518226794527737e+305,0.4500726632884876];
function f2() {
    v1[77] = v1;
    let v3 = 10;
    return v3--;
}
v1.toString = f2;
const v5 = [-766.0680843239483,1000000.0,424045.2283449655,-2.220446049250313e-16,0.31763461558925576,-368.02193670713734,150.73043252521552,3.0];
Object.defineProperty(v5, "toString", { enumerable: true, value: f2 });
function f6(a7, a8) {
    const v10 = Symbol.toPrimitive;
    a8[v10] = f6;
    a7[6] = a7;
    const o16 = {
        "c": v5,
        __proto__: a8,
        "b": a7,
        [v1](a12) {
            a8 += a7;
            new WeakSet();
            v1.length;
            v1 = v0;
            v1[v0] = WeakSet;
            a12[this] = a7;
            return WeakSet;
        },
        [v5]: a7,
        "e": a8,
    };
    function f17(a18, a19) {
        function F20() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                const v24 = Array(19793);
                for (const v25 of v24) {
                }
                const v26 = [v24,v24,v24,v24,v24];
                [[v26,v26,v26]];
            } catch(e30) {
                [e30,this];
            }
        }
        return v10;
    }
    o16[Symbol.toPrimitive] = f17;
    try { o16.apply(v5, o16); } catch (e) {}
    return o16;
}
f6[6] = v5;
try { f6(v1, f6); } catch (e) {}
const v36 = f6(f6, v0);
const v37 = f6(v0, v5);
const v38 = f6(v37, v5);
function f39() {
    return v38;
}
f39.d = v1;
f39.d = f39;
const v41 = Array?.constructor;
try { new v41(v38); } catch (e) {}
const v44 = new Array(232);
0 << 0;
class C49 extends Array {
    set d(a51) {
        for (let v52 = 0; v52 < 100; v52++) {
            f39();
        }
        try {
            v0.length = 9223372036854775807;
        } catch(e54) {
        }
    }
    [1024] = 0;
    static n(a56, a57) {
        Array(0);
        ~a57;
        ~-128;
        2.220446049250313e-16 || a57;
        Math.round(a57);
        Math.abs(2.220446049250313e-16);
        return v44;
    }
}
try { C49.call(Array); } catch (e) {}
const v68 = new C49();
v68[120] = v37;
try { v68.some(C49); } catch (e) {}
const v70 = new C49();
try { v70.groupToMap(v37); } catch (e) {}
const v72 = new C49();
v72.e = v41;
v72.e = v72;
function f73() {
    return f73;
}
function f75(a76, a77, a78, a79) {
    a76[5];
    a78 === a78;
    try { a78(); } catch (e) {}
    return a79 >= a79;
}
let v84;
try { v84 = f75(v5, 0, 0, v36); } catch (e) {}
v84 || v84;
for (let v86 = 0; v86 < 10; v86++) {
    !f75(v86, v86, f73, 522675525n);
}
%OptimizeFunctionOnNextCall(f75);
!f75(f75, 522675525n, f73, f73);
