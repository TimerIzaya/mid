function f0() {
}
const v1 = /Y/vdimy;
/ga\w/is;
const v3 = /DoAa*?/u;
let v4;
try { v4 = v3.toString(); } catch (e) {}
try { v4.link(v3); } catch (e) {}
new Uint32Array(85);
2 - 2;
new Uint16Array(2);
3960 & 3960;
const v16 = new BigInt64Array(3960);
try { v16.entries(); } catch (e) {}
const v19 = new Date();
try { v19.valueOf(); } catch (e) {}
Float32Array.prototype;
const v23 = new Float32Array(Float32Array);
try { v23.every(v19); } catch (e) {}
for (let v25 = 0; v25 < 25; v25++) {
    function f26(a27, a28, a29, a30) {
        const v31 = a27[0];
        -v31;
        a28 = Date;
        Object.defineProperty(v31, v31, { writable: true, set: f26 });
        delete a28[4];
        Number.isNaN(a27[1]);
        for (let v40 = 0; v40 < 5; v40++) {
        }
        const v41 = a28--;
        a27[0] = a27;
        arguments[0] = arguments;
        const v43 = arguments?.__lookupGetter__;
        let v44;
        try { v44 = v43.constructor(f26, v43, v43); } catch (e) {}
        const v45 = new Float32Array(v25, v44, a28);
        Int32Array.e = Int32Array;
        try { new Int32Array(a27, v41, Uint32Array); } catch (e) {}
        const v48 = new Int32Array();
        let v49;
        try { v49 = v48.join(v1); } catch (e) {}
        try { v49.toUpperCase(); } catch (e) {}
        const v51 = v45;
        try { v51.values(); } catch (e) {}
        v48.fill(...v51);
        return Float32Array;
    }
    f26.arguments;
    for (let v55 = 0; v55 < 10; v55++) {
        f26(v23);
    }
}
