const v1 = new Map();
function F2(a4) {
    if (!new.target) { throw 'must be called with new'; }
    try { a4(Map); } catch (e) {}
    try {
        this.a = a4;
    } catch(e6) {
    }
}
new F2(Map);
const v8 = new F2(F2);
let v9;
try { v9 = v8.hasOwnProperty(v8); } catch (e) {}
const v10 = new F2(v8);
const v14 = [-Infinity,-84289.57769236818,701.0412993309683,-490537.3833553441,0.1192516816138387];
v14[2] = v14;
v1.size &= v9;
const t17 = "5n";
t17.length %= v9;
v9.h **= v9;
try {
    const o15 = {
    };
    new Map(o15);
} catch(e17) {
}
const v18 = [4.0];
const v19 = [2.2250738585072014e-308,0.6746473768353692,1e-15,3.0,839372.2838813972,72.88683124604245,-595130.4543541213,1.5145680824491943e+308];
function f20() {
    return Map;
}
function F21(a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    let v26;
    try { v26 = a23.groupToMap("1qojx"); } catch (e) {}
    function f27(a28, a29, a30, a31) {
        const o32 = {
            [a28]: a29,
            "b": v26,
            2130: Map,
        };
        return o32;
    }
    const v34 = f27(v8, v19, f27(F2, v18, f20, this), v26);
    const v35 = v14(f20, v19, v34, v34);
    a24.f = a24;
    const v36 = v35?.search;
    try { new v36(F2); } catch (e) {}
    try {
        this.g = v8;
    } catch(e38) {
    }
    try {
        this.b = F2;
    } catch(e39) {
    }
    try {
        this.h = a23;
    } catch(e40) {
    }
}
F21.arguments = F21;
const v41 = new F21(v14, v10, "5n");
v41.b = v41;
new F21(v14, v10, f20);
new F21(v14, v8, v41);
-1448847116 * -1448847116;
const v46 = [101.2980265931285,-1.7177856293756712e+307,-1000000.0,-8.49664044843577];
const o47 = {
    __proto__: v46,
};
o47.includes(-1448847116);
