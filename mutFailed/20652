class C3 {
    valueOf(a5) {
        const v6 = super.a;
        super[v6] = this;
        return v6;
    }
    static toString(a8, a9) {
        try { ("-1852038337").match(this); } catch (e) {}
        const o14 = {
            "maxByteLength": 3485,
        };
        const v16 = new ArrayBuffer(60, o14);
        new Int32Array(v16);
        return o14;
    }
}
try { C3.call(C3); } catch (e) {}
const v20 = new C3();
const v21 = v20?.__lookupGetter__;
try { new v21("-1852038337"); } catch (e) {}
const v23 = new C3();
new C3();
[-6372];
const v26 = [7,1000,5,-1,1024,5];
const v27 = [10000,8,-10,-6,-1950701674];
v27[4] = v27;
const v28 = [0.00952483356421907,-3.0,2.220446049250313e-16];
v28[1] = v26;
try { v28.map(v23); } catch (e) {}
function f30() {
    return v28;
}
f30.arguments = f30;
class C31 extends f30 {
    a;
}
C31.caller;
try { new C31(); } catch (e) {}
const v34 = new C31();
function f35(a36, a37) {
    function F38() {
        if (!new.target) { throw 'must be called with new'; }
    }
    return F38;
    return a36;
}
v34.valueOf = f35;
try { v34.findLastIndex(f30); } catch (e) {}
const v41 = new C31();
v41.toString = f35;
try { Math.expm1("test"); } catch (e) {}
let v45 = Math.log1p(0.9014175581798928);
v45--;
v45 << v45;
delete v41[1];
const v50 = Math.expm1(-10);
const v51 = v50 << v50;
Symbol.toPrimitive;
class C54 {
}
function f55() {
}
v51 & v51;
const v57 = -10 * v28;
v57 >>> v57;
Math.acos(v57);
v34 + v57;
