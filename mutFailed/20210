function f2(a3, a4) {
    const o5 = {
    };
    return o5;
}
const v6 = f2(f2, f2);
function f7() {
    return v6;
}
Object.defineProperty(v6, "-2147483648", { configurable: true, enumerable: true, get: f2, set: f7 });
const v9 = [10617.622628886602,-5.0,1.7976931348623157e+308,-8.220199247866622e+307,1000000000000.0,0.0,48740.75682475441,-1000000000.0,6.407443663238073,369.9978678982163];
v9.toString = f7;
Date.parse(v9);
let v12 = 10;
for (; v12--;) {
}
class C14 {
    g = "boolean";
    #m(a16, a17) {
        try {
            ("boolean").#m(this);
        } catch(e19) {
        }
        return a16;
    }
    static g;
    constructor(a21) {
        this.p16 = a21;
        for (let v22 = 0; v22 < 32; v22++) {
            for (let v23 = 0; v23 < 5; v23++) {
            }
            const v24 = this.p16;
            try { a21(Date, v12, v24, v24, a21); } catch (e) {}
        }
    }
    ["-2147483648"];
    [2.2250738585072014e-308];
    [v12] = 2.2250738585072014e-308;
    546708490;
}
const v26 = new C14();
new C14();
const v28 = new C14();
class C29 extends C14 {
    static #n(a31, a32, a33) {
        this[this] = this;
        const v34 = super.g;
        new Int32Array(31);
        try {
            super.toSpliced(C29, 13n, C29, 2, -1771000438);
        } catch(e42) {
        }
        try { new v34(); } catch (e) {}
        let v46 = -65535;
        Math.min(C29);
        ++v46;
        Math.min(v46);
        const v53 = new Int32Array(2917);
        v53["boolean"](-1771000438);
        Math.hypot(-5);
        Math.exp(-5);
        const v58 = a31[Math];
        super[2.2250738585072014e-308];
        a31 ** v58;
        Math.sqrt("boolean");
        const v65 = "boolean" >>> a32;
        ~-297109777;
        v65 >>> -297109777;
        const v70 = `
            try {
                new Float64Array(127);
            } catch(e72) {
            }
        `;
        Math.expm1(-297109777);
        Math.imul("boolean", v28);
        return this;
    }
}
new C29();
new C29();
new C29();
const v81 = [-12,0,-2107431110,4,512,-63916];
v81[Symbol.toPrimitive] = f7;
const v85 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
const v86 = [3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
let v87;
try { v87 = v86.map(); } catch (e) {}
function f88(a89, a90, a91) {
    return a90;
}
const v92 = f88(-0.22113456748615867, v81);
v92.toString = f7;
const v93 = f88(v86, v85);
v93.fill();
f88(v86, v93).includes(v87, v92)?.[5];
class C98 {
    static {
        for (let v103 = 0; v103 < 32; v103++) {
        }
    }
}
const v105 = new C98();
function f106(a107, a108, a109) {
    const o110 = {
        8: a108,
        4: v105,
        1838408335: a108,
        ...a107,
    };
    return o110;
}
Object.defineProperty(v26, 1024, { configurable: true, get: f88, set: f88 });
new Map();
