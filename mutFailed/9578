const v2 = new Int16Array(7);
function f6() {
    const o9 = {
        [null]() {
            super.b;
        },
        "f": null,
    };
    return o9;
}
f6(35, 7, 35);
const v11 = new Promise(35);
const v14 = new Uint32Array(2);
const v16 = new Int16Array();
[] = v16;
new Int16Array(12);
class C20 extends Int16Array {
    get b() {
        class C23 extends Float32Array {
        }
        const v24 = new C23();
        v24.dotAll;
        try { v14.findLast(this); } catch (e) {}
        const t23 = 35;
        t23[9] = this;
        const v27 = v2 != 7;
        v27 ? v2 : 7;
        return v27;
    }
    #d = 12;
    a;
    b;
}
new C20(v11);
new C20();
new C20();
const v32 = [1000000000000.0,-69.34951598670989,1000000000.0,0.0,0.7201070415433757,1000000000000.0,-5.0,-2.220446049250313e-16];
function f33(a34, a35) {
    try { new a34(v32, a34); } catch (e) {}
    new Int8Array(12);
    return Int8Array;
}
v32.valueOf = f33;
Math.imul(v32);
class C42 {
    constructor(a44, a45) {
        const v46 = `
            Uint8Array >> v46;
        `;
        eval(v46);
    }
}
new C42();
let v51 = 2;
v51++;
function f53(a54) {
    a54 === a54;
    a54 <= a54;
    const o63 = {
        __proto__: v51,
        /*
        __proto__: v32,
        */
        "f": Math,
        set e(a58) {
        },
        get d() {
            return this;
        },
        213: a54,
        ...a54,
        "g": v51,
        p(a61, a62) {
            return f53;
        },
    };
}
%PrepareFunctionForOptimization(f53);
const v64 = f53();
%OptimizeFunctionOnNextCall(f53);
f53(v64);
