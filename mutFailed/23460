function f0() {
    const o9 = {
        "c": 4.893515813254272e+307,
        [4096]: -928596934,
        get e() {
            for (const v5 of 4.893515813254272e+307) {
                const v6 = v5?.[v5];
                try { this.log(this, this, v6); } catch (e) {}
            }
            let v8;
            try { v8 = this(-928596934, this, this, this, 4096, this); } catch (e) {}
            return v8;
        },
        540: -928596934,
        "d": 4.893515813254272e+307,
    };
    return o9;
}
f0();
f0();
f0();
try { Uint16Array.bind(Uint16Array); } catch (e) {}
new Uint16Array(2);
let v17 = 1495;
v17--;
new Int8Array(v17);
new Int8Array(3896);
function f24(a25, a26, a27, a28) {
    a25--;
    a26++;
    function f31() {
        Math[Symbol.toPrimitive] = f0;
        let v35 = Math.expm1(a26);
        v35--;
        const v37 = v35--;
        v37 >>> v37;
        const v39 = Math.tanh(Math);
        Number.isNaN(v39);
        const o42 = {
            [v39]: v35,
        };
        o42.e = o42;
        o42.NaN = o42;
        return f24;
    }
    f31.g = f31;
    f31();
    eval(a28);
    %OptimizeFunctionOnNextCall(f31);
    return eval;
}
for (let v46 = 0; v46 < 5; v46++) {
    f24(v46, v46, f24, f24);
}
