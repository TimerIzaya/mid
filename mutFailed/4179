const v0 = [-12,-1642912151,10,1024,16,1073741824];
const v1 = [9223372036854775807,14,-212332969,-2147483649,-8,1000,1746004847,-682351091];
const v2 = [4,-30947,536870912,-40875,-45067,-36354];
function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    const v7 = this?.constructor;
    let v8;
    try { v8 = new v7(a6, F3); } catch (e) {}
    a5[1];
    try {
        v7.a = a6;
    } catch(e10) {
    }
    try {
        v2.h = a5;
    } catch(e11) {
    }
    try {
        this.f = a6;
    } catch(e12) {
    }
    const v15 = v8 >>> 38445;
    38445 / 38445;
    const v17 = 38445 >> v8;
    let v18 = v15 * v15;
    v17 - 38445;
    v18--;
}
const v21 = new v0(v2, v0);
const v22 = new F3(v0, v1);
v22.b = v22;
const v23 = new F3(v1, v1);
[4294967297,1073741824,-1879186251,-13];
const v25 = [6,-17687,-46350,9007199254740990];
const v26 = v25[1];
const v27 = [-10551];
v27[0] = v25;
function f28(a29, a30, a31) {
    try { a30.slice(a30, a30); } catch (e) {}
    const o45 = {
        "f": v0,
        [a29]: v27,
        0: a30,
        "h": a29,
        ...a31,
        "c": v23,
        __proto__: a30,
        [a30](a34, a35) {
            new Int16Array(128);
            new Int32Array(1362);
            new v25(1000);
            return v2;
        },
    };
    return v26;
}
try { f28(v1, v2, v1); } catch (e) {}
f28(v0, v2, v23);
const v48 = f28(v27, v0, v23);
try { v48.findIndex(v48); } catch (e) {}
f28(v27, v0, v21);
let v51 = -65536;
12 << 9007199254740991;
v51--;
