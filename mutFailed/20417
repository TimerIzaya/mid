const v4 = new Date();
("entries").toUpperCase();
const v8 = Symbol.toPrimitive;
const v10 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
new Date();
const o13 = {
};
new Proxy("N", o13);
try { v10.copyWithin("f", v4); } catch (e) {}
v10[27] = 27;
const t10 = "TKa6Q";
t10[4] = "TKa6Q";
const v21 = 0 >> 0;
const v22 = v21 - v21;
const v23 = v22 + v22;
try { ("e").charAt("1496700085"); } catch (e) {}
function f26(a27, a28) {
    return a28[3];
}
f26(v22, v10);
f26("e", "e");
const o42 = {
    get a() {
        const o35 = {
        };
        for (const v36 of "N") {
            super["TKa6Q"];
        }
        gc();
    },
};
("entries")[5];
("entries")["endsWith"](v23);
"N" || 0;
try { v8.o(Symbol); } catch (e) {}
Uint32Array.prototype = Uint32Array;
new Uint32Array(3522);
try { new Int32Array(Int32Array, Int32Array, "e"); } catch (e) {}
const v54 = ([]).constructor;
try { v54.call(f26); } catch (e) {}
const v56 = new v54();
function F57(a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    try { a59.findLast(a60); } catch (e) {}
    this.c = a59;
}
new F57(v56);
new Int32Array(255);
~6;
new Uint32Array(6);
const v69 = Symbol.hasInstance;
Symbol.for(v69.description);
const v75 = new Uint32Array(4096);
v75[3362] = v75;
const v78 = new Uint8Array(3521);
false || false;
const v81 = v78.includes(false);
v81 || v81;
function f83(a84, a85) {
    return a85;
}
const v88 = [v69];
const o89 = {
    "arguments": v88,
    "type": "function",
};
o89.arguments;
new Worker(f83, o89);
