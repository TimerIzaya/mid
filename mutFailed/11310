const v3 = new BigUint64Array(3768);
const v9 = new BigUint64Array(4);
function F10(a12, a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    this.a = a13;
}
const v15 = new F10(BigUint64Array, 4, v9);
for (const v16 of v9) {
    Object.defineProperty(v15, 241, { enumerable: true, value: v16 });
    const o17 = {
    };
    o17.g = v16;
    o17.b = 241;
    const o18 = {
    };
    o18.g = v16;
    o18.d = v16;
}
const v19 = new BigInt64Array(4046);
const v22 = new Int8Array(3768);
function f23(a24, a25) {
    a24++;
    const v27 = [-671138503,-536870912,-9007199254740991,-9007199254740992,-268435456,128,2023752111,-970019998,8839,6];
    const v29 = Symbol.toPrimitive;
    v27[v29] = f23;
    const v30 = [1073741824,-46456,536870888];
    function f31(a32, a33) {
        try { new v29(); } catch (e) {}
        class C35 {
        }
        return v3;
    }
    v30.valueOf = f31;
    const v38 = Math.exp(v27 | v30);
    let o57 = {
        get d() {
            this[115] /= 4046;
            let v41 = -268435456;
            return Math.log(this & --v41);
        },
        "d": a24,
        ...a24,
        get e() {
            Math.exp(-359.60295377780096);
            class C50 {
                static {
                    if (-4.092259470322528 <= -4.092259470322528) {
                    }
                }
            }
            this.d;
            return a25;
        },
        __proto__: v22,
        ...a25,
        ...BigUint64Array,
        536870888: BigInt64Array,
    };
    [,...o57] = v19;
    a25?.[4046];
    const v59 = [536870888,8];
    v59.concat(v59);
    function f62() {
        return Float32Array;
    }
    const o65 = {
        "maxByteLength": 3035,
    };
    Object.defineProperty(o65, "cause", { enumerable: true, value: v38 });
    const v67 = new RangeError(512, o65);
    new Float32Array(v67);
    return a24;
}
f23(115, 3768, v3);
f23(4046, 3768);
const v72 = f23(4046, 4046);
v72 + v72;
const v75 = (115)?.UTC;
try { new v75(v75, 4046, 4046, Date, BigUint64Array, BigUint64Array, Date); } catch (e) {}
Uint8ClampedArray.length = Uint8ClampedArray;
const v78 = new Uint8ClampedArray(Date);
const v79 = v78[2];
/xfoo[z]*/dim;
/B/vdi;
const v84 = /Xf(\1a)/gvim;
[9];
[v84,v79];
[-65537n];
function F94() {
    if (!new.target) { throw 'must be called with new'; }
}
const v96 = new F94();
const v97 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v98 = 0; v98 < 5; v98++) {
    function f99() {
        try {
            v97.forEach();
        } catch(e101) {
            for (let v102 = 0; v102 < 5; v102++) {
                function f103() {
                    class C104 {
                    }
                    const v105 = new C104();
                    try { v105.isPrototypeOf(v105); } catch (e) {}
                    return v105;
                }
                f103();
                %OptimizeFunctionOnNextCall(f103);
            }
            e101.a = e101;
            e101.a = v96;
            e101.a = e101;
        }
        const v109 = Symbol.toPrimitive;
        v109.description;
        switch (3768) {
            default:
                try {
                    Symbol("536870889");
                } catch(e113) {
                }
                break;
        }
        Symbol.for();
        return v109;
    }
    const t126 = [8.360030709333259,416819.70671931445,1000.0,-1.0513464134302462e+307,2.2250738585072014e-308,-999.1393293497049];
    t126.length = 1;
    try {
        v15.d = -1073741824;
    } catch(e118) {
    }
    f99();
    %OptimizeFunctionOnNextCall(f99);
}
