class C3 {
    static get b() {
        let v5 = this | -12;
        for (const v7 in C3) {
            ({"b":v5,} = this);
        }
        try {
            this.MAX_VALUE = -12;
        } catch(e8) {
        }
        let v9;
        try {
        const t0 = 1000;
        v9 = t0(1000, this);
        } catch (e) {}
        Math.cos(v9, -12);
        v9 ** v9;
        Math.pow(-957.3206927268667);
        return this;
    }
    15;
}
const v16 = new C3();
C3[1073741825] = -12;
try {
    v16.toString = -12;
} catch(e17) {
}
const v18 = new C3();
const v19 = new C3();
class C20 extends C3 {
    static #b;
    constructor(a22, a23, a24, a25) {
        super();
        try {
            this.#b >>= a25;
        } catch(e26) {
        }
    }
    static #toString(a28, a29) {
        v16[a29];
        const o31 = {
        };
        const v33 = new Proxy(v16, o31);
        try {
            v33.__proto__ = v33;
        } catch(e34) {
            e34 = a28;
            try {
                super.join(a29, this, a28, o31, C3);
            } catch(e36) {
            }
        }
        v19[a29] = o31;
        return v33;
    }
}
new C20(v18, v16, C3, v19);
new C20(v19, v19, C3, C20);
new C20(v16, C20, v19, v16);
new Int32Array(257);
const v45 = new Uint16Array(-9007199254740991);
new Float32Array(129);
class C50 {
}
const v51 = (a52, a53, a54) => {
    const v55 = Uint16Array;
    -v45;
    const v60 = 9 & 0.4884088289937445;
    Math.atan(-12);
    Math.asinh(v60);
    1073741825 & 0.4884088289937445;
    return Math.expm1(1073741825);
};
let v65;
try {
const t0 = 1073741825;
v65 = t0();
} catch (e) {}
v65?.[126349911];
