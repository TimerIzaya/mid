const v1 = new WeakSet();
new Map();
class C4 {
    static 2147483649;
    static toString(a6, a7) {
        super.h = Map;
        function F8(a10, a11, a12, a13) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = this;
            } catch(e14) {
            }
            try {
                this.c = a11;
            } catch(e15) {
            }
        }
        const v16 = new F8(Map, WeakSet, v1, Map);
        const v17 = new F8(Map, F8, a7, v1);
        new F8(Map, v16, v17, v17);
        return C4;
    }
}
new C4();
new C4();
const v21 = new C4();
const v28 = [-1727815353,-9007199254740991];
[4,13];
const v30 = [45504,65537,-9007199254740992,91446022,-52533,14,11,65535,361664882,-30012];
const v34 = new Int16Array(16);
try { v34.find(v34); } catch (e) {}
class C36 {
}
try {
    v21.a = v30;
} catch(e37) {
}
0.6822080711934364 / 0.6822080711934364;
function F43(a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    const v47 = this?.constructor;
    function f48() {
    }
    const v50 = v30.constructor;
    try { new v50("dotAll"); } catch (e) {}
    const v52 = v47?.constructor;
    try { new v52(v47); } catch (e) {}
    try { new v47(0.29489550717955537, a45); } catch (e) {}
    try { this.constructor(0.6822080711934364, this); } catch (e) {}
    try {
        this.f = 3.0;
    } catch(e56) {
    }
}
function f57(a58, a59) {
    new BigInt64Array(-536870912);
    return C4;
}
F43[Symbol.toPrimitive] = f57;
const v64 = F43?.constructor;
try { new v64(F43); } catch (e) {}
const v66 = new F43("string");
v66.f = v66;
let v68 = 127;
v68++;
const v70 = v68 != v68;
const v73 = new Int32Array(Int32Array);
v73.toString = Symbol;
const v74 = [];
function f75() {
    const o76 = {
    };
    try {
        o76.a = "536870889";
    } catch(e78) {
    }
    const o80 = {
        p() {
            return F43;
        },
        [v74]: v74,
        "a": v74,
    };
    const v81 = o80?.constructor;
    try { new v81(v70); } catch (e) {}
    return v81;
}
const v85 = Math.acosh(2);
const v86 = [1073741824,1073741823,1376142744,1073741825];
try {
    v86.forEach(v85);
} catch(e88) {
    e88.e = e88;
}
const t94 = f75();
t94();
f75();
const v92 = (a93, a94) => {
    return a94 * a94;
};
0.6058227007604853 | 0.6058227007604853;
let v98 = -Infinity;
v98++;
const v102 = new Float64Array(129);
let v103;
try { v103 = v102.entries(); } catch (e) {}
try { v103.next(); } catch (e) {}
const v106 = 255 - 255;
class C107 {
    static [v73] = 0.29489550717955537;
}
const v109 = true || true;
const v110 = [1.6045920026493271e+308,-5.0,358.53542407847453,-4.6776659891528976,-1000.0,-Infinity];
const o118 = {
    valueOf() {
        try { Reflect.defineProperty(-12); } catch (e) {}
        const v116 = new Int8Array();
        v116.buffer;
        return v109;
    },
};
function f119() {
    ([1000000.0,0.218433446981681,-5.0,-919787.2036172998,872389.6270716691]).pop;
    const v123 = v106.constructor;
    try { new v123(3n); } catch (e) {}
    ([Float32Array])["concat"]();
    return v70;
}
Symbol.toPrimitive;
Object.defineProperty(o118, v103, { writable: true, configurable: true, enumerable: true, value: f119 });
v110.length = o118;
class C131 {
}
const o132 = {
};
try { ("Xkz0W").split(v28, -536870912); } catch (e) {}
class C135 {
    c;
    toString(a137, a138, a139, a140) {
        try { this["throw"](); } catch (e) {}
        const v146 = new Uint8ClampedArray(512);
        new Uint8ClampedArray(798, ...v146, eval());
    }
    set b(a151) {
    }
}
const v152 = new v66();
const v153 = [-Infinity,187698.93506137934,-446.4409125067523,1000000.0,-1000.0,-535.0706534930079];
try { v153(v152); } catch (e) {}
function f155(a156, a157) {
}
for (const v158 in 16) {
    function F159(a161, a162) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
try {
} catch(e163) {
} finally {
}
