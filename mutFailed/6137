const v5 = new Uint8ClampedArray(5);
const v8 = new v5(64);
try { v8.sort(-1552313064); } catch (e) {}
new BigInt64Array(1285);
-2147483647n * -2147483647n;
function F18(a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
}
class C23 {
    static get g() {
        try {
            var a = super.subarray();
        } catch(e26) {
        }
    }
}
const v27 = new v8();
let v28;
try { v28 = v27.has(BigInt64Array); } catch (e) {}
const v30 = [-14339,735253629,4294967296,3,268435456,3,57019,268435439];
Object.defineProperty(v30, "g", { writable: true, configurable: true, value: v28 });
v30.g = v30;
for (const v31 in v30) {
    ("-2").normalize("NFKC")[1];
}
const v37 = -5.0 !== -5.0;
-1000.0 % -1000.0;
new Map();
try { new WeakMap(); } catch (e) {}
WeakMap.length;
class C45 extends WeakMap {
    536870887;
}
C45.prototype = C45;
const v48 = new Int32Array(2917);
try { v48.reduce(WeakMap); } catch (e) {}
const v52 = v37[7];
v52 == v52;
const v54 = v48["lastIndexOf"](10);
let v55 = 1.6302485159507752e+308;
v55--;
-1.7976931348623157e+308 - -1.7976931348623157e+308;
("lastIndexOf").localeCompare("lastIndexOf", "symbol", "lastIndexOf");
gc.length = gc;
try {
} catch(e62) {
}
function F63(a65, a66) {
    if (!new.target) { throw 'must be called with new'; }
}
try {
const t0 = 10;
new t0(v54, 10);
} catch (e) {}
function F68(a70, a71) {
    if (!new.target) { throw 'must be called with new'; }
}
