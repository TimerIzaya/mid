const v1 = new WeakMap();
const v2 = [8218212];
const v3 = [65536,8,25963,536870888,-1689902942,10,-25235,-11,268435441];
try { v3.some(v2); } catch (e) {}
const v5 = [-268435456,24885,-65536,580175046,-12,-65535,-1030,-61689,-4096,-7];
const v6 = v5?.filter;
let v7;
try { v7 = v6(v1); } catch (e) {}
try { new v6(v1); } catch (e) {}
class C9 {
    static #f = C9;
    static get b() {
        let v15 = v3 + -v7;
        const v16 = ++v15;
        v3 - v3;
        Math.asinh(v1);
        return v16;
    }
    751 = WeakMap;
    static 9 = v1;
    static c;
}
C9[9] = C9;
let v19;
try { v19 = new C9(); } catch (e) {}
v19[751];
const v21 = new C9();
const v22 = new v21();
v22[751] = v22;
new C9();
class C24 extends WeakMap {
    static n(a26, a27, a28) {
        super.e >>>= WeakMap;
        this.a;
        return a28;
    }
    static d;
    get g() {
        const v31 = v2[v2];
        class C32 {
            f = v5;
            static 8;
            #e = v31;
            static #a;
        }
        new C32();
        new C32();
        new C32();
        return this;
    }
}
let v36;
try { v36 = C24.n(v2, v2, v19); } catch (e) {}
const v37 = new C24();
v37.c = v37;
const v38 = new C24();
const v39 = v38?.constructor;
try { new v39(); } catch (e) {}
v38.c = v38;
const v41 = new C24();
const v42 = v41?.constructor;
try { new v42(); } catch (e) {}
let v44 = -24894;
v44--;
-v36;
const v49 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v50 = 0; v50 < 5; v50++) {
    v50 - v50;
    function f52() {
        let v54 = Float64Array;
        v54 = -4294967295;
        try {
            v49.forEach(v54);
        } catch(e56) {
        }
        const o61 = {
            toString(a58, a59) {
                v50 && v54;
                return -4294967295;
            },
        };
        return v49;
    }
    const v62 = f52();
    try { v62.toReversed(); } catch (e) {}
    %OptimizeFunctionOnNextCall(f52);
}
