class C3 {
    static get e() {
        function f5() {
            return 1073741824;
        }
        this[this] = this;
        this.c /= -1000000000000.0;
        return this;
    }
    g;
    static #f = 1073741824;
    b;
}
const v6 = new C3();
function F7() {
    if (!new.target) { throw 'must be called with new'; }
}
class C10 extends F7 {
}
let v11 = new C3();
function f12(a13) {
}
[[10,-2147483649,9,-27142121,9,-284891600]] >= Uint16Array;
const v18 = new C3();
class C19 {
    a = v18;
    constructor(a21, a22, a23, a24) {
        this[v18];
        v18.g;
        v11 = a23;
        [-2];
        [10000,268435441,-9007199254740992,4];
        [-65536];
    }
    m(a31, a32) {
        new a32(1073741824, 1073741824, 1073741824, 1073741824, ...a31);
    }
    toString(a36, a37, a38, a39) {
        try { this["throw"](); } catch (e) {}
        const v45 = new Uint8ClampedArray(512);
        eval.bind();
        const v49 = new Uint8ClampedArray(798, ...v45, eval());
        v49[521] = v49;
    }
    h;
    g = 660.0809440504167;
    e;
    c = v6;
    static #d;
    static {
        if (this) {
        }
    }
    #d;
    #e = C19;
    [-1000000000000.0];
}
new C19(v18, v18, v11, v18);
new C19(v6, v6, v11, v6);
new C19(v18, v18, v18, v18);
const v54 = [4.0,-1.7976931348623157e+308];
function F55(a57, a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
}
const v60 = new F55(F55, v54, F55);
function f61() {
    function f62() {
        return f62;
    }
    const v64 = new BigUint64Array();
    v64.constructor = f62;
    return v54;
}
Object.defineProperty(v60, Symbol.replace, { writable: true, enumerable: true, value: f61 });
const v67 = new F55(v60, v60, v60);
v67.__proto__ = v54;
const v69 = Symbol.replace;
v60[v69] = v69;
