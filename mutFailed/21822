function f0() {
    const o10 = {
        n(a5) {
            try {
                this.fuck(0.7491812053818592, undefined, this, 10000);
            } catch(e9) {
            }
            return this;
        },
        "e": 0.7491812053818592,
        [0.7491812053818592]: -961.4008990622145,
        __proto__: -961.4008990622145,
        "g": -822548.2349803197,
    };
    return o10;
}
const v11 = f0();
let v12 = f0();
f0();
function f14() {
    return v11;
}
function f15(a16) {
    const o26 = {
        [v12](a18, a19) {
            const v21 = new WeakMap();
            delete a19[1596];
            return v21;
        },
        "g": a16,
        __proto__: v11,
        "e": f14,
        53137849: v12,
    };
    return o26;
}
const v27 = f15(v12);
f15(v12);
f15(v27);
class C30 extends f14 {
    static o(a32, a33, a34) {
        v12 = a32;
        function F39(a41, a42) {
            if (!new.target) { throw 'must be called with new'; }
        }
        function F43() {
            if (!new.target) { throw 'must be called with new'; }
            const v45 = this.__lookupGetter__;
            try { v45(); } catch (e) {}
            const v48 = Date.toString();
            const v49 = v48[23];
            try { v49.strike(F43, F43, v48, Int16Array); } catch (e) {}
            const v51 = v48.replaceAll();
            let v52;
            try { v52 = v51.replaceAll(); } catch (e) {}
            const v54 = new Uint32Array(v45, v45, v45);
            v54[2];
            const v57 = new Set(v52);
            const v58 = v57.add;
            const v60 = v57["delete"]();
            const v61 = v60 || v60;
            const v62 = v61 || v61;
            const v63 = v61 && v61;
            const o65 = {
            };
            let v67;
            try { v67 = v57.forEach(v62, v58); } catch (e) {}
            const v69 = -v60;
            v69 >>> v69;
            const v71 = Int16Array >>> v62;
            try {
                arguments.fuck();
            } catch(e73) {
            }
            const v75 = ("getPrototypeOf").blink();
            const v76 = v75.trimRight;
            try { v76(v62, Int16Array); } catch (e) {}
            const v78 = v75[28];
            const v79 = v78.strike();
            try { v79.isWellFormed(); } catch (e) {}
            const v81 = v75.strike(v52);
            const v82 = v81.replace(v60, Int16Array, v75, Array, v81);
            v82[11] = v82;
            class C83 {
            }
            class C84 extends C83 {
                ["getPrototypeOf"] = C83;
            }
            const v85 = new C84();
            const t89 = v85.getPrototypeOf;
            new t89();
            const v88 = new F39();
            const t92 = v88.constructor;
            const v90 = new t92(v54);
            v90.valueOf(Int16Array, F43);
            const v92 = new C84();
            const t96 = v92.constructor;
            new t96();
            const t98 = v92.getPrototypeOf;
            new t98();
            const v98 = BigUint64Array.of();
            try { v98.entries(Int16Array, F43, v49); } catch (e) {}
            try { Int8Array(Int8Array, Int8Array, v67); } catch (e) {}
            const v102 = new C84();
            const v103 = v102.getPrototypeOf;
            new v103();
            const t106 = v102.getPrototypeOf;
            const v106 = new t106();
            const v107 = v106.__defineSetter__;
            try { v107(v71); } catch (e) {}
            const t110 = v102.getPrototypeOf;
            const v110 = new t110();
            v110.getPrototypeOf = v110;
            const v111 = new C84();
            const v112 = v111.getPrototypeOf;
            const v113 = new v112(F43, "getPrototypeOf", v51);
            v113.b = v113;
            const v114 = new v112();
            const v115 = v114.constructor;
            try { v115.call(v78); } catch (e) {}
            const v117 = new v115();
            let v118 = v117.getPrototypeOf;
            v118++;
            const t122 = v111.constructor;
            const v121 = new t122(F43, v63);
            const v122 = v121.constructor;
            new v122(v122);
            const v124 = v121.getPrototypeOf;
            try { v124.toString(arguments, v124, v103); } catch (e) {}
            const v126 = Array(19793);
            v126.with(v75, v71);
            for (const v128 of v126) {
            }
        }
        new F43();
        new F43();
        return a33;
    }
    #m(a132, a133) {
        const v134 = f0 - v27;
        try { a132.n(v134, ...v134, a132, a132); } catch (e) {}
        return v134;
    }
}
new C30();
new C30();
new C30();
/(a\1)*/is;
/[^a\w]/udy;
const t147 = [-4294967296];
t147.length = 257;
