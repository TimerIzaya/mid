new Uint8Array(3860);
function f6() {
    return f6;
}
function f7() {
    return f7;
}
const o9 = {
};
const v11 = Symbol.isConcatSpreadable;
o9[v11] = v11;
const v13 = new Float32Array(142);
const v14 = new v13();
v14[-2];
function F16() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v18 = 0; v18 < 1000; v18++) {
        const v20 = new WeakMap();
        const v21 = /8[\cA]v/uisy;
        function f22(a23, a24) {
            const v25 = [v21];
            v20.set(v25, v25);
            return ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
        }
        const v33 = ("p" + v18).fontcolor();
        let v34;
        try { v34 = v33.trimLeft(this); } catch (e) {}
        v34[12];
    }
}
const v38 = new BigUint64Array(61);
class C39 extends Float32Array {
    3645;
    p(a41, a42, a43) {
        let v46 = 1.0;
        const v47 = ++v46;
        const v48 = v47 / v47;
        11 >> 11;
        ~(v48 | v38);
        return "setUTCDate";
    }
    104 = "setUTCDate";
}
const v52 = [-13939,-12,1904189168];
const o53 = {
};
function f54(a55, a56) {
    v52[3765] = o53;
    return a55;
}
new C39();
new C39();
new C39();
new Uint8ClampedArray([5.0]);
const v63 = [Infinity,-1.0,334.9707523876036,1.7976931348623157e+308,-Infinity,9.222971090967075,5.837116397818294,-1.9364306250449163e+307];
const v64 = [-686672.7285304164,-9.917362466302309e+307,2.220446049250313e-16,5.0,-795.7616940433296,0.07678289127045357,-2.2250738585072014e-308,-1.1183285484106199e+308];
function f65(a66) {
    const o67 = {
        268435456: v63,
    };
    function f68(a69, a70, a71) {
        this[a66] += a66;
        return this;
    }
    const v75 = [f65,v64,a66];
    const o76 = {
        "arguments": v75,
        "type": "function",
    };
    new Worker(f68, o76);
    return o67;
}
