class C3 {
    static {
        const v5 = this >> "9223372036854775807";
        const t3 = "9223372036854775807";
        t3[7] = v5;
        "9223372036854775807" | v5;
    }
    static toString(a8, a9) {
        super.a ||= -4.245551589726736e+306;
        ("function")["function"];
        return -21290n;
    }
}
const t13 = "function";
const v14 = new t13();
new C3();
const v16 = new C3();
const v18 = ["9223372036854775807",v14,-4.245551589726736e+306];
["function",v18,true];
[v16,v18,v16];
[738224.3453895731,-1.6126215765036989];
[3.0,-9.525426289971367];
[-214871.51274203067,0.824407481447642,295.1644332723067];
class C25 {
    static {
        for (let v27 = 0; v27 < 25; v27++) {
            function f28() {
                return C25;
            }
            const v29 = [601759695];
            const v30 = [1073741824,1073741823,1376142744,1073741825];
            function f32(a33, a34, a35, a36) {
                function f38() {
                    return f38;
                }
                const v39 = f28();
                const v41 = new Int8Array();
                const v44 = new Uint32Array(4);
                [v44];
                const v48 = BigUint64Array * 536870887;
                v48 ** v48;
                function f50(a51, a52) {
                    return v39;
                }
                f50();
                const v54 = v41.buffer;
                Object.defineProperty(v54, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                v54.slice(2147483648);
                %OptimizeFunctionOnNextCall(f38);
                let v59;
                try { v59 = v30["find"](..."find", a36, ...v29, ...v30, ...522675525n); } catch (e) {}
                Symbol("find");
                const v63 = new Uint8ClampedArray();
                const o64 = {
                    ...v63,
                };
                v59 <= a35;
                return arguments;
            }
            for (let v66 = 0; v66 < 5; v66++) {
                f32(this, v66, v66, v66);
            }
        }
    }
}
