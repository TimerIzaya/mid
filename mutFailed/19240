let v1 = -4.0;
class C3 {
    ["1rBl"] = "function";
    constructor(a5, a6) {
        let v4 = this;
        function f7() {
            a6[v1] = "1rBl";
            ({"d":v4,"e":C3,"g":v1,} = C3);
            return v1;
        }
        a5.toString = f7;
        v4.b = v4;
        const v8 = a6?.constructor;
        try { new v8(v4); } catch (e) {}
        a5?.[a5];
        let v11 = v4 ** "1rBl";
        v11--;
    }
    static g;
    static valueOf(a14) {
        const v15 = ~this;
        "function" !== "function" ? "function" : "function";
        Math.cos(v15);
        Math.atanh(v15);
        +-2147483647;
        return -2147483647;
    }
}
function f23(a24, a25) {
    [a25,a24,...a24] = "function";
    return 419.63004036622283;
}
C3[Symbol.toPrimitive] = f23;
const v31 = new C3(v1, "function");
let v32 = new C3(v31, "function");
v32.e = v32;
let v33 = v32.b;
const v34 = new C3(C3, v1);
const v36 = new Map();
const v38 = new Uint32Array();
const v39 = [1711596310];
v39[9] = "function";
v39[9] = v38;
new Int32Array();
class C42 {
    get f() {
        v32 += v36;
        let v44;
        try { v44 = this(this, this, v36); } catch (e) {}
        this.f %= v1;
        v34[1877] = v44;
        const o47 = {
            "maxByteLength": 2137,
        };
        const v49 = new SharedArrayBuffer(2137, o47);
        new Int8Array(v49);
        Math.atan2(v1, v1);
        const o54 = {
        };
        function F56(a58, a59) {
            if (!new.target) { throw 'must be called with new'; }
            const v60 = this.constructor;
            let v61;
            try { v61 = new v60(); } catch (e) {}
            -429.3290910931888 << v61;
        }
        new F56();
        return o47;
    }
}
let v64;
try { v64 = new C42(); } catch (e) {}
const v65 = new C42();
function f66(a67) {
    C3 = a67?.h;
    return v64;
}
v65.toString = f66;
let v69;
try { v69 = v65.toString(); } catch (e) {}
v69[9];
new C42();
const v72 = new C42();
let v73;
try { v73 = v72.toString(); } catch (e) {}
try { v73.toLocaleLowerCase(); } catch (e) {}
function f75() {
    function f77() {
        v36[2];
        v33 -= "function";
        return v32;
    }
    Math[Symbol.toPrimitive] = f77;
    Math.asin(Math);
    return f75;
}
%PrepareFunctionForOptimization(f75);
f75().caller;
%OptimizeFunctionOnNextCall(f75);
f75();
