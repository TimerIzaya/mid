function f0() {
    function f3() {
        return f3;
    }
    ("-1723624938").slice(1024, 1024);
    const o17 = {
        [268435439]: "f",
        set a(a9) {
            const o12 = {
                "maxByteLength": 1956,
            };
            const v14 = new ArrayBuffer(16, o12);
            new Uint32Array(v14);
        },
    };
    return o17;
}
const v18 = f0();
const v19 = f0();
f0();
for (let i24 = 0, i25 = 10;
    (() => {
        const v26 = i25 < i25;
        class C27 extends i25 {
        }
        return v26;
    })();
    i24++) {
}
function F33(a35) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a35;
    } catch(e36) {
    }
    try {
        this.e = a35;
    } catch(e37) {
    }
    try {
        Date.d = v18;
    } catch(e38) {
    }
}
new F33(v18);
new F33(v18);
new F33(v18);
function F47(a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = "f";
}
new v19();
class C54 {
    static get h() {
        const o59 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o59);
        return 268435441;
    }
}
const v61 = new C54();
const v62 = new C54();
const v63 = new C54();
class C64 extends C54 {
    3;
    [v62] = v61;
    ["256"] = v61;
    static #toString(a66, a67, a68) {
        try { a66("256", v63, a66, a68); } catch (e) {}
        Math.atan(16);
        a67 ^ 16;
        return Math.abs(16);
    }
}
const v75 = new C64();
if (v75 <= v63) {
    new Uint8ClampedArray(75);
    new v62(6);
    new BigInt64Array(4294967296);
} else {
    new C64();
}
for (let v88 = 0; v88 < 10; v88++) {
    const t85 = "f";
    t85[1073741824] = 4294967296;
}
