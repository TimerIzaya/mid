const v2 = new Date();
function f7(a8) {
    function f10(a11) {
        Date();
        %PrepareFunctionForOptimization(Date);
        Date();
        Date();
        %OptimizeMaglevOnNextCall(Date);
        Date();
    }
    this.onmessage = f10;
    new BigInt64Array(127);
    new Uint8ClampedArray(210);
    new BigUint64Array(0);
    let v25;
    try { v25 = Date.UTC(210, 210, 0); } catch (e) {}
    v2 >>> v25;
}
const v32 = [v2];
const o37 = {
    "arguments": v32,
    "type": "function",
    get b() {
        [22709,[[1124056978,this,v2,-2147483649]]];
        return this;
    },
};
const v38 = new Worker(f7, o37);
[[128,v2,7],22709,true];
const v43 = [1124056978];
function f44() {
    return 7;
}
class C48 {
    static 3143;
    static ["-2"];
    #f = "-2";
    static #a;
    #c;
    #valueOf(a50, a51) {
        const v52 = a51 == a51;
        v52 ? a51 : a51;
        const v54 = ["-2",this,"setMonth",a50,"-2"];
        [v54,v54,this,this];
        [v52,"-2","4X",a50];
        return a50;
    }
    10 = "4X";
    #g = "-2";
}
new C48();
const v58 = new C48();
new C48();
try { new WeakSet(); } catch (e) {}
new WeakSet();
-536870912 ^ -536870912;
[-256,-256,5,-9007199254740991,-128,1073741825,-11,-49255];
[35577,123452243,-2,65305,268435441,11,-58686];
const v69 = [1506147375,1598671956,64,-23009,-512929497,-1432178736,4];
try { v69.sort("-2"); } catch (e) {}
6 | 6;
let v75 = Int16Array;
Object.defineProperty(v43, "a", { configurable: true, enumerable: true, value: "size" });
new Worker(Int8Array, WeakSet, v58, v2, v58);
try {
    v38.f = v43;
} catch(e78) {
}
function f79() {
    return f79;
}
const v81 = new Date(f79);
Date.UTC(f79, f79, Date, v81.setUTCMilliseconds(Date), Date, Date);
function F85(a87, a88) {
    if (!new.target) { throw 'must be called with new'; }
    Number.isFinite(Number);
    const v91 = this.constructor;
    try { new v91(); } catch (e) {}
    const o93 = {
        "b": F85,
    };
    new Number(2.2250738585072014e-308);
}
new F85();
new F85();
class C99 {
    constructor(a101) {
        const v102 = this.constructor;
        v102.d = v102;
        try { new v102(); } catch (e) {}
        class C104 {
            9;
            3389;
        }
        new C104();
        new C104();
        new C104();
        ("size").c;
        const v109 = ("size").g;
        ("size").length;
        let v111 = v109?.[7];
        [...v111] = "size";
        /a\bc/vd;
    }
}
function f113(a114, a115, a116) {
}
const o117 = {
};
class C118 {
    static #n(a120) {
    }
}
new C118();
new C118();
try {
} catch(e124) {
}
v75 = Int16Array;
