function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.f = this;
    this.h = F0;
    try {
        this.h = 10;
    } catch(e3) {
    }
    try {
        this.f = 10;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
const v7 = new F0();
function f8(a9) {
    const o21 = {
        "h": F0,
        valueOf(a11) {
            %VerifyType(f8);
            function F12(a14, a15, a16) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.h = a16;
                } catch(e17) {
                }
            }
            new F12(this, v5, v6);
            const v19 = new F12(v7, v7, this);
            const v20 = new F12(a9, v19, v7);
            return v20;
        },
    };
    return o21;
}
f8(v6);
f8(v7);
f8(v5);
new Uint8ClampedArray(11);
new Float32Array(1000);
new Int8Array(1362);
const v34 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v35 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
new Uint32Array(v34, 0, 0);
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
}
new F41(v35, 0);
new v6();
class C48 {
}
/5*/gi;
const v52 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v53 = [601759695];
const v54 = [1073741824,1073741823,1376142744,1073741825];
const t56 = "b";
t56.e = "B";
function f57(a58, a59, a60, a61) {
    function f62() {
        let v65 = Float64Array;
        v65 = a59;
        b = v53;
        v34.length;
        try {
            v54.forEach(v65);
        } catch(e68) {
        }
        const v69 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v71 = Symbol.toPrimitive;
        const o78 = {
            toString(a73, a74) {
                const v75 = a61 && v65;
                function f76() {
                    a73 *= v71;
                    return v65;
                }
                return v75 <= v69;
            },
        };
        const o99 = {
            "c": -4294967297n,
            [522675525n](a81, a82) {
            },
            "c": v53,
            valueOf(a84, a85) {
                return a85;
            },
            "b": -4294967295,
            [-4294967297n](a87, a88, a89, a90) {
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v52,
            ...v53,
            "type": "Vre",
            ..."Vre",
            valueOf(a93, a94) {
                return a94;
            },
            ...a58,
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a96, a97, a98) {
            },
            5: -4294967295,
            6: -268435456,
        };
    }
    f62();
    new Int8Array();
    %OptimizeFunctionOnNextCall(f62);
    try { v54["find"]("find", a61, v53, v54, 522675525n); } catch (e) {}
}
for (let v105 = 0; v105 < 10; v105++) {
    f57();
}
%OptimizeFunctionOnNextCall(f57);
f57();
