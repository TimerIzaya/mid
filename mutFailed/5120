const v0 = [-1.7976931348623157e+308];
const v1 = [Infinity,-154.86055770482926,-1000.0,7.47246126836688e+307,-313193.42967350816,742781.6640336332,-1.0,-815612.4421019945,-1000.0];
[-251.37931705425126,3.0,637.195002445249,5.951909407476705,0.725451874119402];
const v5 = new Uint8ClampedArray(0);
const v8 = new Uint8Array(129);
v1[v8] = v1;
h = 5;
try { v5.reduce(v5, 0); } catch (e) {}
let v12;
try { v12 = v1.includes(v0, 5); } catch (e) {}
const o16 = {
    "execution": "sync",
    "type": "minor",
};
const v17 = gc(o16);
const v18 = new Uint8Array(5);
const v20 = new Set();
const v21 = [Set,Set,v20];
function f22(a23, a24, a25) {
    return f22;
}
const v28 = [v21];
let o29 = {
    "arguments": v28,
    "g": v28,
    "c": v18,
    "a": v28,
    15: Uint8Array,
    "f": Worker,
    "type": "function",
};
--o29;
Object.defineProperty(v21, "f", { set: f22 });
const t33 = "function";
t33[512] = v12;
v0[0] = v17;
new Worker(f22, o29);
