const v0 = [-513120.49378734815,253047.03266275604,5.0,-1000000.0,-294.7982906087501];
const v1 = [0.08353358972074243,-802447.840501362,-2.220446049250313e-16,4.0,432.95178259841646,28830.741171783884];
[-0.0];
const v5 = new Uint8Array(4);
v5[3] = v5;
new BigUint64Array(0);
new Uint32Array(191);
function f12(a13, a14, a15, a16) {
    a15 >>> a15;
    const o28 = {
        "f": BigUint64Array,
        m(a19, a20, a21, a22) {
            const v24 = Symbol.toPrimitive;
            const o27 = {
                [v24]() {
                    this[a14] = v1;
                    delete v0?.length;
                    return a16;
                },
            };
            return Symbol;
        },
        "g": v5,
    };
    return o28;
}
f12.length;
f12(4, 191, 4, 191);
f12(191, v5, 4, 191);
const v32 = f12(4, 0, 0, 0);
const v33 = v32?.f;
try { new v33(v32, v32, Uint8Array); } catch (e) {}
Object.defineProperty(BigInt64Array, Symbol.toPrimitive, { configurable: true, enumerable: true, value: f12 });
function f39() {
    const o41 = {
        __proto__: 2,
    };
    o41.h = o41;
    o41.e = o41;
    const v42 = new Uint16Array();
    v42[1] = v42;
    return BigInt64Array;
}
let v43 = 218;
v43--;
const v45 = new BigInt64Array(v43);
v45.sort(f39);
