class C3 {
    #toString(a5) {
        const t2 = "f";
        t2.length >>>= a5;
        function F6(a8) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = F6;
            } catch(e9) {
            }
            try {
                this.e = a8;
            } catch(e10) {
            }
            try {
                C3.d = a8;
            } catch(e11) {
            }
        }
        const v12 = new F6(this);
        new F6(v12);
        new F6(v12);
        return v12;
    }
}
new C3();
new C3();
const v17 = new C3();
/[ak]/gdsy;
/(x)(x)(x)\3/vdis;
/\xed\xa0\x802i/usy;
function f26(a27, a28, a29, a30) {
    return -1547267477n;
}
const v31 = f26(-2n, -1349822283, v17);
-65535 / -128;
const v35 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v36 = [601759695];
function f37(a38, a39, a40, a41) {
    a39 * a39;
    -1547267477n < a40;
    arguments[2] = arguments;
    arguments.toString(v36, a40);
    function f46() {
        ("Vre").toLocaleUpperCase;
        ("Vre").fixed();
        const o55 = {
            "c": v36,
            valueOf(a53, a54) {
            },
            "e": -268435456,
        };
        a40 * (4294967296n).valueOf();
    }
    a40.a = Int8Array;
    const v59 = new a39();
    v59.buffer;
    %OptimizeFunctionOnNextCall(a40);
    a38.strike(v35, a39, v35);
}
%PrepareFunctionForOptimization(f37);
const v63 = f37();
%OptimizeFunctionOnNextCall(f37);
f37(v63, f37, -128, v31);
