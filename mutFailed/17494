class C3 {
    toString(a5) {
        new Set();
        function f8() {
            return Set;
        }
        return Set;
    }
    129 = -10;
    [-10];
}
new C3();
new C3();
new C3();
[8.610949490038069e+307,419299.31955738785,0.2850328750379527,2.220446049250313e-16,1000.0];
[3.705901834353334,5.683917679876727,1000000000000.0,-852385.6117415698,-2.3026054740231627];
[824.361653552138,-1.6950938037772982e+308,1000000.0,0.3627038669216458];
const v16 = Array.length;
const v17 = Array(v16);
const v18 = /lZ\1(a)/gvm;
Object.defineProperty(v18, "c", { enumerable: true, value: v17 });
v18.c = v18;
const v19 = /a\sh/gums;
const v20 = /(p(?:ab))/gdis;
v20.b = v20;
const v22 = new Int8Array();
Uint8Array[Symbol.toPrimitive] = Array;
const v26 = new Uint8Array();
let v27 = 128;
v27++;
const v30 = Uint8Array == 248;
const v31 = v30 && v30;
const v32 = v31 || v31;
new Int8Array(v26);
v17.valueOf = Array;
const v35 = new Uint16Array();
v35[171];
let v37 = 0;
v37++;
const v39 = new Int8Array(v20);
v39.byteOffset;
-6.515712503710309e+307 >>> -6.515712503710309e+307;
function f44(a45, a46, a47, a48) {
    v22.c = a46;
    return 248;
}
const v49 = f44(Int8Array, v39, Uint16Array, v32);
v49 >> v49;
const v51 = f44(v37, v19);
try { v51.compile(v27, v16); } catch (e) {}
let v55 = -5.0;
function f56() {
    const o60 = {
        toString(a58) {
            return [-2.0,-1000000.0,-Infinity,0.03714003700223023,-1.0];
        },
    };
    return o60;
}
const v61 = 0.41428636270946406 ^ v55;
v61 - v61;
let v63 = ++v55;
v63--;
const v65 = -197236662 && 0.41428636270946406;
let v66 = v65 + v65;
class C67 {
}
class C68 {
}
try { ("1O6N").localeCompare("bigint", "1O6N"); } catch (e) {}
v66--;
const v73 = Math.round();
v73 % v73;
let v75 = 6;
const v76 = v75++;
const v78 = new Map();
function f79(a80, a81) {
    return -38648;
}
v78.constructor = f79;
class C86 extends v78.constructor {
}
class C87 {
}
const o88 = {
};
const v89 = new C87();
const v91 = new Set();
v91.values();
v91[v89];
const v96 = new Float64Array(5);
function f97() {
    return f79;
}
function f98(a99) {
    this.onmessage = f97;
    this.valueOf = f97;
}
Object.defineProperty(v96, "toString", { writable: true, configurable: true, enumerable: true, get: f97, set: f98 });
const v101 = new Float64Array(v96);
v96 ** v101;
const v103 = new C87();
const v104 = v103.constructor;
let v105;
try { v105 = v104(); } catch (e) {}
function f106(a107, a108) {
    const v110 = [-3.0];
    v110[2] = v110;
    v110[2] = 3.0;
    class C113 {
    }
    const v114 = new C113();
    function f115() {
        return f44;
    }
    Object.defineProperty(v114, Symbol.toPrimitive, { writable: true, enumerable: true, get: f115 });
    function f118(a119, a120, a121, a122) {
        const o125 = {
            "e": v114,
            ...a119,
            "d": a119,
            [v114]: a122,
            "g": 579720983,
            256: "getInt32",
            set b(a124) {
            },
            "b": a121,
            ...v114,
            "f": a121,
            "c": C113,
        };
        return o125;
    }
    f118(f118());
    const v129 = new Float64Array(v105);
    const o134 = {
        [v89](a131, a132, a133) {
        },
    };
    return v129;
}
%OptimizeFunctionOnNextCall(f106);
f106(v76, Int8Array);
