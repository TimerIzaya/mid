const v3 = [Infinity,615594.3907667694,-341.18548266867685];
v3[1] = v3;
const v4 = [-1000000000000.0,1000.0,1000000000.0];
const v5 = [41435.1703510409,-1000000.0,1000000000000.0,-139831.70869501156,-1000000000.0,8.64042919534063,1.7844270718669667e+308,3.472817750748051e+307,-7.520690530372976];
const v6 = [-128,1073741825,-2,-65535,50513,268435441];
[16,1268359245];
const v8 = [2147483647,-4294967296,-44689,6];
try { v8.reduceRight(v5); } catch (e) {}
function f10() {
    return v8;
}
[f10,v6,v5];
[v6,["g"],f10,"byteOffset"];
function F15() {
    if (!new.target) { throw 'must be called with new'; }
    const v17 = v8.toString();
    try { v17.valueOf(); } catch (e) {}
    const v20 = new Set();
    let v21;
    try { v21 = v20.add(v4); } catch (e) {}
    v20.add;
    try { v21(); } catch (e) {}
    const v26 = new Int16Array(2183);
    4087 > v17;
    let [,,...v28] = v26;
    try { v28.reduce(v5); } catch (e) {}
    function f30(a31) {
        function f33(a34) {
            this[1] >>= 4087;
            return F15;
        }
        this.onmessage = f33;
    }
    f30.arguments = f30;
    Worker.e = Worker;
    const o37 = {
        "type": "function",
    };
    o37.arguments = v26;
    new Worker(f30, o37);
}
new F15();
const v40 = v3?.constructor;
try { new v40(); } catch (e) {}
const v42 = new F15();
v42.constructor = f10;
const v43 = v42?.constructor;
try { new v43(); } catch (e) {}
