const v0 = [562147.1913600888,490175.7921897005,9.166622802339533e+307,0.5279368206443245,1000000000.0,471791.17784464057,-1.0];
const v1 = [327716.8072968796,-1e-15,-3.8925368788471904,0.7526738972268898,1000.0,NaN,948.1748752127073,-1000.0];
const v2 = [-1000000.0,3.504321579267614e+307,-894.3292818916697,1000.0,93118.6176662508,-1.5669995864523667,0.9070926242643491,3.6568917166452975e+307,-1.0,54.87481954488362];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.toLocaleString(); } catch (e) {}
    try {
        this.d = v0;
    } catch(e7) {
    }
    try {
        this.e = a5;
    } catch(e8) {
    }
}
try { new F3(v1); } catch (e) {}
new F3(v0);
new F3(v2);
const v12 = new F3(v0);
v12.d = v12;
const v13 = [Infinity,779.5403349647165];
[-1e-15,1000.0,0.18362188471198515,0.5326539521934216,-1e-15,1e-15,16.503260305523554,869.6105869119804,1.0];
[-639.920555786606,-1000.0,1.7976931348623157e+308];
205 - 205;
const v23 = new BigInt64Array(205);
v23[192] = v23;
try { Uint16Array(205, BigInt64Array, 256); } catch (e) {}
new Uint16Array(256);
14 << 14;
Float32Array.d = Float32Array;
new Float32Array(14);
new Uint16Array(3585);
const v37 = new Int32Array(9);
try { v37.slice(v37, v13); } catch (e) {}
const v39 = v23[205];
0 >> 0;
try {
    v39.toString = v39;
} catch(e42) {
    e42.message = e42;
}
const v44 = 255 - 255;
v44 + v44;
Float64Array.BYTES_PER_ELEMENT;
const v48 = new Float64Array(255);
function F49(a51, a52, a53, a54) {
    if (!new.target) { throw 'must be called with new'; }
    const v55 = this?.constructor;
    try { new v55(a54, 3585, 255, a51); } catch (e) {}
    -a51;
    a52 | a52;
    a53 + a53;
    a54 | a54;
    a52 >> a52;
    const v62 = a54 | a54;
    v62 !== v62;
    try {
        v48.b = a52;
    } catch(e64) {
    }
    try {
        this.h = a51;
    } catch(e65) {
    }
}
const v66 = F49?.constructor;
let v67;
try { v67 = new v66(v48); } catch (e) {}
try { v67(); } catch (e) {}
const v69 = new F49(255, 205, 255, 205);
v69.length;
const v71 = new F49(255, 256, 255, 256);
const v72 = new F49(255, 205, 256, 255);
v72.length;
const v75 = ([-Infinity,-5.577012134541006])?.filter;
const v76 = v75?.constructor;
try { new v76(Uint16Array); } catch (e) {}
try { new v75(Uint16Array); } catch (e) {}
const v79 = [-1000000000.0,5.0,872297.1015869486,-1e-15,0.2087529151028652];
[-2.220446049250313e-16,-171953.22769972356,2.220446049250313e-16,Infinity,-3.0,-4.368087235127776];
const v81 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/u;
const v82 = [Infinity];
v82[0];
const v85 = ([2.2250738585072014e-308,1.949684848262672,4.0]).push(v81);
const v87 = ([342.12300421344116,0.3998304334347528,-1.5569468467414895e+308,929110.7069466491,0.8403359879371063,928.8415619105033,5.0]).toStringTag;
try { v82.every(v87, v71); } catch (e) {}
v69.h >>>= v85;
let v89 = v79.length;
v89--;
new Int8Array(Int8Array);
parseInt([2.220446049250313e-16,-Infinity,NaN,-1e-15,-4.0,-2.2250738585072014e-308,-742.8087895557678,-4.0,Infinity,655658.0990783614]);
