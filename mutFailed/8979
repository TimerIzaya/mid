const v0 = /((ab)a\nb\bc)/gvds;
const v1 = /Aa\Bb/gvdy;
const v2 = /sabc+/gvds;
function f3(a4) {
    const o14 = {
        get g() {
            function F6(a8) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.d = v0;
                } catch(e9) {
                }
                try {
                    this.b = a4;
                } catch(e10) {
                }
            }
            new F6(a4);
            new F6(v0);
            new F6(v1);
            return this;
        },
    };
    return o14;
}
f3(v0);
const v16 = f3(v0);
f3(v2);
[-40571.9919866228,1000.0,1.1643327859367742e+308,1000000000.0,-0.0];
[1e-15,-0.5701730161629435,1.56993266092895e+308,Infinity,-3.0,-702805.4194393478];
[-1.7976931348623157e+308,-3.0,4.0,1.7814836580333194e+307,1000.0];
class C21 extends f3 {
    static toString(a23, a24, a25, a26) {
        a26["exec"]("exec");
        return a25;
    }
    static {
        super.b = C21;
        v2 >>> v16;
        new Float64Array(1000);
        new Uint16Array(64);
        new Int32Array(146);
    }
}
new C21();
const v41 = new C21();
new C21();
new BigUint64Array(2864);
let v48 = 2549;
v48--;
new BigInt64Array(v48);
try { Float32Array(v48, v48, undefined); } catch (e) {}
new Float32Array(3);
const v56 = /(J5a{0,1}?)/y;
/u?/udms;
/bf/gvms;
32 >>> 32;
let v61 = 32 + 3;
v61--;
new Uint8ClampedArray(32);
4096 & 4096;
try { new Uint8Array(BigUint64Array, BigUint64Array, 3); } catch (e) {}
new Uint8Array(4096);
let v71 = 1582 >> 1582;
v71--;
new Int8Array(1582);
4 - 4;
4096 - -54813;
const v81 = [-54813,1582,8 & 8,8];
const v82 = [-54813];
const v83 = [-54813];
let v84;
try { v84 = v83.map(4); } catch (e) {}
function f85(a86, a87, a88, a89) {
    try { a86.toString(); } catch (e) {}
    try { a87.groupToMap(a88); } catch (e) {}
    a88[0] = a88;
    try { a86.copyWithin(undefined, a87); } catch (e) {}
    const o101 = {
        n(a94, a95, a96, a97) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a89;
        },
        ...v83,
        "b": v81,
        ...a88,
        ...v83,
        129: 4,
        ...a86,
    };
    o101[2] = o101;
    return o101;
}
const v103 = f85(v82, 8, f85(v82, v83, v81, 4), 4);
v103[129] = v103;
const v104 = f85(v83, 4, 4, 4);
v104.d = v104;
-26206 - -26206;
try { new v84(); } catch (e) {}
/ND2/gds;
class C112 extends Map {
}
const v113 = new v41();
try { v113.get(Uint8Array); } catch (e) {}
const v115 = v113.isPrototypeOf();
v115 && v115;
v115 && v115;
Date.name;
let v121;
try { v121 = Date.parse(4); } catch (e) {}
-v121;
class C123 {
    static {
        for (let v125 = 0; v125 < 25; v125++) {
            v125 >>> v125;
            const v127 = [601759695];
            const v128 = [1073741824,1073741823,1376142744,1073741825];
            function f130(a131, a132, a133, a134) {
                try { new a131(); } catch (e) {}
                a132 & a132;
                ~a132;
                try { new a131(); } catch (e) {}
                4 % (a133 << a133);
                function f142() {
                }
                new Int8Array();
                const v147 = v121 * 536870887;
                let v148 = v147 - v147;
                v148++;
                const v150 = v147 ** v147;
                try { Number.parseInt(v148, v148); } catch (e) {}
                let v153;
                try { v153 = new Number(v56); } catch (e) {}
                try { v153.valueOf(); } catch (e) {}
                Number.isNaN(v150);
                function f156(a157, a158) {
                    return Number;
                }
                try { f156(); } catch (e) {}
                %OptimizeFunctionOnNextCall(a132.buffer.__defineGetter__);
                try { v128["find"](..."find", a134, ...v127); } catch (e) {}
                const o164 = {
                };
            }
            for (let v165 = 0; v165 < 5; v165++) {
                f130(this, v165, 32);
            }
        }
    }
}
