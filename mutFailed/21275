const v2 = new Int8Array(129);
const v6 = new BigUint64Array(16);
try { Float32Array.apply(16, v6); } catch (e) {}
const v10 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f11(a12, a13, a14, a15) {
    const v16 = /(?:a*)+q(?<a>.)/guds;
    v16.constructor = f11;
    function f17(a18) {
        const v19 = v10.constructor;
        try { v19(); } catch (e) {}
        a18.constructor;
        const v22 = [Infinity,5.072687501529128e+307,0.4093098171074484,4.0,-4.442441003635313e+306,843998.4933901483,-714.8973177887364];
        v22[Symbol.toPrimitive] = f17;
        15312 | v22;
    }
    for (let [i32, i33] = (() => {
            function f28(a29, a30) {
                return f11;
            }
            return [0, 10];
        })();
        i32 < i33;
        i33--) {
        for (let v40 = 0; v40 < 25; v40++) {
            f17(v16);
        }
    }
    function f42() {
        let v43 = Float64Array;
        v43 = a13;
        return a13;
    }
    return f42;
}
f11();
const v45 = new Int8Array(2);
const v46 = [];
function f47(a48, a49, a50) {
    v46.copyWithin();
    try {
        f47(-268435456, 0.6683462416314783, [-268435456]);
    } catch(e56) {
    }
    const v57 = v6 >> -268435456;
    v57 >> v6;
    return -v57;
}
new Int8Array(0);
const v63 = [2];
const v64 = [-729574.8782662717,NaN,NaN,1.4631545214551755e+308,771.103726894627,54.21198698191802];
const v65 = [1.7976931348623157e+308,0.14033774481022865,0.764442389288067,-2.220446049250313e-16,710.5353911028728,1000000.0];
v65[4294967295] = v65;
const v66 = [4294967297,9007199254740990,-536870912,-2,-39056,1073741823,-4096,536870889];
class C67 {
    1073741823 = v66;
    static #d;
    6;
    static 1224847725;
    [v64];
}
const v68 = new C67();
v65[4294967295] = v68;
[v63,v2,v63];
[129,129,v45];
class C71 {
}
C71.constructor = f47;
if (C71) {
    try { v63.p(); } catch (e) {}
    for (let v73 = 0; v73 < 10; v73++) {
    }
    function F74(a76, a77, a78, a79) {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F74(v63, v63, C71, 129);
}
const t76 = C71.constructor;
t76();
function F83() {
    if (!new.target) { throw 'must be called with new'; }
}
class C85 extends F83 {
}
new C85();
