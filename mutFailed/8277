const v0 = [-2.2250738585072014e-308,9.996930055560494,37995.24453874573,2.220446049250313e-16,0.9883316169172133,-4.0,-4.0];
const v1 = [1000.0];
const v2 = [-794727.1194998564,0.7926452381060185,-5.471158441263482e+307,1000000000.0,-1.0168531713301938e+308];
class C3 {
    constructor(a5) {
        v2[-2] = this;
        const v6 = v2 == v0;
        const v7 = v6 ? v2 : v0;
        let v8;
        try { v8 = v7.fill(C3); } catch (e) {}
        this[v8];
        Math.clz32(473125.8230335072);
        9 ** C3;
        const v16 = 473125.8230335072 & v7;
        v0 && 1;
        v16 + 1;
        Math.floor(473125.8230335072);
        const v20 = Math.acos(v0);
        try {
            let {"length":v21,} = v0;
            let v22;
            try { v22 = this.fround(a5, v21, v6, this, v21); } catch (e) {}
            const v24 = ("includes")?.search;
            try { new v24(v22); } catch (e) {}
            const v26 = v1["includes"](v21, v21);
            v26 || v26;
            const t25 = "includes";
            t25[1] = a5;
            this.h = v7;
        } catch(e28) {
            let [,v29,,v30] = v2;
            v20[5] = v7;
            e28[Symbol.matchAll];
            e28.message;
        }
    }
    static [v1] = v2;
    [v1];
    9 = v0;
}
const v35 = new C3(v1);
v35[1000];
const v37 = new C3(v2);
v37[1000];
const v39 = new C3(C3);
v39[1000];
4.316281544825209 >>> 4.316281544825209;
const v45 = [4.316281544825209];
try { v45.entries(); } catch (e) {}
[-834.2586529031325];
[-3.9006904590911135e+307,1.4101854561525012e+307,-693968.2795006186,0.0,-1000.0,-4.0,-6.75778491614214,-1.6496328747319024e+307];
[56170.52982279309,-1.1704102608914144e+307,-2.0,-Infinity,-2.0];
v2.length;
C3[2735];
[v35,v39,v45,v1];
[v39,1000000000000.0,v2,v1,v0];
try { Float64Array.from(null); } catch (e) {}
