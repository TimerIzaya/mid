class C3 {
    n(a5, a6) {
        "object" % this;
        try {
            ("object").trim();
        } catch(e9) {
        }
        return a6;
    }
    2317;
    static #b;
}
try { C3.apply(C3, 65535); } catch (e) {}
const v11 = new C3();
function f12(a13) {
    const v15 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v16 = [601759695];
    const v17 = [1073741824,1073741823,1376142744,1073741825];
    function f19(a20, a21, a22, a23) {
        function f25() {
            const o32 = {
                "e": -4294967295,
                ...v15,
                ..."Vre",
                "c": a23,
                "f": "-1073741824",
                84: arguments,
                ..."Vre",
                valueOf(a30, a31) {
                    return v17;
                },
                ..."Vre",
                4: "Vre",
                "c": -268435456,
                5: -4294967295,
                6: -268435456,
            };
        }
        f25();
        %OptimizeFunctionOnNextCall(arguments);
        let v35;
        try { v35 = v17["find"](..."find", a23, ...v16, ...v17, ...522675525n); } catch (e) {}
        v35 <= a22;
        return arguments;
    }
    f19(v15, v17, "-1073741824", 522675525n);
    return f19();
}
v11.toString = f12;
const v39 = new C3();
new C3();
"object" && Uint8ClampedArray;
Math.asin("object");
const v47 = v11 >>> 268435440;
-Math.expm1(v47);
Math.cosh(268435440);
v47 & 268435440;
const v52 = new Uint8ClampedArray(2);
function f53(a54) {
    [268435440,[a54,"object",Uint8ClampedArray,a54],2,Math,v39];
    return [a54,1073741825,Math];
}
v52[Symbol.toPrimitive] = f53;
v52[1] = v52;
1 + 1;
const v63 = new Int32Array(1);
Object.defineProperty(v63, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, value: f12 });
v63[0] = v63;
BigInt64Array.length;
const v69 = new BigInt64Array(129);
class C70 {
}
10 >>> 10;
const v75 = new BigUint64Array(10);
Float64Array.BYTES_PER_ELEMENT = Float64Array;
for (const v77 in v75) {
    let v78 = 10;
    -v78;
    for (;
        (() => {
            const v80 = v78--;
            v80 - v80;
            return v80;
        })();
        ) {
    }
    new Float64Array(2147483647);
}
let {"buffer":v86,"byteOffset":v87,} = v69;
try {
    v86.__proto__ = v69;
} catch(e88) {
}
