class C3 {
    static #o(a5) {
        try {
            a5.toString = "parse";
        } catch(e6) {
        }
        return "parse";
    }
    static 2780;
    #g;
    static 255;
    static #c = "p";
}
function f7() {
    function f8(a9) {
        class C10 {
            constructor(a12, a13, a14) {
                for (let v15 = 0; v15 < 5; v15++) {
                    function f17() {
                        const o25 = {
                            [-4294967297n](a19, a20, a21, a22) {
                                eval(C10);
                            },
                        };
                        return f17;
                    }
                    f17();
                    %OptimizeFunctionOnNextCall(f17);
                }
            }
        }
        return "parse";
    }
    return f8;
}
Object.defineProperty(C3, "toString", { get: f7 });
const v27 = new C3();
const v28 = new C3();
const v29 = new C3();
function f30(a31, a32, a33) {
    function f34(a35, a36) {
        a32[1] = Float64Array;
        return C3;
    }
    a33[Symbol.toPrimitive] = f34;
    const o43 = {
        "a": "p",
        valueOf(a41, a42) {
            return "parse";
        },
        ...a32,
        [C3]: "parse",
        10: a33,
        1000: v27,
        "a": "p",
        ...a32,
        ..."parse",
        "b": "p",
        1266425955: a32,
        "f": C3,
        "h": v28,
        ...v29,
    };
    return o43;
}
f30(v28, "p", C3);
new BigUint64Array();
class C47 {
}
const o50 = {
    [9007199254740992n]: -43292n,
};
const v51 = f30(v27, "parse", "hasInstance");
f30(v51, v51, v51);
function F53() {
    if (!new.target) { throw 'must be called with new'; }
}
const v55 = new F53();
let v59;
try { v59 = Uint32Array.apply(F53); } catch (e) {}
const v60 = [Uint32Array,Uint32Array,Uint32Array,Uint32Array,Uint32Array];
const t80 = (2136873598).constructor;
const v63 = t80();
try { v63.toExponential(2136873598); } catch (e) {}
const v66 = [-1941710058,1389675721,-50560,-20231,1311353951,-1024,128,-25926];
v66.constructor = f30;
class C68 extends v66.constructor {
    #g;
    7 = -1823362111n;
}
new C68();
function F70(a72, a73, a74, a75) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(a73, "constructor", { value: f30 });
    const v76 = a73.constructor;
    function F78() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.a = 4;
        } catch(e81) {
        }
        try {
            this.f = 4;
        } catch(e82) {
        }
        try {
            this.g = 4;
        } catch(e83) {
        }
    }
    const v84 = new F78();
    ([-288943.075893088,-5.305261585320875,193686.0922863416,8.005740932944335,2.220446049250313e-16,-833.0196519212178,0.7064019879043599,-1000000000000.0])[v84];
    const v87 = new Set();
    const v88 = v87.keys;
    let v89;
    try { v89 = v88(Proxy, v76, 3228, a72); } catch (e) {}
    function F90(a92, a93) {
        if (!new.target) { throw 'must be called with new'; }
        try {
        } catch(e94) {
        }
        try {
            function f95() {
                const v96 = [-Infinity,1.7976931348623157e+308,1.0,1.7976931348623157e+308,-1.0,Infinity];
                new Uint8Array(v96, 3228, 3228);
                v96.length >>>= -65536;
                return -65536;
            }
            f95();
            this.h = v87;
        } catch(e101) {
        }
        try {
            const v102 = v87[this];
            try {
                new F90(v102, -268435456n);
            } catch(e105) {
            }
        } catch(e106) {
        }
        switch (3228) {
            case v89:
                v76[5] = v59;
                break;
        }
    }
    new F90();
    new F90();
    new F90(a73, a74);
}
new F70(v60, v55);
