let v2 = "7";
class C3 {
    constructor(a5) {
        try {
            this.f = a5;
        } catch(e6) {
        }
    }
    get h() {
        try { new v2(this, this, this, this, this, ..."WCV"); } catch (e) {}
        this[268435441];
        try {
            v2.toUpperCase();
        } catch(e11) {
        }
        return this;
    }
}
new C3("number");
new C3(v2);
const v14 = new C3(v2);
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a17;
    } catch(e21) {
    }
    try {
        this.f = v14;
    } catch(e22) {
    }
    try {
        this.h = a20;
    } catch(e23) {
    }
}
const v24 = new F15("number", "WCV", v14, "WCV");
new F15(v2, "WCV", v24, v2);
new F15("WCV", "number", v14, "WCV");
class C27 {
    valueOf(a29, a30, a31, a32) {
        let v34 = 512;
        const v36 = +-1;
        const v37 = v34--;
        const v38 = ++v2;
        v36 / v2;
        Math.acos(v38);
        ~v37;
        return v38;
    }
}
new C27();
const v43 = new C27();
new v43();
const v46 = new Date();
function f47(a48) {
    return Date;
}
const v51 = [v46];
const o52 = {
    "arguments": v51,
    "type": v2,
};
new Worker(f47, o52);
