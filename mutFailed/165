function f0() {
}
class C1 extends f0 {
    static {
        const v4 = f0 !== this ? f0 : this;
        try {
            v4.h = this;
        } catch(e5) {
        }
    }
    constructor() {
        super();
        try { ("number").codePointAt("number"); } catch (e) {}
    }
}
new C1();
new C1();
new C1();
-5 - -5;
const v18 = 4294967296 - 4294967296;
new Uint8ClampedArray(Uint8ClampedArray);
Uint32Array.d = Uint32Array;
const v24 = new Uint32Array(257);
try { v24.join(v18); } catch (e) {}
new Int32Array(257);
function f29() {
    ~0.043152456200264866;
    const o35 = {
        8: 0.043152456200264866,
        get a() {
            this[8] = this;
            Int32Array.acos(0.043152456200264866);
        },
    };
    return o35;
}
const v36 = f29();
const v37 = f29();
function F39(a41, a42, a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    a41[8] = a41;
    this.d = 257;
    this.h = a42;
}
new F39(v37, v36);
function f47(a48, a49, a50) {
    function f52(a53) {
    }
    a48[1] = a50;
}
("function")[4];
const v57 = [v37];
const o58 = {
    "arguments": v57,
    "type": "function",
};
o58.e = o58;
new Worker(f47, o58);
