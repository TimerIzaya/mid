const v0 = [7.613995975247068,-2.2250738585072014e-308,-1000000000.0];
for (let v1 = 0; v1 < 10; v1++) {
    const v2 = [1929306256,-35796];
    try { v2["36049"](); } catch (e) {}
}
const v5 = [-1.0,-Infinity,-284986.3741264567,-2.0,1e-15,-680127.7924855682,-2.220446049250313e-16,0.49016780257125014];
const v6 = [-105.62260752576469,795.3531212796888,-416023.3882767088,-4.63053453596787e+307,-9.534847739276546e+307,0.0,-0.0,-0.0];
class C7 {
    static {
        Object.defineProperty(this, "e", { writable: true, configurable: true, value: this });
        %VerifyType(v0);
        super[f];
    }
    static 4;
    #c = v0;
    toString(a12) {
        const o16 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o16);
        return v6;
    }
}
const v18 = new C7();
const v19 = new C7();
const v20 = new C7();
let v21 = [v20,C7,v20];
let v22 = [v18,v18,v5,v19];
const v23 = [v0,v18,v22,v22,v6];
new Date();
function f26(a27, a28) {
    const o62 = {
        set d(a30) {
            9n >> 9n;
            function F33() {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    const o38 = {
                        "maxByteLength": 1000,
                    };
                    new ArrayBuffer(10000, o38);
                } catch(e40) {
                }
            }
            Object.defineProperty(this, v22, { writable: true, value: v19 ^ a27 });
            v21 = v22;
            try { ("1O6N").localeCompare("bigint", "1O6N"); } catch (e) {}
            const v47 = new Float32Array(1334);
            v47[1283] = v47;
            v22 = v19;
        },
        [v0](a49, a50) {
            v21[268435456] = v21;
            new Map();
            Object.defineProperty(v5, 172, { writable: true, set: Date });
            new Uint8Array(3);
            new Int8Array(10);
            const v61 = new Uint32Array(8);
            return v61;
        },
    };
    return o62;
}
f26(v20, v6);
f26(f26(v22, Date), v22);
let v66 = 0;
class C69 {
    #b = v66;
    g = 1.1408591040999836e+308;
    static {
        const v74 = v66++;
        ~v66;
        function F76() {
            if (!new.target) { throw 'must be called with new'; }
        }
        function F79() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v81 = new F79();
        const v82 = new F79();
        const v83 = new F79();
        const o88 = {
            "b": v83,
            n(a85, a86) {
                v23(v81, v20);
                return F79;
            },
            "a": v82,
        };
        Math.log10(44149);
        44149 + v66;
        Math.fround(v74);
        function f92(a93, a94, a95, a96) {
            function F97(a99, a100, a101, a102) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v103 = new F97();
            const v104 = new F97(f92, f92, a94, v103);
            v104 in v103;
            return f92;
        }
    }
}
new C69();
new C69();
-Infinity;
C69.g ^= -1e-15;
const o116 = {
    "execution": "async",
    "type": "major",
};
gc(o116);
const t112 = "major";
t112[108] /= -1e-15;
