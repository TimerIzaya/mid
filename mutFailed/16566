function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -1965970006;
    } catch(e3) {
    }
    try {
        this.b = -1965970006;
    } catch(e4) {
    }
    try {
        this.f = -1965970006;
    } catch(e5) {
    }
}
new F0();
new F0();
const v8 = new F0();
function f9() {
    return v8;
}
function F18() {
    if (!new.target) { throw 'must be called with new'; }
}
const v21 = [44371,2,-65536,9,-5128,-9223372036854775808,-7,10];
const v23 = [14,-11,1];
const v24 = [-49581,0,-128];
class C25 {
    constructor(a27, a28) {
        try { this.propertyIsEnumerable(v23); } catch (e) {}
        new Uint8Array(9007199254740991n, 4, 4);
        function f33(a34, a35, a36, a37) {
            const o38 = {
                ...a35,
            };
        }
        f33(Uint8Array, 4);
        Symbol.iterator;
        const o52 = {
            [this]() {
                const o51 = {
                    next() {
                        function f43(a44, a45) {
                            const o49 = {
                                p(a47, a48) {
                                },
                            };
                        }
                        const o50 = {
                        };
                    },
                };
            },
        };
        a28 | -4.0;
    }
}
const v54 = new C25(C25, v23);
new C25(v24, v21);
new C25(v54, 16);
gc();
