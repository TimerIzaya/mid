[4,-65537,-61339,339238555,9007199254740992,-9223372036854775808,13,16];
[0];
[-65535,33192];
[-2658,-545514898,-7,-5,2039502882,-5,255];
[2147397299,16,9223372036854775807,127,-1,1,1425713119];
[287039711,536870889];
const v11 = new Array(0);
let v12 = -48404n;
function f13(a14, a15, a16, a17) {
    return a15;
}
const v18 = f13();
const v20 = v12++;
const v22 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
function f23() {
    return Array;
}
Object.defineProperty(v22, "toString", { enumerable: true, get: f23 });
const v24 = [601759695];
const v25 = [1073741824,1073741823,1376142744,1073741825];
function f27(a28, a29, a30, a31) {
    function f33(a34) {
        return a34;
    }
    Object.defineProperty(arguments, "toString", { enumerable: true, value: f33 });
    function f35() {
        let v38 = -268435456;
        v38--;
        const o51 = {
            "c": -4294967297n,
            [522675525n](a41, a42) {
            },
            "maxByteLength": -128,
            "c": v24,
            "b": v12,
            ...v12,
            __proto__: -128,
            get d() {
                return -4294967297n;
            },
            "e": v38,
            "maxByteLength": -4294967295,
            "arguments": v22,
            ...v24,
            "type": "Vre",
            ..."Vre",
            valueOf(a45, a46) {
            },
            "c": v38,
            "type": v20,
            "type": "Vre",
            toString(a48, a49, a50) {
                return v11;
            },
            5: -4294967295,
            6: v38,
        };
        try { o51.valueOf(); } catch (e) {}
        return v24;
    }
    f35();
    Int8Array.a = Int8Array;
    Math.log1p(a31);
    try { Reflect.defineProperty(Reflect, a28, v25); } catch (e) {}
    try { new Int8Array(a29); } catch (e) {}
    Int8Array.a = Int8Array;
    const v60 = new Int8Array(v25, a29);
    let v61;
    try { v61 = v60.findIndex(v18); } catch (e) {}
    const v62 = v60.buffer;
    function f63(a64) {
        return f63;
    }
    function f65(a66) {
        function F67() {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F67();
        return v12;
    }
    f63[Symbol.species] = f65;
    f63.constructor = f13;
    const v72 = f63.constructor;
    try { v72(); } catch (e) {}
    v62.constructor = f63;
    v62.slice();
    %OptimizeFunctionOnNextCall(f35);
    let v76;
    try { v76 = ("find").strike(v61, v72, arguments, Int8Array); } catch (e) {}
    try { v76.match(v22, a31); } catch (e) {}
    const o78 = {
    };
    o78.e = v22;
    o78.e = a29;
    const o79 = {
    };
    o79.g = o79;
    o79.g = o79;
    o79.g = -4294967297n;
    try {
        let o80 = {
        };
        function f81(a82) {
            o80 = a82;
            return a82;
        }
        Object.defineProperty(o80, "g", { set: f81 });
        o80.e = a29;
    } catch(e83) {
    }
    try {
        const o84 = {
        };
        function f85(a86) {
            return o84;
        }
        Object.defineProperty(o84, "g", { writable: true, set: f85 });
    } catch(e87) {
    }
    try { v25["find"](..."find", a31, ...v24, ...v25, ...522675525n); } catch (e) {}
    return -128;
}
for (let v89 = 0; v89 < 5; v89++) {
    f27();
}
%PrepareFunctionForOptimization(f27);
f27();
%OptimizeFunctionOnNextCall(f27);
f27();
