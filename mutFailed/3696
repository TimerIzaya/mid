class C3 {
    a;
    get f() {
        super.b;
        const o9 = {
            "execution": "sync",
            "type": "minor",
        };
        return gc(o9);
    }
}
const v11 = new C3();
function f12(a13) {
    a13 | a13;
    %VerifyType(C3);
    return 4.358560586726368e+307;
}
v11[Symbol.iterator] = f12;
function f17(a18) {
    for (let v19 = 0; v19 < 32; v19++) {
        a18["p" + v19] = v19;
    }
    return a18;
}
const v23 = Symbol.iterator;
v11[v23] = f17;
v11.f = v11;
const v24 = new C3();
const v25 = new C3();
function f26() {
    return v25;
}
try { f26.bind(0.7399237986084728); } catch (e) {}
class C28 extends f26 {
    static 64 = 5;
    a = 5;
    get b() {
        try {
            v25.__proto__ = this;
        } catch(e30) {
            v24[3289];
            C28 = 4.358560586726368e+307;
            class C32 extends f26 {
                #toString(a34, a35, a36, a37) {
                }
            }
            Math.sinh();
            new WeakSet();
            delete C3[-1];
        }
        return 0.7399237986084728;
    }
    10 = 5;
    [v25] = 4.358560586726368e+307;
    static a;
}
const v43 = new C28();
v43[10] = v43;
new C28();
new C28();
let v46 = Map;
function f47(a48, a49) {
    try {
        Symbol("-46039");
    } catch(e52) {
    }
    return a49;
}
const v54 = Symbol.toPrimitive;
v46[v54] = f47;
929 - 929;
try { new Uint8Array(v11, C28, C28); } catch (e) {}
const v61 = v46--;
const v62 = [-4.0,-1e-15];
v62[3] = Uint8Array;
v62[2] = v62;
const v63 = [-7.264687027014153e+307];
function f64(a65) {
    const v66 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    return v66;
    return v66;
}
v63.toString = f64;
v63[0] = v63;
const v67 = v63.pop();
v67[0] = v54;
v67 - v67;
function F71(a73, a74, a75, a76) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(a73, 0, { writable: true, enumerable: true, value: v23 });
    a73[0] = a76;
    try { a73.findLast(a74); } catch (e) {}
    const v78 = this?.__defineGetter__;
    v78.name;
    try { v78(undefined, undefined); } catch (e) {}
    let v81;
    try { v81 = a73.unshift(a74); } catch (e) {}
    v81++;
    a75 != a75;
    let v84;
    try { v84 = a73.toSpliced(a74, a74); } catch (e) {}
    const v85 = v84?.__defineSetter__;
    try { v85(); } catch (e) {}
}
new F71(v63);
new F71(v62, v61);
