const v0 = [];
let v2 = Uint16Array;
const v3 = new v2(9);
v3[4];
Int8Array.e = Int8Array;
const v7 = new Int8Array(16);
v7[7] = v7;
try { v7.slice(v3, v7); } catch (e) {}
const o9 = {
};
try {
    o9.b = v3;
} catch(e10) {
}
try {
    const o11 = {
    };
    o11.b = v3;
    o11.h = v2;
} catch(e12) {
}
try {
    const o13 = {
    };
    o13.b = v3;
    o13.h = v2;
    o13.f = v2;
} catch(e14) {
}
try {
    const o15 = {
    };
    o15.b = v3;
    o15.h = v2;
    o15.e = v0;
} catch(e16) {
}
4096 | 4096;
v2 -= v2;
try {
    v7.join("bigint");
} catch(e22) {
}
try { Int16Array.bind(v7); } catch (e) {}
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const v24 = new Int16Array(4096);
class C25 extends v2 {
    valueOf(a27, a28) {
        v24[156] = super[4096];
        [2.0,0.13133910355094847,-5.192950836033179e+307,7.852419839126057,-1e-15,1e-15,0.33541661240372744,7.913786603798663,1000000000.0,-0.0];
        [-307274.16987159103,2.6738117604248816e+306,0.44896593660232287,-6.775585983777139,2.0,-2.220446049250313e-16,-0.0,602.9366124041594,754493.9885839084,1000000.0];
        [1.590835187084103,-42.50381444382549,-8.863167011045718,0.720895918907092,1.2825979204477733e+308];
        return this;
    }
    static #c = v0;
    [v3];
    static b = 16;
    static #f = v2;
    constructor(a34, a35, a36, a37) {
        super(4096, a35);
        super[a36];
        const o41 = {
            "maxByteLength": 72,
        };
        const v43 = new SharedArrayBuffer(72, o41);
        new BigInt64Array(v43);
        try {
            this.#f;
        } catch(e47) {
        }
    }
}
C25.length;
new C25();
new C25();
new C25();
+312143372;
Math.atanh(312143372);
const v60 = -868806827 >> Int8Array;
const v61 = ~v60;
-868806827 % v60;
v61 >>> v60;
let v65;
try { v65 = this.decodeURIComponent(v7); } catch (e) {}
const v66 = v65?.search;
try { new v66(9); } catch (e) {}
this[256] = BigUint64Array;
