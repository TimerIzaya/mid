const v1 = new Date();
const v2 = [39049,-2147483647,9007199254740991,30221,268435456,-2147483647,41987];
([-2]).concat(v2);
new Float64Array(3609);
function F8(a10, a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = Date;
    } catch(e12) {
    }
    try {
        const o13 = {
        };
        const v14 = o13.constructor;
        class C15 {
            toString(a17, a18, a19, a20) {
                try { this["throw"](); } catch (e) {}
                const v26 = new Uint8ClampedArray(512);
                F8 instanceof F8;
                const v35 = -29459 || "throw";
                const v36 = 0.4624576114496747 % 2;
                Math.sqrt("throw");
                -"throw";
                v36 ** v35;
                -29459 / this;
                v35 & 2;
                new Uint8ClampedArray(798, ...v26, eval());
            }
            h = a11;
            [a11] = v2;
            [Float64Array] = Date;
            #g = v14;
            b;
            constructor(a46, a47) {
                for (let i = 0; i < 10; i++) {
                    this[this];
                }
            }
        }
        this.a = a11;
    } catch(e49) {
    }
    try {
        this.e = Date;
    } catch(e50) {
    }
}
const v51 = new F8(Date, F8);
new F8(Date, v1);
const v53 = new v2(F8, F8);
const v55 = -Infinity;
function F57(a59, a60) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = F8;
    } catch(e61) {
    }
    Math.cos(Math);
    class C64 {
        static 7;
        #n(a66) {
            const o69 = {
                "execution": "sync",
            };
            gc(o69);
        }
    }
    const v71 = new C64();
    const v72 = v71?.constructor;
    try { new v72(); } catch (e) {}
    try {
        this.a = v55;
    } catch(e74) {
    }
}
new F57(-4.0, v51);
new F57(v55, v51);
new F57(v55, v53);
const v79 = Int32Array.bind();
let v80 = 10;
for (; v80--;) {
    v51[6];
    try {
        Date(3609);
    } catch(e84) {
    }
}
v79.name.normalize();
