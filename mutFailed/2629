class C3 {
    static get h() {
        try {
            const t3 = "getMilliseconds";
            t3.length = 257;
        } catch(e5) {
        }
        let [v9,,v10,v11] = "getMilliseconds";
        try {
            super.valueOf();
        } catch(e13) {
        }
        /foo(?<!bar)baz/gums;
        /(?:a+){0,0}+/gvs;
        const v18 = /b/gudy;
        try { v10(); } catch (e) {}
        v18.__proto__;
        const v21 = -"6908";
        const v22 = Math.expm1(10867);
        const v23 = ~"6908";
        Math.pow(v23, this);
        v23 - "6908";
        v21 >>> "6908";
        this ** this;
        return v22;
    }
}
new C3();
const v29 = new C3();
const v30 = new C3();
function f31() {
    return C3;
}
const v32 = ["6908",257,"6908"];
const v33 = ["getMilliseconds",f31,v32];
const v34 = [v29,v32,v33,v29];
function F35(a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = v34;
    } catch(e40) {
    }
}
new F35(v34, v30, v32);
const v42 = new F35(v34, v32, v33);
new F35(v33, v42, v32);
function F44() {
    if (!new.target) { throw 'must be called with new'; }
}
const v46 = new F44();
const o47 = {
};
const v48 = o47.constructor;
Object.defineProperty(v42, "b", { configurable: true, enumerable: true, get: f31 });
try {
    f31();
} catch(e50) {
}
function F51(a53, a54, a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    a54.caller = a56;
}
try { new F51(v46, v48); } catch (e) {}
