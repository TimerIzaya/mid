const v3 = [1073741823,16];
const v4 = [1073741823,v3];
[1073741823,16,4294967297,v4,v4];
const v7 = new Set();
const v9 = [[Set,v3,v7]];
[Set,v9];
const v12 = new Map();
for (const v13 in v12) {
}
v4.constructor;
async function f15(a16, a17, a18) {
    return a17;
}
[[v3,v12],v9];
new Uint16Array(3225);
class C25 {
    #d = 4096;
    static {
        try {
            this.#d;
        } catch(e28) {
        }
    }
}
[1073741823,v4];
class C32 extends Int32Array {
}
function f36() {
    let v38 = 1000000000000.0;
    const v39 = v38--;
    -v39;
    class C44 {
        constructor(a46) {
            const v48 = new Float32Array();
            try { v48.entries(); } catch (e) {}
            const v50 = new Uint16Array(12, -4294967296, v39);
            new Float32Array(v50, -4294967296, 268435439, v38, v50);
        }
    }
    try { new C44(12); } catch (e) {}
    const v53 = new C44(257828.6336153492);
    const v54 = new C44();
    const v55 = new C44(-4294967296);
    const v56 = [v55,C44];
    [257828.6336153492,v55,v53,v55,v56];
    const v58 = [v55];
    class C59 extends C44 {
        [v53];
    }
    const v60 = new C59();
    const v61 = v58.constructor;
    try { v61.isArray(v58); } catch (e) {}
    class C63 extends v61 {
    }
    C63.a = C63;
    const v64 = new v58();
    const v65 = v64?.constructor;
    try { new v65(); } catch (e) {}
    Object.defineProperty(v64, 65537, { value: v54 });
    try { v60.m(v56); } catch (e) {}
    return Int32Array;
}
f36();
const v69 = new C32();
Reflect.construct(Uint8Array, [v69,v69], C32);
Symbol.iterator;
const o77 = {
    "execution": "async",
    "type": "minor",
};
