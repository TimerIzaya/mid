const v2 = new Set();
class C3 {
    [v2];
    static {
    }
}
class C7 {
    static {
        let v9;
        try { v9 = new this(); } catch (e) {}
        new Uint16Array(8);
        const v15 = [];
        class C17 extends v9 {
        }
        Symbol.toPrimitive;
        function F20() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                const v24 = Array(19793);
                for (const v25 of v24) {
                }
                const v26 = [v24,v24,v24,v24,v24];
                [[v26,v26,v26]];
            } catch(e30) {
                [e30,this];
            }
        }
        new Float64Array(v15);
        function f36(a37, a38) {
            const o46 = {
                set g(a40) {
                    function F41(a43, a44, a45) {
                        if (!new.target) { throw 'must be called with new'; }
                    }
                },
            };
            f36(8, o46);
            %PrepareFunctionForOptimization(f36);
            f36(8, o46);
            f36(8, o46);
            %OptimizeMaglevOnNextCall(f36);
            f36(8, o46);
            return 536870912n;
        }
        try { ("function")["-268435456"](); } catch (e) {}
        new Int16Array(14);
        const o62 = {
            set b(a60) {
                this.b;
            },
        };
        new Uint8ClampedArray(6);
    }
}
new C7();
new C7();
new C7();
new Float64Array(4);
function f71(a72) {
    return Float64Array;
}
class C73 extends f71 {
    #b;
    #e = -1000000.0;
}
const o75 = {
};
gc(o75);
const v79 = ("minor").valueOf();
v79.split(v79);
function f81() {
    return f81;
}
class C83 {
    o(a85, a86, a87, a88) {
        class C89 {
            static 44 = "EV";
        }
        new C89();
        new C89();
        new C89();
        return 0;
    }
    static #f = 0;
}
new Float32Array(6);
new Uint8ClampedArray(6);
gc();
