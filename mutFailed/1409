class C3 {
    static o(a5, a6) {
        class C7 {
            #e = a6;
            static 4 = a6;
            g;
        }
        const v8 = new C7();
        new C7();
        new C7();
        return v8;
    }
    static 3944 = "-4096";
    g = "-4096";
}
function f11() {
    function f12(a13, a14) {
        try { a13(C3, C3, a13, a14); } catch (e) {}
        class C16 {
        }
        return "-4096";
    }
    return f12;
}
function f17(a18) {
    function F19(a21) {
        if (!new.target) { throw 'must be called with new'; }
        class C22 {
            constructor() {
                const v24 = this.constructor;
                try { new v24(); } catch (e) {}
                super.f >>= this;
            }
        }
        new C22();
    }
    new F19();
}
Object.defineProperty(C3, "toString", { get: f11, set: f17 });
const v28 = new C3();
const v29 = new C3();
v29.constructor = f11;
const v30 = v29?.constructor;
try { new v30(); } catch (e) {}
const v32 = new C3();
v32.g;
C3[-2] ||= 9007199254740991;
v29 + C3;
("-4096")[65536];
try {
    new C3();
} catch(e37) {
}
try { new Array(9007199254740991); } catch (e) {}
const v41 = new Array(15);
function f42() {
    let [v43] = "-4096";
    try {
        Array.length = 1;
    } catch(e45) {
    }
    return v28;
}
v41.toString = f42;
function f46() {
    return -1.0;
}
const v49 = /0j/vds;
try { v49.compile("Di0", "Di0"); } catch (e) {}
Int8Array.b = Int8Array;
const v52 = new Int8Array(26);
let v55 = 0;
do {
    const v56 = v52[7];
    v56 !== v56;
    v56?.[14];
    let v59 = v55++;
    v59++;
} while (v55 < 8)
new Uint16Array(2);
Int16Array.length = Int16Array;
new Int16Array(10);
class C67 {
}
C67.toString = Array;
C67.then = f46;
async function f68(a69, a70, a71, a72) {
    function f73() {
        return Array;
    }
    Object.defineProperty(a71, Symbol.species, { get: f73 });
    Object.defineProperty(a72, Symbol.species, { value: f73 });
    const v78 = a69?.toString;
    try { new v78(); } catch (e) {}
    a71.length = a71;
    try { a72(v41, v41, "-4096", "-4096"); } catch (e) {}
    return (await C67).call();
}
const v83 = f68.call(C67, C67, f68, f68, f68);
v83.constructor = f68;
try { v83.finally(Uint16Array); } catch (e) {}
Object.defineProperty(v83, "constructor", { writable: true, configurable: true, value: f68 });
const v85 = v83.then(f68, v83, v83, v83, v83);
try { v85.then(v85, v32); } catch (e) {}
