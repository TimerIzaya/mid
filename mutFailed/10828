function f5(a6, a7, a8, a9) {
    return a8;
}
const t3 = 119429792n;
new t3();
class C11 {
}
const v12 = new C11();
const v14 = -4294967297n / -4294967297n;
const v15 = [601759695];
for (let v16 = 0; v16 < 5; v16++) {
    function f17() {
        "Vre" == C11;
        const o30 = {
            [-4294967297n](a22, a23, a24, a25) {
            },
            ...v15,
            ...v12,
            4: v14,
            toString(a27, a28, a29) {
                return v16;
            },
            5: -4294967295,
        };
        return f17;
    }
    f17();
    %OptimizeFunctionOnNextCall(f17);
}
const v34 = /gk4b*/vmsy;
const o36 = {
    next() {
        return v34;
    },
};
const v38 = [-1.5314324604839498e+308,-1.8081364344875581,-2.2250738585072014e-308,3.0,3.0];
v38.flat(v38);
const o43 = {
    1678: true,
    ...true,
    "d": true,
    [true]() {
        super.e;
    },
    1: true,
};
new Int16Array(1);
new Int32Array(257);
new Uint8ClampedArray(60);
Date.parse(-3);
function F55(a57) {
    if (!new.target) { throw 'must be called with new'; }
}
new F55();
function F66(a68, a69, a70, a71) {
    if (!new.target) { throw 'must be called with new'; }
    const v72 = this.constructor;
    try { new v72(a68, a71); } catch (e) {}
    typeof Float32Array;
    const v77 = Map.prototype;
    try { v77.clear(v77, Map); } catch (e) {}
    const v79 = /2a\sc/uds;
    function f80() {
        try { v79.test(v79); } catch (e) {}
    }
    a69 === "symbol";
}
const v83 = new F66(65537, 1073741824, -8.497496856860549, F66);
new F66(Date, 0.19443453377416953, 1073741824, v83);
