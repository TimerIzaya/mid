const v2 = `
    Uint8Array >> v2;
`;
const v4 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f5(a6, a7, a8, a9) {
    function f10() {
        let v12 = Float64Array;
        v12.toString();
        v12 = a7;
        const v14 = v4.length;
        const v15 = v14 >>> v14;
        v15 / v15;
        const o21 = {
            toString(a18, a19) {
                a9 && v12;
                return a7;
            },
        };
        o21.toString();
        let v23 = -268435456;
        v23--;
        const o25 = {
            "e": -4294967295,
            "e": v23,
        };
        return a7;
    }
    const v26 = f10();
    %OptimizeFunctionOnNextCall(f10);
    return v26;
}
f5();
const v29 = new BigInt64Array(257);
const v32 = new Int16Array(1123);
const v35 = new Uint32Array(6);
class C36 extends Int16Array {
    static a;
    #valueOf(a38, a39, a40, a41) {
        arguments[1] = arguments;
        arguments?.__lookupGetter__;
        function F46(a48, a49, a50) {
            if (!new.target) { throw 'must be called with new'; }
            const v51 = this.constructor;
            try { new v51(); } catch (e) {}
            this.h = -6.336273045214518e+306;
            this.g = -1.7976931348623157e+308;
        }
        const v54 = new Uint16Array();
        function f56() {
            let v59 = 257828.6336153492;
            v59--;
            class C62 {
                static #m(a64) {
                }
            }
            const v65 = new C62();
            [-13,8,-1073741824,-9007199254740990,536870889,47670,-36072,9,268435441,1];
            new C62();
            const v68 = new C62();
            const v69 = [v68];
            new BigUint64Array(2141);
            try { v69.map(v54); } catch (e) {}
            const v73 = [];
            for (let i75 = 0; i75 < 2; i75++) {
                new F46(undefined, v65, undefined);
            }
            class C83 extends C62 {
            }
            C83.prototype = C83;
            const v84 = v73.constructor;
            !v84.isArray();
            class C87 extends v84 {
            }
        }
        f56();
        f56();
        let v90;
        try { v90 = this.includes(...this, Uint32Array, a38, a39, ...Uint32Array, ...v32); } catch (e) {}
        const v91 = v90?.[1];
        function F92() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v95 = new F92();
        v95.f = super[v32];
        let v97;
        try { v97 = new v91(v32, a40, v91); } catch (e) {}
        [...this,a41];
        try { v29.some(v97, h); } catch (e) {}
        const v103 = new Uint8ClampedArray(257);
        const v106 = new Int32Array(1450);
        class C107 {
            [Uint8ClampedArray] = v106;
            static valueOf(a109, a110, a111) {
                new a111();
            }
            static a = v103;
        }
        const v113 = new C107();
        const v114 = new C107();
        function f115() {
            function f117(a118) {
                this.c = v113;
            }
            v114[2147483647] = v106 << this;
        }
        const v122 = [];
        const o123 = {
            "arguments": v122,
            "type": "function",
        };
        new Worker(f115, o123);
        return v32;
    }
    13 = 6;
    [v35] = Int16Array;
    static 580;
    #e;
}
new C36();
new C36();
new C36();
function f128() {
    return v29;
}
new Uint8ClampedArray(2314);
new Uint16Array(1);
new Uint8ClampedArray(2267);
class C139 {
    set h(a141) {
    }
    b;
}
new C139();
let v143 = undefined;
try { C139(); } catch (e) {}
new BigUint64Array(208);
for (let v148 = 0; v148 < 10; v148++) {
    class C149 {
        static {
            this[Symbol.hasInstance];
        }
    }
}
v143 = 3;
