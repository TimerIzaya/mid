let v2 = "e";
const v3 = [-2.220446049250313e-16,5.0,-357.72827782175693,-0.0,-1.7976931348623157e+308,1000000.0];
const v4 = [-1000000000000.0,1000000.0];
const v5 = [890220.41882633,-1.7976931348623157e+308,-8.224123160911045,-1000.0,1.3713979798977611];
class C6 {
    get g() {
        v2 = this;
        return v4;
    }
    static set e(a9) {
        const v10 = [4.731992747490712e+307,1000000.0,2.2250738585072014e-308,-1000000000.0];
        [4.0,1.670633799998255e+308,156837.19707339327,-1.258448800286958,-5.0,0.6832217654760434,5.0,750759.9216634776];
        const v12 = [0.21614051151919,-381.7455553068294,-1000000.0,1000.0,0.043999207302747756,-1.5168682289491164e+308,3.0,0.08759536901862053,-1000000.0];
        const v13 = super.h;
        try { a9(v13, v12, v10, v5); } catch (e) {}
    }
}
new C6();
new C6();
new C6();
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = v5;
    } catch(e22) {
    }
}
new F18(v3, v4);
new F18(v5, v2);
new F18(v4, v4);
Uint32Array.toJSON = 0;
function f28(a29, a30) {
    return "o";
}
const v33 = [f28];
const o34 = {
    "arguments": v33,
    "type": F18,
};
new Worker(f28, o34);
