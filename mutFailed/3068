class C3 {
    [536870912];
    o(a5) {
        try { a5(11.016708578447378); } catch (e) {}
        class C7 {
        }
        new Map();
        new BigUint64Array();
        return 536870912;
    }
    static 2;
    m(a13, a14) {
        new Uint32Array(129);
        new BigInt64Array(127);
        new Uint8ClampedArray(3);
        return a14;
    }
}
function f24(a25) {
    Reflect.construct(C3, [], C3);
}
Object.defineProperty(C3, "a", { writable: true, set: f24 });
C3.a = C3;
new C3();
const v30 = new C3();
v30[536870912];
const v32 = new C3();
v32[536870912] = v32;
let v35 = -1.0;
v35--;
let v39 = 4294967297n;
v39--;
const v43 = new Uint16Array(256);
v43.byteOffset;
const v47 = new Int32Array(128);
v47[6];
new Int16Array(16);
function f52() {
    return f52;
}
const v53 = [601759695];
const v54 = [1073741824,1073741823,1376142744,1073741825];
function f55(a56, a57, a58, a59) {
    arguments.length = arguments;
    function f61() {
        return a56;
    }
    f52();
    const v64 = new Int8Array();
    const v65 = v64.buffer;
    function f66(a67) {
        const v71 = new Int8Array(770);
        new Uint8ClampedArray(v71);
        return Int8Array;
    }
    Object.defineProperty(v65, "constructor", { configurable: true, value: f66 });
    v65.slice();
    %OptimizeFunctionOnNextCall(f61);
    try { ("find").codePointAt(f55); } catch (e) {}
    let v76;
    try { v76 = v54["find"](..."find", a59, ...v53); } catch (e) {}
    v76 <= a58;
    return arguments;
}
for (let v78 = 0; v78 < 10; v78++) {
    f55();
    class C82 {
        #c = "toUpperCase";
        get a() {
            const v84 = this << "toUpperCase";
            const v85 = v84 ^ v84;
            let v86;
            try { v86 = v85(v85, this, v85, v85, v84, this); } catch (e) {}
            v86[v85] <<= 1.1922093890401552e+308;
            return "Tx";
        }
        static b;
    }
    const v88 = new C82();
    [v88];
}
%OptimizeFunctionOnNextCall(f55);
f55();
