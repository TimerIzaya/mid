-11 - -11;
const v5 = [0.71465078532354,-2.2250738585072014e-308,1.0,-2.2250738585072014e-308,2.2250738585072014e-308,-620.8633845139873,0.0,-1.0,3.3358719500528515];
[-7.462188141503825,-3.070207201828062e+307,0.6861416475431791,1000000000.0,-3.0];
const o12 = {
    ...v5,
    [Set](a9, a10, a11) {
    },
    "b": v5,
};
const v14 = [-11,o12];
const o15 = {
    "arguments": v14,
    "type": "function",
};
const v18 = new Uint32Array(-11);
try { BigUint64Array.from("m"); } catch (e) {}
const v22 = new BigUint64Array(9);
const v25 = new Float32Array(16);
v25.BYTES_PER_ELEMENT = v25;
function F26() {
    if (!new.target) { throw 'must be called with new'; }
    const v29 = -(-7);
    v29 ** v29;
}
const v33 = new BigUint64Array(255);
const v34 = v33.buffer;
try { v34.slice(v18, v18); } catch (e) {}
function f36(a37) {
    class C39 {
        [null];
    }
    return C39;
}
try { f36(v33); } catch (e) {}
Object.defineProperty(v34, "constructor", { writable: true, enumerable: true, value: f36 });
v34.slice();
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    const v46 = this.constructor;
    try { new v46(F26, v22, F26, v46); } catch (e) {}
    a44 == a44;
    const o52 = {
        p(a50, a51) {
        },
        10: 16,
    };
    new F26();
}
new F42();
const o55 = {
};
const o58 = {
    set b(a57) {
    },
};
BigUint64Array.bind();
