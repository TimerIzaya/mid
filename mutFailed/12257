const v0 = /B[\cA]*/u;
const v1 = /\011?/gd;
const v2 = /a??/guimy;
const v3 = /rW(x)(x)(x)\3*/guiy;
const v6 = new Float32Array(127);
function F9(a11, a12, a13) {
    if (!new.target) { throw 'must be called with new'; }
    const v14 = this?.constructor;
    try { new v14(a12, Uint8Array, a12); } catch (e) {}
    try {
        this.a = Uint8Array;
    } catch(e16) {
    }
    try {
        this.f = v6;
    } catch(e17) {
    }
    try {
        this.h = 8;
    } catch(e18) {
    }
}
const v19 = /xyz{1,}/udiy;
/M/vdis;
let v21 = "toString";
([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
function f26(a27, a28) {
    function F29(a31, a32) {
        if (!new.target) { throw 'must be called with new'; }
        const v33 = this.constructor;
        let v34;
        try { v34 = new v33(); } catch (e) {}
        try { this.constructor(a27, f26, v34, F29); } catch (e) {}
    }
    new F29(a27, a28);
    return f26;
}
let v37 = "-4096";
class C42 {
    5 = v1;
    b = v0;
    set a(a44) {
        v37 = this;
        const o45 = {
        };
        o45.g = v37;
        const o46 = {
        };
        o46.g = v37;
        const o47 = {
        };
        o47.g = v37;
        const o48 = {
        };
        o48.g = v37;
    }
    static [v3] = v37;
    #toString(a50, a51, a52, a53) {
        a51 & this;
        new Uint16Array(2785);
        new Int32Array(Int32Array);
        Reflect.construct(v0, [], v0);
        return a52;
    }
    get a() {
        delete v1?.sticky;
        return v2;
    }
    ["NaN"];
}
new C42();
new C42();
new C42();
v21--;
const o74 = {
    set d(a70) {
        for (let v71 = 0; v71 < 5; v71++) {
        }
        this["cos"]();
    },
};
o74.d = v19;
const v78 = new Proxy([-1000.0,1000000.0,2.220446049250313e-16,614071.3005355855,-1.0,2.220446049250313e-16], v3);
v78[301];
new Int8Array(1073741823);
const v84 = new Uint32Array(4);
v84.fill();
gc();
Array(1000);
