function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(-512192965); } catch (e) {}
    try {
        this.d = a5;
    } catch(e7) {
    }
    try {
        this.e = a5;
    } catch(e8) {
    }
}
try { new F3(4096); } catch (e) {}
const v10 = new F3(-512192965);
const v11 = new F3(312211061);
const v12 = new F3(312211061);
function F13(a15, a16, a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
    const v19 = this?.constructor;
    try { new v19(a17, a17, a16, a17); } catch (e) {}
    a16 * a15;
    try {
        this.c = a15;
    } catch(e22) {
    }
    try {
        this.e = 4096;
    } catch(e23) {
    }
}
const v24 = F13.length;
new F13(v10, 4096, 4096, 4096);
new F13(v11, 312211061, 312211061, 312211061);
new v24(v12, 4096, -512192965, 4096);
new Uint8ClampedArray(7);
let v33;
try { v33 = new Uint8ClampedArray(4, 4, Uint8ClampedArray); } catch (e) {}
new Uint8ClampedArray(4);
try { v33.keys(); } catch (e) {}
new Float64Array(2514);
for (let v39 = 0; v39 < 5; v39++) {
    function f40() {
        const o46 = {
            toString(a42, a43, a44) {
                try { this.toString(a43, 4096, 4096); } catch (e) {}
            },
        };
        try { o46.toString(F13, v39, 4096); } catch (e) {}
        const v49 = ([o46,o46,o46,o46,o46]).toLocaleString();
        try { v49.normalize(); } catch (e) {}
        const v52 = ("4294967296").toLocaleUpperCase();
        v49.codePointAt(o46);
        return v52;
    }
    v33();
    %OptimizeFunctionOnNextCall(v24);
}
