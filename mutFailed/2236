const v0 = /2a{0,1}?(?:a+){0,0}i*/gdms;
const v1 = /9a6a{}/gdsy;
const v2 = /\118/gdm;
class C3 {
    set d(a5) {
        try { v2.compile(v1, a5, ...v2, a5, a5, this); } catch (e) {}
        let v9 = a5 ^ v1;
        a5++;
        Math.asin(6);
        const v12 = --v9;
        !a5;
        v12 ^ v9;
    }
    e = C3;
    [v1];
    5;
}
const v15 = new C3();
v15[5] = v15;
const v16 = new C3();
v16[5];
new C3();
[3,512,1073741825,-1,1260208258];
const v23 = [43783,58228,-226370756];
const v24 = [7,-9007199254740990,129,-35970,-1,1];
[v24,v0,v24];
const v26 = [v23,1073741824n,v16];
try { v26.group(1073741824n); } catch (e) {}
const v28 = [536870912n,v2,v26,C3,v26];
v28[3] = v28;
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    a35[8] = a35;
    function f36(a37, a38) {
        a37[0];
        3.2641461217807155 - 3.2641461217807155;
        return 3.2641461217807155;
    }
    v15.prototype;
    this.constructor = f36;
    const v45 = this?.constructor;
    let v46;
    try { v46 = v45(a34, this); } catch (e) {}
    try { new v45("a", "a"); } catch (e) {}
    try { v46.constructor(this, this); } catch (e) {}
    try {
    } catch(e49) {
    }
    try {
    } catch(e50) {
    }
    try {
    } catch(e51) {
    }
}
F32.arguments;
new F32("a", "-2147483648");
new v28("-2147483648", "yRMy");
function F55(a57, a58, a59) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e60) {
    }
}
function F61(a63, a64) {
    if (!new.target) { throw 'must be called with new'; }
}
