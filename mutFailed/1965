function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    const v7 = this?.constructor;
    try { new v7("boolean", "boolean"); } catch (e) {}
    a5[0] = a5;
    try {
        this.ignoreCase = a6;
    } catch(e9) {
    }
    try {
        this.c = a6;
    } catch(e10) {
    }
    try {
        this.h = "boolean";
    } catch(e11) {
    }
}
new F3("1", "XBlFi");
const v13 = new F3("1", "boolean");
const v14 = new F3("XBlFi", F3, F3, "XBlFi");
const v15 = v14?.constructor;
try { new v15("boolean", v13); } catch (e) {}
const v19 = new JSON(9);
const v22 = new Int8Array(512);
try { v22.findLastIndex(512); } catch (e) {}
try { new Int8Array(v19, Int8Array, "boolean"); } catch (e) {}
const v27 = new Int8Array(14);
v27[0];
Int8Array.d = Int8Array;
Float32Array.f = Float32Array;
let v33 = 0;
for (let i = 0; i < 5; i++) {
    !(v33 < v33);
    v33++;
}
function F39() {
    if (!new.target) { throw 'must be called with new'; }
    const v41 = this?.__defineGetter__;
    try { new v41(F39, 14); } catch (e) {}
    const o44 = {
    };
    this.e = 12;
    const o45 = {
    };
    o45.e = 12;
    o45.h = Int8Array;
    const o46 = {
    };
    const t49 = "1";
    t49.h = 58;
    const v48 = d8(12);
    for (const v49 of v48) {
    }
    const v50 = [v48,v48,v48,v48];
    new BigUint64Array();
    const v53 = [];
    try { v53.findLast(o46); } catch (e) {}
    const v56 = [[v50,v50,v50]];
    try { v56.map("boolean"); } catch (e) {}
    v53 >= Uint16Array;
}
new F39();
