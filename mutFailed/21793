const v0 = [];
function f1() {
    const o2 = {
        "a": v0,
        "h": v0,
        "d": v0,
        __proto__: v0,
        "c": v0,
        "e": v0,
        "b": v0,
        3: v0,
        "g": v0,
        "f": v0,
        4: v0,
    };
    return o2;
}
const v3 = f1();
const v4 = f1();
try { v4.findLast(v3); } catch (e) {}
f1();
10 >> 10;
new Uint16Array(10);
let v11 = 255;
v11++;
new Float64Array(v11);
Uint32Array.g = Uint32Array;
new Uint32Array(255);
function F19() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = true;
    } catch(e21) {
    }
    try {
        this.b = true;
    } catch(e22) {
    }
}
const v23 = new F19();
new F19();
const v25 = new F19();
const v26 = [1e-15,0.09547881173263595,1.7976931348623157e+308,0.6658730271969261,-1000.0];
const v27 = [-8.040080448070657e+307,3.8894071891937223,0.7715929616276889];
let v28;
try { v28 = v27.with(v25, v25); } catch (e) {}
v28[2] = v28;
v28[2] = v28;
const v29 = [1.6621172782957435e+308,937862.0109722319];
try { v29.find(v27); } catch (e) {}
const v32 = 3154 >>> 3154;
const v34 = new Int32Array(3154);
v34[1700] = v34;
257 >>> 257;
let v38;
try { v38 = BigInt64Array.bind(v32); } catch (e) {}
v38.length = v38;
const v39 = new BigInt64Array(257);
const v41 = 198 === 198;
v41 && v41;
const v44 = new Int32Array(3154);
let v45;
try { v45 = v44.entries(); } catch (e) {}
try { v45.next(); } catch (e) {}
128 >>> 128;
try { Uint16Array(v11, Uint16Array, Uint16Array); } catch (e) {}
try { Uint16Array.bind(v25); } catch (e) {}
const v52 = new Uint16Array();
try { v52.fill(257); } catch (e) {}
Uint8ClampedArray.name;
Uint8ClampedArray.BYTES_PER_ELEMENT;
const v58 = new Uint8ClampedArray(3, v26);
class C59 {
    constructor(a61, a62, a63, a64) {
        this.c;
        a62.length = a62;
        this.e = this;
        const v66 = a63?.constructor;
        try { new v66(a64); } catch (e) {}
        try {
        const t0 = 128;
        t0();
        } catch (e) {}
        for (let i70 = 0;
            (() => {
                9 != 9;
                const v73 = -9;
                -(v73 + v73);
                return i70 < 9;
            })();
            (() => {
                const v78 = i70++;
                v78 >>> v78;
            })()) {
            i70--;
            v58[i70] = a64;
        }
    }
    c;
}
let v82;
try { v82 = new C59(3, Uint8ClampedArray, Uint8ClampedArray, v52); } catch (e) {}
v82.c;
let v84;
try { v84 = new C59(v45, v39, Uint16Array, C59); } catch (e) {}
v84.c;
v84.h = v84;
const v86 = new C59(v58, Uint8ClampedArray);
v86.e;
v28.c;
const v89 = new C59(v86, BigInt64Array);
try { v89.constructor(v23, v23, 198, v44); } catch (e) {}
v89.c;
const v93 = [65537,1073741825,7841,-12,13];
try { v93.group(v93); } catch (e) {}
const v95 = [1073741823,4294967295];
v95[1] = v95;
function F96(a98, a99, a100) {
    if (!new.target) { throw 'must be called with new'; }
    a98[1] = a98;
    const v101 = this.constructor;
    try { new v101(a98, a99, a99); } catch (e) {}
}
const v103 = new F96(v93, v95, WeakSet);
new F96(v95, v95, v103);
