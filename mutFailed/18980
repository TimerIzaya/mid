new WeakMap();
new Uint8Array(1940);
let v7 = [-5105,-65536,512,536870887,128,1108608188,60880,12,5];
const o8 = {
};
const v9 = o8.constructor;
const v11 = 1922 % 1922;
v11 == v11;
for (let v13 = 0; v13 < 25; v13++) {
    v13 - v13;
    v7 = v9;
    function f15() {
        return f15;
    }
    function f16(a17, a18, a19, a20) {
        a18.hasOwn(f15, a19);
        let v22;
        try { v22 = new a19(a18); } catch (e) {}
        const v23 = v22?.is;
        try { v23(a18, a20); } catch (e) {}
        a20 >>> a20;
        let v26;
        try { v26 = a18(a20); } catch (e) {}
        let v27;
        try { v27 = new a19(); } catch (e) {}
        a18.freeze();
        -(a20 + a20);
        function f31() {
            return v26;
        }
        f31.arguments;
        try { f31.toString(); } catch (e) {}
        const v35 = -f31.length;
        ~v35;
        const v38 = f15().constructor;
        function F39() {
            if (!new.target) { throw 'must be called with new'; }
            this.c = F39;
            this.c = this;
            try {
                this.c = 19793;
                try { Array.of(); } catch (e) {}
                const v44 = Array(19793);
                try { v44.map(this); } catch (e) {}
                for (const v46 of v44) {
                }
                const v47 = [];
                const v49 = Symbol.toPrimitive;
                v47[v49] = Array;
                const v50 = [v47,v47,v47];
                try { Symbol.apply(Symbol, v49); } catch (e) {}
                v50[Symbol.toPrimitive] = Symbol;
                [v50,v50];
                Uint16Array.toString = Array;
            } catch(e56) {
            }
            try {
                this.b = 19793;
            } catch(e57) {
            }
        }
        new F39();
        let v59;
        try { v59 = v38(); } catch (e) {}
        v59.arguments = v59;
        v59.bind(v35, v38, v59);
        function f61() {
            return v59;
        }
        const v62 = typeof f31;
        v62 == v62;
        try { v62.charAt(v27); } catch (e) {}
    }
    for (let v65 = 0; v65 < 5; v65++) {
        f16(v65, v9, v9, 1922);
    }
}
new Uint8Array(1800);
const v70 = new Int16Array(1000);
class C71 extends Int16Array {
    g = v70;
    a;
    c = WeakMap;
    static #m(a73, a74) {
        try {
            this.__proto__ = this;
        } catch(e75) {
        }
        return this;
    }
    static b;
    e;
    static #c = v70;
}
new C71();
new C71();
new C71();
function f79() {
    const o87 = {
        "d": 268435440,
        "a": 4.0,
        __proto__: "cJ",
        "f": "cJ",
        ..."cJ",
        8: f79,
        "g": 268435440,
        "e": f79,
        "h": "cJ",
        valueOf(a84) {
            const o85 = {
                __proto__: this,
                2261555780: "cJ",
            };
            super.a;
            return this;
        },
        "c": "cJ",
    };
}
const v88 = f79();
const v89 = f79();
const v90 = f79();
const v91 = [v90,v88,v89,v89];
const v92 = [];
Math.tanh(-1000.0);
function f101() {
}
function f103() {
    return f101;
}
const o106 = {
    get d() {
        Object.defineProperty(this, 10000, { enumerable: true, get: f101 });
        return new.target;
    },
    __proto__: 1000000.0,
    "b": 1000000.0,
    "c": f103,
    ...268435439n,
    ...1000000.0,
    "g": 268435439n,
    ...f101,
    "d": -1010928051n,
    ...268435439n,
};
const v108 = [10,-2147483649,9,-27142121,9,-284891600];
const v109 = [v108];
v109 >= Uint16Array;
const v113 = [1073741823,701857267,63326];
const v114 = [-4294967296];
class C115 {
    static [1073741823n];
    static valueOf(a117, a118, a119, a120) {
        let v116 = this;
        try { a118(a119, a117, v114, v116, a118); } catch (e) {}
        ++v116;
        return a118;
    }
    [v108];
    b;
    constructor(a124, a125) {
        v109.unshift("-6", a125, [this,this]);
    }
    static #p(a129, a130, a131, a132) {
        ["-6",Math];
    }
    #b;
    p(a135, a136, a137, a138) {
    }
}
const v139 = /2a\sc/uds;
function f140() {
    try { v139.test(v139); } catch (e) {}
}
v139[Symbol.toPrimitive] = f140;
const o146 = {
    [v139](a145) {
    },
};
new C115();
new C115();
new C115();
const v151 = new WeakMap();
v151.delete();
v113.concat(v113);
class C155 {
    n(a157) {
        this[a157] = 47457;
    }
}
new Uint32Array(257);
const v163 = [v90,v92,v92,v91];
const v164 = [-54486,11,9007199254740991,268435456,536870912,1073741823,255,1073741824,-2147483648,-3];
const v165 = [2033313755,-16,16,16,-24747,6,256];
const v166 = [65535];
new Set();
function F169(a171, a172, a173) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = a172;
}
new F169(v91, v166, v163);
new F169(v165, v91, v166);
[9007199254740990,12,13,1073741825,-9223372036854775807,2147483649,-320466038];
function F177(a179, a180) {
    if (!new.target) { throw 'must be called with new'; }
    const v181 = this.constructor;
    try { new v181(v164, this); } catch (e) {}
}
new F177(F177, F177);
new F177();
new Uint8ClampedArray(268435440);
