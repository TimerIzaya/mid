function f0() {
}
function f1() {
    return f0;
}
new Map();
try { new BigInt64Array(-9513n, f0, -9513n); } catch (e) {}
const v13 = new BigInt64Array(0);
let v14 = 1024;
v14--;
new Int32Array(v14);
if (-9513n != 1) {
    try {
        new BigInt64Array(127);
    } catch(e22) {
    }
} else {
    var h = Map;
}
const v28 = new BigUint64Array(5);
try { v28.join(v14); } catch (e) {}
(1).length;
const v33 = -f0;
try {
    v13.f = 0;
} catch(e34) {
}
const v35 = new v33(1);
v35[0] = v35;
new Int8Array(12);
const v39 = [1.5194593916452507e+308,1.7976931348623157e+308,-655.2599062195703,383261.13963534124,-4.351354601083372];
const v40 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
const v41 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
function F42(a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    try { a46.find(a44); } catch (e) {}
    try {
        const t37 = 127;
        t37.d = a44;
    } catch(e48) {
    }
    try {
        this.b = a46;
    } catch(e49) {
    }
}
const v50 = F42?.constructor;
try { new v50(12); } catch (e) {}
new F42(Int32Array, Int32Array, v40);
new F42(v40, 5, v41);
const v54 = new F42(v39, 12, v39);
v54[65536];
const o57 = {
};
gc(o57);
const v60 = new Int8Array(127);
v60[49];
for (let v62 = 0; v62 < 25; v62++) {
    v62++;
    let v66 = v62 ** 2;
    v66--;
    Math.sin(v66);
}
