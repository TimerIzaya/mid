const v0 = [-307.9086123373082,1.092836701376856e+308];
const v1 = [-779773.1267068366,417434.779400649,-1000000.0,1e-15,-255.1774336863524,4.757570090312431e+307];
const v2 = [-2.2250738585072014e-308,1000000000.0,-1000000000.0,-0.0,5.0,-319.4037218091337,3.0,-1000000000000.0,-7.152948413915037];
class C3 {
    [v1] = v0;
    static {
        this <= v0;
        delete v0?.length;
    }
    toString(a8) {
        v2.length >>= a8;
        super[v1] = v2;
        function F12(a14, a15, a16, a17) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = a15;
            } catch(e18) {
            }
            try {
                this.f = v0;
            } catch(e19) {
            }
            try {
                this.g = a8;
            } catch(e20) {
            }
        }
        const v21 = new F12(v1, gc, a8, "minor");
        const v22 = new F12(gc, F12, this, v21);
        new F12(v22, v22, v0, "minor");
        const o24 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o24);
        return gc;
    }
}
new C3();
const v27 = new C3();
new C3();
function f29() {
    return C3;
}
new Float32Array(0);
Object.defineProperty(v1, Uint8ClampedArray, { writable: true, configurable: true, get: f29, set: f29 });
let v35 = Float32Array + v27;
--v35;
try { v1.at(v35); } catch (e) {}
Math.log10(Float32Array);
Math.round(v27);
Math.atanh(2);
new Uint8ClampedArray(11);
new Uint8ClampedArray(6);
new Uint32Array([-9007199254740991,536870888,52691,-1,-128,-196204265,0]);
