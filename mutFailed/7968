new Int16Array(0);
Float64Array.length;
const v6 = new Float64Array(228);
v6.byteLength;
-127;
new Float32Array(127);
new Int8Array(Int8Array);
new BigInt64Array(BigInt64Array);
new Uint16Array(1072);
let v23 = 0;
const v24 = v23 >> v23;
v23 < 4;
const v27 = v23++;
v27 >> v27;
function F29() {
    if (!new.target) { throw 'must be called with new'; }
    const v31 = BigInt64Array?.__defineGetter__;
    try { new v31(Uint8Array, this); } catch (e) {}
    const o34 = {
    };
    o34.e = 19793;
    const o35 = {
    };
    o35.h = o35;
    o35.h = 58;
    const v37 = Array(19793);
    for (const v38 of v37) {
    }
    const v39 = [v37,v37,v37,v37,v37];
    new BigUint64Array();
    const v43 = [256];
    const v44 = v43?.filter;
    let v45;
    try { v45 = new v44(Float32Array); } catch (e) {}
    for (let v46 = 0; v46 < 50; v46++) {
        v46 - v46;
    }
    v43[65536] %= 256;
    const v48 = [v45,v39,v39];
    const v49 = v48?.groupToMap;
    try { new v49(19793); } catch (e) {}
    const v51 = [v48];
    try { v51.splice(256, v51); } catch (e) {}
    v51 >= Uint16Array;
}
new v24();
new F29();
