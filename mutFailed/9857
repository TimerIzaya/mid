const v2 = new Uint16Array(8);
function f3(a4) {
    try { a4(Uint16Array, ...a4, a4, a4, a4); } catch (e) {}
    new Int16Array(41);
    return 41;
}
v2.constructor = f3;
const v11 = Float32Array.name;
try { v11.fontcolor(8); } catch (e) {}
const v13 = new Float32Array(512);
try { v13.join(v11); } catch (e) {}
const v17 = new Int32Array(129);
v17.toString = f3;
v17[89] = v17;
false && false;
try { new BigUint64Array(Float32Array, Float32Array, 129); } catch (e) {}
const v22 = new BigUint64Array();
v22.toLocaleLowerCase = BigUint64Array;
try { v22.entries(); } catch (e) {}
function F24(a26, a27) {
    if (!new.target) { throw 'must be called with new'; }
    function f28() {
        function f29() {
            return ("catch").codePointAt(8);
        }
        return f29;
    }
    function f32(a33) {
        try { v2.indexOf(...a27, a26, a33, a33); } catch (e) {}
    }
    Object.defineProperty(this, Symbol.toPrimitive, { writable: true, enumerable: true, get: f28, set: f32 });
    a27[6];
    const v38 = a27?.constructor;
    try { new v38(this); } catch (e) {}
    function f40() {
        try { v22.toLocaleLowerCase(this, "NFKD", BigUint64Array, BigUint64Array); } catch (e) {}
        try { ("NFKD").localeCompare(this); } catch (e) {}
    }
    Symbol.g = Symbol;
    Symbol.g = Symbol;
    const v45 = Symbol.toPrimitive;
    Symbol.for(v45.description);
    Object.defineProperty(this, v45, { writable: true, value: f40 });
}
let v49;
try { v49 = new F24(BigUint64Array, v2); } catch (e) {}
const v50 = v49?.constructor;
v50[6] = v13;
try { new v50(v49, v49); } catch (e) {}
const v52 = new F24(BigUint64Array, F24);
v52.length = v52;
class C53 {
    static [v52];
}
try { new C53(); } catch (e) {}
let v55;
try { v55 = C53.bind(512); } catch (e) {}
try { v55.bind(Uint16Array); } catch (e) {}
