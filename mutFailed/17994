const v1 = new Date();
function f2(a3) {
    const v4 = v1 instanceof a3;
    Math.log1p(11);
    2147483648 << Date;
    Math.ceil(v4);
    return a3;
}
v1.valueOf = f2;
function f12() {
    return v1;
}
const v13 = [Date,v1];
v13[1] = v13;
const v14 = [v1,Date];
[v13,v14,v14,v1];
new Set();
class C21 {
    #n(a23, a24, a25) {
        try { a23.copyWithin(a24, 16); } catch (e) {}
        Set / this;
        return a23;
    }
    static #toString(a32, a33, a34, a35) {
        f12 &&= f12;
        try {
            f12();
        } catch(e37) {
        }
        return f12;
    }
}
const v41 = new C21();
v41[Symbol.toPrimitive] = f12;
new C21();
new C21();
Object.defineProperty(Date, "toString", { writable: true, configurable: true, enumerable: true, value: Date });
try { new Date(16, 16, v1, v1, v41, Date, v1); } catch (e) {}
class C49 extends Date {
}
const v50 = new C49(-4294967296);
v50.toString = f2;
const v51 = v50?.getDay;
try { new v51(); } catch (e) {}
Object.defineProperty(Date, v50, { get: Date, set: Date });
