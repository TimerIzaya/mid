function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    this.g = a5;
    try {
        this.h = a5;
    } catch(e6) {
    }
    try {
        this.g = a5;
    } catch(e7) {
    }
}
F3.prototype;
const v9 = new F3(1000000000000.0);
const v10 = new F3(-1000000000000.0);
v10.length = v10;
v10.h = v10;
new F3(v9);
0n ^ 0n;
2372 >> 2372;
new Uint32Array(2372);
try { new Float32Array(v10, 0n, 0n); } catch (e) {}
new Float32Array(257);
const v26 = Float64Array?.constructor;
try { new v26(Float64Array); } catch (e) {}
new Float64Array(58);
function F29() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = -15n;
    try {
        this.h = 268435439;
    } catch(e32) {
    }
}
const v33 = new F29();
const v34 = new F29();
const v35 = new F29();
function f36(a37) {
    const v38 = a37?.__defineSetter__;
    try { new v38(F29, f36); } catch (e) {}
    const o46 = {
        __proto__: a37,
        ...v35,
        valueOf(a41) {
            return v33;
        },
        ...a37,
        "a": a37,
        "b": F29,
    };
    return o46;
}
f36(v33);
const v48 = f36(v35);
try { v48.valueOf(F3); } catch (e) {}
const v50 = f36(v34);
/(ab)[U]/udmy;
const v52 = /2(?!(a))\18/giy;
v52.unicode = v52;
const v53 = /a[^a]/gms;
class C54 {
}
const v55 = new C54(v52);
v55.constructor = f36;
const v56 = v55?.constructor;
try { new v56(); } catch (e) {}
const v58 = new C54(v53);
const v59 = v58?.constructor;
try { new v59(); } catch (e) {}
4294967297n > 4294967297n;
3n >> 3n;
try { new Int8Array(8, 0n, F3); } catch (e) {}
new Int8Array(8);
Float32Array.toString = f36;
new Float32Array(3);
0 % 0;
const v76 = new BigInt64Array();
const o77 = {
    __proto__: v76,
};
try { o77.fill(o77, BigInt64Array); } catch (e) {}
Float32Array.valueOf = f36;
new Float32Array(0);
class C81 {
    constructor(a83) {
        for (let v84 = 0; v84 < 32; v84++) {
            -v84;
            v84 === v84;
            for (let v87 = 0; v87 < 50; v87++) {
            }
            new Int8Array(520);
            for (let v91 = 0; v91 < 5; v91++) {
            }
            Math.PI;
            0 + 0;
            0 || Int8Array;
            Math.tanh();
            function f98() {
                return this;
            }
        }
    }
}
const o99 = {
};
o99.h = o99;
const v100 = Float32Array & Float32Array;
v100 + v100;
const v102 = new C81();
const v103 = v102?.constructor;
try { new v103(3); } catch (e) {}
const v106 = async (a107, a108, a109) => {
    [v48,a107,F29,v50];
    return v55;
};
