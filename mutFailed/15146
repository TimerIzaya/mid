function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -2116053041;
    } catch(e3) {
    }
    try {
        this.d = -2116053041;
    } catch(e4) {
    }
    try {
        this.c = -2116053041;
    } catch(e5) {
    }
}
new F0();
Math.asinh();
Array(-2119616940);
new F0();
new F0();
[65536,268435439,13,-2147483647,1024,64,65537,4096,1820317859,268435456];
[268435456,380489966,2147483648,-31740];
const v16 = [65536,1534,9,128,14,-4294967296,2147483647];
[0.5560078027753168,-1000000000.0,0.0,-4.0,NaN,-262213.8170565687];
[-281.6795333440159,-1.8244228050138552e+307,1000.0,-1.470714050735055e+308,-5.0,-1000000.0,-2.0,2.2250738585072014e-308];
[60.76118094657363,-1.7374435242921084e+308,-678.5101179195252,8.797604770650047,-1e-15,2.220446049250313e-16,-1000000000000.0];
new BigInt64Array(3769);
function f25() {
}
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.toPrimitive] = f25;
    this.a = f25;
}
new Int8Array(256);
let v36 = new Uint8ClampedArray(4);
new Int8Array(v36);
new Int32Array(129);
class C41 {
}
const v42 = new C41();
function f43(a44, a45) {
    const v46 = [-2,1024];
    function F47(a49, a50, a51, a52) {
        if (!new.target) { throw 'must be called with new'; }
        for (let v55 = 0; v55 < 100; v55++) {
            const o59 = {
                6: undefined,
                "d": undefined,
                [268435439n]: 2105444095n,
                __proto__: v46,
                "g": undefined,
                "b": 2105444095n,
                "arguments": this,
                valueOf(a58) {
                },
            };
            o59[1] = o59;
        }
    }
    function f60() {
        return f43;
    }
    class C61 extends f60 {
        constructor(a63, a64, a65) {
            ({"c":v36,...v36} = a64);
        }
        static m(a68) {
            try { new a68(this, this, v46, this); } catch (e) {}
            v46 < v16;
            const o71 = {
            };
            new Proxy(this, o71);
            return v16;
        }
    }
    class C74 extends C61 {
    }
    function f75(a76, a77, a78, a79) {
        try { a76(C74); } catch (e) {}
        let v81 = a77 & a77;
        const o84 = {
            get c() {
                return this;
            },
        };
        new Map();
        v81++;
        const o90 = {
            n(a88, a89) {
                return this;
            },
        };
        return v42;
    }
    for (let v91 = 0; v91 < 500; v91++) {
        f75();
    }
    return C41;
}
Object.defineProperty(v42, "constructor", { value: f43 });
const v93 = v42.constructor;
v93(v93, v42);
