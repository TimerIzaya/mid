const v0 = [2,5,21391,1149479593,2];
[14,-591556430,-9007199254740990,1024,-9,414094724];
const v2 = [10,-59724,161570796,268435441,-65537,-33130,-1791393578,1184023294];
class C7 {
    594532432 = -60610;
}
const v8 = new C7();
[v8];
[2.2250738585072014e-308,NaN,1e-15,1.7976931348623157e+308];
[2.0,0.7964161897902647];
const v12 = [4.0,-3.0,4.0];
const v14 = new Date();
const v15 = [1.7976931348623157e+308,-5.063738949828065,-1000000.0,-4.0,4.0,1.368499884638594e+307,0.0,-1.2131530743918297,-1000000000.0,-2.809909548595164];
const v17 = Symbol.isConcatSpreadable;
Object.defineProperty(v15, v17, { configurable: true, value: v15 });
v15[Symbol.isConcatSpreadable] = v2;
function f20() {
    return f20;
}
function f21() {
    Symbol[3006] &&= 1.3505595417598926;
    Object.defineProperty(v17, "description", { set: Symbol });
    return v14;
}
f20[Symbol.species] = f21;
const v25 = [];
const v26 = [];
class C27 {
}
const v28 = new C27(v25, v26);
function f29(a30) {
    function F31(a33, a34, a35) {
        if (!new.target) { throw 'must be called with new'; }
        try {
            this.b = v28;
        } catch(e36) {
        }
        try {
            this.g = a34;
        } catch(e37) {
        }
    }
    const v38 = new F31(a30, a30, v0);
    const v39 = new F31(v38, v38, v38);
    new F31(v39, v25, v38);
    return v12;
}
v28.constructor = f29;
v28.constructor;
const v42 = Symbol.isConcatSpreadable;
const v44 = new Float32Array();
for (let v45 = 0; v45 < 5; v45++) {
    v44[836499325] = ~v45;
}
Object.defineProperty(f20, v42, { configurable: true, value: Date });
v15.constructor = f20;
v15.concat(f20, f20, v15, v15);
