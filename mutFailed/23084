const v0 = /p(x)(x)(x)\2/gvsy;
const v1 = /[^[\xf0\x9f\x92\xa9-\xf4\x8f\xbf\xbf]+]/udimy;
const v2 = /(a)\1/gm;
function f3(a4, a5) {
    function f6() {
        return a4;
    }
    try { new a4(); } catch (e) {}
    [2.2250738585072014e-308,-1000.0,824016.8053277577,-1.0586808096083827e+308,-5.787252642416803,1.0943672668274197e+307];
    [-4.1772881970602,-621.2816643625822,-731.6893180081465,-1.7976931348623157e+308];
    [1.903453669622479,-1e-15,1.7868090198531525e+308,-1000.0,-1.7976931348623157e+308,1e-15];
    const o27 = {
        set g(a12) {
            a4[Symbol.matchAll] = this;
            try {
                super.valueOf();
            } catch(e16) {
            }
        },
        get e() {
            super.a ||= a5;
            const v18 = super.c;
            super[a4];
            const v24 = [a5];
            Reflect.apply(v0.compile, v18, v24);
            return v2;
        },
    };
    return o27;
}
f3(v1, v0);
f3(v1, v2);
f3(v1, v0);
new BigUint64Array(62);
const v36 = new BigInt64Array(64);
v36[Symbol.matchAll] = v1;
try {
    new BigUint64Array(64, -1329588170);
} catch(e41) {
}
new Int16Array(118);
function F45(a47) {
    if (!new.target) { throw 'must be called with new'; }
    const v48 = this.constructor;
    try { new v48(); } catch (e) {}
    new BigInt64Array();
}
new F45();
new F45();
