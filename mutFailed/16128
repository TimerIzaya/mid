new Array(64);
[-1000000000000.0,6.955230001948216,-681319.8065144399,-576.6745271839719,NaN];
[1.0,-1000000000000.0,1.7976931348623157e+308];
[-1.0];
const v11 = new Int16Array(116);
v11[95];
try { BigUint64Array(BigUint64Array, 3, "string"); } catch (e) {}
new BigUint64Array(3);
3 >>> 3;
Int16Array.length;
new Int16Array(3);
let v22 = 174;
v22++;
const v25 = new Uint32Array(v22);
Float32Array.g = Float32Array;
new Float32Array(1018);
const o34 = {
    [v25](a31, a32, a33) {
        var f = this;
        return a32;
    },
    __proto__: "isConcatSpreadable",
};
class C35 {
}
try { new C35(); } catch (e) {}
const v37 = new C35();
const v39 = v37 << -1557853178;
v39 - v39;
function F42(a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = F42;
}
const v46 = F42?.bind;
try { v46.bind(v46); } catch (e) {}
try { new v46(o34); } catch (e) {}
const v49 = new F42();
new F42();
new F42("function", v49);
let v52 = 4096;
v52--;
new Float32Array();
class C55 {
    static {
        let v57;
        try { v57 = new this(); } catch (e) {}
        const v58 = v57?.__defineGetter__;
        try { new v58(v49, this); } catch (e) {}
        for (let v60 = 0; v60 < 10; v60++) {
            v60 >>> v60;
            const v62 = [-65537,-24143,-1293542190,14907,3476,-65083];
            const v63 = [65537,3,-25535,268435440,-2,9007199254740990,1,-128,9007199254740990];
            const v64 = [6,-536870912];
            const v66 = new Date();
            function F67(a69) {
                if (!new.target) { throw 'must be called with new'; }
                this.f = v66;
                this.g = Date;
            }
            new F67(v62);
            const v71 = new F67();
            v71.__proto__ = v71;
            class C72 {
                constructor(a74, a75) {
                    function f76(a77, a78, a79, a80) {
                        try { a78.now(); } catch (e) {}
                        const o82 = {
                            "deleteProperty": Date,
                            "ownKeys": Date,
                        };
                        const v83 = o82?.constructor;
                        try { new v83(a74); } catch (e) {}
                        return v71;
                    }
                    const v85 = f76(v63, Date);
                    v85.f = v85;
                }
                [v64];
                g = v71;
            }
            new C72();
            new C72();
            const v89 = new Uint16Array();
            453 - 453;
            const v93 = new Float64Array(453);
            const v94 = v93.toSorted();
            const o95 = {
                "c": Float64Array,
                "f": v64,
                __proto__: v89,
            };
            const v96 = Date();
            try { v96.substring(v57, v57); } catch (e) {}
            Date.valueOf = v94;
            v60 % v60;
            function f99() {
                return v60;
            }
            const v100 = [601759695];
            v100[0];
            const v102 = [1073741824,1073741823,1376142744,1073741825];
            try { v102.reduce(v52); } catch (e) {}
            function f105(a106, a107, a108, a109) {
                f99();
                try { ("find").search("find"); } catch (e) {}
                let v113;
                try { v113 = v102["find"](..."find", a109, ...v100, ...v102, ...522675525n); } catch (e) {}
                const v114 = v113 <= a108;
                v114 && v114;
            }
            for (let v116 = 0; v116 < 10; v116++) {
                -v116;
                f105();
            }
        }
        const v119 = ("object").__proto__;
        const v120 = v119?.fontcolor;
        try { new v120(v11); } catch (e) {}
        const v123 = v119?.trimRight?.constructor;
        try { new v123(Float32Array); } catch (e) {}
    }
}
