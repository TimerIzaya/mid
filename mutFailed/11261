new Float32Array(129);
let v3 = 121;
v3--;
const v6 = Float32Array.prototype;
const v7 = new Float32Array(v3);
const v10 = new BigUint64Array(4096);
try { v10.reduce(v3); } catch (e) {}
const v12 = [1,1593,7,16,512];
[1034789659,-1206118390,-9223372036854775807,-1261671291,-4294967296,-4,-2,-9007199254740992,-2147483649];
try { v12.reverse(); } catch (e) {}
const v15 = [4294967297,10000,-4,7459,-4096,-4];
v15[5] = v15;
new Array(392);
for (let v19 = 0; v19 < 5; v19++) {
    function f20() {
        let v21 = -4294967295;
        v21++;
        const o26 = {
            valueOf(a24, a25) {
                return v21;
            },
        };
        return v7;
    }
    v19();
    %OptimizeFunctionOnNextCall(v6);
}
