[1078546419,1974524467,256,257,-34711];
[-347978480,-1073741824,-1123265226,59618];
const v5 = [1000,1024,4096,5,536870887,12,10,-15176];
const v8 = -10n << -10n;
v8 + v8;
const v10 = v5.constructor;
v10.isFrozen(v10);
new BigUint64Array(1024);
new Uint8ClampedArray(10);
const v19 = new Int32Array(2960);
new Uint16Array(v19);
let v23 = 1922 + 1922;
--v23;
new Uint8Array(2960);
function F27() {
    if (!new.target) { throw 'must be called with new'; }
}
const v29 = new F27();
const v30 = [-6.695596969959072];
const v31 = [1.7976931348623157e+308,-2.2250738585072014e-308];
function f32() {
    return v30;
}
function f33(a34, a35, a36, a37) {
    const v39 = Symbol.toPrimitive;
    for (let v41 = 0; v41 < 5; v41++) {
        function f42() {
            ("Vre").charAt(v41).lastIndexOf();
            const v47 = new Float32Array();
            function f48() {
                return v47;
            }
            const o56 = {
                [-4294967297n](a50, a51, a52, a53) {
                    eval();
                },
            };
            return o56;
        }
        f42();
        %OptimizeFunctionOnNextCall(f42);
    }
    a34[v39] = f33;
    function f58(a59) {
        return v30;
    }
    a36.valueOf = f58;
    try { a34.group(f32); } catch (e) {}
    return f33;
}
f33(v30, v31, v29);
