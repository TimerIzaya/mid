new Uint8Array(3078);
try { Float32Array.bind(3078); } catch (e) {}
const v6 = new Float32Array(6);
let v7;
try { v7 = v6.join(v6); } catch (e) {}
try { v7.indexOf(3078); } catch (e) {}
const v10 = 64 >> 64;
const v12 = Uint16Array.name;
v12[8] = v12;
new Uint16Array(64);
const v15 = 64 > Uint16Array ? 64 : Uint16Array;
const o18 = {
    "maxByteLength": 10000,
};
const v20 = new ArrayBuffer(711, o18);
new BigInt64Array(v20);
const t16 = "h";
t16[0] = "h";
let v26;
try { v26 = ("number").match("number"); } catch (e) {}
try { v26(...Uint16Array, 10000, ...v6, v12, ..."number", ...v20); } catch (e) {}
const v28 = [v12,"h",v10];
const v29 = [v10];
[v15,v29,v29,"h"];
v28[64] >>>= 10000;
36002 & 36002;
const v34 = [-1000.0,351.94489669740733,5.8623101046484845,-160881.40611645568,0.6390643538224362,9.13027568774574];
try { v34.push(6); } catch (e) {}
function f36(a37) {
    return 512;
}
v34.toString = f36;
function f38(a39, a40) {
    try { a40("h"); } catch (e) {}
    a39.name = a39;
    a40.g = a40;
    return 512;
}
const v43 = new Promise(f38);
try { v43.catch(v12); } catch (e) {}
v43[v34] += 36002;
