const v2 = new Uint8ClampedArray(2);
const v5 = new Float64Array(1000);
const v8 = new Uint8Array(1000);
let v9;
try { v9 = v8.toSorted(Float64Array); } catch (e) {}
try {
    v2.valueOf = v9;
} catch(e10) {
}
let v13 = -2.0;
Math.exp(1000);
let v15 = --v13;
Math.atan2(v13, 1000);
const v17 = Math.min(v5);
-4096 != -4096;
const v25 = 2 | (Math <= v2.buffer);
try {
    v17.d = v25;
} catch(e26) {
}
const v28 = v15++ * 7;
-4096 - v28;
Math.cosh(v15);
!7 || v28;
v15 ^ v28;
for (let v37 = 0; v37 < 32; v37++) {
    v5["p" + v37] = v37;
}
-9007199254740990 - -9007199254740990;
class C43 {
}
const v44 = new C43();
function f45(a46) {
    return a46;
}
const v47 = f45.toString;
try { v47.call(); } catch (e) {}
class C50 extends Uint8Array {
    static #e;
    5 = v25;
    static #c = 4;
}
new C50();
new C50();
new C50();
const v55 = new Uint32Array(4);
class C56 {
}
v44.length;
try { C56.apply(v44, v55); } catch (e) {}
