[4294967297,10,1,2147483649,55192,3,2040552851,2,268435440];
const v1 = [2];
[2,0,-268435456];
const v5 = new Int32Array(1024);
const v8 = new Float64Array(225);
new BigUint64Array(1296);
[2.0];
[-113.88577577875685,NaN,-138.72295990426278,-725973.0177101751,1.0];
const v17 = 1000000.0 % 225;
const v21 = [-1.7976931348623157e+308,-2.2250738585072014e-308,1e-15,1.7976931348623157e+308,436.391218484674,984999.8983446106,-2.220446049250313e-16,-65664.25596205948,-568440.0637574068,0.6833182439703986];
new BigInt64Array(14, BigInt64Array);
4096 / 4096;
Object.defineProperty(Uint8Array, "d", { configurable: true, value: Int32Array });
Uint8Array.d = Uint8Array;
Uint8Array.prototype = Uint8Array;
const v31 = new Uint8Array();
gc();
const v35 = 110 <= 110;
110 + 110;
try { new Int8Array(); } catch (e) {}
Int8Array.prototype = Int8Array;
const v39 = new v8();
const v41 = new Date();
const v42 = v41.getUTCDay();
v42 >>> v42;
let v44 = 127;
try { v1["toSpliced"](1024, ...-37370, 225, ..."toSpliced", v35, ..."toSpliced"); } catch (e) {}
try { v39.toSorted(Date); } catch (e) {}
v31 ^ v31;
!v31;
Math.cbrt(v31);
v35 & v31;
v5 ** 9;
v44 >> v44;
v44++;
function f57(a58, a59) {
    try { a58(f57); } catch (e) {}
    try { a58(BigInt64Array); } catch (e) {}
    a59.constructor(a59);
    return f57;
}
let v64;
try { v64 = new Promise(4096); } catch (e) {}
const v65 = new Promise(f57, Uint8Array);
let v66;
try { v66 = v65.then(); } catch (e) {}
v66.constructor = f57;
try { v66.then(v21, v17); } catch (e) {}
const t48 = "toSpliced";
t48.length = Uint8Array;
const v69 = new Uint8Array(v44);
function f70(a71, a72) {
    const o73 = {
    };
    o73.g = v64;
    o73.g = o73;
    return o73;
}
let v74;
try { v74 = f70(v65, v65); } catch (e) {}
v74.g;
f70.arguments = f70;
for (let v76 = 0; v76 < 25; v76++) {
    v76 - v76;
    const v78 = f70();
    v78.g = v78;
    v78.d = v78;
    Object.defineProperty(v78, v76, { enumerable: true, get: f70, set: f70 });
    8 - 8;
    const v83 = new Int8Array(8);
    try { Reflect.preventExtensions(v78); } catch (e) {}
    Reflect.construct(Uint16Array, [v83]);
    v69[v78] = v78;
    gc.name = gc;
    !("sync" == "sync");
    const o92 = {
        "execution": "sync",
    };
    o92.type = Int8Array;
    gc(o92);
}
