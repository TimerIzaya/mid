const v2 = new Float32Array(2789);
new Float32Array(379);
try { Float64Array.apply(v2, 379); } catch (e) {}
new Float64Array(4096);
Uint8Array.e = Uint8Array;
const v12 = new Uint8Array(255);
try { v12.set(255); } catch (e) {}
3154 + 3154;
class C18 {
    e = 1.263848426042065;
}
const v19 = new C18();
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    a22.e;
    Number.isFinite();
    const v27 = this.constructor;
    try { new v27(v19); } catch (e) {}
}
const v29 = new F20(v19);
new F20(1.263848426042065);
const v31 = new Float64Array(3154);
Int32Array.prototype = v31;
new Int32Array(64);
const v37 = new BigUint64Array(3927);
const v40 = new Uint32Array(4);
new v29(v40);
function f43(a44, a45, a46) {
    try { a44.toString(); } catch (e) {}
    try { a44.apply(a45, v37); } catch (e) {}
    ~(f43 ** a45);
    return v37;
}
const v51 = f43(f43);
try { v51.reduce(Float64Array); } catch (e) {}
