const v2 = new BigInt64Array(1992);
const v5 = new Int8Array(1000);
const v7 = new BigInt64Array();
v7.copyWithin(-9223372036854775808);
class C10 {
    constructor(a12, a13) {
        try {
            this.fuck(a13, "function");
        } catch(e16) {
        }
    }
}
const v17 = new C10();
"1343140951" % !v17;
new Uint16Array(256);
function f27() {
    return 4294967295;
}
class C34 {
}
try { Date.parse("1343140951"); } catch (e) {}
Object.defineProperty(v7, 134, { value: BigInt64Array });
try {
    v5.at(0);
} catch(e38) {
}
const v39 = new C34();
v39.dotAll = v39;
const v41 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
const v44 = new Float64Array(3341);
const o45 = {
    __proto__: v41,
    "g": Float64Array,
    ...v44,
    2147483647: v5,
};
function f50() {
}
const v51 = C34[128];
const v52 = C10[v51];
function F53(a55, a56, a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -748182857;
    } catch(e59) {
    }
    try {
        this.b = Uint32Array;
    } catch(e60) {
    }
    try {
        this.f = a58;
    } catch(e61) {
    }
}
const v62 = new F53(f27, -21764, 1992, v51);
new F53(10, v62, 129, Uint32Array);
new F53(v52, -2, 10, Uint32Array);
const v65 = f50();
try { v2["any"](v65); } catch (e) {}
("boolean").split("toString");
function f72() {
    ([-7,-18455])["pop"]();
    const o88 = {
        m() {
            const o86 = {
                "execution": "async",
                "type": "minor",
            };
            gc(o86);
        },
    };
    return o88;
}
f72();
Math.log1p(4294967295);
(-1.4618325192014402e+308) ** -724330360;
Date.UTC(2, 2);
