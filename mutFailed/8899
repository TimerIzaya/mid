new Uint16Array([]);
4096 >>> 4096;
Int8Array.BYTES_PER_ELEMENT = Int8Array;
function F10() {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 268435440;
}
function F13(a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
}
const v17 = F13?.constructor;
try { new v17(F10); } catch (e) {}
new Int8Array(4096);
let v20 = 11;
v20--;
const v23 = new Uint16Array(v20);
v23[0] = v23;
v23[5] = v23;
class C26 {
    static {
        this.prototype = this;
        Symbol.search = Symbol;
        const v30 = this[Symbol.hasInstance];
        try { new v30(v30); } catch (e) {}
    }
    #p() {
        let v33;
        try { v33 = this.p(undefined, this, this, this, this); } catch (e) {}
        try {
            v33.#p(undefined, v33, v33, undefined);
        } catch(e35) {
        }
        return undefined;
    }
    static #a = undefined;
    c = undefined;
}
try { C26.bind(191); } catch (e) {}
const v37 = new C26();
const v38 = new C26();
const o44 = {
    15: Int8Array,
    toString(a40, a41) {
        super.h = a41;
        try { C26.stringify(Int8Array, Int8Array, this); } catch (e) {}
        try {
            C26.c = v37;
        } catch(e43) {
        }
        return a40;
    },
    2147483647: undefined,
    __proto__: v38,
    "c": Int8Array,
    ...Int8Array,
    "f": Int8Array,
};
o44[2147483647];
const v46 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
const v47 = [512,7,-1073741824];
const v49 = new Uint32Array([1524942359,268435439,8,1,256,-11]);
const v50 = v49[3];
v50 >> v50;
const o52 = {
};
o52.c = o52;
-1.0406565190769766e+308 >>> -1.0406565190769766e+308;
const v57 = Math.atan(+-1.0406565190769766e+308);
v57 - v57;
const v59 = [NaN,3.0];
v59.g = v59;
const v62 = v59["concat"](-483497369);
v62[2] = v62;
o52.h = o52;
Proxy.name;
const v65 = new Proxy(v46, o52);
v65.__proto__ = v47;
