let v1 = "-1";
const v5 = new Int8Array(8);
Reflect.construct(Uint16Array, [v5]);
class C10 {
    static set d(a12) {
        const v13 = super[v1];
        let v14;
        try { v14 = new a12(this, 2.2250738585072014e-308, a12, this); } catch (e) {}
        super[v14];
        v1 = v13;
    }
    static #h = 2.2250738585072014e-308;
    a;
    static [v1] = 2.2250738585072014e-308;
    #d;
}
new C10();
new C10();
new C10();
/(?:a+){0,0}/gdimsy;
/[ya{0}]/vm;
/h\P{Decimal_Number}/gvimy;
let v22 = 1024;
for (let i26 = 0, i27 = 10;
    (() => {
        const v28 = i26 < i27;
        class C29 extends Date {
        }
        return v28;
    })();
    i26++) {
}
Int32Array[2] = Int32Array;
new Int32Array(v22);
new Uint8ClampedArray(2698);
new Uint32Array(204);
class C43 {
    static #m(a45, a46, a47) {
    }
    constructor(a49, a50, a51, a52) {
        this.#m();
    }
    ["undefined"] = 2.2250738585072014e-308;
    #a;
    n(a55, a56) {
    }
    toString(a58, a59) {
        this.constructor();
        -this;
    }
}
function f64(a65, a66, a67, a68) {
    Object.defineProperty(a65, "g", { value: a66 });
    a65 % a67;
    const o72 = {
        set b(a71) {
        },
    };
    return o72;
}
[-6.672391061426152e+307];
const v79 = new BigUint64Array(10);
for (const v81 in v79) {
    new Float64Array(2147483647);
}
new Int32Array(Int32Array);
function f84(a85, a86, a87, a88) {
    const o89 = {
    };
}
class C90 {
    static get c() {
        const v92 = `
        `;
    }
}
Object.defineProperty([1840677197,-43868], "undefined", { configurable: true, value: "undefined" });
const o95 = {
};
function F96(a98, a99, a100, a101) {
    if (!new.target) { throw 'must be called with new'; }
    const v102 = this.constructor;
    try { new v102(); } catch (e) {}
    typeof Float32Array;
}
new F96();
function F107(a109, a110, a111, a112) {
    if (!new.target) { throw 'must be called with new'; }
    a112[1];
}
for (let v115 = 0; v115 < 10; v115++) {
}
for (let v116 = 0; v116 < 25; v116++) {
    Array(36862);
    v22++;
    ([-833.5530374606573,-46757.76096849947,-2.220446049250313e-16,-1000000.0,0.0,1.0,0.042648320103989557,1.4570589756852907,145338.1606694283]).groupToMap;
}
