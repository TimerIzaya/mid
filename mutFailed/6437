[-0.0,-2.44702045276411e+307,1000.0,-Infinity,-7.638555214053187e+307,2.2250738585072014e-308];
[-7.404468360105132,1000000000.0,-0.0];
[-1000.0,-1.9091944805586252,-1.214195544055121e+308,1.5076031796793402e+308];
new Float32Array(3214);
new Uint16Array(162);
new Float64Array(4042);
const v17 = new Float64Array(4);
const v20 = new Uint8Array(256);
new Float32Array(7);
let v25 = v20[44610];
let v26;
try { v26 = v25(7, 7, 4); } catch (e) {}
v25 = 7;
function F27(a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    function f31() {
        function f32(a33) {
            function f34() {
                return this;
            }
            return a29;
        }
        return f32;
    }
    function f35(a36) {
        function f37(a38) {
        }
    }
    Object.defineProperty(this, "toString", { writable: true, configurable: true, get: f31, set: f35 });
    try {
        new Uint8ClampedArray([1000000.0,1000000.0]);
        this.b = 256;
    } catch(e43) {
    }
}
const v44 = new F27(44610, 44610);
try {
    v44.toString = v26;
} catch(e45) {
}
let v46;
try { v46 = v26(256, 7, Float32Array, F27); } catch (e) {}
const v47 = new F27(7, 7);
new F27(7, 7);
typeof v17 === "undefined";
const v53 = Symbol.toPrimitive;
const o68 = {
    [v53]() {
        v46();
        function F56(a58, a59) {
            if (!new.target) { throw 'must be called with new'; }
        }
        let v60 = 0;
        while (v60 < 8) {
            [-9223372036854775808,536870912,-36728,1,1882308560,268435456,-35029,536870887,-6];
            [1098008223,268435441,1073741824,1218950660];
            [1842143932,4,2147483647,-268435456,-24476,268435439,-65536,65536,2];
            v60++;
        }
        F56(F56, v47);
    },
};
