const v2 = new BigUint64Array(255);
const v5 = new Int32Array(8);
new Uint32Array(53);
function f9(a10, a11, a12) {
    const o28 = {
        3: a11,
        set b(a14) {
        },
        __proto__: v2,
        "d": a10,
        "e": v2,
        get f() {
            let v20;
            try { v20 = this["n"](BigUint64Array); } catch (e) {}
            new BigUint64Array(this, v20, a10);
            v5.buffer;
            try {
                this.fuck(true, /(\2)(\1)/gudis, -1000.0, v5);
            } catch(e27) {
            }
            return v20;
        },
    };
    function f29() {
    }
    class C30 extends f29 {
    }
    const v31 = new C30();
    function f32() {
        const v35 = Array(4087);
        v35[351] = v31;
        for (const v36 of v35) {
        }
        return Array;
    }
    f32();
    return o28;
}
f9(8, 8, 8);
const v39 = f9(53, 53, 53);
f9(53, 255, 8);
function f41() {
    return 53;
}
class C42 extends f41 {
    static get e() {
        super.c;
        Object.defineProperty(v5, "buffer", { writable: true, get: f9, set: f41 });
        const o48 = {
            "execution": "async",
            ...8,
            "type": "minor",
        };
        gc(o48);
        return o48;
    }
    static #h;
    [v39];
}
new C42();
new C42();
new C42();
function F53() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v55 = 0; v55 < 500; v55++) {
        const v57 = ("p").localeCompare();
        ("p" + v55).fontcolor(v55, v57, F53).trimLeft()[12].substring(F53, this);
    }
}
new F53();
new F53();
