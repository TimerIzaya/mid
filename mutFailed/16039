new WeakSet();
const v5 = new Float32Array(141);
const v6 = v5[37];
const v8 = [[]];
class C10 extends Map {
    constructor(a12, a13) {
        super(v8);
    }
}
function f18(a19) {
    a19[4] = a19;
    return a19;
}
new Int8Array(-2147483648);
function f24() {
    return 243628655;
}
"boolean" == "boolean";
class C29 {
}
undefined.fuck();
for (let v32 = 0; v32 < 5; v32++) {
    function f33() {
        function f34(a35, a36, a37) {
            return f34;
        }
        const o40 = {
            "type": "function",
        };
        const v41 = new Worker(f34, o40);
        return v41.terminate(f34, v41, v32);
    }
    f33();
    %OptimizeFunctionOnNextCall(f33);
}
("boolean").normalize();
[[-1e-15,-4.547098672084515,6.731189859503068,1000.0,1000.0,414.1111077300918,567.5737904015757]];
new Int32Array();
function f53() {
    class C55 {
        [null];
    }
    const v58 = new Float32Array();
    v58["copyWithin"](..."-11838");
    for (let v61 = 0; v61 < 5; v61++) {
        function F64(a66, a67, a68, a69) {
            if (!new.target) { throw 'must be called with new'; }
            const v70 = this.constructor;
            try { new v70(a66, a66); } catch (e) {}
            a67.isPrototypeOf();
        }
        new F64("HkAXC", "toStringTag");
    }
    return f53;
}
%OptimizeFunctionOnNextCall(f53);
const v74 = new Float64Array(1);
Date.parse(Int8Array, [v74]);
const v79 = new Uint8ClampedArray();
const v80 = v6 < v79;
const o84 = {
    n(a82, a83) {
        return v80;
    },
};
