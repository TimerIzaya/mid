new Float64Array(1);
const v5 = new Float64Array(64);
class C6 {
}
async function f7(a8, a9, a10, a11) {
    return (await C6).call(C6, f7, f7, C6);
}
f7.call(C6, v5, f7).finally();
const v18 = new Int8Array(6);
function F19(a21, a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    this.f = F19;
    const v28 = ("toString")?.toString;
    let v29;
    try { v29 = new v28(); } catch (e) {}
    "preventExtensions" * (v29 >> Array);
    try {
        new Uint8ClampedArray([5.0]);
        class C36 extends Set {
        }
        Float64Array.f = a23;
    } catch(e37) {
    }
    try {
        this.h = a24;
    } catch(e38) {
    }
}
new F19(64, 6, 64, 6);
const v40 = new F19(6, 1, 1, 1);
function f41() {
    arguments[1073741823];
    return f41;
}
new F19(64, 64, 64, 1);
const v45 = new f41();
new Int32Array(64, 1, v45);
function F49(a51, a52, a53) {
    if (!new.target) { throw 'must be called with new'; }
}
function f54() {
    "Vre" | Int8Array.codePointAt(1);
    return f54;
}
Math.sin(-9007199254740991);
function f60() {
    return f60;
}
for (let v61 = 0; v61 < 25; v61++) {
}
0.44967380041772886 || f60;
const v65 = new v40(Uint8Array);
const o66 = {
    ...v65,
};
b = v18;
