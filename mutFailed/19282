function f0() {
}
const v1 = [f0];
const v2 = [f0,v1];
const v4 = ([f0,v1,v2,v1])?.filter;
v4.name;
let v6;
try { v6 = new v4(v1); } catch (e) {}
let v8 = -9223372036854775807;
v8 * v8;
v8--;
1073741824n ^ 1073741824n;
9n == 9n;
[v1,9n,9n,536870889];
const v18 = [1336974460,f0];
const v19 = v18[1];
try { new v19(); } catch (e) {}
[v18,1336974460,v18];
3 + 3;
let v29;
try { v29 = new Int8Array(v1, 24832n, v1); } catch (e) {}
try { v29.slice(Int8Array, v6); } catch (e) {}
try { new Float64Array(255, Float64Array, 255); } catch (e) {}
Float64Array.length;
let v40 = 2.0;
v40 <= v40;
v40--;
const t25 = "toString";
t25.f = "toString";
const v49 = new Uint8Array();
try { v49.entries(); } catch (e) {}
new BigInt64Array(11);
2 << 2;
try { new Uint16Array(Uint16Array, v2, 1.7976931348623157e+308); } catch (e) {}
4096 !== 4096;
try { new BigInt64Array(9n, 9n, 9n); } catch (e) {}
-5;
127 ^ 127;
try { new Float32Array(Float64Array, 15, 15); } catch (e) {}
const v72 = 820 << 820;
v72 & v72;
class C74 {
    constructor(a76, a77, a78, a79) {
        super(1.7976931348623157e+308);
    }
    /*
    constructor(a81, a82, a83, a84) {
        const v85 = this.constructor;
        try { new v85(); } catch (e) {}
        Float32Array.from([-3.942521664036782e+307,-3.942521664036782e+307,[a83,a83]]);
    }
    */
}
C74.name = C74;
function F92(a94, a95, a96) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.__lookupGetter__(a96); } catch (e) {}
    let v98 = a94 - a94;
    v98++;
    const v100 = a95 == a95;
    v100 && v100;
    const v102 = 5 >>> a94;
    v102 >> v102;
    a95 - a95;
    const v105 = this.constructor;
    try { v105.call(127); } catch (e) {}
    try { new v105(a96, C74); } catch (e) {}
    a94 % a94;
}
new F92(F92);
new F92(820, 121);
