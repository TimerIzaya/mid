const v2 = new Uint32Array(1997);
try { new Float32Array(v2, Uint32Array, 257); } catch (e) {}
const v6 = new Float32Array(257);
v6[95] = Float32Array;
new Float32Array(v2, 257, 1997);
function f8() {
    return 1997;
}
let v9;
try { v9 = v6.findLast(f8); } catch (e) {}
const v12 = new v9(225);
Uint32Array.prototype;
const v16 = new Uint32Array(167);
v12 > v16;
try {
    Float32Array.byteOffset = 1997;
} catch(e18) {
}
let v21;
try { v21 = (257).from(Uint32Array); } catch (e) {}
new Int32Array(v21);
let v23 = 1000;
v23--;
BigUint64Array.g = BigUint64Array;
new BigUint64Array(v23);
-(536870912n << 536870912n);
