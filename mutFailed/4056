new Float64Array(6);
new Float64Array(10);
new Float32Array(8);
try {
const t0 = 1.8503897255003885;
new t0();
} catch (e) {}
new Uint8ClampedArray();
try {
    const o18 = {
    };
} catch(e19) {
}
class C20 {
    static p(a22) {
        const o29 = {
            valueOf() {
                super.c |= 1.8503897255003885;
                try {
                    function f24() {
                        return this;
                    }
                    const v25 = `
                    `;
                    this.fuck("d", "d", "d", "d");
                } catch(e28) {
                }
                return -128;
            },
        };
        return o29;
    }
    g;
}
let v30;
try { v30 = new C20(); } catch (e) {}
const v31 = new C20();
if (Float64Array <= v30) {
    try {
        v30.e = -9.485075049115948e+307;
    } catch(e33) {
    }
} else {
    Reflect.construct(Float32Array, [Reflect,8], Float64Array);
}
class C38 extends Map {
}
new C38();
new Float32Array();
v31.g;
new C20();
new C20();
class C45 extends C20 {
    static n(a47, a48) {
        function F50(a52, a53, a54, a55) {
            if (!new.target) { throw 'must be called with new'; }
        }
        Math.atan(1653620084);
        new Float64Array(1073741824);
        class C62 {
        }
        return -128;
    }
    #c = C45;
    valueOf(a66, a67, a68) {
        super.f;
    }
    constructor(a71, a72, a73, a74) {
        super();
        function f75() {
            const o76 = {
                "g": 6,
                "e": Float32Array,
            };
            f75();
            const t74 = [];
            t74[6] = 4294967295;
            new Int32Array();
            const o92 = {
                get b() {
                },
                toString(a85, a86, a87) {
                },
                m(a89) {
                },
                set b(a91) {
                },
            };
        }
        for (let v93 = 0; v93 < 5; v93++) {
            f75();
            %OptimizeFunctionOnNextCall(f75);
        }
    }
    set f(a96) {
        for (const v97 of a96) {
            try {
            } catch(e98) {
            }
        }
        class C100 extends SharedArrayBuffer {
        }
        const o101 = {
        };
        try {
        } catch(e102) {
        }
        try {
            const o103 = {
            };
        } catch(e104) {
        }
        try {
            const o105 = {
            };
        } catch(e106) {
        }
        try {
            const o107 = {
            };
        } catch(e108) {
        }
    }
}
class C109 {
}
function f110(a111, a112, a113, a114) {
    const o120 = {
        "d": a113,
        p(a116, a117, a118) {
        },
    };
}
new C45();
for (let v122 = 0; v122 < 25; v122++) {
    new Uint16Array(127);
    new Uint8Array(3501);
    new Uint32Array(127);
    Math.sin(v122 ** 2);
}
956206316 + 956206316;
[-2.0,-3.0,0.6635275380715938,1.5267625116759715e+308,2.2250738585072014e-308,648797.6103741466,764.9339560151452];
[-1.8569069513514513,-1.7976931348623157e+308,3.051119090190868];
([-96835.6485279667,2.220446049250313e-16,8.46687468460627e+306,Infinity,-0.0,-Infinity]).length;
const v144 = [3.0,0.33171220343699925,4.064384707296433,1.5856273613625281e+308,-620.344995023322,0.9478652503365506,-856874.8447818598,-127.45049040971935];
function f145(a146, a147) {
    ("entries").toUpperCase();
    const o151 = {
        ...a146,
        get d() {
            return this;
        },
    };
    return f145;
}
f145();
const v153 = f145(v144);
try { v153(956206316, 956206316); } catch (e) {}
