function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 1;
    } catch(e3) {
    }
    try {
        this.h = 1;
    } catch(e4) {
    }
}
const v7 = new BigUint64Array(1448);
function f8(a9, a10, a11) {
    return a10;
}
const v13 = ([-1000000000000.0,-1.7976931348623157e+308,294500.85018206923,-Infinity,-0.0,-7.010036940344757e+307,1.0,-Infinity,-1000.0,-1.1645821156926988e+308]).reduce(f8);
v7.toLocaleString(v13);
new F0();
new f8();
new F0();
[-65536,268435441,4096,-1037136733];
[4294967297,-42039,56572,536870912,-32740,-353401292,268435456,-90402787,1238687411,-11];
[-2147483649,4294967295,127,-58497,-9223372036854775807,-48983,1024];
[0.0,924.8146297434278];
[0.20854672928798434,-1000000000000.0,1.0,2.2250738585072014e-308];
[-1.7976931348623157e+308,-2.220446049250313e-16,-979437.1197670599,0.774717256764054];
new Uint8ClampedArray(594);
new BigUint64Array(v13);
new Int32Array(255);
let v33 = Boolean;
let v34 = v33--;
function f35() {
    const v36 = v33--;
    class C37 {
        static {
            while (0 < 6) {
                v34++;
            }
        }
    }
    class C43 extends C37 {
    }
    const v44 = new BigUint64Array();
    v44.m = v36;
    return v36;
}
%PrepareFunctionForOptimization(f35);
[255];
/8/vdiy;
try {
    b = v13;
} catch(e47) {
} finally {
}
f35();
%OptimizeFunctionOnNextCall(f35);
f35();
