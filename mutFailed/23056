const v1 = new WeakSet();
class C2 extends WeakSet {
    static toString(a4, a5) {
        function F9() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v12 = new F9();
        const v13 = new F9();
        gc(256);
        function f19() {
            with (undefined) {
            }
            return 26352;
        }
        const v21 = new F9();
        function F23(a25, a26, a27) {
            if (!new.target) { throw 'must be called with new'; }
            const v28 = this.constructor;
            try { new v28(this, F23, a27); } catch (e) {}
            a25.c = a25;
            const v30 = a27?.constructor;
            try { new v30(); } catch (e) {}
            this.b = a27;
        }
        class C32 {
            static set f(a34) {
                while (0 < 5) {
                }
            }
        }
        new C32();
        new F23(v21, v13, v21);
        new F23(v13, v21, v12);
        function F45(a47, a48) {
            if (!new.target) { throw 'must be called with new'; }
            function f49() {
                new Int8Array(628786973);
                return F45;
            }
            this.constructor = f49;
            const v53 = this.constructor;
            try { v53(); } catch (e) {}
        }
        new F45();
        try { this["stringify"](a5, "stringify", "stringify"); } catch (e) {}
        return v1;
    }
    #f = v1;
    g = v1;
}
const v58 = new C2();
const v59 = v58?.constructor;
try { new v59(); } catch (e) {}
function f62(a63, a64) {
    const o65 = {
    };
    return o65;
}
const v66 = f62(f62, f62);
function f67(a68) {
    v66[213];
    return a68;
}
Float64Array.BYTES_PER_ELEMENT = Float64Array;
Float64Array.toString();
("-2").normalize("NFKC");
new C2();
const v75 = new C2();
v75.g = v75;
function f76() {
    function f77() {
        const v82 = [,];
        class C83 {
        }
        const o104 = {
            "c": v82,
            __proto__: "8Ih1",
            next() {
            },
            "a": "8Ih1",
            [8](a86, a87) {
                let v88 = a86 === 8;
                v88 ? a86 : 8;
                ({"a":a87,"b":v88,} = 8);
                return 536870912;
                const v94 = ("-1723624938").slice(536870912, "g").normalize();
                class C95 {
                    constructor(a97, a98) {
                        a98.sup(v94, "-1723624938").toLocaleLowerCase();
                    }
                }
                a87.e;
                a87.f;
                let {...v103} = a87;
                return v88;
            },
            4: 36478,
            "c": 8,
        };
        return o104;
    }
    f77();
    const v106 = f77();
    const v107 = [111.45975472268492,-1e-15,Infinity,0.7910330394874023,-1.0,1000000.0,820859.3519667983,-1.270101286664133e+308];
    class C108 extends f77 {
        [v107];
        #m(a110, a111) {
            const o112 = {
                "construct": f77,
                "defineProperty": f77,
                "deleteProperty": f77,
                "getOwnPropertyDescriptor": f77,
                "getPrototypeOf": f77,
                "isExtensible": f77,
                "ownKeys": f77,
                "preventExtensions": f77,
                "set": v106,
                "setPrototypeOf": f77,
            };
            Proxy(a111, o112);
            function f115() {
            }
        }
    }
    return v58;
}
[2.2250738585072014e-308,0.0];
const v117 = [0.5386979453517032];
[1e-15,1000000000.0,2.2250738585072014e-308,6.405270947370873e+307];
[this,this,this,this];
const v124 = new Int32Array(48342);
for (const v125 of v124) {
    const v127 = new Date();
    v127.getHours();
    typeof 522675525n;
}
Uint8ClampedArray.g = Uint8ClampedArray;
function F132() {
    if (!new.target) { throw 'must be called with new'; }
    for (const v135 in [-14339,735253629,4294967296,3,268435456,3,57019,268435439]) {
        ("-2").normalize("NFKC");
    }
}
const v139 = [16,-10,-6213,1011165079,9007199254740990,10,12];
try { v139.sort(v117); } catch (e) {}
try { Reflect.construct(v117, "-2"); } catch (e) {}
const t146 = [-554799.8407135659,-2.220446049250313e-16,731041.3668807968,-0.0,0.12359094160643747,-1000.0,-1e-15,-5.0,314.0545280433057];
t146.length = 0;
function F146() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v149 = -(-7);
        v149 ** v149;
    } catch(e151) {
    }
}
Reflect.construct(Date, v139);
function f153(a154, a155) {
}
Float64Array[2] = "atan2";
new Float64Array(Float64Array);
const v159 = new Uint8ClampedArray(4);
new Int8Array(v159);
