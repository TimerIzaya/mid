function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a9;
    } catch(e10) {
    }
}
const v11 = new F6("isNaN", "isNaN");
const v12 = new F6("find", "isNaN");
function f13(a14, a15) {
    [2.0,-1.7325580159250747e+308,416539.16950631654,48321.48801395949,3.5901117094535717];
    [132.05112701067696];
    [1.1512459618875399e+308,2.5497468059480752,-2.220446049250313e-16];
}
const v20 = new Promise(f13);
class C21 {
}
const v22 = new C21();
const o24 = {
};
const v26 = new Proxy(v22, o24);
v26[v26] = 0.3050534209767637;
const v27 = new F6("find", "boolean");
function F28(a30, a31, a32, a33) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = v27;
    } catch(e34) {
    }
}
new F28(-1024n, "boolean", "isNaN", v12);
const v36 = new F28(57517n, "boolean", "isNaN", v11);
const v37 = new F28(-1024n, "isNaN", "find", v27);
const v38 = new Proxy(v20, 0.3050534209767637, F6, o24, v36);
const v39 = new F28(v38, "find", 14n, v37);
f13(v20, v39);
C21.__proto__;
function F42(a44, a45, a46) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a45;
    } catch(e47) {
    }
    try {
        this.f = a45;
    } catch(e48) {
    }
}
const v49 = new F42(v38, 57517n, 14n);
new F42(v49, -1024n, 14n);
new F42(v36, 57517n, 14n);
const v54 = new Uint8ClampedArray();
new Int32Array(2);
const v60 = new Uint8Array(14);
let v65 = new WeakMap();
class C66 {
    constructor(a68, a69) {
        super[a68]?.[1];
    }
    c = "U2pI";
    static 268435439;
    static get d() {
        v65 ||= this;
        return [-679038690,7,-65536,3,1461677839,9];
    }
    static d = WeakMap;
}
new C66("-19084", 2);
const v75 = new C66("-19084", 5);
new C66("U2pI", 5);
v65 /= v60;
let v77;
try { v77 = v54("function", 14); } catch (e) {}
function f78(a79, a80) {
    v77(v75);
    [Float64Array,Float64Array,Float64Array,v77,a80];
    class C84 extends Float64Array {
        #f;
        228;
    }
    new C84();
    new C84();
    new C84();
    [[5],Uint8Array];
}
