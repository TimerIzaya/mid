class C3 {
    #d;
    valueOf(a5, a6) {
        try { a5(a5, a5); } catch (e) {}
        return 1000000.0;
    }
    10;
    g = Infinity;
    16;
    static 65536;
}
new C3();
const v12 = new C3();
const v13 = new C3();
const v15 = ([21872,-1024,-1493366550,-1940667365,10,-128,536870912,867245199,5467])?.__defineSetter__;
try { new v15(-2565, v13); } catch (e) {}
[65536,268435456,2147483647];
const v18 = [4294967296,4294967296,-2016269770,3,257,1073741825,-683584850,-1625839876,3,-8];
-9 >> -9;
let v24 = 4.0;
try { new Date(v12, 3, v18, 3, 1000000.0, 3, v18); } catch (e) {}
new Date();
v24 **= v24;
const o34 = {
    set d(a31) {
        this["cos"]();
    },
};
const v35 = o34?.__defineSetter__;
try { new v35(o34, -2565); } catch (e) {}
class C37 {
    constructor(a39) {
        o34.d = a39;
    }
}
try { C37.bind(-8.576381465737261e+307); } catch (e) {}
const v42 = new WeakSet();
const v44 = new Map();
class C48 {
    e;
    a;
    static {
        10 - 10;
        for (let v55 = 0; v55 < 50; v55++) {
            v55 >= v55;
            v55 < v55;
            class C58 extends Date {
            }
            C58.length = C58;
            const v59 = [601759695];
            try { v59.pop(); } catch (e) {}
            [1073741824,1073741823,1376142744,1073741825];
            function F63(a65, a66) {
                if (!new.target) { throw 'must be called with new'; }
                const v67 = this?.constructor;
                try { new v67(1.4461402843242492, a66); } catch (e) {}
                a65 !== a65;
                this.a = a66;
            }
            F63.name;
            new F63(522675525n);
            new F63(522675525n);
            for (let v73 = 0; v73 < 10; v73++) {
            }
            v55++;
        }
    }
}
C48.e = C48;
const v75 = new C48(v42, -8.576381465737261e+307);
const v76 = new C48(v75, -818878.473853753, v75, -11n);
v76.e = v76;
new C48(-8n, v24, v44, -11n);
function f78() {
    return f78;
}
let v79 = 0.5084298928592244;
v79++;
class C86 {
    static #valueOf(a88, a89, a90) {
    }
    set e(a92) {
    }
}
try { new C86(); } catch (e) {}
const v94 = new C86();
-8n;
const t86 = [];
t86.valueOf = f78;
%PrepareFunctionForOptimization(f78);
let v100 = 9;
v100++;
const v103 = new Uint32Array(v100);
v103[8] = v103;
v42[4] = 5;
try {
} catch(e105) {
}
try { v94.o(v94, 5); } catch (e) {}
