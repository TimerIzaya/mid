function f2(a3) {
    const v6 = new Uint16Array(96);
    return v6;
}
Object.defineProperty(Float64Array, "toString", { writable: true, configurable: true, enumerable: true, value: f2 });
new Float64Array(9);
const v10 = new Int32Array(127);
function F11(a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    const v15 = this.constructor;
    try { new v15(F11); } catch (e) {}
    a14 / a14;
}
new Uint8Array(7);
class C22 {
    static #p(a24) {
        this.#p();
    }
}
const v26 = new Uint8ClampedArray();
const o27 = {
    ...v26,
    ...F11,
    "e": 127,
    "maxByteLength": 7,
    "f": Float64Array,
    [-2]: v10,
};
o27.b = Set;
function f30() {
    return ("D")[0];
}
new Uint8Array(3190);
let v36 = Float64Array;
v36[Symbol.toPrimitive] = f30;
new v36(3815);
new Float64Array(5);
new Float32Array([-37102.6674218484,-969411.635186719,-1.3592557640113297e+308,0.9054806195219168,1000000000000.0,-0.0,-3.0,-0.0]);
class C48 {
    static #b;
    constructor(a50, a51) {
        try {
            a50.#b = 860736081;
        } catch(e52) {
        }
    }
}
new C48(9);
const v54 = v36++;
v54 * v54;
class C56 {
}
const v57 = [];
Object.defineProperty(v57, "constructor", { enumerable: true, value: Symbol });
try { Map(); } catch (e) {}
const v61 = new Map();
function f62(a63, a64, a65, a66) {
    a65.arguments = a65;
    a63[3];
    a65.caller = a65;
    const o74 = {
        n(a69, a70, a71, a72) {
            for (let v73 = 0; v73 < 10; v73++) {
            }
        },
        16: a63,
        ...v61,
    };
    return o74;
}
const v75 = f62("m", "m", f62);
const v77 = new Int8Array();
try { v77.findIndex(v75); } catch (e) {}
const v81 = new Float32Array(4061, 4061);
[Math.atanh("Vre")];
function f86() {
    return f86;
}
function f87() {
    return f2;
}
Object.defineProperty(f86, "toString", { writable: true, configurable: true, enumerable: true, get: f87 });
f86 <= 8n;
class C91 extends v57.constructor {
    [4061] = v81;
    3;
}
new BigUint64Array(9);
([])["concat"]("concat");
function f99(a100) {
    return Symbol.toPrimitive;
}
const v103 = new Uint16Array(2785);
v103.fill();
let v105 = 0;
v105++;
new Uint32Array(Uint32Array, Uint32Array);
const v109 = [1354185297,-1187772013,1073741823,7,-13,8,-473031863,-1332151602];
v109.toString = f86;
class C110 {
}
const v113 = new Uint8Array(2, 2, 2);
const v115 = new Uint32Array();
function f116(a117, a118, a119, a120) {
    const o124 = {
        "b": a117,
        ...v113,
        n(a122, a123) {
            v115[a117] = v115;
        },
    };
    return v115;
}
const o133 = {
    [null]() {
        for (let v127 = 0; v127 < 500; v127++) {
            const o132 = {
                [v109](a129, a130, a131) {
                },
                ...v127,
            };
        }
    },
};
const v134 = o133.null(null);
o133.null(v134, v134, v109, o133, o133);
