const v2 = new BigInt64Array(167);
function f4() {
    for (let i6 = 0, i7 = 3;
        (() => {
            class C8 extends f4 {
            }
            return i6 < 3;
        })();
        i6 % i6, i6++) {
    }
    return f4;
}
const v18 = new BigUint64Array(5);
const v21 = new Int8Array(4);
class C22 {
    static #n(a24, a25, a26, a27) {
        const t16 = super.d;
        t16[5] = Int8Array;
        Object.defineProperty(v21, a25, { enumerable: true, value: v2 });
        function f29() {
            return 4;
        }
        return a27;
    }
    [v18];
    c;
    o(a31, a32, a33, a34) {
        class C35 {
        }
    }
}
new C22();
new C22();
new C22();
class C39 {
    #b;
    #n(a41, a42, a43, a44) {
        super[this] = this;
    }
}
const v45 = new C39();
function f46(a47, a48) {
    function f49(a50, a51, a52, a53) {
        const o54 = {
            __proto__: a47,
        };
        o54[a47] = f49;
        function f55() {
            const o57 = {
                get c() {
                },
            };
        }
        try { a50(f46, a51); } catch (e) {}
        let v59 = a51 & a51;
        v59 % v59;
        new Map(a51);
        const v64 = Math.log2();
        const v65 = Int8Array.cosh();
        const v66 = [315.3838771878211,0.8321654879979539,1.0,-813011.8421276518];
        function F67(a69, a70, a71, a72) {
            if (!new.target) { throw 'must be called with new'; }
            for (let v73 = 0; v73 < 100; v73++) {
                const o74 = {
                };
                function f75(a76, a77, a78) {
                    const o79 = {
                        "a": o74,
                    };
                    let v80 = 0;
                    while ((() => {
                            let v81 = 10;
                            v81++;
                            return v80 < v81;
                        })()) {
                        const v84 = a78.__proto__;
                        try { v84.findLastIndex(this, v80, v73); } catch (e) {}
                        delete v66[v64];
                        v80++;
                    }
                }
                const v88 = f75();
                ([0,2147483647,9223372036854775807,9007199254740990,9007199254740990]).concat(v65);
                f75(v73, v73, v88);
            }
        }
        -(v59++);
        const o97 = {
            n(a95, a96) {
                return C39;
            },
        };
        return f46;
    }
    for (let v98 = 0; v98 < 500; v98++) {
        f49();
    }
    return a48;
}
const o100 = {
};
function f102() {
    const v103 = 167 + BigInt64Array;
    return v103 > v103;
}
%OptimizeFunctionOnNextCall(f102);
Object.defineProperty(v45, "constructor", { value: f46 });
for (let v105 = 0; v105 < 25; v105++) {
    const v106 = [601759695];
    const v107 = v106.filter;
    try { v107(); } catch (e) {}
    const v109 = [1073741824,1073741823,1376142744,1073741825];
    function f110(a111, a112, a113, a114) {
        -a114;
        a112 >>> a112;
        const v117 = a111 >>> a111;
        v117 | v117;
        const v119 = a113[3];
        v119 + v119;
        ("find").codePointAt(v109);
        try { v109["find"](..."find", a114, ...v106); } catch (e) {}
        return a114;
    }
    for (let v124 = 0; v124 < 10; v124++) {
        f110(v124, v124, v109);
    }
}
const t127 = v45.constructor;
t127(C39, f46);
