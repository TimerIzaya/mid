new Set();
/j[\cz](ab|cde)/gvms;
const v3 = /j[\cA]0(x)(x)(x)\1*/gum;
v3.unicode = v3;
const v4 = /5\u{12345}/vdy;
const v5 = [9007199254740990,9007199254740990,-2147483647,9007199254740990,-238,4294967295,-4,-1];
const v6 = [-65535];
v6[0];
[-19365,-12,-3,-2147483647,10000,-65537,1448684301,9007199254740991,268435440,268435439];
const v9 = [v4,v5];
const v10 = [v9,v9,v5];
function f12() {
    return Int32Array;
}
function f13() {
    return ([]).shift();
}
const v17 = ([v6,v10,v6])?.filter;
try { new v17(v3); } catch (e) {}
const o20 = {
};
const o21 = {
};
const v23 = new Proxy(v10, o21);
with (v23) {
    o21[b];
}
Int32Array.d = Int32Array;
const v30 = new Int32Array(1024);
for (const v31 of v30) {
    new f12();
    function f33() {
        return f33;
    }
    const v34 = f33.arguments;
    function f35() {
        for (let v36 = 0; v36 < 5; v36++) {
            Array(36862, v34, v36 & v36).reverse();
        }
        return f35;
    }
    v31 >> v31;
    class C44 {
        constructor(a46, a47, a48, a49) {
            function F50(a52, a53, a54) {
                if (!new.target) { throw 'must be called with new'; }
                Math.trunc(a48);
                const v56 = this.constructor;
                try { new v56(); } catch (e) {}
            }
            new F50();
        }
    }
    new Uint8Array(1010);
    new Uint32Array();
    const o66 = {
        "maxByteLength": 1293466293,
    };
    o66.c = o66;
    new SharedArrayBuffer(1796, o66);
    function f70(a71, a72, a73) {
        const o77 = {
            [a73]: a72,
            "g": 1024,
            set a(a76) {
            },
            "a": -2.220446049250313e-16,
            "g": a71,
        };
        return o77;
    }
}
