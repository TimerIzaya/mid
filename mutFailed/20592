const v5 = new BigInt64Array(8);
function f6(a7) {
    8 <= 268435439 ? 8 : 268435439;
    return v5;
}
v5.constructor = f6;
let v10;
try { v10 = v5.slice(268435439, -42916131); } catch (e) {}
function f13() {
    return f6;
}
function f14(a15) {
    Object.defineProperty(v10, f13, { writable: true, configurable: true, get: f6 });
}
Object.defineProperty(Float32Array, "b", { writable: true, configurable: true, get: f13, set: f14 });
Float32Array.b = Float32Array;
new Float32Array(129);
const v19 = new Uint16Array(11);
const v20 = v19?.with;
try { new v20(-42916131, -42916131); } catch (e) {}
[-65537,-2,-1,2147483648,915585142,42692,437172662,-25759,-128];
[1073741825,-165725493,-33801];
const v24 = [-13,4294967296,1000,-12,32532,23901];
v24[5] = v24;
4087 !== 4087;
function F27() {
    if (!new.target) { throw 'must be called with new'; }
    function f29() {
        const v30 = v24.constructor;
        return v30;
        return v30;
    }
    this.toString = f29;
    const v31 = this?.isPrototypeOf;
    try { new v31(this); } catch (e) {}
    const v33 = this.toString();
    try { v33.isWellFormed(); } catch (e) {}
    Set.length = Set;
    const v36 = new Set();
    const v37 = v36.add;
    try { v37(); } catch (e) {}
    const v41 = new Int16Array(2183);
    4087 > v33;
    let [,,...v43] = v41;
    v43[1679];
    function f45(a46) {
        function f48(a49) {
            this[1] >>= 4087;
            return F27;
        }
        this.onmessage = f48;
    }
    f45.arguments;
    const o53 = {
        "type": "function",
    };
    o53.arguments = Float32Array;
    new Worker(f45, o53);
}
new F27();
const v56 = new F27();
const v57 = v56?.constructor;
try { new v57(); } catch (e) {}
