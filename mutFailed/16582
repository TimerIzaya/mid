function f0() {
    const o4 = {
        1000: "-10",
        "h": "RSh",
        "f": "-10",
        "b": "n",
        ..."-10",
        ["n"]: "n",
        "g": "RSh",
        ["RSh"]: "RSh",
        ["-10"]: "-10",
        13: "n",
        "a": "RSh",
        "e": "-10",
        "d": "-10",
    };
    return o4;
}
f0();
f0();
f0();
const v17 = new BigUint64Array();
function F18() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        let v20 = 0;
        v20 * v20;
        for (let i = 0; i < 5; i++) {
            v17.entries();
            const v23 = v20++;
            v23 ^ v23;
            v20 < 5;
        }
        new F18();
    } catch(e28) {
    }
}
new F18();
new Float64Array();
function f34() {
}
function f35() {
    function f36() {
        function F38(a40) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = 145253519;
            } catch(e41) {
            }
        }
        return 145253519;
    }
    return f36;
}
Object.defineProperty(f34, "toString", { writable: true, configurable: true, get: f35 });
const v42 = [155533.8602852358,2.0];
v42[658291203] = v42;
function F44() {
    if (!new.target) { throw 'must be called with new'; }
    const v46 = this?.__defineSetter__;
    try { new v46(202); } catch (e) {}
    const v50 = Array(19793);
    v50[17483] = 19793;
    for (const v51 of v50) {
        v42[658291203] = null;
        Math.g = Array;
        f34--;
    }
}
const v54 = new F44();
const t70 = v54.constructor;
new t70();
