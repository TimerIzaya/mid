class C3 {
    static c;
    static #p(a5, a6) {
        a5[a5] = "function";
        const o7 = {
        };
        try {
            o7.b = a5;
        } catch(e8) {
        }
        try {
            const o9 = {
            };
            o9.b = a5;
            o9.d = a6;
        } catch(e10) {
        }
        try {
            const o11 = {
            };
            o11.b = a5;
            o11.d = a6;
            o11.f = a6;
        } catch(e12) {
        }
        try {
            const o13 = {
            };
            o13.b = a5;
            o13.d = a6;
            o13.g = -4294967295;
        } catch(e14) {
        }
        return a5;
    }
}
try { new C3(); } catch (e) {}
const v16 = new C3();
const v17 = v16?.constructor;
try { new v17(); } catch (e) {}
new C3();
const v20 = new C3();
v20.length = v20;
new BigInt64Array(64);
3196 >>> 3196;
function f27() {
    return Uint8ClampedArray;
}
function f28(a29) {
    function f31() {
        const o35 = {
            [null]() {
                try { this.null(f31, this, this, f31); } catch (e) {}
                super.b;
            },
        };
        return o35.null();
    }
}
Object.defineProperty(Uint8ClampedArray, 1, { configurable: true, enumerable: true, get: f27, set: f28 });
try { new Uint8ClampedArray(v20, Uint8ClampedArray, 1073741824); } catch (e) {}
new Uint8ClampedArray(3196);
try { Int32Array.from(Uint8ClampedArray); } catch (e) {}
new Int32Array(7);
function F43() {
    if (!new.target) { throw 'must be called with new'; }
    const v45 = this?.constructor;
    try { new v45(); } catch (e) {}
    try {
        this.g = -3;
    } catch(e48) {
    }
    try {
        this.f = -3;
    } catch(e49) {
    }
}
const v50 = new F43();
const v51 = new F43();
v51.length = v50;
v51.length;
const v53 = new F43();
function F54(a56, a57) {
    if (!new.target) { throw 'must be called with new'; }
    a56[Symbol.toPrimitive] = f27;
    const v60 = this?.__lookupGetter__;
    try { v60.apply(v20, 3196); } catch (e) {}
    try { v60(a56); } catch (e) {}
    try { this.constructor(F54, this); } catch (e) {}
    a56.e = a56;
}
F54.arguments = F54;
const v64 = new F54(v53);
v64.e = Uint8ClampedArray;
const v65 = new F54(v64, v51);
v65.e = v65;
const v68 = ("Hyo9")[1]?.fontsize;
try { new v68(v65); } catch (e) {}
const t98 = "at";
t98[1] = "at";
const v72 = ([1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0])?.groupToMap;
const v73 = v72?.constructor;
try { v73("Hyo9"); } catch (e) {}
try { v72(v50); } catch (e) {}
([-4.202468609045087])[0];
const v78 = [0.8434386161503777];
try { v78.findLastIndex(v78); } catch (e) {}
const t107 = "4i";
t107[1] = "4i";
const t109 = "4i";
t109[1] = "4i";
const t111 = "RpXR";
t111[1] = "RpXR";
("c")?.toLocaleUpperCase;
try { ("valueOf").blink(); } catch (e) {}
class C86 {
    constructor(a88) {
        function f89(a90, a91) {
            1000000000.0 >> 1000000000.0;
            return this;
        }
        a88[Symbol.toPrimitive] = f89;
        a88.e = a88;
        ("valueOf").localeCompare(a88, "valueOf");
    }
}
C86.prototype;
const v98 = new C86(v53);
function f99() {
    return Symbol.toPrimitive;
}
v98.constructor = f99;
const v102 = v98.constructor;
Object.defineProperty(v102, "e", { writable: true, configurable: true, enumerable: true, value: v102 });
const v103 = new v102(C86);
try { v103.constructor(F43); } catch (e) {}
