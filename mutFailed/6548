let v2 = 965.857395492762;
class C3 {
    static {
        const t3 = 0.5612490327146098;
        t3[2] = this;
        this[this] = 0.5612490327146098;
        try {
            this.valueOf = C3;
        } catch(e5) {
        }
        super[v2];
        [-1502393009,-2,512,268435441,2,11454];
        [16,-536870912,128,1622564390,-4];
        [10,-4294967296,48584,-1872977668];
    }
    129;
    #h;
    176 = 0.5612490327146098;
    1073741825;
}
new C3();
try {
    C3.length = -2;
} catch(e12) {
}
new C3();
const v14 = new C3();
class C15 extends C3 {
    constructor(a17, a18) {
        a17 = C3;
        v2 = C15;
        const o22 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o22);
        super();
        for (let v24 = 0; v24 < 32; v24++) {
            v14["p" + v24] = v24;
        }
    }
    static f;
    static #h = 0.3425213948644915;
    static #g;
}
new C15(0.5612490327146098, 0.3425213948644915);
new C15(0.5612490327146098, v2);
new C15(v2, 0.5612490327146098);
class C30 {
    static {
        for (let i34 = 0, i35 = 10;
            i34 < i35;
            (() => {
                function f39() {
                    return f39;
                }
                const v40 = [601759695];
                const v41 = [1073741824,1073741823,1376142744,1073741825];
                function f43(a44, a45, a46, a47) {
                    function f49() {
                        return a44;
                    }
                    f39();
                    const v52 = new Int8Array();
                    function f53(a54, a55) {
                        return i35;
                    }
                    f53(f53(v41, C30));
                    v52.buffer.slice(2147483648);
                    %OptimizeFunctionOnNextCall(f49);
                    let v62;
                    try { v62 = v41["find"](..."find", a47, ...v40, ...v41, ...522675525n); } catch (e) {}
                    v62 <= a46;
                    return arguments;
                }
                for (let v64 = 0; v64 < 10; v64++) {
                    f43();
                }
                i34++;
            })()) {
        }
    }
}
