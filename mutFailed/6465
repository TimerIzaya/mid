const v3 = [412.90840757223964];
try { v3.sort(v3); } catch (e) {}
const v5 = [NaN,400106.9091008785];
v5[1];
const v7 = v5[1];
v7 >>> v7;
const v9 = [-1000000000.0,1000000000000.0];
let v10;
try { v10 = v9.entries(); } catch (e) {}
try { v10.next(); } catch (e) {}
class C12 {
    static {
        this.prototype = this;
        try { this.call(1000000000000.0); } catch (e) {}
        try { new this(); } catch (e) {}
        [278131018,-9007199254740992];
        [18491];
        const v18 = [-4294967297,536870912,-4294967296,-1490609306,65536,268435439];
        let v19;
        try { v19 = v18.fill(0.2569656596056743); } catch (e) {}
        try { v19.group(v3); } catch (e) {}
    }
    static [0.2569656596056743] = 1000000000000.0;
    [-1.0232027525332089e+308] = v5;
    static #b = v5;
    [1000000000000.0];
    #h = v5;
}
const v21 = new C12();
v21[1000000000000] = v21;
v21[1000000000000];
const v23 = new C12();
v23[1000000000000] = v23;
v23[1000000000000] = v23;
const v24 = v23[1000000000000];
v24[1000000000000] = v24;
try { v24.splice(v7, 1000000000000.0); } catch (e) {}
const v26 = new C12();
function F27() {
    if (!new.target) { throw 'must be called with new'; }
    const v29 = this?.constructor;
    try { new v29(); } catch (e) {}
    -9223372036854775808 === -9223372036854775808;
}
F27.caller = F27;
const v33 = new F27();
v33.length = v33;
const v34 = new F27();
v34?.constructor.prototype;
try { new v34(); } catch (e) {}
const v38 = new F27();
v38.length;
const v40 = v38?.__defineGetter__;
try { new v40(v26, v38); } catch (e) {}
try { ("8").codePointAt(v21); } catch (e) {}
const t55 = "function";
t55[1] = "function";
class C46 extends F27 {
    b = "number";
    set g(a48) {
        let v47 = this;
        ({"c":a48,"d":v47,} = v9);
    }
    static {
        this.e = this;
        const v50 = super[this];
        ("function").substring(v50, this, v50, "function", "8", this);
        super.c;
        try {
            v33.f = v50;
        } catch(e53) {
        }
    }
}
