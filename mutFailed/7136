const v0 = [-4294967296];
const v1 = [2147483647,255,12,-9007199254740991,536870888,536870889,256,-4294967295,-19918,1073741825];
const v2 = [-372647972,56565,4096,-4294967295,257,4294967297];
function f3(a4, a5) {
    class C6 {
    }
    const v7 = new C6();
    const v8 = [v7];
    function f9(a10, a11, a12) {
        v8.copyWithin();
        try {
            f9(a12, a11, 252859902);
        } catch(e16) {
        }
        const v17 = v1 >> 252859902;
        v17 - v1;
        return -v17;
    }
    const o24 = {
        [-2]: v2,
        "g": a5,
        6: v1,
        "a": v0,
        "c": v0,
        [a4]: f3,
        get b() {
            const v21 = this && this;
            delete v2[v2];
            try {
                v2.valueOf = v21;
            } catch(e23) {
            }
            return v21;
        },
    };
    return v0;
}
const v25 = f3(v1, v1, v2);
const v26 = f3(f3, v2);
const v27 = f3(v26, v25);
v27[1325058084];
const v31 = new SharedArrayBuffer(945);
v31.slice();
Array().unshift(3);
const v39 = new BigUint64Array(2);
139 - 139;
Int16Array.name;
new Int16Array(139);
const v46 = new Set();
function F47(a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a49;
    } catch(e51) {
        for (let [v52,v53] of a49) {
            try {
                v46.values();
            } catch(e55) {
            }
        }
    }
    try {
        this.h = v46;
    } catch(e56) {
    }
    try {
        const v57 = v46[this];
        try {
            new F47(v57, -268435456n);
        } catch(e60) {
        }
        this.b = Set;
    } catch(e61) {
    }
}
new Uint8ClampedArray(5);
const v65 = [65536,12220,268435456,-176972115,977653611];
v65.g = v65;
for (const v66 in v65) {
    delete v31[v2];
    new WeakSet();
    WeakSet ^ v1;
    const v72 = Symbol.toStringTag;
    v26[v72] = v72;
    try { v66.strike(); } catch (e) {}
    v39[7] = WeakSet;
    for (let v75 = 0; v75 < 32; v75++) {
        v27["p" + v75] = v75;
    }
    try { e(v65, e, v66, v66, e); } catch (e) {}
    function F79(a81, a82) {
        if (!new.target) { throw 'must be called with new'; }
        const v83 = this?.constructor;
        try { new v83(v66, this); } catch (e) {}
        this.f = a81;
    }
    new F79();
}
