let v3 = Uint8Array;
const v4 = [v3];
function f7(a8, a9, a10, a11) {
    return arguments;
}
f7(64, 118, 64, 118);
const v14 = f7(v3, f7);
class C21 {
    m(a23, a24, a25, a26) {
        const o30 = {
            "execution": "async",
            "type": "major",
        };
        v4.groupToMap;
        const v33 = new Int32Array(64);
        v33[3];
        "major" | "major";
        return gc(o30);
    }
    static #n(a38, a39, a40, a41) {
        this[257] *= -24391;
    }
    static #a = 1000000.0;
    g = 52997n;
    static f;
    #f;
}
const v44 = new C21();
const t28 = 1000000.0;
const v45 = new t28();
const v46 = new C21();
const v47 = [-1.3424085540807362e+308,6.150594122788957e+307];
[-702.3236579158796,-313.20830710689654,-0.0,-565.3594238718979,-2.0,-1000000000.0,-347.86818809647775,-849922.370260491,1000000000.0,-5.0];
[0.2992825440778889,-142.4791008982986,0.7255980656814794,0.3126174325735409,1.0,-1.0,-2.220446049250313e-16,Infinity];
let v50 = 0;
const v54 = new BigInt64Array(5);
function f55() {
    return v54;
}
class C57 {
    #b = v50;
    g = 1.1408591040999836e+308;
    static {
        const v62 = v50++;
        ~v50;
        Math.log10(44149);
        44149 + v50;
        Math.fround(v62);
    }
}
new C57();
new v54();
const v70 = -Infinity;
C57.g ^= -1e-15;
const o77 = {
    "execution": "async",
    "type": "major",
};
const v78 = gc(o77);
const t58 = "major";
t58[108] /= -1e-15;
const v81 = new Uint8ClampedArray(129);
const v84 = new Int32Array(1450);
class C85 {
    [Uint8ClampedArray] = v84;
    static valueOf(a87, a88, a89) {
        [118,f55,a88,this,v47];
        const v91 = [a88,this];
        super[[v50,v91,v91]];
        const o96 = {
            "maxByteLength": 256,
        };
        const v98 = new SharedArrayBuffer(256, o96);
        new Uint32Array(v98);
        new a89();
    }
    static a = v81;
}
const v102 = new C85();
f7(v45, v102, v78, Infinity, Int32Array, 129);
const v105 = v81["every"](gc, "zVqy");
let [] = v54;
try { new Uint8ClampedArray(v105, ...v44, 257n, -56850, -1769n, v46); } catch (e) {}
const v107 = new C85();
const v108 = new C85();
try {
const t0 = 1450;
t0(v108, v108);
} catch (e) {}
function f110() {
    function f112(a113) {
        new Uint32Array([-620100541,-64845,-268435456,-7,-268435456,1024,-536870912]);
        function f117(a118, a119, a120, a121) {
            function f122() {
                Symbol.toPrimitive;
                const o130 = {
                    "e": -268435456,
                    valueOf(a128, a129) {
                    },
                    6: -268435456,
                };
            }
            f122();
            const v133 = new Int8Array();
            v133.buffer;
            %OptimizeFunctionOnNextCall(f122);
        }
        f55.c = v102;
    }
    v84 << this;
    v107[2147483647] = Infinity;
}
class C137 {
}
class C138 {
}
function f139(a140, a141, a142) {
    v4.indexOf(C137, a141);
    try {
        f139(C138, a140);
    } catch(e145) {
    }
    return f139;
}
f139(C138, C137, f139);
const v149 = [];
const o155 = {
    "arguments": v149,
    [v4]: v47,
    __proto__: C137,
    valueOf(a151, a152, a153, a154) {
        super.c **= 1000000.0;
        return a154;
    },
    "type": v70,
};
v102.e /= 129;
Math.min(v3);
v149.atanh(7);
Math.expm1(7);
Math.log10(v14);
v14 && v3++;
Math.log1p(v14);
new Worker(f110, o155);
