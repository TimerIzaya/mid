function f0() {
    const o6 = {
        ["1073741824"]: "lQ5TG",
        138: "lQ5TG",
        ..."lQ5TG",
        get c() {
            const o5 = {
                __proto__: this,
                ["1073741824"]: this,
                "a": -6.148084410838246,
                10: this,
            };
            return this;
        },
    };
    return o6;
}
const v7 = f0();
function f8(a9, a10) {
    f0 && v7;
    function f13(a14, a15, a16, a17) {
        for (let v19 = 0; v19 < 5; v19++) {
            v19++;
            arguments | v19;
        }
        const v22 = typeof 522675525n;
        ("undefined").codePointAt();
        v22 === "undefined";
    }
    for (let v26 = 0; v26 < 5; v26++) {
        f13();
    }
    return f0;
}
v7[Symbol.toPrimitive] = f8;
f0();
const v31 = f0();
class C32 extends f0 {
    #valueOf(a34, a35) {
        super.c = f0;
        return v31;
    }
    set h(a37) {
        let v36 = this;
        v36 = v31;
        f0 * a37;
        const v40 = Symbol.iterator;
        const o49 = {
            [v40]() {
                let v42 = 10;
                const o48 = {
                    next() {
                        v42--;
                        const v46 = v42 == 0;
                        const o47 = {
                            "done": v46,
                            "value": v42,
                        };
                        return o47;
                    },
                    "f": f0,
                    __proto__: v31,
                    15: C32,
                    [this]: f0,
                    ...v40,
                };
                return o48;
            },
        };
    }
}
new C32();
new C32();
new C32();
function F56() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -65535;
    } catch(e59) {
        30895 ** -7;
        function F63(a65, a66, a67, a68) {
            if (!new.target) { throw 'must be called with new'; }
            ~a66;
            a68 | a68;
            const v71 = this.constructor;
            try { new v71(); } catch (e) {}
            typeof Float32Array;
        }
    }
    try {
        this.a = -65535;
    } catch(e75) {
    }
}
const v76 = new F56();
v76.p8 = v76;
const v77 = new F56();
const v78 = new F56();
try {
    Int8Array();
} catch(e81) {
    e81.name;
}
v78.length = F56;
const v84 = new Map();
const v88 = [F56,v78,64n,v84];
const v89 = [v88,v76,Map,Map];
[255n,v89,v77,v89,F56];
let v91 = 1386429407;
-1000000.0;
Math.ceil(v78);
v78 | v7;
+v7;
v78 | -9007199254740990;
new Float64Array(1073741824);
function f104() {
    return f104;
}
const t118 = 5;
t118.constructor = f104;
new Int16Array();
for (let v106 = 0; v106 < 32; v106++) {
    v76["p" + v106] = v106;
}
const v113 = new Int8Array(628786973);
new BigInt64Array(257);
const v115 = v113.__defineGetter__;
v91--;
class C121 {
}
new C121();
(2136873598).constructor;
const v126 = [v115,v84];
const v128 = Reflect.apply(v88.find, v78, v126);
function f129() {
    "p" + -13;
}
%PrepareFunctionForOptimization(f129);
f129();
("h").split(65535);
const o137 = {
    "execution": "async",
};
let v138 = 0;
do {
    try { new v128(v89); } catch (e) {}
    new F56();
    v138++;
} while (v138 < 1)
%OptimizeFunctionOnNextCall(f129);
f129();
