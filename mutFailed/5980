for (let i = 0; i < 5; i++) {
    try {
    const t0 = 9907n;
    t0();
    } catch (e) {}
}
const v4 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
v4.d = v4;
v4 < 5;
function f8(a9, a10, a11, a12) {
    const o15 = {
        set f(a14) {
        },
        ...a10,
        "f": a11,
    };
    o15.valueOf = f8;
    try { o15.valueOf(); } catch (e) {}
    return a12;
}
const v18 = [6.621588498634488e+307,1.0,3.0,-5.0,-1.7976931348623157e+308,-1.7976931348623157e+308,257.7405098162435,-136018.55674827856];
const v19 = [v18,v18];
v4.d = [];
const v21 = [];
Object.defineProperty(v21, 1, { writable: true, enumerable: true, value: v21 });
const v23 = new WeakMap();
const v25 = new Set();
let [v26,,...v27] = v25;
class C28 {
    #a = 2147483648;
    constructor(a30, a31) {
    }
}
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    this.h = 2147483648;
    this.h = v23;
    try {
        this.h = 9;
    } catch(e36) {
    }
    try {
        this.c = -1073741824;
    } catch(e37) {
    }
    try {
        this.d = a35;
    } catch(e38) {
    }
}
([NaN,3.0])["concat"](-483497369);
function f43(a44, a45, a46, a47) {
    const v48 = [4294967297,-1648241970,9,3,-2,0,-4294967296,10];
    v48.Probe = -483497369;
    with (v48) {
        length | length;
    }
    new a46();
    const v53 = new Int8Array();
    for (const v54 in v53) {
    }
    function F55(a57) {
        if (!new.target) { throw 'must be called with new'; }
        const v58 = WeakMap.b;
        try { v58(v53); } catch (e) {}
    }
    new F55();
}
for (let v61 = 0; v61 < 10; v61++) {
    f43();
}
new F32(WeakMap, 9);
new F32(v19, -1073741824);
new F32(-1073741824, 9);
new Uint8ClampedArray(1024);
new BigUint64Array(3406);
new Int8Array(4096);
try {
    BigInt(132.432626643787);
} catch(e78) {
}
