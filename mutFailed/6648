false || false;
const v5 = [-149.63902467174069,0.8601407074568049,2.0,4.0,1.7976931348623157e+308,-3.0,345.25469735260435,-4.331337551956112e+306,-158.59432565578197];
let v6 = "function";
function f7() {
    return v6;
}
const v11 = "size" && "boolean";
with ("boolean") {
    length = v11;
    ({"length":v6,} = "isExtensible");
    f7();
}
const v13 = v5?.lastIndexOf;
try { new v13(8n); } catch (e) {}
const v15 = [-532.2277387657443];
const v17 = new Float32Array();
let {...v18} = v17;
function f19() {
    return f19;
}
try { v15.group(false); } catch (e) {}
v5[0] = v15;
const v21 = [1e-15,Infinity,51522.48853735975,-1000000.0,1.0,947.346729158033,-1000000.0];
268435439 / 268435439;
268435439 - 268435439;
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
}
function f31(a32) {
}
function f34() {
    return 256;
}
function F35(a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    const v39 = this.constructor;
    try { new v39(a37); } catch (e) {}
    -a37;
    a38--;
    this.h = f34;
}
class C43 extends F35 {
    3120 = F35;
}
new C43();
class C47 {
    constructor(a49, a50) {
        try {
            ("size").#a;
        } catch(e52) {
        }
    }
    p(a54, a55) {
        return v15;
    }
    set a(a60) {
        let v59 = this;
        Object.defineProperty(v21, a60, { configurable: true, value: 6n });
        let v61 = new.target;
        let v62 = 0;
        while (133004822 < 5) {
            let v66 = 696581191;
            v66 && v13;
            7 % 7;
            ++v61;
            --v66;
            v59++;
            v62++;
        }
    }
}
C47.g = C47;
let v75 = Int16Array;
v75--;
function f77() {
    v75--;
    class C80 {
        static #m(a82) {
        }
        set d(a84) {
            this.#m();
        }
        constructor(a87) {
            function f88() {
                return this;
            }
            Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f88 });
        }
    }
    const v89 = new C80();
    v89.g = v89;
    const v90 = new C80();
    v90.length = -4294967296;
    v90.length;
    let v92 = 0;
    for (let i = 0; i < 5; i++) {
        for (let v93 = 0; v93 < 5; v93++) {
            const t97 = "string";
            t97["p" + v93] = v93;
        }
        v92++;
    }
    const v97 = new C80(v92);
    [v97,v97,v97,v97,v97];
    const v99 = [v97];
    class C100 extends C80 {
        [v89];
        #n(a102, a103, a104, a105) {
        }
        #g;
    }
    const v106 = new C100();
    v99.constructor;
    let v108;
    try { v108 = v106.m(); } catch (e) {}
    return v108;
}
%PrepareFunctionForOptimization(f77);
const v109 = new C47();
const v110 = v109?.constructor;
try { new v110(); } catch (e) {}
const v112 = new C47();
const v113 = v112?.constructor;
try { new v113(); } catch (e) {}
function f115() {
    const v117 = new ArrayBuffer(ArrayBuffer, ArrayBuffer);
    return v117;
}
f115();
const v119 = v109?.constructor;
try { new v119(); } catch (e) {}
new C47();
-3 >>> -3;
class C124 {
}
const v125 = new C124();
const v126 = new C124();
const v127 = [v126,v125];
function F128(a130, a131, a132, a133) {
    if (!new.target) { throw 'must be called with new'; }
    a130.unshift(v125);
}
new F128(v127);
let v137 = 20630;
v137--;
v137 / v137;
function f140() {
    const v142 = ("D")[0];
    try { v142.fontsize(v15); } catch (e) {}
    const v144 = v142.match();
    try { v144.findLast(268435439); } catch (e) {}
    try { v144.findLastIndex(v112); } catch (e) {}
    return f140;
}
%PrepareFunctionForOptimization(f140);
f140().length;
%OptimizeFunctionOnNextCall(f140);
f140();
