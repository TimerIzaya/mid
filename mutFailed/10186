const v2 = new Int8Array(64);
new Float32Array(64);
const v8 = new Uint16Array(4065);
const v10 = [-1.2776874705217039e+307,4.3076016223184155,3.660454885595876e+307,Infinity,-1000000.0,-219161.12456488993,2.2250738585072014e-308,94.27775738110995];
new BigUint64Array(10);
for (let i16 = 0, i17 = 10;
    (() => {
        const v18 = i16 < i17;
        class C19 {
        }
        const v20 = C19.constructor;
        try { v20(v18, v18, i17, v20, v20); } catch (e) {}
        let v22 = 3375;
        v22++;
        const v25 = new BigUint64Array(v22);
        let [v26,,v27,...v28] = v25;
        return v18;
    })();
    i16++) {
}
[-1000.0];
[0.555648747177629,-921933.7470935804,5.0,1e-15,-1000.0,0.207016841802675,-1.0,-3.0,1000000.0,-3.0];
class C36 extends Int8Array {
    static e;
    toString(a38, a39, a40) {
        this["at"](a38);
        new Map();
        return Int8Array;
    }
    static #d;
    set e(a46) {
        v8.byteOffset;
        let v51;
        try { v51 = new a46(a46, 64, v10, 659.8192741299933, a46); } catch (e) {}
        const o52 = {
        };
        const v55 = new Set();
        function F56(a58, a59) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.d = a58;
            } catch(e60) {
            }
            try {
            } catch(e61) {
            }
            if (a59 >= Uint8ClampedArray) {
            }
            try {
            } catch(e63) {
            }
            try {
                const v64 = v55[this];
                try {
                    new F56(v64, -268435456n);
                } catch(e67) {
                }
                this.b = Set;
            } catch(e68) {
            }
        }
        v2[this] *= v51;
    }
}
const v71 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v73 = [601759695];
const v74 = [1073741824,1073741823,1376142744,1073741825];
function f75(a76, a77, a78, a79) {
    function f80() {
        let v83 = Float64Array;
        v83 = a77;
        v71.length;
        try {
            v74.forEach();
        } catch(e86) {
        }
        Symbol.toPrimitive;
        const o93 = {
            toString(a90, a91) {
                return a79 && v83;
            },
        };
        const o94 = {
        };
        new Proxy(Uint8ClampedArray, o94);
        o93[9] = a76;
        const o102 = {
            [-4294967297n](a98, a99, a100, a101) {
            },
            ...v73,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            5: -4294967295,
        };
        return f75;
    }
    f80();
    %OptimizeFunctionOnNextCall(f80);
    return -4294967297n;
}
f75();
f75(v73, v73, v71, v71);
new C36();
new C36();
new C36();
const v109 = [601759695];
function f110(a111, a112, a113, a114) {
    arguments[2] = arguments;
    function f116() {
        const o117 = {
            __proto__: a113,
        };
        return o117.valueOf();
    }
    const v120 = 4065 << 4065;
    for (let v121 = 0; v121 < 10; v121++) {
        v121 == v121;
        try { ("p").toWellFormed(); } catch (e) {}
        ("p").codePointAt(Uint8ClampedArray);
        ("p" + v121).localeCompare(v120);
    }
    const v128 = f116();
    gc();
    v128[6] = v128;
    %OptimizeFunctionOnNextCall(f116);
    return gc;
}
for (let v131 = 0; v131 < 5; v131++) {
    f110(v109, v131, v131);
    const v133 = new v131();
    const t131 = v133.g;
    t131.length = 1;
    const v136 = [];
    class C137 {
        static get b() {
            try {
                super.getOwnPropertyNames();
            } catch(e140) {
            }
            return v136;
        }
        constructor() {
            this[v136] = this;
            this[v136] %= this;
        }
        static e;
        [v136];
    }
    const v142 = new C137();
    class C145 {
        [-9] = v142;
        4294967296;
        5;
    }
    const v146 = new C145();
    4294967296 !== v146;
}
