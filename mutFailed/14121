class C3 {
    set e(a5) {
        ("boolean").min(17350);
        Math.fround(-8);
        17350 - 17350;
        65536 && -8;
        Math.atan2(+-8, 17350);
    }
    static [2110143486];
    3575 = 2110143486;
}
const v15 = ("boolean")[2110143486];
const v16 = new C3();
new C3();
new C3();
class C19 extends C3 {
    ["boolean"];
    static [C3] = v15;
    #b = -8;
    valueOf(a21, a22, a23, a24) {
        function F25(a27, a28) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v29 = new F25();
        async function f30(a31, a32, a33, a34) {
            a31.fuck();
            await v29;
            return F25;
        }
        f30();
        Math.cos(-974653463);
        this / (a22 * -974653463);
        return -8;
    }
    #a = v16;
    #h;
}
try { C19(); } catch (e) {}
const v44 = new C19();
v44.boolean = v44;
const v45 = new C19();
new C19();
new Uint32Array(4050);
new BigInt64Array(10);
new Uint32Array(3586);
let v56 = 16;
v56--;
const v59 = new Uint8Array(v56);
try { v59.join(v16); } catch (e) {}
1145 >> 1145;
const v64 = new Uint32Array(1145);
v64[777];
try { new Float64Array(v59, 2110143486, v45); } catch (e) {}
const v69 = new Float64Array(157);
const v70 = [-13063,230037640,0,-1717935321,257,0,1073741825];
const v71 = [-2051630605,509562611];
class C72 {
    0 = v71;
}
const t59 = C72.name;
const v74 = new t59();
try { new Float32Array(v69, v59, v56); } catch (e) {}
const v77 = new Float32Array(v70);
try { v71.sort(v77); } catch (e) {}
Object.defineProperty(v74, 7, { configurable: true, value: v70 });
