[];
const v3 = new Float64Array(1165);
try { v3.set(v3); } catch (e) {}
const v6 = 43 << 43;
Float32Array.prototype = Float32Array;
const v8 = new Float32Array(43);
new Int32Array(0);
[10];
const v13 = [1,-1625381982,-1,3,6,65535,161885320];
let v14;
try { v14 = v13.every(Float32Array); } catch (e) {}
[64,-1073741824,6,6,-268435456,-55035];
const v17 = new Uint8Array(Uint8Array, Uint8Array, Uint8Array);
function f18(a19, a20, a21, a22) {
    function f23(a24, a25) {
        const v26 = new Float32Array();
        for (let v27 = 0; v27 < 5; v27++) {
            v26[836499325] = ~v27;
        }
        return Uint8Array;
    }
    a21[Symbol.toPrimitive] = f23;
    a21++;
    const v32 = a21++;
    v32 - v32;
    const v34 = v32 * v32;
    v34 ** v34;
    const v36 = a21 % a21;
    const o37 = {
        ...v17,
    };
    o37[Symbol.toPrimitive] = f18;
    o37[2] = o37;
    const v40 = o37[2];
    v40.valueOf = Symbol;
    v40 >>> v40;
    try { o37.n(v36, v32); } catch (e) {}
    return f18;
}
try { f18(v6, v8, v8, v14); } catch (e) {}
for (let v44 = 0; v44 < 500; v44++) {
    ~v44;
    const v46 = v44 >= v44;
    v46 && v46;
    f18();
}
