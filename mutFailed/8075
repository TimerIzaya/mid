let v0 = -13;
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 2147483647;
    } catch(e6) {
    }
    try {
        this.h = 2147483647;
    } catch(e7) {
    }
    try {
        this.b = a5;
    } catch(e8) {
    }
}
const v9 = new F3(F3);
const v10 = new F3(v9);
const v11 = new F3(v9);
class C12 {
    c;
    static #c;
    constructor(a14, a15, a16) {
        v0 = 2147483647;
        let v18;
        try { v18 = v9["o"](F3); } catch (e) {}
        v10[2535] = v18;
    }
    #g = v0;
    static #b;
    get g() {
        let v20;
        try { v20 = v10(v0); } catch (e) {}
        v10.d |= v20;
        [3.0,-1.7976931348623157e+308,-Infinity,191.61012238782973,-786922.8653952177,-7.136414992844394,-1.0];
        [1e-15,0.0,0.0,-166981.392810678,4.0,1.7976931348623157e+308,3.0,-689269.570031344,-1.2811715013059104e+308];
        [-679.3635506902631,880.6345522010924,-0.0,-1000000000.0,182.4724455132466,-0.5632327034262055,-1e-15];
        const v27 = --F3;
        v9 >>> v9;
        Math.log1p(v27);
        return this;
    }
}
const v30 = new C12(v11, v10, v11);
const v31 = new C12(v11, v9, C12);
const v32 = new C12(v10, v10, v9);
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = v11;
    } catch(e37) {
    }
    try {
        this.e = v0;
    } catch(e38) {
    }
    try {
        this.a = a35;
    } catch(e39) {
    }
}
new F33(v9, v32);
new F33(v11, v30);
new F33(v11, v31);
function f43(a44, a45, a46, a47) {
    return a44;
}
const v48 = f43();
const v51 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v52 = [601759695];
("n").split("n", 2147483647);
const v56 = /Aabc|defmxyz{1,}?qMa{0,1}?/gvdis;
v56.exec();
v52[0] = v52;
const v58 = [1073741824,1073741823,1376142744,1073741825];
function f60(a61, a62, a63, a64) {
    arguments.toString();
    function f67() {
        function F68(a70, a71) {
            if (!new.target) { throw 'must be called with new'; }
            this.c = a71;
        }
        function f74(a75) {
            const o76 = {
                "c": a75,
                16: -4.0,
                1073741824: a75,
            };
            return o76;
        }
        arguments();
        const v78 = f74(-5.0);
        const o79 = {
            [f74]: v56,
            "c": v78,
            ...F68,
        };
        const v81 = ("Vre").toLocaleUpperCase;
        try { new v81(v81, -4294967297n, a63, v58); } catch (e) {}
        const v83 = ("Vre").fixed(f60);
        let v85 = -268435456;
        const v86 = v85--;
        try {
        } catch(e87) {
        } finally {
        }
        const v88 = [];
        class C89 {
            constructor() {
                delete v88[1073741824];
            }
        }
        -(v85 + v85);
        const o107 = {
            "c": -4294967297n,
            [522675525n](a95, a96) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v52,
            valueOf(a98, a99) {
                return a98;
            },
            "e": -4294967295,
            "e": v85,
            "maxByteLength": -4294967295,
            "arguments": v51,
            ...v52,
            "type": v83,
            ..."Vre",
            valueOf(a101, a102) {
                return v86;
            },
            ..."Vre",
            4: "Vre",
            "c": v85,
            "type": "Vre",
            "type": "Vre",
            toString(a104, a105, a106) {
                return a104;
            },
            5: -4294967295,
            6: v85,
        };
        o107.valueOf();
        return f60;
    }
    f67.length;
    f67();
    Int8Array.a = Int8Array;
    const v112 = new Int8Array();
    try { v112.findIndex(v48); } catch (e) {}
    v112.buffer.slice();
    %OptimizeFunctionOnNextCall(-128);
    ("find").strike();
    let v118;
    try { v118 = v58["find"](..."find", a64, ...v52, ...v58, ...522675525n); } catch (e) {}
    return v118;
}
for (let v119 = 0; v119 < 5; v119++) {
    f60(v52, v119, v119, v58);
}
%PrepareFunctionForOptimization(f60);
const v121 = f60();
%OptimizeFunctionOnNextCall(f60);
f60(v121, f60, -128, v48);
