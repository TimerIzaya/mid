function f2() {
    return f2;
}
Object.defineProperty([f2], -2, { value: f2 });
for (let v7 = 0; v7 < 10; v7++) {
    v7 < v7;
}
const t7 = 10;
t7.f = 10;
function F9() {
    if (!new.target) { throw 'must be called with new'; }
}
[F9];
new Float32Array(10);
const v15 = [-0.685155357392599,5.0];
function F16(a18, a19, a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    const v22 = this.constructor;
    try { new v22(); } catch (e) {}
    v15.length &= 1;
    class C25 {
    }
    const v26 = new C25();
    const v27 = new C25();
    function F28(a30, a31) {
        if (!new.target) { throw 'must be called with new'; }
        a30[4] = a30;
        const v33 = this.valueOf().constructor;
        try { new v33(); } catch (e) {}
        a30[4];
    }
    new F28(v26);
    new F28(v27);
}
new Uint8Array(128);
const v42 = new Int32Array(2890);
new f2(820, 121);
for (let [v51,v52] of Math.exp(-Infinity)) {
}
const o53 = {
};
const v54 = [536870887,-42204,-17288903,-3,9007199254740991,7];
const v55 = [-15,-2147483649,-899333997,3,1455560807,-1024,-4294967297,2098301778];
class C56 {
    constructor(a58) {
        function f59(a60, a61) {
            return a60;
        }
        f59(v55);
        f59(v54);
    }
}
new C56(C56);
function f65(a66, a67) {
    const o68 = {
        [a66]: a67,
        65536: a67,
    };
    return f65;
}
new Uint8Array(11);
const v73 = ([9007199254740990,-16,376821973,268435456])[1];
try {
    function F75() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v77 = new F75();
    const v78 = new F75();
    const v79 = v78.__defineSetter__;
    try { v79(); } catch (e) {}
    function f81(a82, a83) {
        const o84 = {
            "e": v77,
        };
        return o84;
    }
    const v85 = f81();
    f81();
    function f87() {
        return f81;
    }
    f87.b = v73;
    f87.b = f87;
    const v90 = new Float32Array();
    for (const v91 of v90) {
        v91 >>> v91;
        Object.defineProperty(v85, Float32Array, { configurable: true, enumerable: true, get: f81, set: f87 });
    }
    v42.g = 4294967296;
} catch(e93) {
}
function F96(a98) {
    if (!new.target) { throw 'must be called with new'; }
    const v99 = this.constructor;
    try { new v99(); } catch (e) {}
    try {
        function F102(a104) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v105 = new F102();
        v105.g;
        Symbol.toPrimitive;
        -35199 % (this / -1478256740);
    } catch(e111) {
    }
}
function F112(a114, a115, a116) {
    if (!new.target) { throw 'must be called with new'; }
    [8n] > 8n;
}
const v120 = new F96();
new F96(v120);
