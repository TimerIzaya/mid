[4.4580506370311035,0.0];
[3.0,NaN,-3.0,2.2250738585072014e-308,1000000000.0,718.302507868447];
[-1.7976931348623157e+308,0.08982883956891119,-1000000000000.0,-Infinity];
new Int32Array(2742);
new Uint32Array(4);
new Uint8Array(19);
const v15 = new Uint8ClampedArray();
class C16 {
    constructor(a18, a19, a20, a21) {
        const v22 = this.constructor;
        try { new v22(v15, v22, a21); } catch (e) {}
        for (let v24 = 0; v24 < 5; v24++) {
            ~v24;
            v15[v24] = a21;
        }
    }
}
const v26 = new C16(v15, C16, C16, Uint8ClampedArray, C16, Int32Array);
new C16();
function F29(a31, a32, a33, a34) {
    if (!new.target) { throw 'must be called with new'; }
    eval(eval, v26);
    function F37(a39) {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F37();
}
const o42 = {
};
Float32Array(o42);
