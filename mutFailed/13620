16 >> 16;
const v7 = [2.0,0.2901658812472846,-8.880306076496956e+307,943883.9104739067];
function f8() {
    function f9() {
        ("-2").length;
        function F11() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v13 = [-38686,-6,10000,-53904,-65535,48017,257,536870889];
        const v14 = [-67583095,16,64];
        class C15 extends F11 {
            d = v14;
            constructor(a17, a18, a19) {
                super();
                for (let v20 = 0; v20 < 10; v20++) {
                    "p" + v20;
                    const v23 = v13.includes;
                    try { v23(); } catch (e) {}
                    const v27 = new BigInt64Array(2325);
                    for (const v28 in v27) {
                    }
                }
            }
        }
        return F11;
    }
    return f9;
}
Object.defineProperty(v7, "constructor", { enumerable: true, get: f8 });
v7.constructor;
for (let v30 = 0; v30 < 500; v30++) {
    class C32 {
    }
    const v35 = new Int32Array(v30, v30, 257);
    let v37 = new Map();
    [...v37] = v35;
}
function f38(a39, a40, a41, a42) {
    try { a39.search("-9"); } catch (e) {}
    try { a40.match(a39); } catch (e) {}
    a41++;
    const o50 = {
        "c": a40,
        "arguments": a39,
        [a40]: -1465400833,
        1727099843: "-128",
        ["-9"](a47, a48) {
            try {
                const t48 = "-2";
                t48.__proto__ = "-2";
            } catch(e49) {
            }
            a40 |= a39;
            return 16;
        },
    };
    o50.c = o50;
    return o50;
}
f38.valueOf = f38;
f38("-2", "-2", -1465400833, "-2");
f38("-2", "-9", 4096, "-128");
f38("-2", "-9", -1465400833, "-9");
-4.709175952514134e+307 + -4.709175952514134e+307;
function f58() {
    return -2.220446049250313e-16;
}
f58.d = "-9";
f58.d = f58;
f58.length = f58;
const v61 = new Int8Array(4);
try { v61.slice(f38, "-128"); } catch (e) {}
try { v61.reduce(4); } catch (e) {}
8 - 8;
const v67 = new WeakMap();
const v68 = /8[\cA]v/uisy;
v68[Symbol.toPrimitive] = f38;
function f71(a72, a73) {
    const v74 = [v67,v67,v67];
    Date();
    v67.set(v74);
    return ([-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0])["findIndex"](gc);
}
v68[Symbol.toPrimitive] = f71;
const v84 = [3480,1024,-4294967297,-1024,512,65536,29198,-9223372036854775807,-2147483647];
try {
    v84.length = v68;
} catch(e85) {
}
for (const v87 in "1024") {
    try { v87.fontcolor(-2.220446049250313e-16); } catch (e) {}
}
class C89 {
}
let v90;
try { v90 = new C89(); } catch (e) {}
const v91 = v90?.constructor;
try { new v91(); } catch (e) {}
const v96 = ("1073741823").trimRight()[8];
try { v96.toWellFormed(); } catch (e) {}
const v98 = [];
function f99(a100, a101) {
    class C102 {
        static 9 = -2.220446049250313e-16;
    }
    5.0 / -2.220446049250313e-16;
    new Uint8Array(257);
    class C112 extends Uint16Array {
        constructor(a114, a115, a116) {
            super();
        }
    }
    Math.exp(Int8Array);
    Math.log(-23525);
    function f120() {
        return f120;
    }
}
v98.constructor = f99;
new Float32Array(8);
const v123 = /abc?/gvmy;
try { v123.toString(); } catch (e) {}
v123.exec("Q8F");
const v126 = /(x)(x)(x)\1/uis;
function f127(a128) {
    function F129(a131, a132) {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F129();
    return F129;
}
v126.toString = f127;
v126.lastIndex;
function f135(a136, a137, a138, a139) {
    const o146 = {
        2: a138,
        __proto__: a139,
        [v126](a141, a142, a143, a144) {
            super.test();
        },
    };
    o146[2];
    return a136;
}
const v148 = f135();
const v149 = f135();
function F151() {
    if (!new.target) { throw 'must be called with new'; }
}
2 + 2;
2 >>> 2;
Math.cos(2);
try { BigUint64Array(v148, v149, -2.220446049250313e-16); } catch (e) {}
const v160 = new BigUint64Array(215);
v160.g = f8;
v160.g = v160;
-31048n ^ -31048n;
1.1922093890401552e+308 >>> 1.1922093890401552e+308;
class C168 {
    #c = "toUpperCase";
    get a() {
        const v170 = this << "toUpperCase";
        const v171 = v170 ^ v170;
        let v172;
        try { v172 = v171(v171, this, v171, v171, v170, this); } catch (e) {}
        v172[v171] <<= 1.1922093890401552e+308;
        return "Tx";
    }
    static b;
}
new C168();
new C168();
268435456 >>> 268435456;
function f178(a179, a180, a181) {
}
class C182 {
}
function F183(a185, a186, a187) {
    if (!new.target) { throw 'must be called with new'; }
    const v188 = this.constructor;
    try { new v188(a187, C182); } catch (e) {}
}
