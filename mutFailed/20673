new Uint32Array(16);
function f5() {
    const o6 = {
    };
    return o6;
}
const v7 = f5();
class C10 {
}
const v11 = new C10();
function f12(a13, a14) {
    a13.BYTES_PER_ELEMENT;
    class C16 {
    }
    const v17 = C16.length;
    let v19;
    try { v19 = ("0x2I").sup(); } catch (e) {}
    class C21 {
    }
    const v22 = C21?.call;
    try { new v22(null); } catch (e) {}
    class C24 extends C21 {
    }
    try { new C24(NaN, v11, NaN, v7, a13, v19, 16); } catch (e) {}
    const v26 = a14?.propertyIsEnumerable;
    try { v26(); } catch (e) {}
    class C28 {
    }
    try { C28.call(C21); } catch (e) {}
    const v30 = [1000000000.0,2.2250738585072014e-308,-3.0,-2.2250738585072014e-308,-2.2250738585072014e-308,-6.525028373249204e+307,-7.851646360254072e+307,0.6785915059434757,-0.0];
    class C31 {
    }
    let v32;
    try { v32 = C31.apply(1.7976931348623157e+308, f12); } catch (e) {}
    Symbol.b = Symbol;
    C31[Symbol.replace] = v30;
    const v35 = [v32,v17,null];
    let v36;
    try { v36 = v35.with(v35); } catch (e) {}
    const v38 = new Float64Array(v35, v36);
    const v39 = new Float64Array(v38, a13, v36);
    const v40 = v39.values();
    try { v40.next(); } catch (e) {}
    return v39;
}
%PrepareFunctionForOptimization(f12);
f12(Uint16Array, v11);
%OptimizeFunctionOnNextCall(f12);
f12(v11);
new BigInt64Array();
const v50 = new BigInt64Array(5);
function f51() {
    return v50;
}
try { v50.map(f51); } catch (e) {}
new BigInt64Array(1073741824);
new Float64Array(10);
new Float32Array(1);
new Map();
function F60(a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    const v64 = this.constructor;
    const v65 = /[a-zA-Z0-9]/gvisy;
    const v66 = /abc?/gvmy;
    v66[3] %= v65;
    const v68 = new Int16Array();
    const v69 = v68.set();
    let v70 = v69 - v69;
    v70--;
    try { new v64(F60, this, F60, v66); } catch (e) {}
}
const v73 = new F60(F60, F60);
const t72 = v73.constructor;
new t72();
