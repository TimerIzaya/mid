function f0() {
    10000 << 10000;
    const o15 = {
        "f": -6.229295626959656e+307,
        ...10000,
        __proto__: 10000,
        [2](a6) {
            Math.sqrt(10000);
            let v10 = 511428909 * 511428909;
            !10000;
            Math.min(++v10);
            -511428909;
            return -6.229295626959656e+307;
        },
    };
    o15.f = o15;
    return o15;
}
const v16 = f0();
v16.toString = f0;
const v17 = f0();
const v18 = f0();
class C19 {
    constructor(a21, a22) {
        this[9] = this;
        a21[2] = a21;
        a22[2] = a22;
        this[9] = this;
        a21[2] = a21;
        try {
            !true;
            this.fuck(f0, true, v17, true);
        } catch(e26) {
            const v27 = e26?.constructor;
            try { v27.captureStackTrace(a22, a21); } catch (e) {}
            let v29;
            try { v29 = new v27(a21); } catch (e) {}
            v29.stack;
        }
    }
    9 = v17;
    f = f0;
    static c;
}
const v31 = new C19(v17, v16);
v31[2] = v17;
const v32 = new C19(v16, v31);
const v33 = v32[9];
v33.length = v32;
const v34 = new C19(v18, v17);
v34[9];
const v36 = v34[9];
v36[9];
62 & 62;
try { new BigUint64Array(v32, v32, BigUint64Array); } catch (e) {}
const v42 = new BigUint64Array(62);
v42.toString = f0;
new Uint8ClampedArray(1909);
-5;
Int16Array.a = Int16Array;
Int16Array.a = Int16Array;
Int16Array.BYTES_PER_ELEMENT;
new Int16Array(5);
const v52 = -425087802 >>> -425087802;
class C54 extends Array {
    #d;
    #e = v36;
    #f;
    static #a = v33;
    [v42];
}
try { new C54(); } catch (e) {}
try { new C54(); } catch (e) {}
const v57 = new C54();
try { v57.group(v52); } catch (e) {}
