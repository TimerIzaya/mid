function f1() {
    const v2 = [f1,f1];
    let v3;
    try { v3 = v2.every(f1); } catch (e) {}
    return v3;
}
f1();
new WeakSet();
const v6 = [10,-65537,2,-1925224979,-12767,-4,-5,-845652044,6,-19463];
const v7 = [-56920,-10,-2147483647,-579425663,5107,-9223372036854775807,64];
const v8 = [-1011512195,257,9007199254740992,9,129,1368511806,-9223372036854775807,-2744];
function f9(a10, a11, a12, a13) {
    a11++;
    class C15 {
    }
    return f9;
}
f9();
f9();
class C18 extends WeakSet {
    constructor(a20) {
        super(v6);
        try {
            v7.length = 2974502363;
        } catch(e22) {
            class C24 extends BigInt64Array {
            }
            Int32Array.bind(Int32Array, Int32Array, Int32Array, Int32Array, Int32Array);
        }
    }
    1000;
    h = v8;
    static #f = v6;
    static [v7] = v8;
}
new C18(v7);
new C18(v7);
new C18(v6);
[4,21239,7,1024,-1016816875,-63280,4];
[1024,1000,601966900,536870887,-26938,-2,16,16,128];
[1073741825,-3,536870888,0];
const v35 = new Set();
try { v35.add(-4294967297n); } catch (e) {}
function F37() {
    if (!new.target) { throw 'must be called with new'; }
    function F39() {
        if (!new.target) { throw 'must be called with new'; }
    }
}
const v41 = new F37();
function f42(a43, a44) {
    const o52 = {
        n(a46, a47) {
            class C48 {
            }
            new Int16Array([-1.7976931348623157e+308,1000000.0,-Infinity,1000000.0,1e-15,4.0,0.05361702581874339,2.220446049250313e-16,-384803.16239734297]);
        },
        "a": v41,
    };
    for (let v53 = 0; v53 < 100; v53++) {
        Math.random();
    }
    return o52;
}
f42();
f42();
[-4294967295,-33901,-12,-65537];
[899592207];
[];
function f66(a67, a68, a69, a70) {
    9007199254740991 | a68;
    a67 / a67;
    const v73 = a68 < a67;
    const v74 = a69 >>> a69;
    const o79 = {
        get f() {
        },
        ...a70,
        "a": v74,
        ...293145.46763167926,
        n(a77, a78) {
            return v73;
        },
    };
}
for (let v80 = 0; v80 < 625; v80++) {
}
