new Set();
const v2 = [-1.134300671303901e+308,1.767513711865659e+308,-303436.2809221023,-3.0,-5.135372954383262e+307,1.0960107851876082e+308];
const v3 = [-3.910776655969137,-2.220446049250313e-16,2.2250738585072014e-308,0.9688770253094707,0.4245011773919085,1000000000000.0];
[-6.622192969983153,-Infinity,-2.220446049250313e-16,53.889831264901204,-Infinity];
let v5 = 39;
v5 >> v5;
-(v5--);
let v10;
try { v10 = new Int16Array(v2, v2, v2); } catch (e) {}
try { v10.find(v3); } catch (e) {}
new Int16Array(v5);
129 <= 129;
const v16 = new Uint8ClampedArray(129);
v16[65];
const v20 = new Int16Array(2898);
function f21() {
    function f22(a23) {
        const v24 = [];
        [v24,v24,v24,v24,v24];
        return 2898;
    }
    return f22;
}
Object.defineProperty(v20, "constructor", { writable: true, enumerable: true, get: f21 });
const v26 = v20?.constructor;
try { new v26(v20, v2, v20); } catch (e) {}
Date.b = Set;
Date.b = Date;
255 - 255;
const v32 = new Float64Array(255);
v32.toString = Date;
v32[141];
Date.UTC(v20.join(v32));
