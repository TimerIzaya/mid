new BigUint64Array(1000, BigUint64Array, BigUint64Array);
const v5 = new Uint8Array(15);
new Float64Array(1000);
function F11() {
    if (!new.target) { throw 'must be called with new'; }
    this.d = v5;
    this.d = 2;
}
new F11();
new Int32Array();
new Float64Array(256);
let v25 = 659.0540372978887;
const v26 = [-9,512,-1593240791,407959935,-45850,1073741825,10000,-4294967295,-2,-46735];
function f27() {
    v25 = 2.220446049250313e-16;
    function f28() {
        new Int8Array(1073741823);
        return f28;
    }
    return f28();
}
v26.toString = f27;
const v33 = [240209.3906646492,3.0,2.2250738585072014e-308,-5.0,1000000000000.0,403288.37536298134,4.0,0.32072977408374725];
const v34 = [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
function f35() {
    Object.defineProperty(v5, 4, { set: f27 });
    let v38;
    try { v38 = new BigInt64Array(WeakSet); } catch (e) {}
    return v38;
}
v34[Symbol.toPrimitive] = f35;
class C41 {
    constructor(a43, a44, a45, a46) {
        const v47 = this.constructor;
        try { new v47(v34, F11); } catch (e) {}
        v34 >>> a44;
        a45 >>> -0.0;
    }
}
const v52 = new C41(v26, v25, v26);
new C41(v52, 2.220446049250313e-16, v33, v34);
const v57 = new Float64Array(200);
try { isNaN.apply(1000, v57); } catch (e) {}
