function f3() {
    return "b";
}
try { new f3(); } catch (e) {}
new Float32Array(346);
127 << 127;
const v11 = new Uint16Array(127);
try { v11.with("b", Uint16Array); } catch (e) {}
new Float32Array(8);
[-394522955,-1024,-1,-49860,257,1024];
[268435441,-754103516,1024,14];
[-1544180068,-58219,4];
class C19 {
}
try { new C19(); } catch (e) {}
new C19();
const v23 = new Int16Array();
class C25 {
    static {
        for (let v27 = 0; v27 < 25; v27++) {
            function f28() {
            }
            f28.prototype = f28;
            function f29(a30, a31, a32, a33) {
                try { new a30(); } catch (e) {}
                a32 <= a32;
                a33.d = a33;
                const v36 = f28();
                Int8Array.length;
                const v39 = new Int8Array(v23);
                const v42 = new Uint8ClampedArray(995);
                new Int8Array(v42);
                try { v39.entries(); } catch (e) {}
                class C47 {
                }
                const v48 = [-1024];
                for (let v49 = 0; v49 < 5; v49++) {
                    delete v48[v49];
                    const v53 = new Uint8Array(208);
                    for (const v54 of v53) {
                        for (let v55 = 0; v55 < 5; v55++) {
                            v54["p" + v55] = v55;
                        }
                    }
                }
                const v59 = 139837843 in v23;
                v59 && v59;
                0 - 0;
                const v63 = 0 <= 0;
                const v65 = new Int8Array(this, v27, v27);
                for (const v66 in v65) {
                    0 ^ v63;
                }
                let v70 = BigUint64Array * 536870887;
                v70++;
                function f72(a73, a74) {
                    const v75 = /(?:a*)+q(?<a>.)/guds;
                    try { f28.isArray(v75); } catch (e) {}
                    eval();
                    const v81 = new Float64Array(v27 * v27);
                    v81[47] = v81;
                    return v36;
                }
                try { f72(Int8Array, this); } catch (e) {}
                Object.defineProperty(v39.buffer, "constructor", { writable: true, configurable: true, value: Date });
                new Int8Array();
                for (let v85 = 0; v85 < 5; v85++) {
                    function f86() {
                        let v88 = ("Vre").codePointAt(v85);
                        const v90 = v88 * v88--;
                        v90 / v90;
                        return f86;
                    }
                    f86();
                    %OptimizeFunctionOnNextCall(f86);
                }
                return f29;
            }
            for (let v93 = 0; v93 < 5; v93++) {
                f29(this, this, v27, Date).prototype;
            }
        }
    }
}
try { new C25(); } catch (e) {}
