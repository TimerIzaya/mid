const v2 = new BigUint64Array(12);
let v3;
try { v3 = v2.slice(12, 12); } catch (e) {}
Math.pow(12, 3);
const v8 = Math.floor(4);
Math.log10(v2);
const v10 = 3 ** 4;
Math.imul(12, 4);
Math.atan(v10);
Int8Array.prototype = 79;
const v15 = new Int8Array(79);
Uint8ClampedArray.f = Uint8ClampedArray;
const v18 = new Uint8ClampedArray(16);
const v19 = v18.BYTES_PER_ELEMENT;
for (const v20 of v2) {
    v19?.[0];
}
const v23 = new v15();
class C24 extends v23 {
    static #m(a26, a27, a28) {
        try {
            v15.#m(a26, a28, BigUint64Array, v2);
        } catch(e30) {
        }
        return C24;
    }
    static 4096;
    [Int8Array];
    static 2;
    #d;
    static #g = v15;
}
new C24();
new v3();
new Uint8ClampedArray();
new Uint32Array([452969.77200009977,1000000000.0,0.7698538547927494,475.7850241893857]);
Uint16Array.BYTES_PER_ELEMENT;
new Uint16Array(v8);
