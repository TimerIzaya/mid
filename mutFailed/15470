[1024,-1345962508];
try { Symbol(); } catch (e) {}
Symbol.toStringTag;
new Int8Array(9);
const v7 = [-6,14,-176608756,-268435456];
[-65537,268435440,-128];
v7.trimLeft();
class C11 {
    toString(a13) {
        super[this];
    }
}
const v15 = new Date();
const v16 = [];
const o17 = {
    __proto__: v16,
};
const o20 = {
    "type": "function",
};
new Worker(Date, o20);
[-612.0522290415291,-818849.7871392404,1000000000.0,-4.2761397196116314e+307,0.32302424254769413,-1000000000.0,677833.2704746115,2.0];
[-5.0];
[1000.0,0.5186231730032649,2.0,1.7976931348623157e+308,0.21137772709232705];
gc();
let v29 = -4294967297n;
v29++;
const v32 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v33 = [601759695];
const v34 = [1073741824,1073741823,1376142744,1073741825];
function f36(a37, a38, a39, a40) {
    const v41 = a39 | a39;
    arguments[2] = arguments;
    function f43() {
        const v45 = ("Vre").toLocaleUpperCase;
        try { v45(v45, v29, a39, v34); } catch (e) {}
        const v47 = ("Vre").fixed();
        v47[1] = v47;
        const v48 = v47.codePointAt();
        let v50 = -268435456;
        const v51 = v50--;
        const o65 = {
            "c": v29,
            [522675525n](a53, a54) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v33,
            [v48]: -1547267477n,
            __proto__: a39,
            "d": v51,
            "e": -4294967295,
            "h": -128,
            valueOf(a56, a57) {
                return v47;
            },
            "e": v41,
            "e": v50,
            "maxByteLength": -4294967295,
            "arguments": v32,
            ...v33,
            "type": "Vre",
            valueOf(a59, a60) {
                return arguments;
            },
            ..."Vre",
            toString(a62, a63, a64) {
                return a38;
            },
            5: -4294967295,
        };
        o65.length;
        let v67 = -1940566643;
        v67++;
        class C69 {
            e;
        }
        const v70 = new C69();
        const v71 = v70.__defineSetter__;
        try { v71(o65, arguments); } catch (e) {}
    }
    f43();
    %OptimizeFunctionOnNextCall(f43);
    return v29;
}
for (let v74 = 0; v74 < 5; v74++) {
    f36(v33, v74, v74);
}
const v77 = [1073741824,1073741823,1376142744,1073741825];
try {
    v77.forEach();
} catch(e79) {
}
v15.d = Promise;
