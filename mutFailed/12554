const v5 = new BigUint64Array(3516);
v5[983] = v5;
new Uint8ClampedArray(6);
129 >>> 129;
129 - 129;
Uint8Array.length;
const v14 = new Uint8Array(129);
function F15(a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    a17--;
    a19--;
    a17 / a17;
    a18.a = a18;
    try {
        this.g = v14;
    } catch(e23) {
    }
}
F15.length;
const v25 = [142026.36415256164,-1000000000000.0,160593.91457975493,-1.9364523595671663,0.10652337324779793,0.4591098029687508,0.2689630899972745];
try { v25.find(3516); } catch (e) {}
const v28 = new WeakMap();
const v29 = v28?.constructor;
try { new v29(); } catch (e) {}
function f31(a32, a33, a34) {
    return a33;
}
try { ("function").padEnd(-256n); } catch (e) {}
const v38 = [f31,v28,v25];
const o39 = {
    "arguments": v38,
    "type": "function",
};
new Worker(f31, o39);
try { F15.call(-256n); } catch (e) {}
const v42 = new F15(129, F15, -256n);
v42.b = v42;
new F15(129, F15, -256n);
new F15(129, -4294967296n, -4294967296n);
817905185 >>> 817905185;
try { ("object").valueOf(); } catch (e) {}
const o51 = {
    get b() {
        this[817905185] = this;
        delete this[this];
        this[this] = 817905185;
        super[817905185] = "object";
        return 817905185;
    },
};
o51.d = o51;
function f52(a53) {
    const o54 = {
        ...o51,
    };
    return a53;
}
const v55 = f52(o51);
v55[817905185];
v55[817905185] = v55;
f52();
