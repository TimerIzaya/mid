new Uint8ClampedArray(9);
new Int32Array(257);
new Int8Array(4);
function f12() {
}
const v13 = f12();
const v14 = /(?<!a)/vdmsy;
for (let v16 = 0; v16 < 25; v16++) {
    const v17 = [1073741824,1073741823,1376142744,1073741825];
    function f18(a19, a20, a21, a22) {
        let v23 = 0;
        do {
            !15317 & 10;
            15317 && 15317;
            a19.random();
            0.2696879931504592 && 15317;
            -0.2696879931504592;
            v23++;
        } while (v23 < 7)
        function f38() {
            return f18;
        }
        let v39;
        try { v39 = v17.findIndex(a21, v14); } catch (e) {}
        try {
            a22.d = v17;
        } catch(e40) {
        }
        for (let v41 = 0; v41 < 5; v41++) {
            v23 & a22;
            v16 * v41;
            v16 >> v41;
            v14["p" + v41] = v41;
        }
        const v50 = new Int8Array();
        function f51(a52, a53) {
        }
        const v54 = f51(v39, Int8Array);
        const v55 = v50.buffer;
        try { v55.slice(a19, a20); } catch (e) {}
        const v61 = Symbol.iterator;
        const o70 = {
            [v61]() {
                let v63 = 10;
                const o69 = {
                    next() {
                        v63--;
                        const v67 = v63 == 0;
                        const o68 = {
                            "done": v67,
                            "value": v63,
                        };
                        return o68;
                    },
                };
                return o69;
            },
        };
        Object.defineProperty(v55, "constructor", { writable: true, configurable: true, value: Date });
        try { v17["find"](); } catch (e) {}
        const o73 = {
            [v54]: v50,
            "g": v39,
            [f51]: f38,
        };
        return arguments;
    }
    for (let v74 = 0; v74 < 5; v74++) {
        f18(v13, f18, f18, v17);
    }
}
