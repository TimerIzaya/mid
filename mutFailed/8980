const v0 = /((ab)a\nb\bc)/gvds;
const v1 = /Aa\Bb/gvdy;
const v2 = /sabc+/gvds;
function f3(a4) {
    const o14 = {
        get g() {
            function F6(a8) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.d = v0;
                } catch(e9) {
                }
                try {
                    this.b = a4;
                } catch(e10) {
                }
            }
            new F6(a4);
            new F6(v0);
            new F6(v1);
            return this;
        },
    };
    return o14;
}
const v15 = f3(v0);
f3(v0);
const v17 = v15(v2);
[-40571.9919866228,1000.0,1.1643327859367742e+308,1000000000.0,-0.0];
[1e-15,-0.5701730161629435,1.56993266092895e+308,Infinity,-3.0,-702805.4194393478];
[-1.7976931348623157e+308,-3.0,4.0,1.7814836580333194e+307,1000.0];
class C21 extends f3 {
    static toString(a23, a24, a25, a26) {
        a26["exec"]("exec");
        return a25;
    }
    static {
        super.b = v17;
        v2 >>> this;
        new Float64Array(1000);
        new Uint16Array(64);
        new Int32Array(146);
    }
}
new C21();
new C21();
new C21();
new BigUint64Array(2864);
let v48 = 2549;
v48--;
const v51 = new BigInt64Array(v48);
try { Float32Array(v48, v48, undefined); } catch (e) {}
new v17(3);
const v56 = /(J5a{0,1}?)/y;
/u?/udms;
/bf/gvms;
32 >>> 32;
let v61 = 32 + 32;
v61--;
new Uint8ClampedArray(32);
4096 & 4096;
try { new Uint8Array(BigUint64Array, BigUint64Array, 3); } catch (e) {}
new Uint8Array(4096);
let v71 = 1582 >> 1582;
v71--;
new Int8Array(1582);
4 - 4;
-54813 - -54813;
8 & 8;
const v81 = [-54813,1582,-54813,8];
const v82 = [-54813];
const v83 = [-54813];
try { v83.map(4); } catch (e) {}
Float64Array.of();
[,];
const v90 = new BigInt64Array();
class C91 {
    constructor(a93, a94) {
        for (let v95 = 0; v95 < 10; v95++) {
            v90[-1];
            try {
                super.o();
            } catch(e98) {
            }
        }
    }
}
class C99 extends C91 {
}
function f100(a101, a102, a103, a104) {
    try { a101.toString(); } catch (e) {}
    try { a102.groupToMap(a103); } catch (e) {}
    a103[0] = a103;
    try { a101.copyWithin(undefined, a102); } catch (e) {}
    for (let i111 = 0, i112 = 10;
        (() => {
            const v113 = i111 < i112;
            class C114 extends Date {
            }
            return v113;
        })();
        i112++) {
    }
    const o128 = {
        n(a121, a122, a123, a124) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a104;
        },
        ...v83,
        "b": v81,
        ...a103,
        ...v83,
        129: 4,
        ...a101,
    };
    o128[2] = o128;
    return o128;
}
const v130 = f100(v82, 8, f100(v82, v83, v81, 4), 4);
v130[129] = v130;
const v131 = f100(v83, 4, 4, 4);
v131.d = v131;
-26206 - -26206;
try { new Map(); } catch (e) {}
/ND2/gds;
class C139 extends Map {
}
const v140 = new C139();
try { v140.get(Uint8Array); } catch (e) {}
const v142 = v51.isPrototypeOf();
v142 && v142;
v142 && v142;
Date.name;
let v148;
try { v148 = Date.parse(4); } catch (e) {}
-v148;
class C150 {
    static {
        for (let v152 = 0; v152 < 25; v152++) {
            v152 >>> v152;
            const v154 = [601759695];
            const v155 = [1073741824,1073741823,1376142744,1073741825];
            class C158 {
            }
            async function f159(a160, a161, a162, a163) {
                (await C158).call(8, Uint16Array);
                return a161;
            }
            function f167(a168, a169, a170, a171) {
                try { new a168(); } catch (e) {}
                a169 & a169;
                ~a169;
                try { new a168(); } catch (e) {}
                const v176 = a170 << a170;
                v176 % v176;
                function f179() {
                }
                const v181 = new Int8Array();
                function f183(a184, a185) {
                    const o186 = {
                        ...a184,
                    };
                    o186.d;
                    return f183;
                }
                %PrepareFunctionForOptimization(f183);
                const v189 = BigUint64Array * 536870887;
                let v190 = v189 - v189;
                v190++;
                const v192 = v189 ** v189;
                try { Number.parseInt(v190, v190); } catch (e) {}
                let v195;
                try { v195 = new Number(v56); } catch (e) {}
                try { v195.valueOf(); } catch (e) {}
                Number.isNaN(v192);
                function f198(a199, a200) {
                    return Number;
                }
                try { f198(); } catch (e) {}
                v181.buffer.__defineGetter__;
                %OptimizeFunctionOnNextCall(f179);
                try { v155["find"](..."find", a171, ...v154); } catch (e) {}
                const o206 = {
                };
            }
            for (let v207 = 0; v207 < 5; v207++) {
                f167(this, v207, v207);
            }
            function F209(a211, a212, a213, a214) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v215 = new F209(F209, F209, F209, F209);
            for (let v216 = 0; v216 < 25; v216++) {
                v215["p" + v216] = v216;
            }
        }
    }
}
