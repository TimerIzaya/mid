const v0 = [-17354,-19724];
[6246,-2,-1661271519,-50016,-71695281,2,9,257];
const v2 = [-1707163835,61150,1912313416,54079];
function f3() {
    return v2;
}
class C4 {
    static set c(a6) {
        try {
            new f3();
        } catch(e8) {
        }
        [9223372036854775807,8,512,2147483648,15];
        [-9223372036854775808,268435440,-10,-1538746504,268435456,1073741825,37562];
        [-670560348,1429387110,255,-33429,2,-14794,10,512,5,-1981514071];
    }
    static #a;
    g = v0;
    static f = v2;
}
const v12 = new C4();
const v13 = new C4();
const v14 = v13?.constructor;
try { new v14(); } catch (e) {}
new C4();
let v20;
try { v20 = ("3").charCodeAt(f3); } catch (e) {}
[-1.183736568841928e+308,-0.9465033635280928,305.24392572069223];
[-1000000.0,-1000.0,-1000000.0,1e-15,0.681972270166614,-0.0];
const v23 = [-5.0,-928.4098738765356,1.0938974687994078e+308,-4.0,-2.0,-1e-15,-2.0,-2.220446049250313e-16,-453.5904124853964,3.0];
try { v23.join(v23); } catch (e) {}
268435439 - 268435439;
function f27() {
    class C29 {
        #c = "e";
    }
    class C30 {
    }
    class C32 {
    }
    const v33 = new C32();
    v33.e = v33;
    v33[3.4890473589784586e+307] = 268435439;
    const o34 = {
        "call": f27,
    };
    function f35(a36) {
        return a36;
    }
    v33.groupToMap(f35);
    const v39 = ("h").split();
    class C40 extends C32 {
        #a;
    }
    try { new C40(); } catch (e) {}
    for (let i = 0; i < 5; i++) {
        for (let v42 = 0; v42 < 5; v42++) {
            function f43() {
                "Vre" | ("Vre").codePointAt(v42);
                return f43;
            }
            f43();
            %OptimizeFunctionOnNextCall(f43);
        }
        const v49 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
        const v51 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v52 = [601759695];
        for (let v54 = 0; v54 < 5; v54++) {
            function f56() {
                try {
                    v49.forEach();
                } catch(e60) {
                    /a\sc/gm;
                    e60.f = e60;
                }
                [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
                let v63 = -268435456;
                v63++;
                function F65() {
                    if (!new.target) { throw 'must be called with new'; }
                }
                new F65();
                const t82 = [];
                delete t82.length;
                const o76 = {
                    "c": -4294967297n,
                    [522675525n](a71, a72) {
                    },
                    "c": v52,
                    valueOf(a74, a75) {
                    },
                    "maxByteLength": -4294967295,
                    "arguments": v51,
                    ..."Vre",
                };
            }
            f56();
            %OptimizeFunctionOnNextCall(f56);
        }
        const v78 = Date?.UTC;
        try { new v78(C4, C40, C32, C32, Date, C40, Date); } catch (e) {}
        const v80 = new Date();
        const o82 = {
            [v20]: 3.4890473589784586e+307,
            __proto__: v80,
            valueOf() {
                v39[v49] /= 268435439;
                return 268435439;
            },
        };
        const o83 = {
        };
        try {
            ([-2.0,-1.0,-5.0,-5.429610213896366,-2.2074967697332255,76807.25242455839,1.7976931348623157e+308]).toLocaleString();
            const v87 = new Uint32Array();
            function f88(a89, a90) {
                const o98 = {
                    [v87](a92, a93, a94) {
                        a90?.[a92].__proto__;
                    },
                };
                return a89;
            }
            o83.c = v12;
        } catch(e99) {
        }
        try {
            const o100 = {
            };
            o100.c = v12;
            o100.b = o82;
        } catch(e101) {
        }
        try {
            const o102 = {
            };
            o102.c = v12;
            o102.b = o82;
            o102.d = 3.4890473589784586e+307;
            const v103 = [];
            function f104() {
                const o108 = {
                    toString() {
                        super[this];
                    },
                    ...v103,
                    n() {
                        return this;
                    },
                };
                try { o108.n(); } catch (e) {}
                return v103;
            }
            %PrepareFunctionForOptimization(f104);
        } catch(e110) {
        }
        try {
            const o111 = {
            };
            o111.c = v12;
            o111.b = o82;
            o111.d = o82;
            function F112(a114, a115, a116, a117) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const o118 = {
            };
            for (let i121 = 0, i122 = 10;
                (() => {
                    const v123 = i121 < i122;
                    const o124 = {
                    };
                    class C125 {
                        #p() {
                        }
                    }
                    let v127 = 3375;
                    const v129 = new BigUint64Array(v127);
                    Math.tan(--v127);
                    const v133 = [-256,13351,5138,2,-4294967295,1000,268435440];
                    class C134 {
                        constructor(a136, a137) {
                            Math.atan2(v133);
                        }
                    }
                    let [v139,,v140,...v141] = v129;
                    return v123;
                })();
                i121++) {
            }
        } catch(e147) {
        }
    }
    return 268435439;
}
%PrepareFunctionForOptimization(f27);
const v148 = f27();
v148 >>> v148;
%OptimizeFunctionOnNextCall(f27);
f27();
