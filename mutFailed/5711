let v2 = "7";
class C3 {
    constructor(a5) {
        try {
            this.f = a5;
        } catch(e6) {
        }
    }
    get h() {
        try { new v2(this, this, this, this, this, ..."WCV"); } catch (e) {}
        this[268435441];
        try {
            ("number").toUpperCase();
        } catch(e11) {
        }
        return this;
    }
}
const v12 = new C3("number");
const v13 = new C3(v2);
const v14 = new C3(v2);
function F15(a17, a18, a19, a20) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a17;
    } catch(e21) {
    }
    try {
        this.f = v14;
    } catch(e22) {
    }
    try {
        this.h = a20;
        const v23 = [1199929892,-268435456,202122251,-9,1000];
        [10000,11655,268435439,-327885053,64,-2147483648,536870912,536870912];
        [268435441,384438925];
        Reflect.construct(a20, [v23,a20,this], F15);
    } catch(e29) {
    }
}
const v30 = new F15("number", "WCV", v12, "WCV");
let v31 = new F15(v2, "WCV", v30, v2);
const v32 = new F15("WCV", "number", v14, "WCV");
v31 ^= v32;
try {
    v13.b = v12;
} catch(e33) {
}
class C34 {
    valueOf(a36, a37, a38, a39) {
        let v41 = 512;
        const v43 = +-1;
        const v44 = v41--;
        const v45 = ++v2;
        v43 / v2;
        try {
            new F15(v31, a37, v44, "d");
        } catch(e49) {
        }
        Math.acos(v45);
        ~v44;
        return v45;
    }
}
new C34();
const v53 = new C34();
const o54 = {
    __proto__: v14,
    [v53]: v32,
};
o54[v53] = v2;
new C34();
const v57 = new Date();
function f58(a59) {
    return Date;
}
const v62 = [v57];
const o63 = {
    "arguments": v62,
    "type": "function",
};
const t81 = "function";
new t81(f58, o63);
