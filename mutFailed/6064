const v0 = [2.220446049250313e-16,2.220446049250313e-16,-1.7976931348623157e+308,1000000.0,NaN,-1000000.0,2.2250738585072014e-308];
const v1 = [NaN,-3.3780021990858143e+307,-1.0,-1000000000000.0,-5.792085451232241e+307,-1.1630453804150974e+308];
function f2(a3) {
    try { v1.shift(); } catch (e) {}
    return ("async").lastIndexOf();
}
v1[Symbol.toPrimitive] = f2;
const v9 = [1.7356287087686901,-479515.1800251649,-4.0,8.487351009049986e+307,0.008823656500678734,2.0,-0.0,-1000.0,-9.22594972069426];
const v10 = [v9];
const v11 = [v0,v1];
v11[Symbol.toPrimitive] = Symbol;
const v14 = [v9,v11,v0];
function f15() {
    return Symbol;
}
function f16(a17) {
    new Uint8ClampedArray(129);
}
Object.defineProperty(v14, "toString", { enumerable: true, get: f15, set: f16 });
function f21(a22, a23, a24, a25) {
    a25[Symbol.toPrimitive] = f15;
    const o39 = {
        "h": a24,
        __proto__: a22,
        158: f21,
        ...a25,
        [a22]: v1,
        "g": a24,
        set e(a29) {
            new Int32Array(5);
            new Int16Array(3896);
            new Float32Array(16);
        },
    };
    return o39;
}
const v40 = f21(v1, v14, v1, v14);
const v42 = f21(v14, f21(v11, v0, v9, v10), v11, v1);
const v44 = [v14,v10,v0,v1,[v0]];
[v40,v14,v40,v40,v14];
function F46(a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a49;
    } catch(e50) {
    }
    try {
        this.c = f21;
    } catch(e51) {
    }
    try {
        this.h = a49;
    } catch(e52) {
    }
}
const v53 = new F46(v11, v11);
new F46(f21, v44);
new F46(v53, v1);
/(x)(x)(x)\3*/gvi;
const v60 = /((?<=a))/gudm;
const v61 = /gk4b*/vmsy;
[v61,v61,v61];
[v42,1e-15,v60];
[-4,2];
let v67;
try {
const t0 = -1.3832922122240728e+307;
v67 = t0(2);
} catch (e) {}
for (let v68 = 0; v68 < 5; v68++) {
    v68 < 1;
    try { v67(v60, v68, v61, v68, -4); } catch (e) {}
    const v73 = Symbol.iterator;
    const o77 = {
        [v73]() {
            const o76 = {
                next() {
                    return v61;
                },
            };
        },
    };
}
