const v0 = [1024,-44000,-9223372036854775808,536870889,-322122206,-4294967297,9012,65537,-2147483647,268435456];
const v1 = [-65537,678947086,-994256667,10,3612,3,61254,-5,512,-470141256];
[-65537];
class C3 {
    m(a5, a6) {
        for (let [v7,v8,,v9] of v0) {
            try {
                v0.c = v8;
            } catch(e10) {
            }
        }
        return a5;
    }
    3 = v1;
    a;
    #h;
}
const v11 = new v1();
new C3();
const v13 = C3?.constructor;
try { new v13(); } catch (e) {}
new C3();
119.11113534990363 + 119.11113534990363;
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    const v24 = a22 - a22;
    try {
        this.b = v11;
    } catch(e25) {
    }
    try {
        v24.e = a23;
    } catch(e26) {
    }
    try {
        this.a = v1;
    } catch(e27) {
    }
}
new F20(0.7501036545090809, v11);
new F20(0.7501036545090809, C3);
const v30 = new F20(119.11113534990363, v11);
class C31 {
    toString(a33) {
        super[v13];
    }
}
v30.length;
const v36 = new C31();
const v37 = [C31,C31,C31,C31,v11];
v37[3] = v37;
try {
    v37.length = v36;
} catch(e38) {
}
