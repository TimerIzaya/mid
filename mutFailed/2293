function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        typeof arguments;
        const v6 = arguments || -16;
        try { v6(F0, v6, v6, arguments, F0); } catch (e) {}
        try {
            this.fuck(F0, 34038n);
        } catch(e10) {
        }
        const v11 = new Map();
        v11[3868817774] = v11;
        new Float64Array(1);
        new Int32Array(1207);
        new BigUint64Array(2300);
        const o21 = {
        };
        this.e = -16;
    } catch(e22) {
    }
}
const v23 = new F0();
const v24 = new F0();
const v25 = new F0();
function f26() {
    return v23;
}
function f30(a31, a32) {
    const o35 = {
        "d": f26,
        [8n]: 7n,
        4: v23,
        [a31]: v24,
        "c": v25,
        "g": a32,
        __proto__: v23,
        "a": v23,
        set b(a34) {
        },
        /*
        __proto__: f26,
        */
        "d": a32,
        [7n]: a31,
        [v25]: a32,
        "b": a31,
        "f": 8n,
    };
    return o35;
}
f30(256n, 7n);
const v37 = f30(7n, 8n);
const v39 = [Float64Array];
for (let v40 = 0; v40 < 5; v40++) {
    v39.length = 2;
}
f30(8n, 7n);
let v45 = 0;
function f46() {
    return f46;
}
f46();
f46();
do {
    const o55 = {
        [7]: 9,
        get g() {
            return this;
        },
        set g(a54) {
        },
    };
    const o56 = {
        "b": 1024,
        __proto__: v39,
        "d": v39,
        /*
        __proto__: v39,
        */
        "d": 7,
    };
    gc(o56);
    v45++;
} while ((() => {
        new Int32Array(Int32Array);
        const v62 = [];
        [v62,v62,v62,v62,v62];
        function F66(a68, a69) {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F66(-525.1582304247171, 1000.0);
        return v45 < 5;
    })())
let [v72] = v39;
delete v37[v72];
const o76 = {
    "maxByteLength": 2802,
};
const v78 = new SharedArrayBuffer(2802, o76);
new Float64Array(v78);
