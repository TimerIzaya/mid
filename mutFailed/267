const v2 = new Int16Array(3070);
v2[0] = v2;
let v7 = 32626.370909325313;
3070 || 64;
~82;
let v10 = v7++;
v10++;
let v12 = +v7;
--v12;
Math.sqrt(v2);
try { new Uint32Array(82, Int16Array, Int16Array); } catch (e) {}
const v17 = new Uint32Array(82);
const v20 = new Float64Array(13);
const v21 = v20[7];
function f22(a23, a24, a25) {
    const v26 = a25 - a25;
    let v27 = v26.__proto__;
    const o28 = {
        "apply": f22,
        "get": f22,
        "has": f22,
    };
    v27 = a25;
    for (let v30 = 0; v30 < 100; v30++) {
        f22(a25, v17, Proxy);
    }
    `bigint${Float64Array}name${v20}10000${Proxy}J${v20}f`;
    new Proxy(v17, o28);
    const o46 = {
        "b": 3070,
        "g": 3070,
        "c": a25,
        o(a35, a36) {
            try {
                this.valueOf = a25;
            } catch(e40) {
            }
            super.f;
            (-0.0 || v26) > -5.0;
            try { v21.p(Proxy, -5.0, -5.0); } catch (e) {}
            return a25;
        },
        "h": 3070,
        "d": a24,
    };
    return o46;
}
const v47 = f22(v2, 82, 13);
v47.e = v47;
const v48 = f22(3070, 3070, v2);
v48.b = v48;
[Uint32Array,f22(v48, 13, 3070),v2];
[v48,v17,Float64Array];
[82,Uint32Array,3070,v2,v17];
let v54;
try { v54 = ("1866165091").fontsize(v48); } catch (e) {}
f22 >>>= f22;
try {
    v20.a = v54;
} catch(e55) {
}
("1866165091").normalize();
