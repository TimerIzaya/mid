[-2147483647,2147483647];
[-5];
[62511,516948223,-439274735,2147483649,-6,-536870912,-607684332,-9223372036854775807];
function F19(a21) {
    if (!new.target) { throw 'must be called with new'; }
    new.target.d = new.target;
    let v29 = 0;
    do {
        const o30 = {
        };
        new Proxy("536870887", o30);
        v29++;
    } while (v29 < 1)
}
const v44 = [601759695];
const v45 = [1073741824,1073741823,1376142744,1073741825];
Reflect.construct(F19, [4096n], F19);
function f55(a56, a57, a58, a59) {
    function f61() {
        return a59;
    }
    arguments.c = 1163987790;
    -9223372036854775808n & -2147483647n;
    const v72 = new Int8Array();
    const v73 = v72.buffer;
    class C76 {
        static {
            for (const v78 of "-4294967295") {
            }
        }
    }
    v73.slice();
    %OptimizeFunctionOnNextCall(f61);
    let v81;
    try { v81 = v45["find"](..."find", a59, ...v44); } catch (e) {}
    v81 <= a58;
    return arguments;
}
for (let v83 = 0; v83 < 10; v83++) {
    f55(-25283n, 522675525n, -1553n, v83);
}
%OptimizeFunctionOnNextCall(f55);
f55(null, -256, -9223372036854775808n, "B");
