const v0 = [0.6401274320815981,-Infinity];
[554.8937655410782,1000000.0,1.0,-2.2250738585072014e-308];
const v2 = [-0.0,9.250304254959204,2.2250738585072014e-308,-Infinity];
const v3 = /I9/visy;
const v4 = /[\0]\ud808\udf45*q(?:ab)?K\u{12345}Ma\fb\nc\rd\te\vf/gvsy;
/R/gdis;
const v9 = [v0,255n,v3,65535n];
try { v9.reverse(); } catch (e) {}
[v3,v9,65535n,v0,v4];
const v12 = [v2];
let v15 = 1.2356140222691294e+307;
v15--;
function f18(a19, a20) {
    arguments[0] = arguments;
    arguments[0] = arguments;
    return a20;
}
const v22 = f18(undefined);
for (let [i51, i52] = (() => {
        1000.0 + 1000.0;
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
        const v31 = new Uint32Array(381);
        new Float32Array(v31);
        try {
            v12[5];
            function F35(a37, a38, a39) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v40 = new F35(F35, F35, F35);
            const o46 = {
                toString(a43, a44, a45) {
                    Object.defineProperty(v40, a43, { writable: true, configurable: true, set: Array });
                    return a43;
                },
            };
            try { o46.toString(o46, Array); } catch (e) {}
            v3.sticky = v22;
        } catch(e48) {
        }
        return [0, 10];
    })();
    (() => {
        const v54 = [1000.0,-1000000000000.0,-7.943810730626244,-1.7976931348623157e+308,1.0,4.0];
        v54.length = -9223372036854775808;
        new v54();
        Symbol.isConcatSpreadable;
        i51 << i51;
        i52 / i52;
        return i51 < i52;
    })();
    (() => {
        const v63 = i52--;
        v63 !== v63;
    })()) {
}
