new BigInt64Array(127);
const v5 = new Float64Array(128);
function f6(a7) {
    const v11 = 950.7217747879038 / 950.7217747879038;
    ~-2147483648;
    Math.imul(950.7217747879038, Float64Array);
    a7 - v11;
    Math.asin(-2147483648);
    Math.cbrt(Float64Array);
    Math.log2(-2147483648);
    return 950.7217747879038;
}
v5.constructor = f6;
const v18 = v5?.constructor;
function f19() {
    %VerifyType(Float64Array);
    function F20() {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C22 extends F20 {
    }
    return f6;
}
v18.valueOf = f19;
try { new v18(Float64Array, v5, v5); } catch (e) {}
Float64Array.toString = f6;
const v26 = new Float64Array(735);
class C27 {
    static #e;
    static {
        function f29() {
            return f6;
        }
        function f30(a31) {
            [v26,[[a31,a31,128],127,BigInt64Array],128,this,a31];
        }
        Object.defineProperty(this, "toString", { writable: true, enumerable: true, get: f29, set: f30 });
        try { new this(); } catch (e) {}
        const v36 = `KSEdM${Float64Array}d${this}m${this}-27481`;
        try { v36.padStart(v36); } catch (e) {}
        const v38 = Float64Array | v36;
        v38 | v38;
        try {
            v5.#e = 127;
        } catch(e40) {
        }
    }
    #b;
    h;
}
new C27();
new C27();
new C27();
const v44 = [-11,65536,65537];
Object.defineProperty(v44, 1428717040, { writable: true, enumerable: true, value: v44 });
function f45(a46, a47, a48, a49) {
    v44[1428717040];
    return a49;
}
f45.arguments = f45;
%OptimizeFunctionOnNextCall(f45);
f45();
