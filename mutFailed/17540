const v3 = /4(a\1)(?: foo )/udim;
/a(?!bbb|bb)c/um;
const v5 = /a\sc/ud;
let v6 = 2.0;
v6--;
let v11;
try { v11 = Date.now(); } catch (e) {}
-v11;
const v13 = new Date();
let v14;
try { v14 = v13.setFullYear(-4, -4, 2.2250738585072014e-308); } catch (e) {}
function F15() {
    if (!new.target) { throw 'must be called with new'; }
    const v17 = this?.constructor;
    try { new v17(); } catch (e) {}
}
F15.name;
const v20 = new F15();
let v21;
try { v21 = v20.propertyIsEnumerable(v20); } catch (e) {}
v21 || v21;
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    const v27 = this?.__lookupGetter__;
    try { v27(a25); } catch (e) {}
    try { new v27(v13); } catch (e) {}
}
const v30 = new F23();
const v31 = v30?.constructor;
try { new v31(2.2250738585072014e-308, -4); } catch (e) {}
-37859n <= -37859n;
const v36 = [];
try { v36.findIndex(-4); } catch (e) {}
function F39() {
    if (!new.target) { throw 'must be called with new'; }
    const v41 = this?.__lookupGetter__;
    let v42;
    try { v42 = new v41(this); } catch (e) {}
    const v45 = Date.toString(F39);
    v45[2];
    try { v45.codePointAt(9223372036854775807); } catch (e) {}
    const v48 = v45[23];
    v48[0] = v48;
    const v49 = v45.replaceAll(v20, -37859n);
    try { v49.replaceAll(v14, v41); } catch (e) {}
    try { v49.strike(); } catch (e) {}
    try { new Uint32Array(v42, v49, v42); } catch (e) {}
    Uint32Array.length;
    const v55 = new Uint32Array(Uint32Array, Uint32Array, 4);
    const v56 = v55[2];
    v56 != v56;
    839612.5677247904 ** 839612.5677247904;
    const v61 = new Set(v36);
    const v62 = v61.add;
    v62.f = v62;
    try { v62(v55); } catch (e) {}
    const v65 = v61["delete"](839612.5677247904);
    const v66 = v65 || v65;
    v66 || v66;
    const v68 = v65 || v65;
    !v68;
    const v70 = v68 || v68;
    v70 && v70;
    const v72 = v68 % v68;
    v72 && v72;
    v72 && v72;
    const v75 = v72 || v72;
    v75 && v75;
    const o78 = {
    };
    o78.b = o78;
    let v79 = Array;
    try { v79(9223372036854775807); } catch (e) {}
    const t73 = "getPrototypeOf";
    t73[11] = "getPrototypeOf";
    const v82 = ("getPrototypeOf").blink();
    const v83 = v82[28];
    v83[0] = v83;
    const v84 = v83.strike();
    v84[6] = v84;
    v84[4] = v84;
    const v85 = v82.strike(591114.0785999324);
    let v86;
    try { v86 = v85.match(v75); } catch (e) {}
    const v87 = v85.replace(19793, v30);
    try { v87.codePointAt(-4); } catch (e) {}
    v87[11] = v87;
    -1.7976931348623157e+308 - -1.7976931348623157e+308;
    const v91 = -1.7976931348623157e+308 >>> -1.7976931348623157e+308;
    v91 * v91;
    -65536;
    class C95 {
        ["getPrototypeOf"] = -1.7976931348623157e+308;
    }
    try { new C95(); } catch (e) {}
    class C97 extends C95 {
        ["getPrototypeOf"] = C95;
    }
    C97.g = C97;
    C97.prototype = C97;
    const v98 = new C97();
    const v99 = v98?.getPrototypeOf;
    try { new v99(); } catch (e) {}
    let v101;
    try { v101 = new v99(); } catch (e) {}
    v101.getPrototypeOf;
    const v103 = new C97();
    const v104 = v103.constructor;
    v104.h = v104;
    const v105 = new v104();
    const v106 = v105?.getPrototypeOf;
    try { new v106(); } catch (e) {}
    try { new v106(); } catch (e) {}
    const v109 = new C97();
    const v110 = v109?.constructor;
    try { new v110(); } catch (e) {}
    const v112 = v109.getPrototypeOf;
    try { new v112(); } catch (e) {}
    let v114 = BigUint64Array;
    let v115;
    try { v115 = new v114(v82, v114, v114); } catch (e) {}
    const v116 = v114.of();
    try { v116.copyWithin(o78, v3); } catch (e) {}
    new v114();
    const v120 = Int8Array?.constructor;
    const v121 = v120?.bind;
    try { new v121(v20); } catch (e) {}
    try { new v120(Int8Array); } catch (e) {}
    const v124 = new Int8Array();
    try { v124.lastIndexOf(65536); } catch (e) {}
    const v126 = v124?.set;
    try { new v126(v5); } catch (e) {}
    const v129 = new C97();
    try { v129.constructor(); } catch (e) {}
    const v131 = v129?.getPrototypeOf;
    v131.prototype = v131;
    try { new v131(); } catch (e) {}
    const v133 = v129.getPrototypeOf;
    try { new v133(); } catch (e) {}
    let v135 = 0;
    do {
        v79 ||= v86;
        v135++;
    } while (v135 < 4)
    const v139 = new v133();
    try { v139.constructor(); } catch (e) {}
    const v141 = v129.getPrototypeOf;
    let v142;
    try { v142 = new v141(); } catch (e) {}
    v142.getPrototypeOf = v142;
    const v143 = new C97();
    const v144 = v143.getPrototypeOf;
    v144.length;
    v144.e = v144;
    let v146;
    try { v146 = new v144(); } catch (e) {}
    v146.a = v146;
    try { v144(); } catch (e) {}
    let v148;
    try { v148 = new v144(); } catch (e) {}
    let v149;
    try { v149 = v148.propertyIsEnumerable(v87); } catch (e) {}
    v149 && v149;
    v149 || v149;
    const v152 = v148?.MIN_VALUE;
    try { new v152(); } catch (e) {}
    v152.g = v152;
    try { v152.call(v83); } catch (e) {}
    let v155;
    try { v155 = new v152(v82, this, 4); } catch (e) {}
    let v156 = v155.getPrototypeOf;
    try {
        v21.valueOf = v115;
    } catch(e157) {
    }
    v114 /= v156;
    v156--;
    try { v155.constructor(); } catch (e) {}
    const v160 = v143.constructor;
    v160.e = v160;
    try { new v160(); } catch (e) {}
    let v162;
    try { v162 = new v160(F39, v72); } catch (e) {}
    const v163 = v162?.constructor;
    try { new v163(); } catch (e) {}
    v162?.constructor;
    const v166 = v162?.getPrototypeOf;
    const v167 = v166?.e;
    try { new v167(); } catch (e) {}
    let v169;
    try { v169 = new v166(); } catch (e) {}
    v169.e = v169;
    v166.h = v166;
    const v170 = v79(19793);
    v170.a = v170;
    try { v170.toSorted(2.2250738585072014e-308); } catch (e) {}
    for (const v172 of v170) {
    }
}
F39.caller = F39;
const v173 = new F39();
v173.length;
const v175 = new F39();
v175.length = v175;
v175.e = v175;
