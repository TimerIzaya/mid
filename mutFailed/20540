Array.toString = Array;
let v1 = 127;
const v2 = new Array(v1);
v2[112] = v1;
class C3 extends Array {
    constructor(a5) {
        a5[112] = a5;
        super(v1);
        let [...v6] = v2;
        v1 &&= a5;
    }
    1;
    static 0 = v1;
    [v2] = Array;
    a;
    268435440 = v1;
    [Array];
}
new C3(v2);
const v11 = new C3(v1);
const v12 = new C3(C3);
[-1,1073741825,2,26386,2147483648,-16,65537,4294967297,-10,268435440];
const v14 = [-63859,-1133887870,5811,-4,7640,-1,2952];
const v15 = [1024,-8,64,-12856,-4096,4,-2,15,618077182];
function F16(a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a18;
    } catch(e20) {
    }
    try {
        this.e = a19;
    } catch(e21) {
    }
    try {
        this.h = a18;
    } catch(e22) {
    }
}
const v23 = new F16(C3, v12);
new F16(v23, v14);
const v25 = new F16(v15, v11);
const v27 = [0.0,-2.220446049250313e-16];
v27.undefined = v25;
let v28;
try {
const t0 = 16;
v28 = t0();
} catch (e) {}
function f29() {
    return f29;
}
class C30 extends f29 {
}
function f31(a32) {
    v28 = C3;
    %VerifyType(C30);
    return a32;
}
C30.valueOf = f31;
class C33 {
    constructor(a35, a36) {
        /W(jy2)/udy.flags;
        function f41(a42) {
            class C44 {
            }
            function F45() {
                if (!new.target) { throw 'must be called with new'; }
                7 instanceof C44;
            }
            function F48(a50, a51) {
                if (!new.target) { throw 'must be called with new'; }
                const v52 = this.constructor;
                try { new v52(); } catch (e) {}
                new F45();
            }
            return F45;
        }
        Uint8Array[Symbol.toPrimitive] = f41;
        let v57 = v27[v28];
        v57 **= Uint8Array;
        function f58(a59, a60, a61, a62) {
            return a60;
        }
        for (let v63 = 0; v63 < 625; v63++) {
            f58(Uint8Array, 2, v63);
            try {
                a35 &= C30;
            } catch(e65) {
            }
        }
    }
}
new C33();
new C33();
