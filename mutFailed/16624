function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 1024;
    } catch(e3) {
    }
}
const v4 = new F0();
let v5 = new F0();
const v6 = new F0();
41565 >>> 41565;
const v11 = 4294967295 / 4294967295;
v11 - v11;
class C13 extends F0 {
    get a() {
        for (let v15 = 0; v15 < 92; v15++) {
            try {
                v4.fuck([v6,this,v4,F0,v15], v4);
            } catch(e18) {
            }
        }
        return this;
    }
    static {
        this.name;
        this.d = this;
        const v21 = typeof this;
        let v22;
        try { v22 = v21.toLocaleLowerCase(); } catch (e) {}
        v22[7] = v22;
        try { v21.match(C13); } catch (e) {}
        const v25 = ("undefined")[4];
        try { v25.valueOf(); } catch (e) {}
        v21 === "undefined";
    }
}
C13.prototype = C13;
C13.g = C13;
const v28 = new C13();
v28.f;
v5 >>= v6;
let v30;
try { v30 = C13.acos(C13); } catch (e) {}
v30 /= C13;
let v31;
try {
const t0 = 41565;
v31 = t0(v11, v30, v28);
} catch (e) {}
%VerifyType(v11);
const v32 = new C13();
v32.f;
new C13();
const v36 = 1n <= 1n;
const v37 = v36 || v36;
255n ^ 255n;
let v41 = 9007199254740990;
v41 + v41;
v41--;
-376709393 - -376709393;
const v46 = -(-376709393);
v46 % v46;
const v49 = v32 === C13;
v49 && v49;
if (v49) {
    try { v31(v49); } catch (e) {}
} else {
    try {
        v32.valueOf = v31;
    } catch(e52) {
    }
}
let v53 = 14;
v53++;
const v56 = [41565,Uint8ClampedArray,-1753911568n,-376709393];
[v56,v53,v56];
const v58 = [1n,-1753911568n,-16];
v58[2] = v58;
!(v36 instanceof Uint8ClampedArray);
Math.g = Math;
Math.atan(v5);
Math.tan(-65536);
v37 || -65536;
v5 + v5;
(v37 / v5) ^ v5;
const v71 = -5 || -65536;
v71 * v71;
Uint8ClampedArray.BYTES_PER_ELEMENT = Uint8ClampedArray;
Uint8ClampedArray[1] = v53;
new Float32Array(Uint8ClampedArray);
