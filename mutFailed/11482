const v2 = new Uint8Array(3991);
const o6 = {
    "maxByteLength": 681373331,
};
const v8 = new SharedArrayBuffer(1504, o6);
new Float32Array(v8);
3199 / 3199;
let v12 = Int8Array;
new v12(3199);
7 >>> 7;
Float64Array.BYTES_PER_ELEMENT = Float64Array;
const v17 = new Float64Array(7);
const v21 = [-9223372036854775808,64];
let v22 = [-4294967296,-63504,-9223372036854775807,512,24559,2];
const v23 = [-9219,-1824342407,-14,7,65537,-49368];
function F24(a26, a27, a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    let v25 = this;
    let v30 = v25?.constructor;
    ({"buffer":v30,"byteLength":v12,"length":v22,...v25} = v17);
    a29[a27] = a27;
    v2[v8];
    try { new v30(v25, a29, Float64Array, F24); } catch (e) {}
    a27.g = a27;
    const v36 = a28[1];
    v36 - v36;
    try {
        with (v36) {
            F24(v36, a29);
        }
    } catch(e39) {
    }
}
const v40 = F24?.constructor;
try { new v40(v21); } catch (e) {}
new F24(v23, v22, v21);
