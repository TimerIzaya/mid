new Uint8Array(528);
try { new Float32Array(Uint8Array, Float32Array, 11); } catch (e) {}
new Float32Array(11);
const v9 = new Uint8Array(2309);
BigUint64Array.prototype;
new BigUint64Array(512);
class C16 {
    f = "1073741824";
}
try { new C16(); } catch (e) {}
const v19 = new Uint16Array(4);
const v20 = v19?.keys;
("toString")?.toString;
let v25;
try { v25 = new C16(); } catch (e) {}
const v27 = "preventExtensions" * (v25 >> Array);
const o30 = {
    "h": "toString",
    "type": "minor",
};
gc(Array);
new Array(v27);
let v35;
try { v35 = ("893742995").fixed(); } catch (e) {}
const t24 = "toString";
!(delete t24?.length);
try { o30.fixed(); } catch (e) {}
let v39 = -44949;
v39--;
const v42 = ~-1684549676;
const t30 = [2.2250738585072014e-308,0.5522511629085187,-7.435509479805105e+307];
t30.d = v42;
class C44 {
    #g = C44;
    static #c;
}
try { new v20(); } catch (e) {}
let v46 = 0;
while ((() => {
        3 - 3;
        const v49 = v46 < 3;
        return v49 && v49;
    })()) {
    for (let v51 = 0; v51 < 32; v51++) {
        try { ("p").strike(); } catch (e) {}
        v35["p" + v51] = v51;
    }
    v46++;
}
try { Uint8Array.from(v9); } catch (e) {}
new Uint8Array(6);
new Float64Array(7);
function F63() {
    if (!new.target) { throw 'must be called with new'; }
}
0.9639498521279674 % 0.9639498521279674;
let v73 = Math.acosh(1073741825);
v73--;
new BigUint64Array();
let v79 = 1073741824;
v79--;
class C82 {
    constructor(a84) {
        [a84,v79] = "boolean";
    }
    3415425588;
    #b;
    static d;
    e = -268435456;
    static f = v19;
}
C82.d = C82;
class C85 extends F63 {
}
const o86 = {
    2: C85,
};
o86[2] = o86;
