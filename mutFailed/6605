const v6 = [0.71465078532354,-2.2250738585072014e-308,1.0,-2.2250738585072014e-308,2.2250738585072014e-308,-620.8633845139873,0.0,-1.0,3.3358719500528515];
const v7 = [-7.462188141503825,-3.070207201828062e+307,0.6861416475431791,1000000000.0,-3.0];
const o13 = {
    ...v6,
    [Set](a10, a11, a12) {
    },
    "b": v7,
};
const v14 = [4.0,0.7094008736728812,1.0,-Infinity,751.782637596797,9.135402319209974e+307];
const v15 = [-2.2250738585072014e-308,1000.0,-3.5215366779354894e+307,-2.0,2.220446049250313e-16,-Infinity];
function f17() {
    Array.__proto__ = this;
    return gc;
}
const v20 = [-639.8114780526407,-1.26650346280414e+308,25.97295815994903,659.4805837386336];
new Uint8Array(v7);
function F23(a25, a26) {
    if (!new.target) { throw 'must be called with new'; }
    const v27 = this.constructor;
    let v28;
    try { v28 = new v27(F23, v27, F23, F23); } catch (e) {}
    const v30 = v28 >>> 38445;
    38445 >> v28;
    let v32 = v30 * v30;
    v32--;
}
new F23(F23, F23);
class C35 {
    static a;
    [4] = v15;
    static [v14] = 1073741825;
    #h;
    static 2147483648 = v14;
    constructor(a37, a38) {
        try {
            v14.#h = a37;
        } catch(e39) {
        }
    }
    #c = -4096;
    static 2147483649;
}
const v40 = new C35(v14, v20);
new C35(v20, v15);
new C35(v15, v20);
-4294967296 >>> -4294967296;
%PrepareFunctionForOptimization(255);
function f45() {
    const o49 = {
        ...1.0,
        set b(a48) {
        },
    };
    o49.b = o49;
    return o49;
}
for (let v50 = 0; v50 < 5; v50++) {
    F23();
    %OptimizeFunctionOnNextCall(f45);
}
const v52 = [-6.672391061426152e+307];
const v56 = new Float64Array(127);
new Uint8ClampedArray(v56);
function f59() {
    new Float32Array();
    class C62 {
    }
    function F63(a65, a66, a67) {
        if (!new.target) { throw 'must be called with new'; }
        const v68 = this.constructor;
        let v69;
        try { v69 = new v68(); } catch (e) {}
        this.e = v69;
    }
    function f70() {
        for (let v71 = 0; v71 < 5; v71++) {
            new F63();
        }
        return F63;
    }
    let v73 = 8n;
    let v74;
    try { v74 = v20.with(9007199254740990, v15); } catch (e) {}
    return v73;
    let v75;
    try { v75 = v74.p(v73, -10, -4096, v14); } catch (e) {}
    try {
        new f59();
    } catch(e77) {
    }
    v73++;
    const v79 = [v73];
    const v80 = v79 > v73;
    v73 || v75;
    const v87 = v52[v52 || v40]();
    ~v79;
    let v89 = 0;
    const o92 = {
        "maxByteLength": 1814769353,
    };
    const v94 = new SharedArrayBuffer(12, o92);
    try { v94.grow(-10); } catch (e) {}
    Uint32Array.e = Uint32Array;
    while ((() => {
            const v98 = v89 < 10;
            v15.length;
            new BigUint64Array(5);
            new Uint8ClampedArray(1);
            new v87(3645);
            v98 || v98;
            return v98;
        })()) {
        for (let v110 = 0; v110 < 5; v110++) {
            "n" + v110;
        }
        v89++;
    }
    return v80;
}
%PrepareFunctionForOptimization(f59);
f59();
%OptimizeFunctionOnNextCall(f59);
f59();
