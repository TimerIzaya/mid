function f2() {
    return f2;
}
class C3 extends f2 {
    #o(a5, a6, a7) {
    }
}
try { Float64Array(268435441n, Float64Array, Float64Array); } catch (e) {}
new Float64Array(0);
function f16() {
    let v17 = 4086;
    v17--;
    return 256;
}
Uint8Array.toString = f16;
const v19 = new Uint8Array(256);
v19.join(256);
for (let v21 = 0; v21 < 5; v21++) {
    function f22() {
        Number.isNaN(Math.atanh() + v21);
        return f22;
    }
    f22.length = f22;
    f22();
    %OptimizeFunctionOnNextCall(f22);
}
new Float32Array(256);
~100;
new Float32Array(100);
-1;
Uint16Array.e = Float64Array;
Uint16Array.e = Uint16Array;
new Uint16Array(1);
256 < 0;
const v40 = [10000];
const v41 = new Float32Array(v40);
try { v41.entries(); } catch (e) {}
const v45 = Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array).normalize();
try { v45.replaceAll(9007199254740992n, v40); } catch (e) {}
const v49 = new Uint32Array(255);
v49[178];
512 | 512;
Int8Array[1] = 512n;
new Int8Array(512);
const v56 = this?.RangeError;
try { new v56(255); } catch (e) {}
this.printErr();
try { Int32Array.from(Int8Array); } catch (e) {}
new Int32Array();
/(x)(x)(x)\1/uis.exec(Int16Array);
