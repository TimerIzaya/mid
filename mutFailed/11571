const v3 = gc();
let v4 = -9007199254740992;
++v4;
[-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
function f7() {
    v3.length;
    return -1772466169n;
}
const o10 = {
};
function f11(a12) {
    const o13 = {
    };
    return o13;
}
const v14 = f11();
class C15 extends f11 {
}
const v16 = new C15();
v14[v16] = o10;
class C17 {
    #n(a19, a20) {
        new Uint16Array(2784);
        new C17(10);
        new Uint8ClampedArray(2677);
        return -1772466169n;
    }
}
new C17();
new C17();
const v32 = new C17();
for (let v33 = 0; v33 < 100; v33++) {
    Array(36862);
}
f11.d = f11;
function f41() {
    const o43 = {
        __proto__: 2,
    };
    o43.e = o43;
    const v44 = new Uint16Array();
    v44[1] = v44;
    return BigInt64Array;
}
const v46 = new BigInt64Array(218);
v46.sort(f41);
function f49(a50, a51, a52, a53) {
    this.decodeURIComponent([-2.216170140955498,-2.2250738585072014e-308,-643865.3403199288,NaN]);
    new a50();
    function F58() {
        if (!new.target) { throw 'must be called with new'; }
        const t51 = 2;
        t51.d = 2;
    }
    function F61(a63, a64, a65, a66) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v67 = new F61();
    const v68 = new F61(f49, f49, v32, v67);
    v68 in v67;
    return f49;
}
for (let v70 = 0; v70 < 10; v70++) {
    f49(2, f49, v70, f49);
}
%OptimizeFunctionOnNextCall(f49);
f49();
