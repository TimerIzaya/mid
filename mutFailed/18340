function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    const v6 = this?.constructor;
    try { new v6(F3); } catch (e) {}
    ~a5;
    try {
        this.d = a5;
    } catch(e9) {
    }
    try {
        this.a = 1000.0;
    } catch(e10) {
    }
    try {
        this.e = 1000.0;
    } catch(e11) {
    }
}
const v12 = new F3(-3.0);
v12.d;
const v14 = new F3(1000.0);
const v15 = v14?.constructor;
try { new v15(F3); } catch (e) {}
const v17 = new F3(-3.0);
function F18(a20, a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    const v23 = this?.constructor;
    try { new v23(this, this, a20); } catch (e) {}
    a21.d;
    try {
        this.a = a21;
    } catch(e26) {
    }
}
new F18(v14, v14, -4.0);
const v28 = new F18(v14, v17, -4.0, v15);
v28.a = v28;
new F18(v14, v17, 1000.0);
new ArrayBuffer(129);
new Uint16Array(1024);
Uint32Array.a = Uint32Array;
new Uint32Array(127);
function f39() {
    return f39;
}
f39.prototype;
try { new Math(); } catch (e) {}
const v43 = new Math();
v43.set(f39);
v43.constructor = f39;
const v45 = v43.f;
v45.e = v45;
const o46 = {
};
o46.h = o46;
9 - 9;
const v50 = new BigInt64Array(9);
v50.includes(o46);
