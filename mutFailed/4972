const v0 = [-9007199254740992];
function f1(a2, a3) {
    a2.f **= a2;
    const o7 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(o7);
    return v0;
}
v0.valueOf = f1;
const v9 = [-3,-48149,1073741825,6,18169,-45669,-9635];
const v11 = Symbol.isConcatSpreadable;
v9[v11] = v0;
const v12 = [536870888,652670349,268435440,9223372036854775807];
function f13() {
    return v11;
}
Object.defineProperty(v12, Symbol.isConcatSpreadable, { writable: true, configurable: true, get: f13 });
function f16() {
    return v0;
}
const v19 = new Float64Array(182);
v19.constructor = Symbol;
const v20 = v19?.constructor;
v20[Symbol.iterator] = Symbol;
try { new v20(Float64Array, v0, v19); } catch (e) {}
Int8Array[Symbol.isConcatSpreadable] = f1;
Int8Array.d = Int8Array;
new Int8Array(1000);
45 & 45;
const v32 = new Uint8Array(45);
class C33 {
    constructor(a35, a36, a37) {
        function f38(a39, a40) {
            return Symbol[Symbol.replace];
        }
        a37.valueOf = f38;
        let v44;
        try { v44 = a36.map(a35); } catch (e) {}
        try { a37.concat(Int8Array); } catch (e) {}
        super.f = a36;
        try {
            const v46 = f16();
            v46.toString = f38;
            v46.length = v46;
        } catch(e47) {
        }
        const o48 = {
        };
        o48.c = Symbol;
        o48.c = o48;
        try {
            o48.a = a35;
        } catch(e49) {
        }
        try {
            const o50 = {
            };
            o50.a = v44;
            o50.e = o50;
            o50.a = a35;
            o50.c = v9;
        } catch(e51) {
        }
        try {
            const o52 = {
            };
            o52.a = a35;
            o52.c = v9;
            o52.b = a35;
        } catch(e53) {
        }
        try {
            const o54 = {
            };
            o54.a = a35;
            o54.c = v9;
            o54.b = v12;
        } catch(e55) {
        }
    }
}
new C33(v12, v0, v0);
const v57 = new C33(v9, v12, v9);
v57.b = v57;
new C33(v0, v0, v12);
const v61 = new BigUint64Array(256);
const v64 = new Uint8Array(3513);
v64.constructor = f13;
try { v64.slice(1000, v32); } catch (e) {}
16 - 16;
const v69 = new BigUint64Array(16);
[v64,256,256];
const v71 = [256];
[v69,16,v71];
const v74 = v71 === BigUint64Array ? v71 : BigUint64Array;
try { new v74(v19, Uint8Array, 1000); } catch (e) {}
const v76 = [256];
v76[0];
const v78 = [v76,v74,BigUint64Array,Uint8Array];
try { v78.toReversed(); } catch (e) {}
[v76,v78];
function f81() {
    function f83(a84) {
        try { a84.p(v76); } catch (e) {}
    }
    this.onmessage = f83;
    try {
        v61.length = 16;
    } catch(e87) {
    }
}
const v90 = [];
const o91 = {
    "arguments": v90,
    "type": "function",
};
