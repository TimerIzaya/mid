const v3 = [-7.152133789190695e+307,-1.301658649050875,-5.0,-1000.0,-1.6273559466923685e+308,-1.7976931348623157e+308,-2.441251677197015e+307,3.0,-5.929836031695419e+307,509.0508631490927];
try { v3.findIndex(v3); } catch (e) {}
const v5 = [NaN,1000.0,463533.00041552004,-257077.87898857065,0.6668838643700209,1e-15,-615.8250240936636,-1000.0];
const v6 = [90.62279175487924,-1.4968921806388255e+308,-1e-15,0.6890106570817648,2.0,541.1824762751912,-7.5168709828292135,-1.5853175067144176e+308];
let v7;
try { v7 = v6.findLastIndex(v5); } catch (e) {}
function f8(a9, a10, a11, a12) {
    a9[2] = a9;
    a12 * a12;
    let v14;
    try { v14 = a9.fill(v5); } catch (e) {}
    try { v14.reverse(); } catch (e) {}
    a11--;
    const o35 = {
        "f": 16,
        "h": v6,
        [a11](a18, a19, a20) {
            a18 == 16 ? a18 : 16;
            return a10;
        },
        set e(a24) {
            a24.c = a24;
            try { a24(); } catch (e) {}
            const o29 = {
                "execution": "async",
                "type": "major",
            };
            super.c = v6 >>> gc(o29);
            try { new v14(this, gc, ..."async", ...v6, ..."major"); } catch (e) {}
            try {
                super.substring();
            } catch(e34) {
            }
        },
    };
    const v36 = o35.e;
    v14[a12] = a12;
    a10[1] = o35;
    v7[v36] = -1441879155;
    return o35;
}
const v40 = f8(v6, -10, -1441879155, 16);
v40.e;
v40.e = v40;
f8(v3, 16, -10, -10);
f8(v3, -1441879155, f8, 16);
let v44 = -55049;
const v45 = v44++;
v45 / v45;
let v48 = 9007199254740990;
const v49 = v48--;
const v50 = [v44,v48,-1441879155];
try { v50.indexOf(-10); } catch (e) {}
[[48966,v50,v44,f8],16,-10];
255 - 255;
const v57 = new BigUint64Array(255);
try { v57.keys(); } catch (e) {}
const v60 = v57.buffer.slice();
try { v60.slice(16, v49); } catch (e) {}
gc();
