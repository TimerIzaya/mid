class C3 {
    static p(a5) {
        const v6 = super[9223372036854775807];
        const v7 = `log10${this}d${-1.0}b`;
        const v8 = v6 === v7;
        try {
            this.fuck(v7, v8);
        } catch(e10) {
        }
        return 4.0;
    }
    static 6;
    b = -1.0;
    2 = 4.0;
    static [9223372036854775807] = -1.0;
}
const v11 = new C3();
const v12 = new C3();
new C3();
function f14(a15, a16, a17) {
    const o39 = {
        "a": a17,
        [a16]: -1.0,
        "h": a15,
        n(a19, a20, a21) {
            try { v12.toString(a16, C3, v11); } catch (e) {}
            for (let v26 = 0; v26 < 32; v26++) {
                function F27(a29, a30, a31, a32) {
                    if (!new.target) { throw 'must be called with new'; }
                }
                const v33 = new F27();
                const v34 = `
                    v34 >= v33 ? v34 : v33;
                `;
                a21["p" + v26] = v26;
            }
            return this;
        },
    };
    return o39;
}
let v41 = new Uint32Array(9223372036854775807);
v41++;
async function* f43(a44, a45, a46) {
    return a45;
}
f14(v11, C3, v12);
f14(v12, v12, v12);
const v49 = f14(v12, v11, v11);
function f50() {
    function F51() {
        if (!new.target) { throw 'must be called with new'; }
    }
    new F51();
    536870912n << 536870912n;
    return v49;
}
class C62 {
}
const v63 = new C62();
function f64(a65, a66, a67, a68) {
    function f69() {
        return f69;
    }
    const v70 = f69.length;
    const v71 = v70 + v70;
    const v73 = new Int8Array(a65);
    const v74 = v73.buffer;
    function f75(a76) {
        return a76;
    }
    f75.constructor = f50;
    f75.constructor;
    const v78 = v74.slice(v70, a66);
    function f79(a80) {
        v78.slice(a80, v71);
        return f64;
    }
    return v71;
}
undefined ** v63;
