new Uint8ClampedArray(Uint8ClampedArray);
const v5 = new Float64Array(2147483648);
const v8 = new BigUint64Array(173, v5, BigUint64Array);
class C9 extends Float64Array {
    set h(a11) {
        try {
            v8.reduce(a11);
        } catch(e17) {
        }
    }
    static {
        let v21 = Uint8ClampedArray || Uint8ClampedArray;
        let v22 = v21--;
        Math.cbrt(v22);
        ++v22;
        +v21;
    }
}
new C9();
new C9();
new C9();
function f32() {
}
const v33 = [1,-2147483647,33850,-47390,-65537,-15,-1462726157];
const v34 = [1073741824,1073741823,1376142744,1073741825];
function f36(a37, a38, a39, a40) {
    function f42() {
        return 522675525n;
    }
    f32();
    const v45 = new Promise();
    const v48 = v45.buffer.slice(-4398);
    %OptimizeFunctionOnNextCall(f42);
    try { v34["find"](..."find", -4.832103967129213, ...v33, ...v34, ...522675525n); } catch (e) {}
    v48 <= a39;
    return arguments;
}
for (let v52 = 0; v52 < 10; v52++) {
    f36(v52, v52, f32, 522675525n);
}
%OptimizeFunctionOnNextCall(f36);
f36();
