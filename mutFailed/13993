function f0() {
    const o4 = {
        2: -16457.569711826975,
        "b": "p",
        "g": "p",
        ["p"]: "p",
        ..."-16",
        "d": "-16",
        "h": -16457.569711826975,
        __proto__: "-16",
        ..."p",
        "f": "p",
    };
    return o4;
}
const v5 = f0();
f0();
f0();
/(xyz??)/vdm;
/(d)/udm;
const v10 = /(?<!a)/vdmsy;
function F15(a17, a18) {
    if (!new.target) { throw 'must be called with new'; }
}
for (let v20 = 0; v20 < 25; v20++) {
    function f21() {
        return f21;
    }
    const v22 = [601759695];
    const v23 = [1073741824,1073741823,1376142744,1073741825];
    function f25(a26, a27, a28, a29) {
        function f31() {
            return a27;
        }
        let v32;
        try { v32 = v23.findIndex(a29, a27); } catch (e) {}
        let v33;
        try { v33 = new a29(a28, a26, v20); } catch (e) {}
        try {
            v5.d = v23;
        } catch(e34) {
        }
        try { new f31(); } catch (e) {}
        for (let v36 = 0; v36 < 32; v36++) {
            v10["p" + v36] = v36;
        }
        const v39 = f21(Date, a28, a29);
        const v41 = new Worker();
        const v43 = new Uint32Array();
        v43.c = v43;
        let v44 = 0;
        do {
            delete v22[f25];
            try {
                v33.h = f31;
            } catch(e46) {
            }
            v44--;
        } while (v44 < 7)
        [v43];
        const v53 = BigUint64Array * 536870887;
        ~(v53 ** v53);
        function f56(a57, a58) {
            return v39;
        }
        const v59 = f56();
        const v60 = v41.buffer;
        try { v60.slice(F15, F15); } catch (e) {}
        Object.defineProperty(v60, "constructor", { writable: true, configurable: true, value: Date });
        const v63 = new Worker();
        try { v63.lastIndexOf(-1073741824); } catch (e) {}
        v60.slice(2147483648);
        %OptimizeFunctionOnNextCall(f31);
        let v67;
        try { v67 = v23["find"](..."find", a29, ...v22, ...v23, ...522675525n); } catch (e) {}
        Symbol(a29);
        const o70 = {
            [v59]: v41,
            "a": F15,
            "g": v32,
            [f56]: f31,
            "d": v63,
        };
        v67 <= a28;
        return arguments;
    }
    for (let v72 = 0; v72 < 5; v72++) {
        f25(f21, v72, v72, v23);
    }
}
