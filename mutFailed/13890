class C3 {
    static d = 36324n;
    f;
    g = 65536n;
    static valueOf(a5, a6) {
        new Uint32Array(202);
        new Int32Array(6);
        const v15 = new Uint8Array(6);
        return v15;
    }
}
const v16 = new C3();
const v17 = new C3();
const v18 = new C3();
const v21 = new Int16Array(4);
try { BigUint64Array.from(v21); } catch (e) {}
class C24 extends C3 {
    g;
    e = v18;
    constructor(a26, a27, a28, a29) {
        super();
        try { this["toDateString"]("toDateString"); } catch (e) {}
        Math.ceil(a29);
        268435441 || 4.0;
        const v38 = --a29;
        4.0 / v38;
        Math.acos(-9007199254740991);
        Math.acosh(v38);
        +268435441;
    }
}
const v43 = new C24(65536n, 36324n, v17, v16);
new C24(36324n, v16, v43, v43);
new C24(65536n, 36324n, v43, v18);
for (let v46 = 0; v46 < 25; v46++) {
    function f47() {
        return f47;
    }
    const v48 = [601759695];
    const v49 = [1073741824,1073741823,1376142744,1073741825];
    function f50(a51, a52, a53, a54) {
        function f55() {
            return a51;
        }
        const v56 = f47();
        new Int8Array();
        new Uint32Array();
        const v62 = new BigUint64Array();
        return v62.filter();
        [47831n];
        [v56,v56,v56];
        BigUint64Array * 536870887;
        try { v49["find"](..."find", a54, ...v48); } catch (e) {}
        return f47;
    }
    for (let v72 = 0; v72 < 10; v72++) {
        f50();
    }
    new Uint16Array();
    for (let v76 = 0; v76 < 5; v76++) {
        function f77() {
            return ("Vre").fixed("Vre").concat(v48);
        }
        f77();
        %OptimizeFunctionOnNextCall(f77);
    }
}
