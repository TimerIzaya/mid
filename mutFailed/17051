const v2 = new Uint32Array(210);
function f3() {
    return Uint32Array;
}
let {"byteLength":v4,} = v2;
f3();
const v8 = new Int8Array(15);
Uint8ClampedArray.toString = f3;
new Uint8ClampedArray(5);
const v12 = [-4096];
const v13 = [536870889,-3,4294967296,512,-9223372036854775807,-65536,-2031158127,-1955152994,8];
const v14 = [-2];
function F15(a17, a18, a19) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a19;
        [40151,424354281,3,-8,16,1073741825,38235,52367,536870889,-3];
        [-15572,536870889,4294967295,1073741823,1073741824,13,536870889];
        [-7];
        Object.defineProperty(this, 3490531397, { writable: true, enumerable: true, get: f3 });
        for (let v23 = 0; v23 < 32; v23++) {
            a19["p" + v23] = v23;
        }
    } catch(e26) {
    }
    try {
        this.f = v8;
    } catch(e27) {
    }
}
const v28 = new F15(5, v14, v13);
const v29 = new F15(15, v12, v28);
new F15(210, v12, v29);
gc();
gc();
"toString" == "toString";
("boolean").split(Uint8ClampedArray);
function f38() {
    class C39 {
        constructor(a41) {
            function f42() {
                return f42;
            }
            Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f42 });
        }
    }
    const v43 = new C39();
    const v44 = v43.length(v43, C39);
    const v45 = new C39(v44);
    v45.length();
    const v47 = v45.length;
    const v48 = new v47(v47, f38, v44, f38, f38);
    v48.name = v48;
    return v47;
}
f38();
%PrepareFunctionForOptimization(f38);
f38();
%OptimizeFunctionOnNextCall(f38);
f38();
const o53 = {
    get f() {
    },
};
