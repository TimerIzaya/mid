const v2 = new BigInt64Array(40);
const v4 = 1891 | 1891;
v4 >> v4;
const v7 = Uint16Array?.constructor;
let v8;
try { v8 = new v7(40); } catch (e) {}
v8.b = v8;
const v9 = new Uint16Array(1891);
const v10 = v9[1679];
v10 == v10;
v9.g = v9;
3 % 3;
3 + 3;
const v16 = new Float32Array(3);
try { v16.filter(v9); } catch (e) {}
try {
    const o18 = {
    };
    v16.findLast(v8, o18);
} catch(e20) {
}
class C21 {
    static m(a23, a24) {
        Math.log2(3 + 3);
        Math.max(3);
        return -1520091770;
    }
    #b;
    static #g;
    static f = v2;
}
try { new C21(); } catch (e) {}
const v32 = C21?.m;
v32.name = v32;
try { new v32(v9, v2); } catch (e) {}
const v34 = new C21();
let v35;
try { v35 = v34.constructor(); } catch (e) {}
let v36 = 10;
for (; v36--;) {
    try {
        new C21();
    } catch(e39) {
    }
}
const v40 = new C21();
const v41 = v40?.constructor;
let v42;
try { v42 = new v41(); } catch (e) {}
const v43 = v42?.__lookupGetter__;
try { new v43(v35); } catch (e) {}
const v45 = v40?.constructor;
try { new v45(); } catch (e) {}
let v47;
try { v47 = new v45(); } catch (e) {}
const v48 = v47?.constructor;
try { new v48(); } catch (e) {}
const v50 = v47?.constructor;
Reflect.construct(v35, [Reflect], Uint16Array);
const o57 = {
    "execution": "async",
    "type": "minor",
};
gc(o57);
try { new v50(); } catch (e) {}
try { new v50(); } catch (e) {}
const v61 = new C21();
const v62 = v61?.constructor;
v62.d = v62;
try { new v62(); } catch (e) {}
try { new v62(); } catch (e) {}
let v65 = 1024;
v65++;
Int32Array.name = Int32Array;
const v68 = new Int32Array(v65);
let v69 = this;
try { v69.ReferenceError(1891); } catch (e) {}
const v71 = v69?.ReferenceError;
v71.b = v71;
try { new v71(v62); } catch (e) {}
let v73;
try { v73 = new v71(C21); } catch (e) {}
try { v73.toString(); } catch (e) {}
v73.message = v73;
try { Reflect.has(Uint16Array, 40); } catch (e) {}
try { Reflect.construct(v68, v9); } catch (e) {}
let v80 = Reflect.construct(Int32Array, [v68])[290];
v80++;
v69 >>>= Reflect;
