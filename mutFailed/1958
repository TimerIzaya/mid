let v0 = -4.0;
function F3() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = -1052649622;
        const v8 = -(-7);
        Math.tan(v8 ** v8);
    } catch(e11) {
    }
}
class C13 extends Uint32Array {
    constructor(a15, a16) {
    }
}
const o18 = {
};
class C19 {
    static 7 = -60529;
    constructor(a21, a22) {
        ~a21;
        a22 != a22;
        const o32 = {
            6: this,
            4: -24333,
            ...a21,
            o(a26, a27) {
                function f28(a29, a30, a31) {
                    v0 |= a27;
                }
            },
        };
        const v34 = new Proxy(this, o32);
        let v35;
        try { v35 = C19.toString(); } catch (e) {}
        v35 instanceof v35;
        function F38(a40, a41, a42, a43) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = a43;
            } catch(e44) {
            }
        }
        const v45 = new F38(v34, o18, C19, o18);
        const v46 = new F38(v45, this, C19, v45);
        new F38(v46, this, o32, v34);
        super.d;
    }
    static #p(a50) {
        this[super.h];
        const v54 = [2147483649,-62399];
        v54[Symbol.unscopables] = v54;
        function f58(a59, a60) {
            const o63 = {
                "g": 1073741824,
                get d() {
                    super[a59];
                    return this;
                },
                "f": -24333,
                ...a59,
                10: 1073741824,
            };
            return o63;
        }
        f58(f58);
        Math.min(-24333);
        const v69 = Math.tanh(-24333);
        Math.clz32(512);
        return v69;
    }
}
const v71 = new C19(-60529, -60529);
const v72 = new C19(v0, -24333);
const v73 = v72?.constructor;
try { new v73(o18, C19); } catch (e) {}
const v75 = new C19(-60529, -60529);
const v76 = v75?.constructor;
try { new v76(o18, C13); } catch (e) {}
function f78() {
    return v71;
}
[532585.7986161776,-3.0,-5.071151837373293,0.7827021374727083,-1e-15,0.0];
const v80 = [-4.962284016877699e+307,0.2265142898228878,385.77844651392,1.7976931348623157e+308,-1.2541540525180104e+308,2.0,2.2250738585072014e-308];
const v81 = [-541546.4175577627,-9.823874576150385e+307,-259979.25106992992,-1e-15,310.6271981846917,1000000000.0];
try { v81.push(C19); } catch (e) {}
-3;
const v86 = 0 < 3;
v86 || v86;
function f88() {
    return f88;
}
!3;
v80 ** -9223372036854775807;
Math.cosh(-9223372036854775807);
const v96 = ~v80;
Math.acos(v96);
Math.log1p(v96);
const v100 = -4.380315352541508e+307 >> 129;
v100 > v100;
function F102(a104) {
    if (!new.target) { throw 'must be called with new'; }
    new.target.d = new.target;
}
const v112 = [1.7976931348623157e+308,-5.063738949828065,-1000000.0,-4.0,4.0,1.368499884638594e+307,0.0,-1.2131530743918297,-1000000000.0,-2.809909548595164];
v112[9] = v112;
const v113 = v112.concat();
v75.h = 268435440;
class C116 extends Array {
}
try { v113.includes(v80); } catch (e) {}
-1000000000.0 >>> -1000000000.0;
let v122 = 1000.0;
class C123 {
    static {
        ++v122;
    }
}
class C128 {
    static {
        try { this.call(-1000000000.0); } catch (e) {}
        function F131(a133, a134) {
            if (!new.target) { throw 'must be called with new'; }
            this.propertyIsEnumerable(this);
            const v136 = this.constructor;
            try { new v136(); } catch (e) {}
            try { this.constructor(); } catch (e) {}
        }
        new F131(C128, C128);
    }
}
class C142 extends Int8Array {
    #p(a144, a145, a146, a147) {
        super.m();
    }
    static b = -4.380315352541508e+307;
    static #a = -60529;
    [12];
}
new C142(1564);
