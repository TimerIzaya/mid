[-9];
const v1 = [9007199254740992,3,-1180677827,882159992,1,-9223372036854775808,536870912];
const v2 = [15,14,12,1073741824,-14,9];
let v3 = 4;
const v4 = v3++;
%VerifyType(v4);
v1[1000] *= v3;
1246 + 1246;
const v13 = new Int8Array(1246);
let v14;
try { v14 = v13.copyWithin(v2, 1246); } catch (e) {}
const v17 = BigInt64Array?.constructor;
const v19 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
function f21(a22, a23, a24, a25) {
    const v26 = Symbol.toPrimitive;
    Object.defineProperty(a22, v26, { configurable: true, enumerable: true, value: f21 });
    const o33 = {
        toString(a28, a29) {
            const v30 = a22 && Float64Array;
            function f31() {
                a28 *= v26;
                return Float64Array;
            }
            Object.defineProperty(v30, "valueOf", { value: f31 });
            v30 <= v19;
            return this;
        },
    };
    return o33;
}
try { new v17(BigInt64Array); } catch (e) {}
const v35 = new BigInt64Array(16);
const v37 = new Uint8ClampedArray(-9223372036854775808);
const v39 = new Int8Array(v37);
function f40() {
    return f40;
}
const o41 = {
    __proto__: f40,
    "e": f40,
};
v35 % v14;
Math.max(v4);
Math.abs(v35);
Math.acos(-1);
const v49 = Math.sqrt(v4);
new Uint8Array(268435440);
Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array).toLowerCase();
-1 & v4;
Math.tanh(22322);
Math.acos(-1);
class C62 extends v49.constructor {
}
const v67 = new v49([], []);
const t54 = v67.constructor;
new t54(604.4479109019192, 0.3083488057663979);
new Uint32Array(2);
const v74 = v39?.constructor;
try { new v74(3n); } catch (e) {}
function f76(a77, a78, a79, a80) {
    return arguments;
}
Math.atan2(257, 257);
