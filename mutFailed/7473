class C3 {
    static #c = 968392.4960140814;
    constructor(a5) {
        function f6(a7, a8) {
            a8 >>= a5;
            return 2.8066078111337447;
        }
        a5[Symbol.toPrimitive] = f6;
        do {
            try {
                ("b").#c;
            } catch(e16) {
            }
            a5++;
        } while ((() => {
                const o27 = {
                    valueOf() {
                        const o22 = {
                            "maxByteLength": 129,
                        };
                        const v24 = new SharedArrayBuffer(129, o22);
                        new Float32Array(v24);
                        return 968392.4960140814;
                    },
                };
                return 0 < 0;
            })())
    }
}
function f29(a30, a31) {
    const v33 = [];
    const v34 = [0n,0n,0n,0n];
    class C35 {
        constructor(a37, a38) {
            function F39(a41, a42) {
                if (!new.target) { throw 'must be called with new'; }
                const v43 = this?.constructor;
                try { new v43(v34, this); } catch (e) {}
                a42 ^ a42;
                this.b = v33;
            }
            new F39();
            new F39();
            new F39();
        }
    }
    new C35();
    return a31;
}
Object.defineProperty(C3, "toString", { writable: true, enumerable: true, value: f29 });
new C3(968392.4960140814);
new C3(C3);
const v52 = new C3("b");
/\xf0\x9f\x92\xa9/gvims;
const v54 = /6a*b?/gvi;
/B3a\n/gui;
new WeakSet();
const v60 = new Float64Array(16);
const v63 = new Int32Array(168);
v54[Uint8ClampedArray] = v52;
v60.byteLength |= 968392.4960140814;
new Uint8ClampedArray(168);
function f70() {
    return f70;
}
class C71 extends f70 {
    constructor(a73, a74, a75, a76) {
        super();
        function f77() {
            const v78 = [];
            v78[6] = v63;
            v78[6] = 4294967295;
            const o82 = {
                set b(a81) {
                },
            };
            return 4294967295;
        }
        for (let v83 = 0; v83 < 5; v83++) {
            f77();
            %OptimizeFunctionOnNextCall(C71);
        }
    }
}
new C71();
