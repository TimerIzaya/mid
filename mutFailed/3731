function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 257;
    } catch(e3) {
    }
    try {
        this.h = 257;
    } catch(e4) {
    }
    try {
        this.f = 257;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
new F0();
function F9(a11) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a11;
    } catch(e12) {
    }
}
new F9(v6);
const v14 = new F9(v7);
new F9(v7);
class C16 extends F0 {
    p(a18, a19, a20) {
        a18[3] = a20;
        for (let i22 = 0; i22 < 9; i22++) {
            try {
                v7.b = v7;
            } catch(e28) {
            }
        }
        return v14;
    }
}
new C16();
new C16();
new v6();
let v32 = 65535;
class C35 {
    10 = 268435456;
    static #valueOf(a37) {
        super.g %= 4096;
        this[268435456] = v32;
        super[a37] = a37;
        return super[this];
    }
    #h;
    static #p(a40, a41) {
        v32 = a41;
        a41 instanceof a41;
        try {
            super.toISOString(a40);
        } catch(e44) {
        }
        return a40;
    }
}
new C35();
new C35();
const v47 = new C35();
function F48(a50, a51) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a51;
    } catch(e52) {
    }
    try {
        const v53 = [];
        class C54 {
            constructor(a56, a57, a58) {
                function f59(a60, a61, a62) {
                    v53.copyWithin();
                    try {
                        f59(-268435456, 0.6683462416314783, [-268435456]);
                    } catch(e68) {
                    }
                    const v69 = this >> -268435456;
                    v69 >> this;
                    return -v69;
                }
                f59(this, this, a56);
            }
        }
        class C73 extends C54 {
        }
        new C73();
    } catch(e75) {
    }
}
new F48(v47, v47);
class C77 {
    set h(a79) {
    }
}
function f81(a82) {
    function f83(a84) {
    }
}
