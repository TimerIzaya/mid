function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = 16;
        function F3() {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C6 extends F3 {
        }
    } catch(e7) {
    }
    try {
        this.a = 16;
        try {
            this.b = F0;
        } catch(e8) {
        }
        let v9 = 522675525n;
        v9--;
    } catch(e11) {
        new Int16Array();
        function f14(a15, a16, a17, a18) {
            for (let [i23, i24] = (() => {
                    const v20 = 0 >>> a15;
                    return [0, v20 % v20];
                })();
                i23 < i24, a18;
                i24--) {
            }
            return f14;
        }
        e11(f14, f14, Int16Array, 16);
    }
    try {
        this.d = 16;
    } catch(e32) {
        F0.valueOf(e32, this, F0, this, e32);
        new Uint8ClampedArray([515943.2030917471,-1e-15,1.7976931348623157e+308,0.19475803117559898,-546414.0415788401,285129.04068811354]);
        const o40 = {
            ..."44184",
            [-15]: -15,
            2480: 9,
            ..."44184",
        };
        const o42 = {
            ...this,
        };
        function F43() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                new F43();
                /Ckza\Wb?/vis;
                /Ma\W+/gudm;
            } catch(e48) {
            }
        }
        new F0();
    }
}
const v50 = new F0();
const v51 = new F0();
const v52 = new F0();
class C53 {
    d;
    set f(a55) {
        new BigInt64Array(9);
        function f59(a60, a61) {
            function f63(a64) {
                return a60 ^ a61;
            }
            this.onmessage = a60;
            return this;
        }
        super.h = a55;
        new Uint8Array(360);
        new Uint8Array(1939);
        new Int16Array(902);
    }
    [v51];
}
new C53();
const v76 = new C53();
const v77 = new C53();
class C78 extends F0 {
    set g(a80) {
        a80[a80] = a80;
    }
    constructor(a82, a83, a84) {
        super();
        v76 >>> this;
        for (let v86 = 0; v86 < 32; v86++) {
            const v90 = new Uint16Array(256);
            function F91(a93, a94, a95, a96) {
                if (!new.target) { throw 'must be called with new'; }
                [586209.1308562411,9.273207833056233,-793.5051180378861,-88.02009084622205,1000.0,5.993768942190951e+307,0.6895260767593681,3.203916786355496,1.7976931348623157e+308,-1.0422896205696638e+308];
                a94 >> a94;
                a96 | a96;
                v50.dotAll = v50;
                function f100() {
                    return f100;
                }
                for (const v101 of v90) {
                    v86?.h;
                }
            }
            a82["p" + 256] = v86;
        }
        new a84(256);
        function f107() {
            v77[3] = Uint32Array;
            /xyz{1,32}?/gusy;
            class C110 {
                268435440 = a84;
            }
            const v112 = [65537,268435441,63298,-5,1235122603];
            function F113(a115, a116, a117, a118) {
                if (!new.target) { throw 'must be called with new'; }
                const v119 = this.constructor;
                let v120;
                try { v120 = new v119(1024, 1024, v112, this); } catch (e) {}
                a116.caller[1];
                this.c = a117;
                const v124 = [Reflect];
                const o125 = {
                    __proto__: v120,
                    "e": v124,
                };
                this.f = a116;
            }
            return "-26733";
        }
        f107();
        %OptimizeFunctionOnNextCall(v52);
    }
    static #h = v76;
    e;
}
const v127 = new C78(v51, C53, v52);
new C78(v50, v127, v51);
new F0(v76, v77, v51);
function F135(a137, a138) {
    if (!new.target) { throw 'must be called with new'; }
    const v139 = this.constructor;
    let v140;
    try { v140 = new v139(this); } catch (e) {}
    v140++;
    this.g = a137;
}
/4VL[a-zA-Z0-9]/uimy;
