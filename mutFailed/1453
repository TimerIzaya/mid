const v1 = new WeakMap();
class C2 extends WeakMap {
    valueOf(a4) {
        for (let i7 = 0, i8 = 10; i7 < i8; i7++, i8--) {
        }
        return this;
    }
}
try {
    C2.c = v1;
} catch(e19) {
}
-835067083 << C2;
WeakMap & -835067083;
Math.log10(v1);
const v25 = new C2();
const v26 = new C2();
const v27 = new C2();
class C28 extends WeakMap {
    #c = v27;
    constructor(a30, a31, a32, a33) {
        super(v26);
        [-9007199254740991];
        [4294967297,-9007199254740992,-56257,-65537,12,-19666,9007199254740990,-11,-4,-4607];
        [13,2147483648,2147483647];
        for (let v38 = 0; v38 < 32; v38++) {
            v25["p" + v38] = v38;
        }
    }
}
const v41 = new C28(C28, v26, v26, v25);
const v42 = new C28(v1, v41, C2, v25);
new C28(v27, v26, v42, WeakMap);
function F44(a46, a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = v27;
    } catch(e50) {
    }
}
const v51 = new F44(v27, v27, v41, v41);
new F44(v42, v41, v51, v27);
new F44(C28, C28, v27, C2);
const v55 = new Float64Array();
const v56 = v55.buffer;
try {
    v56.resize(Float64Array);
} catch(e58) {
}
