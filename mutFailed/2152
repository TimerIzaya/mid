class C3 {
    static #valueOf(a5, a6) {
        try {
            ("padEnd").#valueOf("e", this);
        } catch(e8) {
        }
        return this;
    }
    static 1;
    constructor(a10) {
        function f11(a12) {
            let [v13,v14] = a12;
            const o15 = {
            };
            try {
                o15.c = 836028.7999128257;
            } catch(e16) {
            }
            try {
                const o17 = {
                };
                o17.c = o17;
                o17.e = a10;
            } catch(e18) {
            }
            try {
                const o19 = {
                };
                o19.c = 836028.7999128257;
                o19.e = a10;
                o19.d = v14;
            } catch(e20) {
            }
            try {
                const o21 = {
                };
                o21.c = 836028.7999128257;
                o21.e = a10;
                o21.f = a10;
            } catch(e22) {
            }
            return a12;
        }
        f11(f11);
    }
}
new C3(C3);
const v25 = new C3(836028.7999128257);
new C3(C3);
function F33(a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        v25.d = v25;
    } catch(e38) {
    }
}
const v39 = new F33(2, -5.0, 15645);
const v40 = new F33(10, v39, 10);
new F33(2, 836028.7999128257, v40);
const v43 = Uint8ClampedArray.prototype;
try { v43.at(Uint8ClampedArray, Uint8ClampedArray, v43, Uint8ClampedArray); } catch (e) {}
