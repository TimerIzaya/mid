const v6 = /Vk/uisy;
const v7 = /d\x0fq(?:a+)?[\p{Script_Extensions=Mongolian}&&\p{Number}]+/gum;
const v8 = /Jz[\1111]Nfoo[z]*/gimsy;
const v10 = ("X").__proto__;
let v14;
try { v14 = v10(127, -31074n, v7, 129, 129); } catch (e) {}
const v16 = new Int16Array(127);
v8[44625n] ||= 2;
v7[1073741825n] = 127;
let v19;
try { v19 = new v10(44625n, -2, 129, 129, v10, v14); } catch (e) {}
v16[v8];
const v22 = new Float64Array(2);
new Uint16Array(11);
class C26 {
}
try { v8.test("iterator"); } catch (e) {}
const o30 = {
    "maxByteLength": 3391,
};
const v32 = new SharedArrayBuffer(3391, o30);
const v34 = new Float64Array(v32);
const v35 = new C26();
const v36 = v35.__lookupGetter__;
let v37;
try { v37 = new v36(C26); } catch (e) {}
const v38 = [-3.0,4.0,1.7381830731777672e+308,-Infinity,0.053627216611518036];
v38.toLocaleString(v37, v38, v38, "iterator");
for (let [i51, i52] = (() => {
        var f = v37;
        try { new v37(..."X", ..."X", undefined, ...2, ..."X", v32); } catch (e) {}
        try { v6.exec("X"); } catch (e) {}
        const o44 = {
            "maxByteLength": 65537,
        };
        const v46 = new ArrayBuffer(512, o44);
        new Uint32Array(v46);
        return [0, 10];
    })();
    (() => {
        const v53 = i51 >> i51;
        i52 > i52;
        const v55 = i51 < i52;
        v55 | i52;
        v19[i52] = v35;
        v34[4];
        i52 = v53;
        const o58 = {
        };
        new Proxy(v22, o58);
        return v55;
    })();
    i51++) {
}
