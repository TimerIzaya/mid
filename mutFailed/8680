new Int32Array(14);
new Int32Array(255);
new Int32Array(15);
new Int32Array(255);
new BigUint64Array(3836);
const v17 = new Uint16Array(64);
class C19 {
    static #o() {
        const v21 = [-2147483648,-46456,1200954989,-4294967296,1];
        const v22 = [10,-13,-4294967297,-11,984,9,-24883,1024,5,10];
        const v23 = [23955,1426598775,2147483649];
        try {
            v22.#o(v22, v23, null, v22, v21);
        } catch(e25) {
        }
        return null;
    }
    #p() {
        const v27 = this[223];
        const v28 = super.g;
        let v29;
        try { v29 = v27.p(this, v28, v28, v28); } catch (e) {}
        this[null] = v29;
        new Map();
        return v28;
    }
}
const v32 = new C19();
const v33 = new C19();
new C19();
class C35 {
    p(a37) {
        const v38 = null - a37;
        %VerifyType(v32);
        super[v32] = v38;
        a37?.[1858] ^ v38;
        for (let i43 = 0; i43 < 7; i43++) {
            try { v33.valueOf(i43, a37, v32, i43, i43); } catch (e) {}
        }
        const v54 = new BigUint64Array();
        v54.buffer.slice();
        Math.cos(Math);
        return C19;
    }
}
const v59 = new C35();
const v60 = new C35();
const v61 = new C35();
let v64 = -1024;
function F65(a67, a68, a69, a70) {
    if (!new.target) { throw 'must be called with new'; }
    this.e = this;
    this.e = a69;
    try {
        this.f = C19;
    } catch(e71) {
    }
    try {
        this.e = v61;
    } catch(e72) {
    }
    try {
        this.a = a68;
    } catch(e73) {
    }
}
new F65(38767, v59, v32, v33);
new F65(38767, v61, C35, v59);
const v76 = new F65(v64, v60, v32, C19);
const v77 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v78 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
new Uint32Array(v77, 0, 0);
function F84(a86, a87) {
    if (!new.target) { throw 'must be called with new'; }
}
const v88 = new F84(v78, 0);
function f89(a90, a91) {
    const v93 = [a91];
    Reflect.apply(v17.toSorted, a90, v93);
    return v76;
}
v88[Symbol.toPrimitive] = f89;
new F84();
class C100 {
}
let v102 = 0;
while (v102 < 3) {
    const v106 = Symbol.iterator;
    const o115 = {
        [v106]() {
            let v108 = 10;
            const o114 = {
                next() {
                    v108--;
                    const v112 = v108 == 0;
                    const o113 = {
                        "done": v112,
                        "value": v108,
                    };
                    return o113;
                },
            };
            return o114;
        },
    };
    v102++;
}
const o121 = {
    valueOf() {
        return "D2z";
    },
};
const v123 = /5*/gi;
const v124 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v125 = [601759695];
const v126 = [1073741824,1073741823,1376142744,1073741825];
const t116 = "b";
t116.e = "B";
function f129(a130, a131, a132, a133) {
    function f134() {
        let v137 = Float64Array;
        v137 = a131;
        b = v125;
        const v138 = v77.length;
        try {
            v77.forEach(v137);
        } catch(e140) {
        }
        const v141 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        let v143 = Symbol.toPrimitive;
        const o161 = {
            toString(a145, a146) {
                const v147 = a133 && v137;
                function f148() {
                    a145 *= v143;
                    return v137;
                }
                f134();
                Symbol("D2z");
                new Uint16Array(6);
                new Float32Array(0);
                new Int32Array(153);
                return v147 <= v141;
            },
        };
        const o185 = {
            "c": -4294967297n,
            [522675525n](a164, a165) {
            },
            "c": v125,
            valueOf(a167, a168) {
                return this;
            },
            "b": -4294967295,
            [-4294967297n](a170, a171, a172, a173) {
                [-1.7976931348623157e+308,-4.047862669744725e+307,-2.2250738585072014e-308,0.790769162254034,0.024752255798642486,640440.6769019293,-2.0];
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v124,
            ...v76,
            [v143]() {
                const o177 = {
                    next() {
                        return v123;
                    },
                };
            },
            "type": C100,
            ..."Vre",
            valueOf(a179, a180) {
                return a180;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a182, a183, a184) {
            },
            5: -4294967295,
            6: -268435456,
        };
        v143 = v137;
        new Float32Array(1334);
        v64 %= -268435456;
        new Uint32Array(v78, v138, v143);
        v88 - f134;
        new Float64Array(3);
        new Uint16Array(2);
    }
    function f200(a201) {
        function F202(a204, a205) {
            if (!new.target) { throw 'must be called with new'; }
            const v206 = this.constructor;
            v206.caller;
            try { new v206(this, F202, F202); } catch (e) {}
        }
        return a133;
    }
    f134[Symbol.toPrimitive] = f200;
    f134();
    new Int8Array();
    %OptimizeFunctionOnNextCall(f134);
    try { v126["find"]("find", a133, v125, v126, 522675525n); } catch (e) {}
}
for (let v216 = 0; v216 < 10; v216++) {
    f129();
}
%OptimizeFunctionOnNextCall(f129);
f129();
