const v2 = new Float32Array(8);
try {
    v2.length = 8;
} catch(e5) {
}
let v6;
try { v6 = v2(8, BigInt64Array, BigInt64Array, Float32Array); } catch (e) {}
const v7 = new BigInt64Array(8);
let v12 = new Uint8Array(1024);
(8).reverse();
("async").toUpperCase();
new Int8Array(140);
[-43195,-2081];
[-12,-1440295093,-256,55147];
("I").localeCompare();
function F21(a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
}
let v27 = new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
[-128,-698207557,64790];
-Infinity;
({"buffer":v12,"length":v27,} = v7);
const o34 = {
    "execution": "async",
    "type": "minor",
};
const v35 = gc(o34);
const o39 = {
    "f": "k",
    get f() {
        return this;
    },
    "d": F21,
    "e": F21,
    "h": v35,
    "a": v2,
    [v6]: o34,
};
Math.tan(-532550611);
