new WeakMap();
const v2 = [-4294967296,10000,-56108,-2147483649];
const v3 = [-1024,-63037,16];
const v4 = [847614055,-15451,4,2100788319,-2];
class C8 extends WeakMap {
    static c = v2;
    valueOf(a10, a11, a12) {
        return 3;
    }
    constructor(a17, a18, a19, a20) {
        super(v2);
        this[3] = 9007199254740990;
        super.b;
        a20[Symbol.unscopables] = a19;
    }
}
new C8(9007199254740990, -9007199254740992, -9007199254740992, v2);
new C8(-15, -15, 9007199254740990, v3);
new C8(-15, 9007199254740990, -15, v4);
function f30() {
}
function f31() {
    return f30;
}
-520531413 >> -520531413;
-65536n + -65536n;
Map.prototype;
const v42 = new Map();
try { v42.set(Map, 512n); } catch (e) {}
try { new BigInt64Array(-9513n, f30, -9513n); } catch (e) {}
const v47 = new BigInt64Array(0);
let v48 = 1024;
let v49 = v48--;
v49++;
try { Int32Array.from(-65536n); } catch (e) {}
new Int32Array(v48);
const v55 = -9513n != 1;
v55 || v55;
if (v55) {
    try {
        new BigInt64Array(127);
    } catch(e59) {
    }
} else {
    var h = v55;
}
5 ^ 5;
const v66 = new BigUint64Array(5);
let v67;
try { v67 = v66.join(v48); } catch (e) {}
try { v67.replace(Int32Array, f30); } catch (e) {}
Int32Array.length;
-f30;
try {
    v47.f = 0;
} catch(e73) {
}
const v74 = new Int32Array(1);
const v75 = v74[0];
v74[0] = v74;
new Int8Array(12);
const v79 = [1.5194593916452507e+308,1.7976931348623157e+308,-655.2599062195703,383261.13963534124,-4.351354601083372];
const v80 = [-3.0767450746058422,-109930.30079491576,1.0710997738525917e+308,1e-15,-4.4029859309287245,1.2647620628346297e+308,0.6128308590917888,-1000000.0,-9.043256096114051];
const v81 = [547.1067310983665,-3.0,NaN,222205.6815515987,2.2250738585072014e-308];
try { v81.join(-65536n); } catch (e) {}
function F83(a85, a86, a87) {
    if (!new.target) { throw 'must be called with new'; }
    const v88 = this?.__lookupGetter__;
    try { new v88(12); } catch (e) {}
    a86 + a86;
    try { a87.find(a85); } catch (e) {}
    try {
        this.d = a85;
    } catch(e92) {
    }
    try {
        this.b = a87;
    } catch(e93) {
    }
}
const v94 = F83?.constructor;
v94.length = v94;
try { new v94(12); } catch (e) {}
v75.arguments;
new F83(Int32Array, 12, v80);
const v98 = new F83(v80, 5, v81);
v98.length;
const v100 = new F83(v79, v75, v79);
v100[65536];
const o103 = {
};
for (let v104 = 0; v104 < 25; v104++) {
}
