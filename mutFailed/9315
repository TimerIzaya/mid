new Int16Array(10);
let v3 = 1000;
v3--;
Uint16Array.BYTES_PER_ELEMENT = Uint16Array;
new Uint16Array(v3);
const v9 = new Uint8ClampedArray(Uint8ClampedArray, Uint8ClampedArray);
let v12 = v9 & -2;
v12++;
Math.acosh(v12);
const v17 = new Uint32Array();
const v19 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const o39 = {
    valueOf(a21, a22) {
    },
    1073741824: v17,
    [-4294967297n](a24, a25, a26, a27) {
        class C29 extends Date {
            static get c() {
            }
        }
        eval();
        class C33 {
            constructor(a35, a36, a37, a38) {
            }
        }
    },
    "arguments": v19,
};
new Uint16Array(549);
let v41 = -11n;
v41++;
class C46 {
    #d = 4096;
    static {
        try { this.toString(); } catch (e) {}
        try {
            this.#d;
        } catch(e50) {
            const v51 = e50?.constructor;
            try { new v51(e50); } catch (e) {}
        }
        ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).length;
        ([-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0]).forEach(Float64Array);
    }
}
