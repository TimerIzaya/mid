function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    function f7() {
        try { ("NFKD").localeCompare(this); } catch (e) {}
    }
    Object.defineProperty(this, Symbol.toPrimitive, { writable: true, value: f7 });
}
const t7 = "-6889";
const v12 = new t7(F3, F3);
class C13 {
    static [v12];
}
const v14 = ["undefined","cause"];
const v15 = [v14];
[v15,"cause",v15];
new Uint8ClampedArray(64);
const v23 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
new Date(-2, v23, v23, v23, -2);
function F29(a31) {
    if (!new.target) { throw 'must be called with new'; }
    a31 | a31;
    const v33 = v15?.constructor;
    try { new v33(3n); } catch (e) {}
}
new Uint32Array(5);
new v15(257);
F29++;
class C44 {
}
Array(5);
new BigUint64Array(1000);
new C13(1884);
new Uint8ClampedArray(1747);
for (const v54 in Uint8ClampedArray) {
    Object.defineProperty(v14, "a", { writable: true, configurable: true, enumerable: true, value: v54 });
    let [v55,,...v56] = "cause";
}
function F59() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v61 = 0; v61 < 50; v61++) {
        v61 << v61;
        for (let v63 = 0; v63 < 25; v63++) {
            this["p" + v63] = v63;
        }
    }
}
const t46 = 0.0;
new t46(2967);
function f67() {
    return f67;
}
const o69 = {
};
const o70 = {
};
Reflect.apply(f67, o69, o70);
