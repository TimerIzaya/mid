const v0 = [0.5374995033041429,-342.54458736226616];
const v1 = [226844.72767377296,-2.0,-69002.1440291577,0.8643819437007656,-1000.0];
const v2 = [-1000000.0,-Infinity,384225.6955911203,1000000.0,773.914490773768];
class C3 {
    [v2] = v0;
    constructor(a5, a6) {
        const v7 = a5?.copyWithin;
        try { new v7(v2, C3); } catch (e) {}
        const v9 = delete a6[3];
        v1 ^ v9;
        let v11 = 0;
        while ((() => {
                const v13 = v11 < 9;
                !v13;
                return v13;
            })()) {
            let v15;
            try { v15 = this.n(v9); } catch (e) {}
            a6[4] = v15;
            v11++;
        }
    }
}
const v17 = new C3(v1, v2);
v17?.constructor;
try { new C3(v1, v2); } catch (e) {}
new C3(v2, v0);
const v21 = new C3(v0, v0);
const v22 = v21?.__defineGetter__;
try { new v22(v17, C3); } catch (e) {}
795 + 795;
new BigInt64Array(BigInt64Array);
new Uint8Array(4);
new Float64Array(2);
-2931;
new BigInt64Array();
const v40 = new Int32Array(v22);
try { C3.includes(v21); } catch (e) {}
v40 instanceof BigInt64Array;
let v44 = gc;
v44.length;
Float64Array();
const v47 = ("object").trim();
try { v47.toUpperCase(); } catch (e) {}
v44 /= v1;
