const v0 = [5.35746808660485,-1.7976931348623157e+308,317516.4837726976,-2.2250738585072014e-308,1.2196036066598688e+308,0.6009738789944646,-0.0,1000000000.0];
const v1 = [-176.59508610909302,0.5858117048080085,5.496619191914988,3.0,4.0,NaN];
const v2 = [0.8364490213806594,4.849865953089623,1.2073764879561731e+308,-715.2245930501108,0.7886171265444225,-660.5788183525103,-0.4307076524016935,2.0];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = a5;
    } catch(e6) {
    }
    try {
        this.d = a5;
    } catch(e7) {
    }
    const v8 = a5 !== v1;
    if (v8) {
        Object.defineProperty(v1, v8, { enumerable: true, value: v2 });
        [] = v2;
    } else {
        function f9() {
            return v0;
        }
    }
    try {
        this.g = v2;
    } catch(e10) {
    }
}
new F3(v0);
new F3(v0);
const v13 = new F3(v0);
class C17 {
    static #h = v13;
    #toString(a19, a20, a21, a22) {
        try {
            v13.d = a21;
        } catch(e23) {
        }
        return a21;
    }
    constructor(a25, a26) {
        for (let v27 = 0; v27 < 32; v27++) {
            this["p" + v27] = v27;
        }
        try {
            a26.a = F3;
            try {
                new F3(a25);
            } catch(e31) {
            }
            function F32(a34, a35) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.f = a35;
                } catch(e36) {
                }
            }
            new F32(3, v0);
            const v38 = new F32(F32, v2);
            new F32(v38, v2);
        } catch(e40) {
        }
    }
}
v2[C17];
throw v13;
let {"length":v43,} = v2;
delete this[v0];
new C17(3, v0);
new C17(3, v2);
new C17(17657, v1);
function F50(a52, a53, a54, a55) {
    if (!new.target) { throw 'must be called with new'; }
    const v56 = this.constructor;
    try { new v56(this, a55, this); } catch (e) {}
    a54++;
    a54 >>>= F50;
    const v61 = Int32Array - 127;
    v61 / 127;
    Math.atan2(v61, v61);
}
new F50();
new F50();
const v66 = new Int32Array(8);
try { Uint32Array.apply(v66, v66); } catch (e) {}
