const v2 = new Uint32Array(16);
const v5 = new BigInt64Array(BigInt64Array);
new BigUint64Array(5);
const v9 = [BigUint64Array,v2];
const v10 = [v2];
const v11 = [5,v5,BigUint64Array,v2,v10];
class C12 {
    #c = 16;
    #e = BigUint64Array;
    static set b(a14) {
        [536870887,16,-11,10,255,11,1044435289,15748,10,9007199254740990];
        [0,5144,-3,9,6024];
        [268435440,755308302,-12,9007199254740992];
    }
    #d = 5;
    [v10];
    b;
    h = Uint32Array;
    static 65536;
    constructor(a19, a20, a21) {
        function f22(a23, a24, a25) {
            a19 || -1000000.0;
            const v30 = a23 == -1000000.0;
            const v31 = v9.copyWithin(v30, v30, -268435456, a20);
            try {
                f22(-268435456, 0.6683462416314783, [0.6683462416314783,v5,65,v31,a21]);
            } catch(e35) {
            }
            const v36 = this >> -268435456;
            v36 >> this;
            a19 & v36;
            return -v36;
        }
        function F40() {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v42 = new F40();
        class C43 extends F40 {
            [v42];
        }
        f22(a21, a20, v10);
    }
}
new C12(v11, 5, v10);
gc();
class C48 extends C12 {
    #c;
}
new C48();
new C48();
new C48();
5.0 / -2.220446049250313e-16;
new C12(v11, 5, v10);
new C12(v10, 5, v10);
new Int8Array(5);
const v64 = new BigUint64Array(127);
(141276884)[v64];
Math.sin();
324308659 + 324308659;
