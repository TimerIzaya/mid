const v0 = [9007199254740992,17460];
[-268435456,549937919,-275920587,11,-710178149,268435440,63483,-431966318];
const v2 = [268435441,-1,-4294967295,1073741824,-2,8];
const v6 = -771.3480309526668 !== -771.3480309526668;
v6 && v6;
const v8 = [-1000000000.0];
try { v8.concat(v6); } catch (e) {}
let v10;
try { v10 = v8.reduce(0.7151532831541925); } catch (e) {}
const v11 = [-1000.0,0.4205538460758965,5.0,88.73273771999698,-2.0];
const v12 = v11?.constructor;
try { new v12(-527.6416640676528); } catch (e) {}
v11[1] = v11;
const v14 = [1000000000000.0,2.3002344432906305,-213105.61085651058,-1.7047379280193912e+308,1e-15,8.250734408482959,-2.2250738585072014e-308,314.78920996962165,995.0210868877302];
try { v14.toLocaleString(); } catch (e) {}
const v16 = v14[7];
function f17(a18, a19, a20, a21) {
    a20[5] = a20;
    const o26 = {
        [a18](a23, a24) {
            try {
                a23.length = a18;
            } catch(e25) {
            }
            return a20;
        },
        9: a20,
        "d": a20,
        [v8]: -771.3480309526668,
        "g": a19,
    };
    o26.g < v10;
    return o26;
}
try { f17(v10, v10, 0.7151532831541925, v10); } catch (e) {}
f17(0.7151532831541925, -771.3480309526668, v14, -771.3480309526668);
f17(v11, -527.6416640676528, v2, -771.3480309526668);
f17(v14, -527.6416640676528, v0, -771.3480309526668);
const v33 = [-6.672391061426152e+307];
function f35() {
    let v36 = 8n;
    v36++;
    const v39 = [v36] > v36;
    try { ("pop").codePointAt(v16); } catch (e) {}
    const v42 = v33["pop"]();
    v42 | v42;
    const v44 = v42 % v42;
    v44 * v44;
    const v46 = ~v42;
    v46 >>> v46;
    let v48 = 0;
    1814769353 <= 1814769353;
    const o52 = {
        "maxByteLength": v46,
    };
    const v54 = new SharedArrayBuffer(12, o52);
    v10.growable;
    try { v54.grow(-10); } catch (e) {}
    Uint32Array.e = Uint32Array;
    while ((() => {
            const v59 = v48 < 10;
            v59 && v59;
            const v61 = !v59;
            v61 || v59;
            return v61;
        })()) {
        for (let v63 = 0; v63 < 5; v63++) {
            "n" + v63;
        }
        v48++;
    }
    return v39;
}
%PrepareFunctionForOptimization(f35);
const v67 = f35();
!(v67 && v67);
%OptimizeFunctionOnNextCall(f35);
f35();
