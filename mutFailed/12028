const v2 = new BigUint64Array(255);
const v5 = new Int32Array(8);
const v8 = new Uint32Array(53);
function f9(a10, a11, a12) {
    const o41 = {
        3: a11,
        set b(a14) {
            a12[Int32Array] = a10;
            h = a14;
            const o17 = {
                "maxByteLength": 127,
            };
            const v19 = new ArrayBuffer(2, o17);
            new Uint32Array(v19);
            o17[255];
            v8[Symbol.matchAll];
            2 < 127 ? 2 : 127;
        },
        __proto__: v2,
        "d": a10,
        "e": v2,
        get f() {
            let v33;
            try { v33 = this["n"](BigUint64Array); } catch (e) {}
            new BigUint64Array(this, v33, a10);
            v5.buffer;
            try {
                this.fuck(true, /(\2)(\1)/gudis, -1000.0, v5);
            } catch(e40) {
            }
            return v33;
        },
    };
    return o41;
}
f9(8, 8, 8);
const v43 = f9(53, 53, 53);
f9(53, 255, 8);
function f45() {
    return 53;
}
class C46 extends f45 {
    static get e() {
        const v48 = super.c;
        Object.defineProperty(v5, "buffer", { writable: true, get: f9, set: f45 });
        const o52 = {
            "execution": "async",
            "type": "minor",
        };
        for (const v53 in v48) {
            Object.defineProperty(v2, "minor", { value: "minor" });
            try { v2.filter(gc, v5); } catch (e) {}
        }
        typeof v8 === "bigint";
        gc(o52);
        return o52;
    }
    static #h;
    [v43];
}
new C46();
new C46();
new C46();
function F62() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v64 = 0; v64 < 500; v64++) {
        const v66 = ("p").localeCompare();
        ("p" + v64).fontcolor(v64, v66, F62).trimLeft()[12].substring(F62, this);
    }
}
new F62();
new F62();
