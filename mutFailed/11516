let v1 = "growable";
class C3 {
    static {
        const o8 = {
            "execution": "5nb",
            "type": "minor",
        };
        gc(o8);
    }
    static ["5nb"];
}
new C3();
new C3();
const v12 = new C3();
new Set();
function f18() {
    const o39 = {
        valueOf(a23) {
            let v24;
            try { v24 = ("split").padEnd(a23, a23); } catch (e) {}
            function f25(a26, a27) {
                v24.g = f18;
                return v12;
            }
            try {
            } catch(e28) {
                const v30 = Symbol.isConcatSpreadable;
                try { e28(v30); } catch (e) {}
            }
            function f38() {
                return a23;
            }
            return f18;
        },
    };
    return f18;
}
if ("5nb" != v12) {
    /foo|(bar|baz)|quuxa{0,1}?/gdmsy;
    /\u0060/gvdim;
    /^xxx$/vdsy;
} else {
}
f18();
const v48 = v12();
const t43 = -0.0;
const v49 = t43();
const v53 = -v12;
f18();
++v1;
v53[v53];
c = 536870888;
/(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10[Ca\nb\bc?]/vim ^ v12;
try {
    new v48();
} catch(e60) {
}
try {
    v49.length = 10000;
} catch(e62) {
}
