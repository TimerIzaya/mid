class C3 {
    constructor(a5) {
        const o8 = {
            "maxByteLength": 1043,
        };
        const v10 = new SharedArrayBuffer(1043, o8);
        const o14 = {
            "execution": "async",
            "type": "major",
        };
        -1.0 !== o14 ? -1.0 : o14;
        new Int32Array(v10);
    }
    c = -5.758441300358994;
    g;
    static f = -5.758441300358994;
    a;
}
const v18 = new C3(9007199254740991);
const v20 = ~-4294967295;
function f21() {
    function F22(a24) {
        if (!new.target) { throw 'must be called with new'; }
        const v25 = this.constructor;
        try { new v25(); } catch (e) {}
    }
    class C27 extends F22 {
        #p(a29, a30) {
        }
    }
    try { new C27(); } catch (e) {}
    return f21;
}
const v32 = new C3(-1.0);
const v33 = new C3(-5.758441300358994);
const v34 = [268435456,-1496765071];
const v35 = [1,1073741823,536870887,11766,-23568,-2,9007199254740991];
const v36 = [-8,-2147483647,-1579620778,43832,-1024,9,-4294967295];
function f37(a38, a39, a40, a41) {
    const o56 = {
        get a() {
            Math.cos(a40);
            !(~a40);
            Math.sign(a38);
            return a40 | !-6;
        },
        ...a38,
        ...a38,
        "d": a40,
        "b": a40,
        n(a53, a54) {
            return v20;
        },
        [f21]() {
        },
    };
    return o56;
}
f37(v36, v32, v18, v35);
const v58 = f37(v35, v32, v18, v34);
const v59 = f37(v35, v33, v33, v36);
class C60 extends f37 {
    n(a62, a63) {
        function F64(a66, a67, a68, a69) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.a = v32;
            } catch(e70) {
                new Uint8Array(1024);
                function f74() {
                    const o78 = {
                        valueOf(a76, a77) {
                            return f74;
                        },
                    };
                    try {
                        f74();
                    } catch(e80) {
                    }
                }
            }
            try {
                this.h = C3;
            } catch(e81) {
            }
            try {
                this.e = a63;
            } catch(e82) {
            }
        }
        new F64(9007199254740991, v59, v59, v36);
        const v84 = new F64(f37, v59, v58, v34);
        const v85 = new F64(v84, v59, this, v36);
        return v85;
    }
}
new C60();
new C60();
new C60();
const v89 = /(J5a{0,1}?)/y;
class C90 {
    static {
        for (let v92 = 0; v92 < 25; v92++) {
            let v93 = [601759695];
            const v94 = [1073741824,1073741823,1376142744,1073741825];
            function f95(a96, a97, a98, a99) {
                ~a97;
                try { a96(); } catch (e) {}
                const v102 = a98 << a98;
                v102 % v102;
                function f104() {
                    return a96;
                }
                const v106 = new Int8Array();
                BigUint64Array.length;
                const v110 = BigUint64Array * 536870887;
                let v111 = v110 - v110;
                v111++;
                const o113 = {
                };
                let v114 = 1073741825;
                v114++;
                let v116 = -7;
                v116--;
                const v118 = v110 ** v110;
                try { Number(v89); } catch (e) {}
                Number.isNaN(v118);
                const v123 = v106.buffer.__defineGetter__;
                try { v123(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f104);
                let v126;
                try { v126 = v94["find"](..."find", a99, ...v93); } catch (e) {}
                return v126;
            }
            v93++;
            class C129 {
                toString(a131, a132, a133, a134) {
                    let [] = "undefined";
                }
            }
            for (let v135 = 0; v135 < 5; v135++) {
                f95(this, v135);
            }
        }
    }
}
