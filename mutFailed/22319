function f0() {
}
const v1 = [f0];
const v2 = [v1,f0,v1,f0,f0];
let v3 = [v1];
function f4(a5) {
    a5.e = a5;
    const o13 = {
        "f": v1,
        [a5](a7) {
            v3 = a7;
            try { new a5(v1, f0, v1); } catch (e) {}
            v1 ^ v3;
            [-3.2399370961647778,1.7976931348623157e+308,-2.220446049250313e-16,1.521135091118853e+308,1.0,-1.7358397430598513e+308,0.0708422145821106,0.0];
            [1e-15,-211.21765807276938,-1.191226731707072e+308,984257.604518705,-1000000000.0];
            [Infinity,872.7291708873984];
            return v3;
        },
    };
    return o13;
}
const v14 = f4(f4);
v14.g = v14;
const v15 = f4(v2);
const v16 = f4(v15);
v16.f = v16;
const v20 = [];
function f21() {
    const o22 = {
        ...v20,
        "c": v20,
        "e": v20,
        "f": v20,
        "arguments": v20,
        __proto__: f21,
    };
    v20.e = o22;
    15 !== 15;
    const v26 = 15 == 4096n;
    v26 && v26;
    const v30 = new Int32Array(1024);
    for (const v31 of v30) {
        v31 !== v31;
        const o35 = {
            "maxByteLength": 1293466293,
        };
        let v36 = 1796;
        v36--;
        const v38 = new RegExp(v36, o35);
        const v39 = v38?.constructor;
        try { new v39(v36); } catch (e) {}
    }
    return v20;
}
const v41 = f21(v15);
try { v41.findIndex(v3); } catch (e) {}
f21(2.0);
f21();
