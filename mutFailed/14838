new Float64Array(835);
const v5 = new BigInt64Array(1512);
new Uint16Array(10);
let v10 = -1024;
function F11(a13, a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
}
const v17 = new F11();
const v18 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v19 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
class C21 {
}
const v22 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v23 = [601759695];
for (let v24 = 0; v24 < 5; v24++) {
    function f25() {
        Array().unshift();
        try {
            v18.forEach(v24);
        } catch(e31) {
        }
        const o33 = {
            "c": v23,
            "arguments": v22,
            ...v17,
            "type": C21,
        };
        const v35 = [];
        function F36(a38) {
            if (!new.target) { throw 'must be called with new'; }
        }
        class C39 extends F36 {
            valueOf(a41, a42, a43, a44) {
                super[this] = F36;
            }
        }
        const v45 = new C39();
        const o52 = {
            set g(a47) {
            },
            [v35](a49, a50, a51) {
            },
        };
        for (const v53 in o52) {
            try { v45.valueOf(v53); } catch (e) {}
        }
        const v57 = [];
        const v58 = [-2.0,C21,"function"];
        const o59 = {
            __proto__: v58,
        };
        v57[o59] &= 272822757;
        v10 %= -268435456;
        new Uint32Array(v19);
    }
    v5();
    %OptimizeFunctionOnNextCall(f25);
}
