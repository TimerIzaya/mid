const v1 = new Set();
function f2(a3) {
    const o11 = {
        "a": v1,
        o(a5, a6) {
            const v7 = super[a3];
            for (let v8 = 0; v8 < 32; v8++) {
                a3["p" + v8] = v8;
            }
            return v7;
        },
        ...v1,
    };
    return o11;
}
f2(v1);
f2(f2);
f2(Set);
let v15 = 420;
v15++;
const v18 = new Uint32Array(v15);
v18.g = v18;
const v21 = new Int32Array(2057);
v21[1698] = v21;
Int8Array.e = Int8Array;
const v24 = new Int8Array(260);
const o29 = {
};
o29.h = o29;
const v31 = !o29;
let v32 = 1842642860 % v31;
v32++;
v32 % v32;
const v35 = new WeakMap();
try { v35.has(v35); } catch (e) {}
try { v35.delete(v31); } catch (e) {}
try { ("998423439").substring(v24, v24); } catch (e) {}
try { ("boolean").slice(o29, Int8Array); } catch (e) {}
class C42 {
    static {
        try { new this(); } catch (e) {}
        try {
        const t0 = "boolean";
        t0(this);
        } catch (e) {}
    }
}
let v46;
try { v46 = new C42(); } catch (e) {}
const v47 = v46?.constructor;
try { new v47(); } catch (e) {}
try { ("isInteger").strike(); } catch (e) {}
const v51 = ("isInteger")?.replaceAll;
-(-1000000.0);
const v59 = [-2147483647,64098,-9383,1024,129,-5];
[1000,-16,-38597,12,-3399,32508];
const v61 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
v61[3] = v61;
const v63 = new Uint32Array();
-4294967297n >> -4294967297n;
const v66 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v67 = [601759695];
const v68 = [1073741824,1073741823,1376142744,1073741825];
function f70(a71, a72, a73, a74) {
    const v76 = arguments?.constructor;
    try { new v76(a72); } catch (e) {}
    function f78() {
        let v81 = Float64Array;
        v81 = a72;
        b = v67;
        v61.length;
        try {
            v68.forEach(a72);
        } catch(e84) {
            e84.e = e84;
        }
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const o86 = {
        };
        o86.b = o86;
        const o101 = {
            "c": -4294967297n,
            "c": v67,
            valueOf(a89, a90) {
            },
            1073741824: v63,
            "maxByteLength": -268435456,
            "b": -4294967295,
            [-4294967297n](a92, a93, a94, a95) {
                class C97 extends Date {
                    static get c() {
                    }
                }
                eval();
            },
            "e": -4294967295,
            "e": -268435456,
            "arguments": v66,
            256: a74,
            "type": "Vre",
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            6: -268435456,
        };
    }
    f78();
    const v104 = new Int8Array();
    const v105 = v104.buffer;
    try { v105.slice(v104, v104); } catch (e) {}
    2147483648 * 2147483648;
    v105.slice(2147483648);
    const v112 = new Int32Array(1024);
    v112[487] = v112;
    v112[3];
    for (let v114 = 0; v114 < 10; v114++) {
    }
    %OptimizeFunctionOnNextCall(f78);
    let v116;
    try { v116 = v68["find"](..."find", a74, ...v67, ...v68, ...522675525n); } catch (e) {}
    v116 <= a73;
    return arguments;
}
for (let v118 = 0; v118 < 10; v118++) {
    f70();
}
%OptimizeFunctionOnNextCall(f70);
const v120 = f70();
try { v120.callee(v120, 260, Int8Array, v120); } catch (e) {}
[-50328,-14,3,128,-11,64,-65535];
class C123 {
    [v59] = -1000000.0;
    constructor(a125, a126, a127, a128) {
        this.c;
        a125++;
        a126 + a126;
        a127 & a127;
        %VerifyType(a128);
        super[this];
    }
    g;
    c;
    #toString(a135, a136, a137) {
    }
    1 = 257n;
}
new C123(1073741825n, 1.0, 7.589647165982214);
const v139 = new C123(411585671n, -1000000.0, -1000000.0, 1.0);
new C123(v139, -1000000.0, 1.0);
const v141 = /(?:a*)+bU\u0034xyz{1,32}/udi;
v141.c = v141;
/vfoo|(bar|baz)|quux/gvds;
/JO/gvy;
class C146 {
    #m(a148, a149) {
        function f150() {
            return a149;
        }
        super[a149] = "f";
        %VerifyType(a149);
        return f150;
    }
    static c;
}
C146.prototype = C146;
try { C146(); } catch (e) {}
const v152 = new C146();
const v153 = v152?.constructor;
try { new v153(); } catch (e) {}
const v155 = new C146();
const v156 = v155?.constructor;
try { new v156(); } catch (e) {}
const v158 = v155?.constructor;
const v159 = new C146();
const v160 = v159?.constructor;
v160.g = v160;
class C161 {
    p(a163) {
        this.g ^= this[8];
    }
    static #n(a166, a167, a168, a169) {
    }
    7 = v159;
    #a = v155;
}
try { new C161(); } catch (e) {}
const v171 = new C161();
v171[7] = v171;
v171[7] = v171;
const v172 = new C161();
v172[7] = v172;
const v174 = [[],"f",v159,381717.6504737276];
v174[0];
[v152];
function F177() {
    if (!new.target) { throw 'must be called with new'; }
    const v179 = this?.constructor;
    try { new v179(); } catch (e) {}
    try { this.propertyIsEnumerable(); } catch (e) {}
}
const v182 = new F177();
const v183 = v182?.__lookupSetter__;
try { new v183(v182); } catch (e) {}
const v185 = new F177();
function F186(a188, a189) {
    if (!new.target) { throw 'must be called with new'; }
    const v190 = this?.__defineGetter__;
    try { new v190(v158, a188); } catch (e) {}
    const v192 = a189?.__lookupGetter__;
    try { v192(); } catch (e) {}
    try { this.constructor(F186, this); } catch (e) {}
    a188.e = a188;
}
F186.arguments = F186;
new F186(v185);
("Hyo9")[1];
"at" == "at";
const t217 = "at";
t217[1] = "at";
const v201 = ([1000000000000.0,-554312.8659911777,-85520.97552967619,116.33808524187589,-1.4876365942841e+308,-4.0,-1.0,643243.7601277845,0.5743499435706315,4.0])?.groupToMap;
try { v201(C161); } catch (e) {}
const v203 = v201?.constructor;
v203.name = v203;
const v204 = [-4.202468609045087];
try { v204.every(v174); } catch (e) {}
[0.8434386161503777];
"4i" == "4i";
("4i")?.toWellFormed;
const t227 = "4i";
t227[1] = "4i";
const t232 = "RpXR";
t232[3] = "RpXR";
const t234 = "RpXR";
t234[1] = "RpXR";
~("c")?.toLocaleUpperCase.length;
class C216 {
    constructor(a218) {
        const v219 = this?.constructor;
        try { new v219(this); } catch (e) {}
        ("valueOf").localeCompare(a218, "valueOf");
    }
}
const v222 = new C216();
const t245 = v222.constructor;
new t245(C216);
try { new v51("998423439", C42); } catch (e) {}
-1400814909 != -1400814909;
let v229 = 7;
v229--;
9 >> 9;
2432 - 2432;
try { Uint32Array.from(15n); } catch (e) {}
const v237 = new Uint32Array(2432);
const o238 = {
    ...v237,
};
o238[2100] = o238;
const v240 = 9007199254740991n * 9007199254740991n;
v240 * v240;
-(-5345);
const v245 = Math.sin(-5345);
v245 >> v245;
function f247() {
    const o252 = {
        [-1000000.0]: 0.0,
        set e(a251) {
        },
    };
    o252.e = o252;
    return f247;
}
f247.caller = f247;
const v253 = f247();
const v254 = f247();
class C255 {
    static [f247] = v254;
}
try { C255(); } catch (e) {}
let v257;
try { v257 = C255.bind(v253); } catch (e) {}
try { v257(); } catch (e) {}
