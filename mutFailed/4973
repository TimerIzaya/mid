let v2 = 4294967297n;
class C5 {
    constructor(a7, a8) {
        function f9(a10, a11, a12, a13) {
            return arguments;
        }
        for (let v15 = 0; v15 < 5; v15++) {
            const t7 = -65537n;
            const v16 = t7();
            v16[1] = v16;
        }
    }
}
function f20(a21, a22, a23, a24) {
    3 | a22;
    const v26 = a21 / a21;
    const v27 = a22 < a21;
    let v28 = a23 >>> a23;
    v28++;
    const o33 = {
        n(a31, a32) {
            return v27;
        },
    };
    return v26;
}
const v34 = f20(Uint8Array, 2);
Int32Array.BYTES_PER_ELEMENT = f20;
const v35 = new Int32Array(64);
const v37 = new Float32Array();
const v38 = [v37];
const o44 = {
    ["536870889"]: "toString",
    set e(a42) {
    },
    get e() {
        return "536870889";
    },
};
const v47 = new v34(1024);
function f49(a50, a51) {
    const o52 = {
        [a50]: a51,
        65536: a51,
    };
    const v54 = new BigUint64Array();
    const v55 = /o(\xed\xb0\x80)\x01/gudims;
    const v56 = /(xyz{93})/gusy;
    try { v56.compile(v54, v55); } catch (e) {}
    return f49;
}
f49("-354330605");
const v59 = v47?.constructor;
try { new v59(-65537n, v47, -65537n); } catch (e) {}
v2--;
const v64 = new Int8Array(9);
function f70(a71, a72) {
    return f70;
}
const o81 = {
    get f() {
    },
    "c": "function",
    [v38](a77, a78, a79) {
        super[-63902];
    },
    "type": "function",
};
new Worker(f70, o81);
try { new Int32Array(3, 9, 64); } catch (e) {}
new Int32Array(129, 129, 129);
const v86 = new BigInt64Array();
const v87 = [-2.2250738585072014e-308,3.392499338451276e+307,-747.2945132947244,0.9386986579024902,570.3429467836224,-2.2250738585072014e-308,-2.5986211042998715,0.7677312292190223];
try { v87.fill(v86); } catch (e) {}
v87[1] = v87;
try { v87.some(); } catch (e) {}
const v90 = [-1.7976931348623157e+308];
function f91(a92, a93, a94, a95) {
    a92.byteOffset;
    try { a94.flatMap(Int32Array); } catch (e) {}
    const o103 = {
        toString(a99, a100, a101) {
            let v102;
            try { v102 = v64.toString(); } catch (e) {}
            a94[v102] = a92;
        },
    };
    try { o103.isPrototypeOf(a94); } catch (e) {}
    return v90;
}
f91.e = f91;
const v105 = f91(v86, 129, v90);
new Int8Array();
const v110 = new Uint16Array(1657);
v110.reverse();
Array();
for (let v113 = 0; v113 < 25; v113++) {
}
class C114 {
}
new C114();
v105.toString();
f91(v35, 129, v87);
class C119 extends Float64Array {
    get e() {
    }
}
new C119();
BigInt64Array % v105;
