false && false;
const v5 = [-789.4029752130427,0.0,1.5860482838063103e+308];
[-1000000000000.0,-1.6023671870362022e+308,3.612724278583076e+307,-8.572552822954835,377868.06762097357,0.35752124726168266];
[-1000000.0,-196222.97204934375,1.7976931348623157e+308,1000.0];
[2.220446049250313e-16,1000000000.0,0.26463766865744276,-1.0,-49941.50618894317,-7.068571761785226e+307,2.220446049250313e-16,-1.4116174346816625e+308];
[-1.7976931348623157e+308,1.0,2.2250738585072014e-308,1.4838203978070273e+307,-101579.79476956953,1000000.0];
const v10 = [-325.9621121871836,1000000000000.0,2.0,5.837282765645966,-1.7976931348623157e+308,-5.0];
let v11;
try { v11 = v10.flat(); } catch (e) {}
const v14 = new Uint8Array(4);
try { v14.entries(); } catch (e) {}
const v18 = new Date(v5);
v18.setUTCSeconds(Date, -118.8024069268339);
([-9223372036854775807,-31958,-437619447,54990,9007199254740992,-9223372036854775807,8,128]).constructor;
const v24 = new v11(9);
try { new Uint8ClampedArray(2147483648n, Uint8ClampedArray, v24); } catch (e) {}
const v28 = new Uint8ClampedArray(2986);
v28[1916];
const v31 = new Int32Array(Int32Array, Int32Array, Int32Array);
function F32(a34, a35) {
    if (!new.target) { throw 'must be called with new'; }
    const v36 = this?.constructor;
    try { new v36(a34, Int32Array); } catch (e) {}
    a34.e = a34;
}
const v38 = new F32(Int32Array, v31);
const v39 = v38?.constructor;
try { new v39(v24, v14); } catch (e) {}
function f41(a42) {
    let v43;
    try { v43 = v38.resize(v31, F32, Int32Array, a42); } catch (e) {}
    v31.length |= v43;
    new Float64Array(3);
    const v47 = [];
    class C48 {
        constructor() {
            super.f >>= this;
        }
        static #o() {
            super[v47];
            super.a;
            return v47;
        }
    }
    const v53 = new C48();
    const v54 = /\p{Script=Greek}/vdimy;
    class C55 extends C48 {
        static #e = 2n;
        static #toString(a57, a58) {
            v54 * C48();
            v53.length = 1;
        }
    }
    return f41;
}
%PrepareFunctionForOptimization(f41);
f41();
%OptimizeFunctionOnNextCall(f41);
f41();
