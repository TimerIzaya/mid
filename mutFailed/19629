370165135 * 370165135;
5 >>> 5;
function f11(a12, a13) {
    -a12;
    const o24 = {
        toString(a16, a17, a18) {
            this[Symbol.toPrimitive] = f11;
            try {
                this.length = 1;
            } catch(e22) {
            }
            let v23;
            try { v23 = this.m(); } catch (e) {}
            return v23;
        },
        __proto__: -613743222,
        ...370165135,
        "a": f11,
    };
    try { o24.toString(370165135, a12, o24); } catch (e) {}
    return o24;
}
f11.length = f11;
f11(1024, 268435439);
const v27 = f11(-613743222, 5);
const v28 = f11(5, 3);
v28.valueOf = f11;
let v30 = 1073741825n;
v30--;
-21847n + -21847n;
try { Int8Array.bind(v27); } catch (e) {}
const v37 = new Int8Array(1487);
new Int32Array(2943);
let v45 = -9223372036854775807;
v45--;
function f47(a48, a49, a50) {
    'use strict';
    return a48;
}
new BigUint64Array(194);
/LR0/gudisy.lastIndex;
const v54 = /(?:ab){4,7}/gvisy;
try { v54.compile(268435440, 268435440); } catch (e) {}
/a\Bb+/vdims;
function F57() {
    if (!new.target) { throw 'must be called with new'; }
    this.a = this;
    function f59(a60) {
        a60--;
        Object.defineProperty([58584,15,9007199254740990,2146023485], 65537, { writable: true, value: [46733,-268435456] });
    }
    try { new f59(v28); } catch (e) {}
    Object.defineProperty(this, "b", { enumerable: true, set: f59 });
    let v65 = 1073741825;
    try {
        v65++;
        let v69 = -1e-15;
        Math.atan2(v69++, -175950080);
        this.b = v65;
    } catch(e72) {
    }
}
let v73 = new F57();
let v74 = new F57();
function f75() {
    return v74;
}
function f76(a77) {
    ([315.3838771878211,0.8321654879979539,1.0,-813011.8421276518]).__proto__;
}
Object.defineProperty(v74, "a", { writable: true, configurable: true, get: f75, set: f76 });
v74.a = -10809n;
({"a":v74,"b":v74,...v73} = v74);
try { new gc(); } catch (e) {}
try { ("minor").italics(); } catch (e) {}
try { ("async").big(); } catch (e) {}
const o87 = {
    "execution": "minor",
    "execution": "minor",
    get a() {
        return "minor";
    },
    "execution": "async",
    "type": "minor",
};
gc(o87);
new F57();
const v92 = new Uint8ClampedArray(16);
try { v92.indexOf(1487); } catch (e) {}
function f95() {
    new Int8Array(1073741823);
    class C99 {
        #valueOf(a101, a102, a103, a104) {
        }
    }
    try { C99.bind(v37); } catch (e) {}
    const o109 = {
        valueOf(a107, a108) {
        },
    };
}
f95();
%OptimizeFunctionOnNextCall(f95);
