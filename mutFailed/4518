const v2 = new BigUint64Array(1);
const v3 = v2[1];
const v4 = [-1000.0,1000000.0,2.220446049250313e-16,614071.3005355855,-1.0,2.220446049250313e-16];
const o5 = {
};
const v7 = new Proxy(v4, o5);
v7[301];
function f14(a15) {
    const o16 = {
        3677: -128n,
    };
    return o16;
}
f14(-1024n);
f14(-1024n);
function F19(a21, a22, a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    const v25 = this?.constructor;
    try { new v25(this, a24, a24, this); } catch (e) {}
    a22[3677];
    a23 << a23;
    a24.e = a24;
    try {
        this.e = a21;
    } catch(e29) {
    }
    try {
        this.d = f14;
    } catch(e30) {
    }
}
const v31 = v2[3];
const v34 = new Int8Array(128);
const v35 = v34.indexOf();
new Int32Array();
new Uint8ClampedArray(210);
throw BigUint64Array;
v34[3] = v4;
+-1024n;
let v47 = -4;
+(++v47);
Math.fround(v34);
Math.max(v47);
const v54 = !v3;
new Float64Array(1073741824);
const v58 = [];
class C59 {
    static #g = v58;
    static d;
    static #c;
    static e;
    static {
    }
}
const v61 = -85937582 + v54;
const v62 = Math.cbrt(v61);
const v63 = 3 | v54;
v61 + v63;
let v66 = -9007199254740992;
Math.log10(v66);
let v68 = ++v66;
try {
    false.fuck();
} catch(e71) {
}
Math.trunc(v54);
new Int16Array(68);
class C75 {
}
const v78 = new Uint16Array(1024);
new Map();
new Int16Array(3754);
const v85 = new Float32Array(9);
delete v85[16];
const t73 = 2.0;
delete t73[268435456];
function* f89(a90, a91, a92, a93) {
    return a91;
}
let v94;
try { v94 = v85.filter(v63, Uint8ClampedArray, ...68, 9, -85937582); } catch (e) {}
v94 = v35;
const v97 = v78 << -1;
210 || v68;
Math.log(v97);
-1 && 210;
!-1;
--v68;
class C104 {
}
function f105() {
    const v107 = Symbol.toPrimitive;
    function f108() {
        const o111 = {
            m(a110) {
                return f108;
            },
        };
    }
    v107.description.codePointAt(C104);
    return Symbol;
}
class C118 {
}
class C120 {
    static 9 = 9.187362692894364;
}
let v121 = 0;
do {
    v31?.[v62];
    let v126 = -1000.0;
    Math.hypot(v66);
    Math.log(268435456);
    Math.acosh(v66);
    Math.asinh(v126);
    268435456 ** -1085290674;
    ++v126;
    v121++;
} while (v121 < 5)
new Uint32Array(0);
const o140 = {
    "maxByteLength": 1000,
};
const o142 = {
};
const v145 = new BigInt64Array(4046);
function f146(a147, a148) {
    a147++;
    const v150 = a147++;
    const v151 = v150 >> v150;
    let o155 = {
        "execution": "object",
        m(a153) {
            return a153;
        },
        "g": v34,
        "d": a147,
        ...a147,
        ...a148,
        "type": "-1024",
        ...v78,
        get f() {
            v151[3] >>= 3754;
            return Float32Array;
        },
    };
    [,...o155] = v145;
}
const v156 = new ArrayBuffer(2, o140);
v156.resize(9);
