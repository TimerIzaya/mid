const v2 = new BigInt64Array(10);
const v4 = 3967 / 3967;
const v6 = Float32Array.length;
const v7 = new Float32Array(3967);
try { v7.slice(Float32Array, 3967); } catch (e) {}
v7[23] = v7;
const v10 = 127 * 127;
class C11 {
}
C11.prototype;
const v13 = new C11();
const v14 = v13?.constructor;
try { new v14(); } catch (e) {}
class C16 {
    static #a = C11;
    static g = v13;
    static {
        try { new this(); } catch (e) {}
        !(delete this.g);
    }
}
try { C16.bind(v13); } catch (e) {}
const v23 = new BigInt64Array(127);
const o24 = {
};
const v26 = ("bZ")?.dotAll;
try { new v26(Float32Array); } catch (e) {}
try { new Symbol(); } catch (e) {}
const v30 = Symbol("bZ");
Symbol.for(v30.description);
[127,v2,v23];
const v35 = [Float32Array];
function f36() {
}
const v38 = [[f36,f36],f36];
function F39() {
    if (!new.target) { throw 'must be called with new'; }
}
const v41 = new F39();
try { new Array(v4); } catch (e) {}
const v44 = v41.d;
let v45;
try { v45 = v44(Array); } catch (e) {}
try { v45(F39); } catch (e) {}
[BigInt64Array];
const v48 = [1e-15,395833.8744809434,1000000.0,1.4833232607524508e+308,-597725.5054648793];
try { v48.slice(v38, v38); } catch (e) {}
const v50 = [-1000000000.0,0.007564657698543642];
let v51;
try { v51 = v50.toLocaleString(); } catch (e) {}
try { v51.link(v4); } catch (e) {}
const v53 = [-1000000000000.0,-974369.4481080713,-487337.25578581466,-479.12403330333757,1.7976931348623157e+308,0.3293969077783455,-5.0,1000000000000.0,783.9936120328941];
try { v53.pop(); } catch (e) {}
try { ("o").trimStart(); } catch (e) {}
[10,-1012881949];
[11,-146405100,536870912,-65535,-9,-1042500765,9];
const v61 = [-1,1108545007,-2,-536870912,24425,1397095361,-153132480];
try { v61.copyWithin(v10, v10); } catch (e) {}
try { v61.reduceRight(127); } catch (e) {}
try { ("5").split(127, v30); } catch (e) {}
const t60 = "5";
t60[0] = "5";
try { ("getUint32").toLocaleLowerCase(); } catch (e) {}
const v71 = new Math(228);
v71.h = v71;
class C72 {
    [Math] = v35;
    static {
        function F74(a76, a77) {
            if (!new.target) { throw 'must be called with new'; }
            const v78 = this?.constructor;
            try { new v78("yi", v6); } catch (e) {}
            try {
                this.b = a77;
            } catch(e80) {
            }
        }
        const v81 = new F74(v71, this);
        new F74(Math, F74);
        new F74(v81, v71);
    }
}
new Uint32Array(54);
const v89 = new Uint16Array(129);
let v90 = 2;
v90++;
new Uint8ClampedArray(v90);
v89[Uint8ClampedArray] %= v90;
try {
    new Uint16Array(v48, 54);
} catch(e95) {
}
let v96 = -128;
do {
    -4294967296 <= -4294967296;
    -65537 >>> -65537;
    const v102 = v96++;
    v102 % v102;
} while (v96 < 9)
