[-1e-15,-4.0];
const v1 = [-2.220446049250313e-16,-3.0,-1.0,-6.768651523014772e+307,2.2250738585072014e-308,0.08280988855676807,-1.1788174109380533e+308,-24911.069751249393,-375.8193784211943];
const v2 = [9.64246076776908,2.220446049250313e-16,-2.220446049250313e-16,-5.0,4.0,-0.0,1000.0,-1.0];
const v5 = new Int8Array(0);
try { v5.entries(); } catch (e) {}
const v9 = new Reflect(3393);
v9[66] = 3393;
new Int8Array(64);
-261.99102172609366 >>> v5;
class C17 {
    c = -261.99102172609366;
    ["localeCompare"];
    static [v2];
    toString(a19, a20) {
        do {
            function F22(a24, a25, a26, a27) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.a = "localeCompare";
                } catch(e28) {
                }
            }
        } while (0 < 6)
    }
}
C17.e = C17;
const v31 = new C17();
const v32 = new C17();
v32.c = v32;
const v33 = new C17();
function F34(a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    try { a36.apply(0, v1); } catch (e) {}
    try {
    } catch(e39) {
    }
    try {
    } catch(e40) {
    }
}
const v41 = new F34(C17, v32);
const v44 = new Float64Array(147);
v44[51];
const o46 = {
};
try { new C17(...-1.0, v41, v31, v33, F34, ...v44); } catch (e) {}
const o48 = {
};
o48.h = o48;
