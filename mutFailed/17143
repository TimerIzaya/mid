const v2 = new Int32Array(55);
Object.defineProperty(v2, "g", { configurable: true, value: v2 });
try {
    v2.map(10, v2);
} catch(e5) {
}
new BigUint64Array(10);
const v10 = new Int32Array(3129);
function F11(a13, a14, a15) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a13;
    } catch(e16) {
        Object.defineProperty(e16, this, { writable: true, configurable: true, enumerable: true, value: 55 });
        Math.atan(v2);
        Math.cos(Int32Array);
        Math.atan2(v10, Int32Array);
    }
    try {
        this.a = Int32Array;
    } catch(e23) {
    }
}
const v24 = new F11(55, 3129, 3129);
new F11(3129, 55, 10);
const v26 = new F11(10, 10, 3129);
const v27 = [];
const v28 = [v27,55,v27,v27,v27];
function F29(a31, a32) {
    if (!new.target) { throw 'must be called with new'; }
    const v35 = this.valueOf(this.propertyIsEnumerable(a31), v28, v28).constructor;
    let v36;
    try { v36 = new v35(a31); } catch (e) {}
    a31.lastIndexOf(v36, a31);
}
const t35 = 55;
const v38 = new t35(v27);
[10,v38,v26,BigUint64Array,v28];
[[BigUint64Array,v2,v38,v24,v10]];
new F29(v28);
