function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = 1;
    } catch(e3) {
    }
    try {
        -754089042n <= -754089042n;
        ~-754089042n;
        new Date(-9223372036854775807, -9223372036854775807, Date, -9223372036854775807);
        this.d = 1;
    } catch(e10) {
    }
}
const v11 = new F0();
const o13 = {
};
o13.g = o13;
const v15 = new Proxy(Uint8Array, o13);
try { new v15(Uint8Array, Uint8Array, Uint8Array); } catch (e) {}
v15.d = v15;
const v17 = new F0();
const v18 = new F0();
function F19(a21, a22) {
    if (!new.target) { throw 'must be called with new'; }
    a22.c = a22;
    try {
        this.a = a22;
    } catch(e23) {
    }
    function F24(a26) {
        if (!new.target) { throw 'must be called with new'; }
        const v27 = [-0.685155357392599,5.0];
        function F28(a30, a31, a32, a33) {
            if (!new.target) { throw 'must be called with new'; }
            const v34 = this.constructor;
            try { new v34(a31, F24, v34); } catch (e) {}
            v27.length &= 1;
        }
        new F28();
    }
    F24.caller = F24;
    try {
        this.b = a21;
    } catch(e38) {
    }
    try {
        this.h = v11;
        const o39 = {
            ...this,
        };
        class C40 {
            constructor(a42, a43) {
                const v44 = this?.__defineSetter__;
                try { new v44(a43, a22); } catch (e) {}
                for (let v46 = 0; v46 < 5; v46++) {
                    -v46;
                    ("p").length;
                    const v50 = "p" + v46;
                    try { v50.blink(); } catch (e) {}
                    this[v50] = v46;
                }
            }
        }
        const v52 = new C40();
        v52.p4;
    } catch(e54) {
    }
}
new F19(v17, v17);
const v56 = new F19(v18, v18);
v56.b;
const v58 = new F19(v11, v17);
v58.a = v58;
class C65 {
}
try { new C65(); } catch (e) {}
const v67 = new C65();
try { ("-26733").substring(v18, v18); } catch (e) {}
("-26733")[o13];
const v71 = [-2023,8,-5,-19182,268435441];
let v72;
try { v72 = v71.map(C65); } catch (e) {}
new Uint16Array(v71);
const v75 = new C65();
function f76(a77, a78, a79) {
    a77?.constructor;
    try { new o13(); } catch (e) {}
    const v82 = a79?.constructor;
    try { new v82(); } catch (e) {}
    v82 | 112;
    try { new Uint8ClampedArray(Uint8ClampedArray, 112, a79); } catch (e) {}
    const v89 = new Uint8ClampedArray(112);
    const v91 = `7${v89}dm${"-26733"}m`;
    function f92() {
        return f92;
    }
    const v94 = new WeakSet();
    v94.constructor;
    Uint8Array.BYTES_PER_ELEMENT = Uint8Array;
    const v97 = new Uint8Array();
    try { v89(-85357.59116785484, ...v97, 64, 46, -3.383486186086852e+307, ...v89); } catch (e) {}
    const o111 = {
        __proto__: a78,
        1073741824: v67,
        get e() {
            let v104 = 820086.9196656225;
            v104++;
            const v106 = -1;
            Math.atanh(this);
            let v108 = 1 && v106;
            v108--;
            Math.sinh(v108);
            return v91;
        },
    };
    return f76;
}
const v114 = v72(f76(v75, f76, v67), v75)?.__lookupSetter__;
try { new v114(v75); } catch (e) {}
