const v0 = [];
function f1(a2) {
    const v3 = [Infinity];
    class C4 {
        [v3];
    }
    new C4();
    return v0;
}
const v7 = Symbol.toPrimitive;
Object.defineProperty(v0, v7, { value: f1 });
const v8 = [v0,v0,v0,v0];
v8[Symbol.toPrimitive] = f1;
const v11 = [v0,v0,v8,v0,v8,v0,v8];
const v12 = [v0,v0,v11,v11];
const v14 = new Date();
function f15(a16, a17, a18, a19) {
    a16.valueOf = f15;
    function f20(a21, a22) {
        v7?.constructor;
        for (let v24 = 0; v24 < 25; v24++) {
            function f25() {
                return v24;
            }
            const v26 = [601759695];
            const v27 = [1073741824,1073741823,1376142744,1073741825];
            function f28(a29, a30, a31, a32) {
                const v33 = f25();
                [v33,v33];
                BigUint64Array * 536870887;
                let v39;
                try { v39 = v27["find"](..."find", a32, ...v26); } catch (e) {}
                return v39;
            }
            for (let v40 = 0; v40 < 10; v40++) {
                f28(v40, v40, v27, f28);
            }
        }
        return a22;
    }
    a17[Symbol.toPrimitive] = f20;
    function f44(a45) {
        ("4294967296").toLocaleUpperCase();
        return v14;
    }
    a18[Symbol.toPrimitive] = f44;
    const o59 = {
        __proto__: a19,
        ...a19,
        set d(a51) {
            function f52() {
                return f52;
            }
        },
        [a17]: a18,
        get a() {
            const o57 = {
                "execution": "async",
                "type": "major",
            };
            gc(o57);
        },
        "f": a16,
        5: v11,
    };
    return o59;
}
f15(v12, v11, v8, v8);
f15(v0, v0, v8, v8);
f15(v0, v11, v11, v11);
const v63 = [601759695];
const v64 = [1073741824,1073741823,1376142744,1073741825];
function f65(a66, a67, a68, a69) {
    -a67;
    a67 >>> a67;
    a66 >>> v0;
    a68[3];
    try { v64["58572"](..."58572", a69, ...v63); } catch (e) {}
}
for (let v76 = 0; v76 < 10; v76++) {
    f65(v76, v76, v64);
}
const v81 = new Float32Array(165);
new Uint16Array(v81);
