new Map();
[9.442459061320782e+307,-112230.18093607284,-0.4618535238235406,-333.519746104207,-960714.5132005863];
[-1e-15,1.3361604876839294e+308,-1.6081906494282848e+308,1.0,-4.0];
[5.0,-1.7976931348623157e+308,0.7929587212003482,1.2980669931141255e+307,-2.0,-5.0,-0.05996179350580455,Infinity,1000000000000.0,5.0];
class C15 {
    static 3143;
    static [-343.74123684650476];
    #f = "-2";
    static #a;
    #c;
    #valueOf(a17, a18) {
        const v19 = a18 == a18;
        v19 ? a18 : a18;
        const v21 = ["-2",this,"setMonth",a17,"-2"];
        [v21,v21,this,this];
        [v19,"-2","4X",a17];
        return a17;
    }
    10 = "4X";
    #g = "-2";
}
new C15();
new C15();
new C15();
let v28;
try { v28 = new WeakSet(); } catch (e) {}
new WeakSet();
-536870912 ^ -536870912;
[-256,-256,5,-9007199254740991,-128,1073741825,-11,-49255];
[35577,123452243,-2,65305,268435441,11,-58686];
const v36 = [1506147375,1598671956,64,-23009,-512929497,-1432178736,4];
let v37;
try { v37 = v36.sort("-2"); } catch (e) {}
6 | 6;
function F45(a47, a48) {
    if (!new.target) { throw 'must be called with new'; }
    function f49(a50, a51) {
        %VerifyType(a51);
        function F52() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = 14;
            } catch(e55) {
            }
            try {
                a51.a = 14;
            } catch(e56) {
            }
            try {
                this.h = 14;
            } catch(e57) {
            }
        }
        return 1024;
    }
    this.constructor = f49;
    Number.isFinite(Number);
    const v60 = this.constructor;
    try { new v60(); } catch (e) {}
}
new v37();
new F45();
class C65 {
    constructor(a67) {
        const v68 = this.constructor;
        v68.d = v68;
        try { new v68(); } catch (e) {}
        ("size").c;
        ("size").g;
        ("size").length;
        let v73 = v28?.[7];
        [...v73] = "size";
        /a\bc/vd;
    }
}
function f75(a76, a77, a78) {
}
const o79 = {
};
class C80 {
    static #n(a82) {
    }
}
new C80();
new o79();
let v85 = Int16Array;
try {
} catch(e86) {
}
v85 = v85;
