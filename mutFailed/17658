class C3 {
    static a = -7.582356806907131;
    set a(a5) {
        try {
            a5.__proto__ = this;
        } catch(e6) {
        }
    }
    static ["repeat"] = 0.0;
    static m(a8, a9) {
        ("repeat").length;
        const v11 = super.d;
        a8 >>= this;
        const o14 = {
            "maxByteLength": 94,
        };
        const v16 = new ArrayBuffer(94, o14);
        new Uint8Array(v16);
        super[-7.582356806907131] = v16;
        super[94];
        const v21 = new WeakSet();
        try {
            super.flatMap(0.0, v21, 0.0);
        } catch(e23) {
        }
        return v11;
    }
}
const v24 = new C3();
new C3();
const v26 = new C3();
const v27 = [2];
try { v27.entries(); } catch (e) {}
const v29 = [0,-9223372036854775807,4,9,14,7,1073741825];
try { v29.splice(0.0, C3); } catch (e) {}
const v31 = [-9007199254740992,128,42189,-949239607,9223372036854775807,-203449922,-11];
const v33 = new WeakMap();
let v34;
try { v34 = v33.delete(C3); } catch (e) {}
function F35(a37, a38, a39) {
    if (!new.target) { throw 'must be called with new'; }
    a38 >>> a38;
    const v41 = a39?.__lookupGetter__;
    try { new v41(v41); } catch (e) {}
    try {
        this.e = a39;
    } catch(e43) {
    }
    try {
        this.h = a37;
    } catch(e44) {
    }
    try { a38(0.0, "repeat", v26, a37); } catch (e) {}
    new Float64Array(3);
    for (const v49 in this) {
        SharedArrayBuffer.d = SharedArrayBuffer;
        4069123016 | 4069123016;
        const o53 = {
            "maxByteLength": 4069123016,
        };
        const v55 = new SharedArrayBuffer(1920, o53);
        Uint8ClampedArray.b = Uint8ClampedArray;
        const v57 = new Uint8ClampedArray(v55);
        v57[308];
    }
    new v34(2);
    new Float32Array(0);
}
F35.length = F35;
const v65 = new F35(v31, 0.0, v24);
new F35(v31, v65, v24);
new F35(v29, v65, v31);
function f68(a69, a70) {
    return f68;
}
let v73;
try { v73 = ("function").toLocaleLowerCase(); } catch (e) {}
const o74 = {
    "type": "function",
};
new Worker(f68, v73);
const v76 = v26.terminateAndWait;
v76.b = v76;
try {
const t0 = "repeat";
new t0();
} catch (e) {}
