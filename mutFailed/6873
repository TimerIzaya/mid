const v0 = /w\xf0\x9f\x92\xa9/gm;
/(?<a>.)/gum;
const v2 = /^(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10()*/gumy;
const v4 = new Map();
class C8 extends Map {
    #toString(a10, a11, a12, a13) {
        function F18(a20, a21, a22, a23) {
            if (!new.target) { throw 'must be called with new'; }
        }
        new F18(undefined, undefined, -128n);
        const o26 = {
        };
        new Proxy(v0, o26);
        return a10;
    }
    static #e;
    static [v2] = 546004143;
    d;
    6;
}
new C8();
new C8();
new C8();
class C32 extends C8 {
    0 = v2;
    static #e = 546004143;
    #valueOf(a34, a35, a36, a37) {
        const o44 = {
            p(a39, a40) {
                return 546004143;
            },
            "maxByteLength": 546004143,
            get f() {
                new v4();
                return /e\p{Changes_When_NFKC_Casefolded}/vdimy;
            },
        };
        const v46 = new Proxy(v0, o44);
        super[C8] = o44;
        return v46;
    }
    static #d;
    static 108 = 60322;
    1696063073;
    static h;
}
new C32();
new C32();
new C32();
const v51 = new BigUint64Array();
const v54 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v56 = new Uint32Array();
let v57 = -4294967297n;
v57--;
const v59 = [601759695];
const v60 = [1073741824,1073741823,1376142744,1073741825];
0 / 0;
new v59();
try {
    C8.h = 3;
} catch(e65) {
}
function f67(a68, a69, a70, a71) {
    const v72 = a68?.constructor;
    try { new v72(a68, a71, v60); } catch (e) {}
    arguments.length;
    function f76() {
        try { ("Vre").charAt(4096); } catch (e) {}
        let v79;
        try { v79 = ("Vre").codePointAt(v54); } catch (e) {}
        v79 ^ v79;
        let v81 = Float64Array;
        v81 = a69;
        b = v54;
        let v82 = v54.length;
        v82++;
        try {
            v60.forEach(a69);
        } catch(e85) {
        }
        const o96 = {
            "c": v57,
            "c": v59,
            valueOf(a87, a88) {
                return a87;
            },
            1073741824: v56,
            [v57](a90, a91, a92, a93) {
                eval();
            },
            "arguments": 5,
            256: a71,
        };
        o96[256];
    }
    f76();
    const v100 = Array();
    try { v100.findLast(v51); } catch (e) {}
    v100.unshift();
    try { Int8Array.of(); } catch (e) {}
    const v105 = new Int8Array();
    v105.buffer.slice(2147483648);
    const v111 = new Int32Array(1024);
    const v112 = v111[3];
    v112 + v112;
    1024 * v112;
    for (let v115 = 0; v115 < 5; v115++) {
    }
    %OptimizeFunctionOnNextCall(f76);
    try { v60["find"](..."find", a71, ...v59, ...v60, ...522675525n); } catch (e) {}
}
Math.asin();
class C120 {
    static #a;
}
for (let v121 = 0; v121 < 10; v121++) {
    f67(v56);
}
%OptimizeFunctionOnNextCall(f67);
f67(5, v51, 522675525n, f67);
