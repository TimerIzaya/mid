const v0 = [2,4294967295,4,1073741824,1,-1924188937,512,65537,-15];
const v1 = [7,65535,-7,4294967296,-11,-22225665,3,-819316523,8914457,13736];
function f2(a3) {
    gc();
    return v0;
}
v1.toString = f2;
const v6 = [-11,-9223372036854775807,-5,9691];
const v7 = [v6];
let v8;
try { v8 = v7.reduceRight(v0); } catch (e) {}
let v9;
try { v9 = v7.at(v7); } catch (e) {}
v9[3] = v9;
const v10 = [v0,v0,v0,v7,v1];
let v11;
try { v11 = v10.with(v1, v0); } catch (e) {}
v11.valueOf = f2;
try { v11.copyWithin(v11, v6); } catch (e) {}
const v13 = [v6,v10,v1];
v13.g = v13;
try { ("unicode").trimRight(); } catch (e) {}
try { ("symbol").anchor(v7); } catch (e) {}
try { new Float64Array(v8, v11, Float64Array); } catch (e) {}
const v22 = new Float64Array(255);
const v23 = v22[247];
v23 - v23;
3728 != 3728;
const v28 = new Float64Array(3728);
try { v28.reduce(v7); } catch (e) {}
Int32Array.d = Int32Array;
const v32 = new Int32Array(4096);
v32[3356];
let v34 = 2;
const v35 = -v34;
v35 & v35;
v34++;
function f38(a39) {
    !(a39 === a39);
    !(a39 <= a39);
    const o47 = {
        __proto__: v34,
        213: a39,
        ...a39,
        "g": v34,
        p(a45, a46) {
            return f38;
        },
    };
    const v48 = o47?.__defineGetter__;
    try { new v48(Float64Array, Float64Array); } catch (e) {}
}
%PrepareFunctionForOptimization(f38);
const v50 = f38();
%OptimizeFunctionOnNextCall(f38);
f38(v50);
