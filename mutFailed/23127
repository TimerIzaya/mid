const v0 = [];
try { ("-6").indexOf(v0); } catch (e) {}
let v5 = 15;
v5--;
let v7 = 536870887;
v7 >> v7;
const v9 = v7--;
let v10 = 1986265769;
v10--;
const v12 = [-2.2250738585072014e-308,34401.33749437414,412.23987385351643,-1.0,-312949.42394553125,-9.628861803264861,1.7976931348623157e+308];
v12[4] = v12;
[1000000000.0,-1.4070715520443671e+308,-2.220446049250313e-16,2.220446049250313e-16,-1000000000000.0,6.8572596979016645,-7.480114596767122];
const v14 = [-576.3996116734731,-94528.19684385892,-1.5337293914182249e+308,0.8345938079571347,-508664.4671897571,-130.68510951005783,-226.30682885416502];
try { v14.some(v7); } catch (e) {}
function f17() {
    function f18(a19) {
        v7 % 15853;
        const v24 = 15853 ** v7;
        -15853;
        const v26 = v24 >>> 15853;
        Math.clz32(v24);
        return ~v26;
    }
    return f18;
}
function f29(a30) {
    const v31 = [601759695];
    const v32 = [1073741824,1073741823,1376142744,1073741825];
    try { v32["find"](..."find", v9, ...v31, ...v32, ...522675525n); } catch (e) {}
}
Object.defineProperty(WeakSet, "valueOf", { writable: true, get: f17, set: f29 });
const v36 = new WeakSet();
function f37(a38, a39) {
    let v41;
    try { v41 = Reflect.defineProperty(); } catch (e) {}
    return v41;
}
v36.toString = f37;
164140152 !== 164140152;
function F44(a46, a47, a48, a49) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.isPrototypeOf(a49); } catch (e) {}
    a48--;
    a49--;
    ~a46;
    a48++;
}
F44.length;
const v56 = new F44(164140152, F44, 164140152, 164140152);
v56.valueOf = f37;
const v57 = v56?.propertyIsEnumerable;
try { new v57(v0); } catch (e) {}
const v59 = v56?.constructor;
let v60;
try { v60 = new v59(WeakSet, WeakSet, v5, v36); } catch (e) {}
const v61 = v60?.constructor;
try { new v61("setUTCSeconds", v12, v0, v12); } catch (e) {}
522675525n ^ 522675525n;
for (let v65 = 0; v65 < 5; v65++) {
    function f66() {
        const v68 = ("Vre").strike();
        try { v68.toLocaleLowerCase(); } catch (e) {}
        let v70;
        try { v70 = v68.toWellFormed(); } catch (e) {}
        const v71 = v68.link();
        try { v71.trimLeft(); } catch (e) {}
        const v73 = v71.includes(164140152);
        const v74 = v73 || v73;
        v74 || v74;
        const v77 = Array();
        v77[1] = WeakSet;
        const v79 = v77.unshift(v56, v65, F44, v65, v77.pop());
        const v80 = v79 & v79;
        let v82;
        try { v82 = new Set(); } catch (e) {}
        try { v82.values(); } catch (e) {}
        const v84 = new Set();
        const v85 = v84.add();
        let v86;
        try { v86 = v85.add(v14); } catch (e) {}
        v86.size = v86;
        v85.entries();
        class C88 {
        }
        const v89 = new C88();
        v89.constructor = f66;
        const v90 = v89?.constructor;
        try { new v90(); } catch (e) {}
        let v92;
        try { v92 = v70(v71); } catch (e) {}
        function f93() {
            return v92;
        }
        const v94 = f93?.constructor;
        try { new v94(v65); } catch (e) {}
        Object.defineProperty(Math, "c", { writable: true, configurable: true, enumerable: true, value: v80 });
        Math.c = Math;
        Math.expm1(v65);
        const v99 = -388931552 & -388931552;
        v56 | v65;
        Math.exp(-388931552);
        v56 << -388931552;
        Math.imul(v99 & v99, -388931552);
        v89.hasOwnProperty(v71);
    }
    f66();
    %OptimizeFunctionOnNextCall(f66);
}
