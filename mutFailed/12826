function F0() {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "e", { writable: true, configurable: true, enumerable: true, value: F0 });
    try {
        this.f = 3;
    } catch(e3) {
    }
    try {
        this.g = 3;
    } catch(e4) {
    }
    try {
        this.e = 3;
    } catch(e5) {
    }
}
function f6() {
    const v9 = new Float32Array(Uint8ClampedArray, Uint8ClampedArray, Float32Array);
    v9[0] = v9;
    return Float32Array;
}
F0.toString = f6;
const v10 = new F0();
const v11 = new F0();
const v12 = new F0();
class C13 {
    set g(a15) {
        try { v12.setUint16(a15, a15, v12, this, this); } catch (e) {}
    }
    static {
        function F18(a20, a21) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.e = a20;
            } catch(e22) {
            }
            try {
                this.f = v12;
            } catch(e23) {
                const v24 = a21 || C13;
                let v25;
                try { v25 = v11.n(v10, v24, C13, v24); } catch (e) {}
                F0 = F18;
                try { this.o(F0, C13, e23); } catch (e) {}
                try {
                    new F0([v25,e23,F18,C13,this], 1081305428n);
                } catch(e30) {
                }
            }
            try {
                this.h = v11;
            } catch(e31) {
            }
        }
        const v32 = new F18(v11, F18);
        new F18(v11, v32);
        new F18(v12, F18);
    }
}
new C13();
const v36 = new C13();
const v37 = new C13();
class C38 extends F0 {
    static {
        let v39 = this;
        v39 |= v37;
        super.e;
        v36.g;
        [-268435456,1073741825,2102811098,-63001,2,10000];
        [2035251808,-45443,-268435456,-1024,-256,-845911474];
        [9007199254740992];
    }
    static #a = v10;
    128 = v10;
}
new C38(v37);
new C38();
new C38();
class C51 {
    #b = 26507;
    static [26507];
    static get a() {
        super[this] = 26507;
        try {
            arguments.#b <<= arguments;
        } catch(e55) {
        }
        return SharedArrayBuffer;
    }
}
const v56 = new C51();
const v57 = v56?.constructor;
v57.name = v57;
let v58;
try { v58 = new v57(); } catch (e) {}
const v59 = v58?.constructor;
try { new v59(); } catch (e) {}
new C51();
const v62 = new C51();
Object.defineProperty(v62, Symbol.toPrimitive, { enumerable: true, value: f6 });
try { v62.constructor(); } catch (e) {}
const v66 = [536870888,-536870912,-1292028157,-35163,1073741825,1126124502,-1269619973,1000,-128,9];
function f67(a68) {
    return ("4").normalize("NFD");
}
v66.valueOf = f67;
try { v66.findLastIndex(C51); } catch (e) {}
[-9007199254740991,22341,65537];
const v74 = [9007199254740990,2147483647,-9223372036854775808];
v74.toString = f6;
const v76 = new Date();
const v77 = v76?.getHours;
try { new v77(); } catch (e) {}
let v79;
try { v79 = v76.setUTCSeconds(v66, v62); } catch (e) {}
v79++;
for (let v81 = 0; v81 < 5; v81++) {
    const v86 = new BigInt64Array(4046);
    let v87 = undefined;
    const v88 = v87++;
    v88 + v88;
    %VerifyType(4046);
    v62[v74];
    v62[undefined] = v76;
    try {
        v86.g = v87;
    } catch(e91) {
    }
    const v92 = v88 >> v88;
    v92 >> v92;
    const v94 = v92 >>> v92;
    let v95 = v94 % v94;
    v95--;
    const o97 = {
    };
    o97.e = o97;
    for (let i100 = 0, i101 = 10; i100 < i101; i100++) {
    }
}
