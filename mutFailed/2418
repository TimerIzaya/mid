function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 940953242;
    } catch(e3) {
    }
    try {
        function F4() {
            if (!new.target) { throw 'must be called with new'; }
            this.h = 0;
        }
        const v7 = F0?.toString;
        try { new v7(); } catch (e) {}
        class C10 extends Set {
        }
        this.a = 940953242;
    } catch(e11) {
    }
    try {
        this.c = 940953242;
    } catch(e12) {
    }
}
const v13 = new F0();
const v14 = new F0();
const v15 = new F0();
const v17 = 2 & 2;
try { v13.setUTCMilliseconds(v15, Uint32Array, Uint32Array); } catch (e) {}
v14.g;
Array.prototype = Array;
const v23 = new Array(190);
new v17(2);
function f25() {
    return f25;
}
function f26() {
    return f25 == f26;
}
%OptimizeFunctionOnNextCall(f26);
new Int32Array(2682);
F0.prototype = BigUint64Array;
new BigUint64Array(1559);
const v34 = [];
const v35 = [v34];
class C36 {
}
C36.d = C36;
const v37 = new C36();
v37?.constructor;
try { new v34(); } catch (e) {}
v37[v35];
function f41(a42, a43, a44, a45) {
    const o50 = {
        [f41](a47, a48, a49) {
        },
    };
    const v51 = [127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649];
    const v53 = ("-4")?.search;
    try { new v53(v23); } catch (e) {}
    f41 + 2.220446049250313e-16;
    v51.toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4");
    return a45;
}
%OptimizeFunctionOnNextCall(f41);
f41();
