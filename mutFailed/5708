const v4 = new Map();
const o13 = {
    set d(a6) {
        this.cos = a6;
        for (let v7 = 0; v7 < 25; v7++) {
        }
        const o9 = {
        };
        class C10 {
        }
        const v11 = new C10();
        try { v11["cos"](); } catch (e) {}
    },
};
class C14 {
    constructor(a16) {
        o13.d = a16;
    }
}
function f20() {
    return "object";
}
new Uint8ClampedArray(3950);
class C25 {
    static {
        try {
            const t26 = null;
            t26.valueOf = this;
        } catch(e27) {
        }
    }
}
new Float64Array(6);
function f33(a34) {
}
("number").slice();
class C38 {
    [null];
}
const v39 = new Uint32Array(257);
function f40(a41, a42, a43, a44) {
    const o45 = {
        [a41]: a41,
    };
    const v47 = new Uint8Array(3950);
    const v50 = Math.cbrt(7);
    const v52 = 9007199254740991n * 9007199254740991n;
    v52 & v52;
    let v56 = 1000000000000.0;
    const v57 = v56--;
    class C60 {
        constructor(a62) {
            const v64 = new Float32Array();
            try { v64.entries(); } catch (e) {}
            const v66 = new Uint16Array(12, -4294967296, v57);
            new Float32Array(v66, -4294967296, 268435439, v56, v66);
        }
    }
    const v68 = new C60(-4294967296);
    ([v68]).constructor;
    class C71 extends Math {
    }
    const v72 = new C71();
    const v73 = v72?.constructor;
    try { new v73(); } catch (e) {}
    v47.lastIndexOf(v50);
    return o45;
}
function f76(a77, a78, a79) {
    return a78;
}
Worker.toJSON = f40;
const v82 = [Worker];
const o87 = {
    ...v82,
    ...v4,
    "c": v39,
    [13](a84, a85, a86) {
    },
    "arguments": v82,
    "type": "function",
};
new Worker(f76, o87);
