Symbol.hasInstance;
const v5 = new Uint8ClampedArray();
const v7 = new Float32Array();
for (let v8 = 0; v8 < 25; v8++) {
    Float32Array[6] = v5;
    v7[v8];
}
new Int8Array(7);
new BigUint64Array(56);
const v16 = new Uint8Array(255);
v16[247];
([NaN,3.0])["concat"](-483497369);
"concat" + 56;
class C23 extends Uint8Array {
    #n(a25, a26) {
        function F28(a30) {
            if (!new.target) { throw 'must be called with new'; }
            this.h = a30;
        }
        const v31 = new F28(-2);
        with (v31) {
            h = Uint16Array;
        }
        new Uint8ClampedArray(552);
        new Int32Array(3550);
        function f41(a42, a43) {
            const o44 = {
                ...a42,
            };
            o44.d;
            return f41;
        }
        f41.d = f41;
        const t33 = f41();
        t33(f41);
        %OptimizeFunctionOnNextCall(f41);
        new BigInt64Array(165);
        return a26;
    }
}
try { new C23(); } catch (e) {}
new C23();
const v51 = new C23();
v51.byteLength = v51;
new C23();
function f53() {
}
/[.ma\Sc]/vdimsy.exec(Int16Array);
new Function("concat");
class C59 {
}
const v60 = new C59();
const v61 = v60?.constructor;
try { new v61(); } catch (e) {}
class C64 {
    static {
        try { this.bind(56); } catch (e) {}
        for (let v67 = 0; v67 < 25; v67++) {
            function f68(a69, a70, a71, a72) {
                for (let v73 = 0; v73 < 10; v73++) {
                    v73 * v73;
                    C59.__proto__ = Date;
                }
            }
            const v75 = f68?.constructor;
            try { new v75(255); } catch (e) {}
            for (let v77 = 0; v77 < 5; v77++) {
                f68();
            }
        }
    }
}
const v81 = new Int8Array(127);
for (const v82 in v81) {
}
try { C64(); } catch (e) {}
