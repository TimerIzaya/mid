function f0() {
}
function f2() {
    const v5 = new Int32Array(3289);
    [v5];
    return v5;
}
Map[Symbol.toPrimitive] = f2;
const v9 = new Map();
class C10 extends f0 {
    #h = v9;
    67 = v9;
    get h() {
        let v11 = this;
        /a*?/vdm;
        /W/disy;
        /[0ao2]/uis;
        ++v11;
        super[f0()];
        return v9;
    }
    static 512;
    [Map];
    #c = Map;
    static 8;
}
const v18 = new C10();
const v19 = new C10();
const v20 = new C10();
class C21 {
    constructor(a23, a24) {
        [a24,this,a23,this,C10];
        [this,a24,v20,a24,v9];
        [f0,C21,Map,a23];
    }
    2484123856;
    p(a29, a30, a31, a32) {
        super.b = a30;
        Object.defineProperty(C10, a30, { writable: true, enumerable: true, set: f0 });
        a30 = this;
        this[f0] &&= a32;
        return v18;
    }
    #a;
    194;
}
new C21(C10, v19);
new C21(v19, v18);
new C21(v19, v19);
new Float32Array(257);
new Float32Array(856);
new Float64Array(128);
function F45(a47, a48, a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    ~this | a50;
    const v53 = this.constructor;
    try { new v53(); } catch (e) {}
    typeof Float32Array;
}
new F45();
new F45();
