function f3() {
    return "XUEIh";
}
f3.g = f3;
class C4 {
    static a;
    constructor(a6) {
        const v7 = this?.constructor;
        try { new v7("-3"); } catch (e) {}
        const v9 = this?.__lookupGetter__;
        v9.name = v9;
        try { new v9(f3); } catch (e) {}
        try {
            a6.codePointAt(1400396935);
        } catch(e13) {
        }
    }
    static o(a15) {
        let v16;
        try { v16 = new a15(a15); } catch (e) {}
        function F17() {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = v16;
            } catch(e20) {
            }
            try {
                this.f = 3;
            } catch(e21) {
            }
            try {
                this.h = a15;
            } catch(e22) {
            }
        }
        const v23 = new v16();
        const v24 = new F17();
        const v25 = new F17();
        v25.b = v25;
        new Uint32Array();
        const v31 = new Uint32Array();
        const v34 = new Float64Array(10);
        v34[1] = v34;
        class C35 {
        }
        const v36 = new C35();
        const v37 = new C35();
        const v38 = [v37,v36,v23];
        function F39(a41, a42, a43, a44) {
            if (!new.target) { throw 'must be called with new'; }
            try { a41.entries(); } catch (e) {}
            const v46 = a42?.constructor;
            try { new v46(); } catch (e) {}
            const v48 = a41.unshift();
            v48 === v48;
            const v51 = new Set();
            function F52(a54, a55) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.d = a54;
                } catch(e56) {
                    for (let [v57,v58] of a54) {
                        try {
                            v51.values();
                        } catch(e60) {
                        }
                    }
                }
                try {
                    this.h = v51;
                } catch(e61) {
                }
                try {
                    const v62 = v51[this];
                    try {
                        new F52(v62, -268435456n);
                    } catch(e65) {
                    }
                    this.b = Set;
                } catch(e66) {
                }
            }
            const v67 = new F52(Set, Set);
            new F52(Set, F52);
            const v69 = new F52(v67, F52);
            const v73 = [65537,268435441,63298,-5,1235122603];
            const v74 = [128,215394418];
            const v75 = v74.entries();
            const v76 = [-2,-4294967296,4294967297];
            function F77(a79, a80, a81, a82) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v83 = new F77(-714582153, F77, -714582153, v74);
            const v85 = new F52(v69, null);
            new BigUint64Array(0);
            new Int32Array(1519);
            v83.length;
            const v93 = new F77(9, v83, 9, v76);
            v93.b = v93;
            new F77(1024, v93, v76, v76);
            const v102 = ("string").trimStart();
            v75[3];
            let v106;
            try { v106 = v102(); } catch (e) {}
            v73[v106] = v74;
            0 ^ 9;
            const v111 = -1000;
            ~9;
            v111 >>> v111;
            a = ("-3").length - F77;
            v51[v93];
            v85.__proto__;
            -35417 - -35417;
        }
        const v120 = new F39(v38, v24);
        new F39(v38, v31, v31, v120);
        new Uint8ClampedArray(256);
        new Uint8Array(1000);
        new C4(1024);
        return a15;
    }
}
try { C4.o("-3"); } catch (e) {}
let v132;
try { v132 = C4.toString(); } catch (e) {}
try { v132.strike(); } catch (e) {}
const v134 = new C4("mPdNY");
v134.b = v134;
const v135 = new C4("XUEIh");
v135.length;
v135.length = v135;
const v137 = new C4(v134);
v137.length = v137;
class C138 {
    static #p(a140, a141, a142) {
        Math.exp(a142);
        const v147 = --a142;
        const v148 = !"XUEIh";
        Math.sinh(a141);
        Math.atan(v147);
        Math.atan2("XUEIh", "XUEIh");
        Math.max(v148);
        return v147;
    }
}
try { new C138(); } catch (e) {}
try { new C138(); } catch (e) {}
const v155 = new C138();
const v156 = v155?.constructor;
try { new v156(); } catch (e) {}
const v158 = new C138();
const v159 = v158?.__lookupGetter__;
v159.g = v159;
try { new v159(v155); } catch (e) {}
const v161 = new C138();
const v162 = v161?.constructor;
let v163;
try { v163 = new v162(); } catch (e) {}
Uint8Array.name = Uint8Array;
new Uint8Array(2436);
const v169 = new Int8Array(1151);
v169[101] = v169;
16 >> 16;
try { Uint32Array.bind(v163); } catch (e) {}
try { Uint32Array.from(v155); } catch (e) {}
const v175 = new C138(16);
const v176 = v175?.constructor;
try { new v176(); } catch (e) {}
v175?.__lookupGetter__;
let v179;
try { v179 = new Uint32Array(Uint8Array); } catch (e) {}
try { v179.set(v163); } catch (e) {}
try { ("K8gA").fixed(); } catch (e) {}
class C185 {
    static #c = "bigint";
    static valueOf(a187) {
        this.#c = "bigint";
    }
}
C185.prototype = C185;
let v192 = 4294967295;
v192 + v192;
v192++;
