const v0 = [];
const v1 = [-1.2706617417148058e+308,-4.0];
const v2 = [NaN,-1000.0,3.0,-1000000000.0,-192.50692669798423,3.1531974825238006e+307,3.0];
const v3 = [0.8915686893418059,-1000000000.0,-5.403025028004799e+307,0.001481333269318874,-1.7529620373911504e+308,1000000000.0,536977.877166];
const v4 = typeof v0;
v4 === "boolean";
let v7;
try { v7 = v4("boolean", v2, v1, v3, v4); } catch (e) {}
try { v0.includes(v0, v7); } catch (e) {}
const t9 = "name";
t9[0] = "name";
10n ^ 10n;
15n * 15n;
const v20 = [256,4294967295,-18405,-9007199254740990];
[-15219,-1073741824];
const v22 = [-1202139240,420487983,1073741824,-4];
v22[3] = v22;
function f23() {
    return f23;
}
2147483647 >>> 2147483647;
const v28 = new BigUint64Array(-256);
v28.byteOffset;
const v31 = Promise.unscopables;
v28[v31] = v31;
function F32(a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    a35 / a35;
    try {
        this.b = a36;
    } catch(e38) {
    }
    try {
        this.c = v3;
    } catch(e39) {
    }
}
new F32(v2, 8, v20);
const v41 = new F32(v7, -256, -536870912n);
v41.c = v41;
new F32(v1, -8, "symbol");
try { new Float64Array(-8, Float64Array, v41); } catch (e) {}
for (const v45 in v28) {
    new Float64Array(2147483647);
}
