const v0 = [5,-3,3,1940506048,-10,35085,4294967296,14,38416,1859296681];
const v1 = [9007199254740991,-256,1282034598];
const v2 = [-4294967297,268435456,-1839084205,536870887,128];
class C3 {
    static f;
    [C3];
    e;
    static [v0] = v1;
    static #b;
    get b() {
        function F5(a7, a8) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.f = a8;
            } catch(e9) {
            }
        }
        new F5(this, v0);
        new F5(this, v1);
        new F5(v2, this);
        return F5;
    }
}
const v13 = new C3();
const v14 = v13?.constructor;
let v15;
try { v15 = new v14(); } catch (e) {}
new C3();
const v17 = new C3();
new BigUint64Array(2154);
new Uint8ClampedArray(956);
const v26 = new Uint32Array(1);
const v27 = [];
class C28 {
    [v27];
    set a(a30) {
        a30 === v27 ? a30 : v27;
        [v27,a30,a30,v27];
        [v27];
        [a30,v27,v27,v27,v27];
    }
    static [v27];
    #f;
    h = v27;
}
const v36 = new C28();
const v37 = new C28();
let v38 = new C28();
let v39;
try { v39 = v38.constructor(); } catch (e) {}
({"length":v38,} = v27);
v17[268435439] = v1;
try { v39(); } catch (e) {}
try { v1.sort(v15); } catch (e) {}
v37[Uint8ClampedArray];
-56455 !== -56455;
function F47(a49, a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(a52, this, a51, a51); } catch (e) {}
    a49++;
    a51.h = a51;
    try { a52.findLast(a51); } catch (e) {}
}
const v56 = new F47(-12, -56455, v38, v27);
const v57 = new F47(v36, -14, v36, v38);
const v58 = new F47(v36, -14, v38, C28);
const v59 = v58?.constructor;
try { new v59(v26, v26, v58, v26); } catch (e) {}
const v62 = Math?.expm1;
try { new v62(Uint8ClampedArray); } catch (e) {}
function f64(a65, a66, a67, a68) {
    return a68[a65];
}
f64(v36, 956, v13, v1);
-1.0 + -1.0;
const v73 = v58 - -12;
v73 | v73;
Math.round();
let v76 = v56 << -1.0;
v76++;
try { v57(); } catch (e) {}
