function F0() {
    if (!new.target) { throw 'must be called with new'; }
    let v2 = -268435456;
    try {
        this.d = v2;
    } catch(e3) {
    }
    try {
        this.h = v2;
    } catch(e4) {
    }
    try {
        this.c = v2;
    } catch(e5) {
    }
    v2 *= v2;
    this > this;
}
new F0();
let v11 = new F0();
const v12 = new F0();
const v15 = new v11(331);
const v18 = new Date();
function f19() {
    function F20(a22) {
        if (!new.target) { throw 'must be called with new'; }
        const v23 = this.constructor;
        try { new v23(); } catch (e) {}
    }
    class C25 extends 512 {
        #p(a27, a28) {
        }
    }
    try { new C25(); } catch (e) {}
    return f19;
}
new Int32Array(512);
const v34 = new Float32Array(9);
function F36(a38, a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
}
const v42 = new F36(164140152, F36, 164140152, 164140152);
v15[331] = Int16Array;
const v45 = [601759695];
const v46 = [1073741824,1073741823,1376142744,1073741825];
function f47(a48, a49, a50, a51) {
    let v53 = 536870887;
    v53++;
    BigUint64Array >> v53;
    let v57;
    try { v57 = v46["find"](..."find", a51, ...v45, ...v18); } catch (e) {}
    return v57;
}
for (let v58 = 0; v58 < 5; v58++) {
    f47(v46, v58, v58, v58);
}
v12[1410] = 5n;
("async").lastIndexOf();
function f64() {
    return f64;
}
for (let v65 = 0; v65 < 5; v65++) {
    function f66() {
        const v68 = ("Vre").strike();
        function f69() {
            const v72 = Array(4087);
            v72[4037] = v72;
            for (const v73 of "Vre") {
            }
            return Array;
        }
        %PrepareFunctionForOptimization(f69);
        const v74 = v68.link();
        v74[7] = v34;
        const v75 = v11[v65];
        try { v75(v34); } catch (e) {}
        v11 = v12;
        ("Vre")[65537];
        v74.includes(164140152);
        const v80 = Array();
        v80.unshift(v42, v65, F36, v65, v80.pop());
        const v84 = new Set();
        v84.add().entries();
        class C87 {
        }
        const v88 = new C87();
        v88.hasOwnProperty(v74);
    }
    f66();
    %OptimizeFunctionOnNextCall(Int32Array);
}
