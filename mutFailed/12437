function f2(a3, a4) {
    return "fZrjd";
}
BigUint64Array.toString = f2;
const v8 = new BigUint64Array(10);
let v9 = -11n;
v9--;
const v13 = v8.__proto__;
try { v13.at(v13); } catch (e) {}
for (let v15 = 0; v15 < 32; v15++) {
    v15 >>> v15;
    let v19 = -13620;
    v19 + v19;
    const v21 = v19++;
    -2147483649 >> v19;
    +v21;
    const v25 = "p" + v15;
    class C26 extends BigUint64Array {
        static 8;
        [BigUint64Array] = v25;
    }
    new C26();
    new C26();
    new C26();
    try { v25.match("p"); } catch (e) {}
    v13[v25] = v15;
}
const v33 = new Float64Array(1691);
v33[992];
4096 / 4096;
async function f37(a38, a39, a40, a41) {
    await -1.0;
    return 1691;
}
f37(v9, -26380n, 4096, 4096);
const v48 = new Int32Array(4096);
v48[3117] = v48;
new Uint8ClampedArray(16);
new Int32Array(9);
let v55 = 8;
v55--;
try { new Uint32Array(128n, v13, v13); } catch (e) {}
const v59 = new Uint32Array(v55);
try {
    v33.__proto__ = "64";
} catch(e65) {
}
const v67 = [426020949,-89353986,13,-407714920,536870888,2];
v67[3] = v67;
[9];
[-1105230202,-256,1963208260];
function f71() {
}
const o74 = {
    "type": "function",
};
o74.arguments = v59;
new Worker(f71, o74);
