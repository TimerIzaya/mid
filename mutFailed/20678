const v3 = new Float32Array(256);
const v6 = new Uint32Array(0);
const v9 = [-12,0,-2107431110,4,512,-63916];
const v11 = [-950834992,-268435456,536870912,2,-4294967295,12846,1000,38663,1841996067,721870135];
try { v11.pop(); } catch (e) {}
const v13 = [3,-6,7268,-554513674,5,4294967295,861325878,17152,2147483647,5];
try { v13.map(); } catch (e) {}
function f15(a16, a17, a18) {
    a16 / a16;
    try { a17.pop(); } catch (e) {}
    return a17;
}
try { f15.toString(); } catch (e) {}
f15(-0.22113456748615867, v9);
const v23 = f15(v13, v11);
const v24 = v23?.filter;
try { new v24(256); } catch (e) {}
const v26 = v23.fill();
try { v26.toLocaleString(); } catch (e) {}
const v28 = f15(v13, v23);
try { v28.entries(); } catch (e) {}
const v30 = new Uint16Array(1513);
class C31 {
    [0] = 1513;
    static {
        this.d = this;
    }
    static #h;
    static [256] = v6;
    constructor(a34, a35, a36, a37) {
        a36 + a36;
        v30 instanceof Uint16Array;
        this.e *= a34;
    }
    #b;
    set a(a41) {
        super[Uint32Array] = this;
        /F/vdi;
        /sfoo(?!bar)baz/vdms;
        /HQw(?<=a)7J\xed\xb0\x80P/gmy;
        const v47 = new Int32Array(1024);
        v47[-1];
        parseInt("pop");
        new Uint32Array(v6);
    }
}
const v53 = new C31(0, 1513, 256, 0);
const v54 = new C31(1513, 256, 1513, 0);
v54[0] = v54;
new C31(0, 0, 0, 256);
try { new BigUint64Array(BigUint64Array, BigUint64Array, v53); } catch (e) {}
const v59 = new BigUint64Array(-49281622);
v59[1288];
const v63 = new Int16Array(5);
try { new Float32Array(Float32Array, Float32Array, Float32Array, C31); } catch (e) {}
new Float32Array(v63);
function f67(a68, a69, a70) {
    a68 >> a68;
    a70++;
    return a69;
}
Int32Array.BYTES_PER_ELEMENT = Int32Array;
function f74() {
    return Int32Array;
}
let v77 = -4294967297n;
v77 - v77;
v77++;
const v81 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v82 = [601759695];
const o83 = {
};
o83.d = o83;
("undefined").localeCompare("undefined", o83);
const v86 = v82.splice(-128, -128, -1547267477n, v81);
const v87 = [1073741824,1073741823,1376142744,1073741825];
function f89(a90, a91, a92, a93) {
    a91 % a91;
    arguments[2] = arguments;
    arguments[2] = arguments;
    function f96() {
        const v98 = ("Vre").toLocaleUpperCase;
        try { v98(v98, v77, a92, v87); } catch (e) {}
        const v100 = ("Vre").fixed();
        try { v100.match(-0.22113456748615867); } catch (e) {}
        let v102;
        try { v102 = v100.replace(v98, "g"); } catch (e) {}
        try { v102.toString(); } catch (e) {}
        const v104 = v100.codePointAt();
        const v105 = v104 * v104;
        v105 >>> v105;
        let v108 = -268435456;
        const v109 = v108--;
        const o123 = {
            "c": v77,
            [522675525n](a111, a112) {
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v82,
            [v77]: v98,
            __proto__: a92,
            "d": v109,
            "e": -4294967295,
            "h": v86,
            valueOf(a114, a115) {
                return v100;
            },
            "e": -4294967295,
            "e": v108,
            "maxByteLength": -4294967295,
            "arguments": v81,
            ...v82,
            "type": f96,
            ..."Vre",
            valueOf(a117, a118) {
                this[0] = this;
                return this;
            },
            ..."Vre",
            4: "Vre",
            "EPSILON": v108,
            "split": "Vre",
            "type": f15,
            toString(a120, a121, a122) {
                return this;
            },
            5: -4294967295,
            6: v108,
        };
        try { o123.toString(Uint16Array, v13, v3); } catch (e) {}
        o123[60] = v105;
        o123[60] = o123;
        const t133 = "Vre";
        t133[5] = o123;
        const v125 = o123.valueOf();
        v125[60] = v125;
    }
    f96.arguments = f96;
    const v126 = f96();
    %OptimizeFunctionOnNextCall(f96);
    return v126;
}
for (let v127 = 0; v127 < 5; v127++) {
    f89(v82, v127, v127);
}
const v130 = ([-1000000000000.0,-1.7976931348623157e+308,294500.85018206923,-Infinity,-0.0,-7.010036940344757e+307,1.0,-Infinity,-1000.0,-1.1645821156926988e+308]).reduce(f67);
typeof (undefined >> undefined) === "getUTCMinutes";
v59.toLocaleString(v130);
