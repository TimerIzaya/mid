const v0 = /J(a)/vdms;
const v1 = /6+/gusy;
const v2 = /{z}3XS(?!a)?a\1/gdis;
const v3 = [9007199254740990,-15,-65535,-1821611176,1000,3,-15,2147483648,8651,536870912];
v3[1];
let v5;
try { v5 = v3.copyWithin(v1, v2); } catch (e) {}
try { v5.toLocaleString(); } catch (e) {}
([-65537,1490930242,-9223372036854775808,-12,-4294967296,2147483649])[3];
function f9(a10, a11, a12, a13) {
    a12 * a12;
    const o15 = {
    };
    o15.__proto__;
    return f9;
}
const v17 = [829216629,536870912,257,44970,-2,-15744,536870888,-4];
let v18;
try { v18 = v17.toString(); } catch (e) {}
try { v18.charAt(v17); } catch (e) {}
const v20 = [v17,v17];
v20[1];
const v22 = [v20,v0,v17];
let v23;
try { v23 = v22.includes(f9); } catch (e) {}
v23 && v23;
const v26 = ([v22,v2,v20])?.sort;
try { new v26(v23); } catch (e) {}
-1292108582n >> -1292108582n;
-1292108582n ^ -1292108582n;
-4294967295n * -4294967295n;
function f34() {
    return -268435456n;
}
const v36 = [1321234440,-2012385285,503280511,-65535,-50525,1929142229];
function F37(a39) {
    if (!new.target) { throw 'must be called with new'; }
    try { this.constructor(v22); } catch (e) {}
    const v41 = this?.constructor;
    v41.arguments = v41;
    try { new v41(-268435456n); } catch (e) {}
}
F37.prototype;
const v44 = new F37();
const o47 = {
    "execution": "async",
    "type": "minor",
};
const v48 = v44?.constructor;
try { new v48(f9); } catch (e) {}
class C50 {
}
const v51 = [-6.8035006781971e+307,1000000.0,1000.0,-2.715046407601891];
class C53 extends Array {
}
const v54 = new C53();
v54.concat(v51);
C50.d = C50;
const v56 = new C50();
try {
    const o57 = {
        "type": "minor",
    };
    o57.h = v44;
    o57.f = v56;
} catch(e58) {
}
try { v36.findIndex(-1292108582n); } catch (e) {}
try {
    v36.sort(-5);
    ([-7,-18455])["pop"]();
    new Uint32Array(5);
    const v71 = new Uint8ClampedArray(3);
    class C72 {
        constructor(a74, a75, a76, a77) {
            const v78 = this.constructor;
            try { new v78(3, a77, this, this); } catch (e) {}
            for (let v80 = 0; v80 < 5; v80++) {
                v71[v80] = a77;
            }
        }
    }
    new C72();
    new Uint16Array(96);
    const v83 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    const v84 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
    new Uint32Array(v84, v83.length);
} catch(e88) {
    function f89(a90, a91, a92, a93) {
        let v94;
        try { v94 = a91.apply(a93, a91); } catch (e) {}
        return v94;
    }
    %OptimizeFunctionOnNextCall(f89);
    e88.name = e88;
    function F95() {
        if (!new.target) { throw 'must be called with new'; }
    }
    const o99 = {
        [57144]: 4294967296,
    };
    const v100 = F95?.constructor;
    try { new v100(v3); } catch (e) {}
    class C102 {
        constructor(a104, a105, a106) {
            const v107 = this?.constructor;
            try { new v107(F37, f9, f9); } catch (e) {}
            a105.name;
            const v110 = a105.constructor;
            try { new v110(v0); } catch (e) {}
            class C112 extends v110 {
            }
            new C112();
        }
    }
    const v114 = new C102(F95, C102);
    try { v114.hasOwnProperty(f89); } catch (e) {}
}
