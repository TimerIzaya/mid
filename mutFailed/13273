class C3 {
    h;
    static #a = "m";
    static {
        let v5;
        try { v5 = new this(); } catch (e) {}
        for (let v6 = 0; v6 < 5; v6++) {
            v6 & v6;
        }
        function f8() {
            return f8;
        }
        Array(36862, f8.arguments);
        v5.d = v5;
        const v14 = ("NFKD")[1];
        try { ("-54440").split("-54440", v14); } catch (e) {}
        ("-54440").normalize("NFKD");
        const v19 = gc.length;
        v19 % v19;
        ("minor").length;
        const o24 = {
            "execution": "sync",
            "type": "minor",
        };
        gc(o24);
    }
}
const v26 = new C3();
new C3();
const v28 = new C3();
const v29 = v28?.constructor;
try { new v29(); } catch (e) {}
try { ("symbol").codePointAt(v26); } catch (e) {}
try { ("symbol").toLocaleLowerCase(); } catch (e) {}
let v36 = 1753;
const v37 = v36++;
v37 + v37;
const v40 = new Uint32Array(v36);
try { v40.subarray(C3, "m"); } catch (e) {}
let v42;
try { v42 = v40.indexOf("getMonth"); } catch (e) {}
v42 / v42;
3856 - 3856;
Uint16Array.e = Uint16Array;
const v47 = new Uint16Array(3856);
v47[1343];
let v51;
try { v51 = Int32Array.of(); } catch (e) {}
const v52 = v51?.constructor;
try { new v52(v42, v51, v28); } catch (e) {}
new Int32Array(4);
203 - 203;
!-2;
function F61(a63) {
    if (!new.target) { throw 'must be called with new'; }
    a63 >>> a63;
    try {
        a63 *= this;
        const v65 = 139837843 in this;
        const v68 = 0 <= 0;
        const v70 = new Int8Array(0);
        for (const v72 in v70) {
            0 ^ v68;
            Object.defineProperty(this, this, { writable: true, configurable: true, enumerable: true, value: v65 });
            this[129] = v72;
        }
        new BigUint64Array(10);
        128 !== 128;
    } catch(e79) {
    }
}
const v81 = new Float64Array(203);
const v83 = new BigInt64Array();
const v84 = new Float32Array(v81);
v84[49] = v84;
for (let v85 = 0; v85 < 25; v85++) {
    try { ("p").replace("symbol", "p"); } catch (e) {}
    v83["p" + v85] = v85;
}
for (let v89 = 0; v89 < 5; v89++) {
    let v91;
    try { v91 = ("p").codePointAt("symbol"); } catch (e) {}
    v91++;
    v83["p" + v89] = v89;
}
