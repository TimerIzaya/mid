[];
const v4 = [10,1091321419,11475,-35321,-49219,-51397,335261656,-1,-65536,-4294967296];
const v5 = [-1803975943,57715,-9007199254740992];
[2147483647,13,536870912,-13,-1024,536870887];
const v10 = new Uint8ClampedArray(1000);
const v12 = v10 ^ 3;
+v12 + -3.0;
[1000.0,8.806760127177498,["undefined",8.806760127177498,v5,345168.6487633812,"undefined"],v4,v5];
[-3.0];
const v24 = Symbol.iterator;
const t10 = "string";
t10[v24] = v24;
const v26 = new Uint16Array(4294967295, 4294967295);
const v31 = new Float32Array(7);
const o35 = {
    m() {
        const o34 = {
        };
    },
};
const v37 = new v12();
function F38(a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    const v43 = this?.constructor;
    try { new v43(Uint16Array, a42, a42); } catch (e) {}
    v26 * a40;
    a42++;
    this.d = a40;
    Float32Array.g = Int32Array;
}
new F38(F38, 256, 256);
const v48 = new F38(256, v37, 4294967295);
const t32 = v48.g;
new t32(Uint16Array, v31, 7);
class C52 {
    #a;
    constructor(a54, a55, a56) {
    }
}
new F38(256, Float32Array);
Math.asinh();
const v62 = new Float32Array(Float32Array, Float32Array);
v62.h = v62;
(256).sin();
