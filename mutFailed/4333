const v2 = new Float64Array(10);
new Uint8Array(4096);
const v8 = new Int16Array(2);
let v9 = 1079;
const v11 = new Uint8Array(v9);
Object.defineProperty(v11, Uint8Array, { writable: true, value: Int16Array });
v2[v2] = 3;
v9 **= 2;
let v14;
try { v14 = Uint8Array(v8, 4096, 2); } catch (e) {}
const v18 = new Int16Array(3, 2);
const o20 = {
};
const v22 = new Proxy(v18, o20);
let v25 = 1758647450;
v25 || 0.4468632749270779;
const v28 = v25--;
Float64Array.clz32(+o20);
Float64Array.atanh(v28);
new Int32Array(129);
v22[-1] |= 3;
[Int16Array,512,v18,2,4096,[v14],v18];
[v22,2,2,129,Int32Array];
try {
    new Int16Array(3);
} catch(e38) {
}
function f39(a40, a41) {
    a41(a40, a40, a41, f39);
}
new Promise(f39);
([1000000000000.0,6.579220753226213e+307,2.0,-2.220446049250313e-16,NaN,-1000000.0])["findIndex"](gc);
