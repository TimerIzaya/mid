[];
new BigInt64Array(4294967296);
function F6(a8) {
    if (!new.target) { throw 'must be called with new'; }
    a8 ^ a8;
    const v10 = this?.constructor;
    try { new v10(3n); } catch (e) {}
}
let v12 = -9223372036854775808;
v12--;
const v16 = new Int8Array(7);
let v17 = 132;
v17--;
const v21 = new Uint32Array(4);
try { v21.fill(v21); } catch (e) {}
const v24 = [v21];
v24[0] = v24;
new Int16Array(v24);
new Int32Array(2);
try {
    v24.b = v17;
} catch(e29) {
}
const v31 = new Int16Array(v17);
v31[47] = v31;
const v33 = [-1235077344,-4096,50383815,-8476,-9007199254740991];
class C35 extends Set {
}
C35.b = C35;
v24[v16];
try {
    ArrayBuffer.isView(false);
} catch(e40) {
}
new C35(v33);
new BigInt64Array(8);
const v45 = [-1.5424212036356715e+308];
try { v45.some(Int8Array); } catch (e) {}
v45[536870887n] = v45;
const v49 = new Uint32Array(16);
v49.indexOf(v49, 16);
([-Infinity,Infinity,959819.665748626])["concat"]([Uint32Array]);
new Int8Array(16);
function f60(a61, a62) {
    const o63 = {
        ...a61,
    };
    o63.e = o63;
    o63.g = o63;
    return f60;
}
f60.d = f60;
%PrepareFunctionForOptimization(f60);
const t53 = f60();
t53(f60);
%OptimizeFunctionOnNextCall(f60);
const v66 = f60();
v66.name = v66;
