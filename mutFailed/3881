const v0 = /3WC(?<a>.)*/vimsy;
const v1 = /g/vdiy;
function f2(a3) {
    const v5 = [[v0,a3,v1,v0,a3],v1];
    [v5,v5];
    return v5;
}
v1[Symbol.iterator] = f2;
const v9 = /E{12,3b/diy;
function F12(a14, a15, a16, a17) {
    if (!new.target) { throw 'must be called with new'; }
}
const o18 = {
};
try { o18.p(o18, ...-9n, -128n); } catch (e) {}
new F12(F12, F12, F12, F12);
function f24(a25, a26) {
    const o34 = {
        __proto__: a26,
        "b": a26,
        [a25]: a26,
        "c": a25,
        "e": a26,
        valueOf(a28, a29) {
            try {
            } catch(e30) {
            }
            Math.cos(0.8497483139616006);
            super[a28] = "undefined";
            return a29;
        },
    };
    return a25;
}
const v35 = f24();
const v36 = new Uint8Array(257);
try { v36.entries(); } catch (e) {}
2061 - 2061;
let v41;
try { v41 = new v35(v1, v35, Int8Array); } catch (e) {}
try { v41(); } catch (e) {}
let v44 = new Int8Array(v1, v41, 2061, v35);
v44 = o18;
const v45 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v46 = 0; v46 < 25; v46++) {
    v45["p" + v46] = v46;
}
const v50 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v51 = [601759695];
const v52 = [1073741824,1073741823,1376142744,1073741825];
function f54(a55, a56, a57, a58) {
    function f59() {
        let v62 = Float64Array;
        v62 = a56;
        b = v51;
        const v63 = v45.length;
        try {
            v52.forEach(v62);
        } catch(e65) {
        }
        const v66 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v68 = Symbol.toPrimitive;
        const o74 = {
            toString(a70, a71) {
                const v72 = a58 && v62;
                a70 *= v68;
                return v62;
                return v72 <= v66;
            },
        };
        const o94 = {
            "c": -4294967297n,
            [522675525n](a77, a78) {
            },
            "c": v51,
            valueOf(a80, a81) {
            },
            "b": -4294967295,
            [-4294967297n](a83, a84, a85, a86) {
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v50,
            ...v51,
            "type": "Vre",
            ..."Vre",
            valueOf(a88, a89) {
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "type": "Vre",
            "type": "Vre",
            toString(a91, a92, a93) {
            },
            5: -4294967295,
            6: -268435456,
        };
        const v95 = v50[f54];
        try { v95.n(v63, F12); } catch (e) {}
        v62 = Symbol;
        for (let v97 = 0; v97 < 32; v97++) {
            a58["p" + v97] = v97;
        }
    }
    f59();
    new Int8Array();
    %OptimizeFunctionOnNextCall(f59);
    try { v52["find"]("find", a58, v51, v52); } catch (e) {}
}
const v106 = new Uint16Array(2061);
function f107() {
    function f108(a109, a110) {
        const o114 = {
            "execution": "async",
            "type": "minor",
        };
        gc(o114);
        return v9;
    }
    return f108;
}
Object.defineProperty(v106, Symbol.toPrimitive, { get: f107 });
const o120 = {
};
const v122 = new Set();
function F123(a125, a126) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a125;
    } catch(e127) {
    }
    try {
    } catch(e128) {
    }
    v122[this];
    try {
        new F123(a126, v122);
    } catch(e131) {
    }
}
new Int8Array(6);
const v135 = new Uint32Array(2432);
v135[1556] = v135;
const o145 = {
    "execution": "undefined",
    ..."undefined",
    "g": 2432,
    [v106](a137, a138, a139) {
    },
    ...v135,
    o(a141) {
        const o143 = {
        };
        return gc(o143);
    },
};
const o149 = {
    "execution": "sync",
    "type": "minor",
};
gc(o149);
for (let v151 = 0; v151 < 25; v151++) {
    function f152() {
        return f152;
    }
    const v153 = [601759695];
    const v154 = [1073741824,1073741823,1376142744,1073741825];
    function f155(a156, a157, a158, a159) {
        function f160() {
            return a156;
        }
        const v161 = f152();
        new Int8Array();
        new Uint32Array();
        [v161,v161,v161];
        BigUint64Array * 536870887;
        try { v154["find"](..."find", a159, ...v153); } catch (e) {}
        return f152;
    }
    for (let v172 = 0; v172 < 10; v172++) {
        f155();
    }
}
o145[1267] = o145;
