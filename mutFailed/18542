const v0 = [657.3627907947221,1000.0,0.15057615785280953,-Infinity,-2.0,-4.0];
const v1 = [369280.8885613787,845882.7614284807];
v1.c = v1;
[3.5791757403770035,1.7097916232581339e+308,816810.6338039055,-3.0,1.7976931348623157e+308,2.220446049250313e-16,3.857172763700639,1.5755263537738785e+308,-1.0];
function f5(a6, a7) {
    const v8 = /(?:a*)+q(?<a>.)/guds;
    for (let i11 = 0, i12 = 10;
        (() => {
            const v13 = i11 < i12;
            v13 && v13;
            return v13;
        })();
        i12--) {
        for (let v20 = 0; v20 < 5; v20++) {
            v8.constructor;
            const v23 = [i12,i12,i12,i12,i12];
            function f24(a25, a26) {
            }
            v23.valueOf = f24;
            v23[4];
            v23 > 8n;
        }
    }
    return v0;
}
BigInt64Array.toString = f5;
new BigInt64Array(14);
new BigUint64Array(6);
BigInt64Array.toString = f5;
const v35 = new BigInt64Array(255);
let v37 = 10;
for (; v37--;) {
    const v39 = v35.length;
    try {
        v1.c = v39;
    } catch(e40) {
    }
}
const o43 = {
};
function f44(a45, a46) {
    a45 * a45;
    function F48(a50, a51, a52) {
        if (!new.target) { throw 'must be called with new'; }
        const v53 = this.constructor;
        try { new v53(); } catch (e) {}
        this.d = a50;
    }
    return a45;
}
o43.constructor = f44;
class C56 {
}
C56[Symbol.toPrimitive] = f44;
const v59 = o43.constructor;
const v61 = 1922 % 1922;
const v62 = v61 == v61;
for (let v63 = 0; v63 < 25; v63++) {
    function f64() {
        return f64;
    }
    function f65(a66, a67, a68, a69) {
        a67.freeze(f64);
        a69 + a69;
        function f72() {
        }
        const v74 = -f72.length;
        const v76 = f64().constructor;
        let v77;
        try { v77 = v76(); } catch (e) {}
        const o82 = {
            "maxByteLength": 1269,
        };
        const v84 = new SharedArrayBuffer(64, o82);
        new Int32Array(v84);
        function f89() {
            return 1922;
        }
        const v91 = v77.bind().bind();
        v76 * v62;
        const v93 = typeof f72;
        v93.italics(v93, v74, v91);
        const v96 = v93 === "n";
        const v98 = new Int8Array();
        const v99 = v98.entries();
        v99.next();
        v99.next(1.185961373472971e+308);
        function f102() {
            return f64;
        }
        const v103 = f102();
        const v104 = [65535,-10,4294967296,-10,36724,65536,-2147483647,52881,2,4096];
        function f106(a107, a108, a109) {
            const v111 = [Array,a109];
            Reflect.apply(v104.filter, v103, v111).find(v77);
        }
        f106.caller = f106;
        [];
        const v118 = ("find").blink().replaceAll;
        try { v118(v96); } catch (e) {}
    }
    for (let v120 = 0; v120 < 5; v120++) {
        f65(v120, v59, v59, 1922);
    }
}
const v122 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
C56 <= 6 ? C56 : 6;
let v130 = BigInt64Array & -1;
(v130 && --v130) - -15500;
-(-1);
v122.length;
