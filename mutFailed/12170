const v2 = /(?:a*)+q(?<a>.)/guds;
v2.hasIndices = v2;
const v5 = new Int16Array(1269);
for (const v6 in v5) {
}
const t5 = 1269;
new t5(12);
new BigUint64Array(127);
new Float64Array(3287);
function f14() {
    let v15 = -1000000000.0;
    const o23 = {
        o(a17, a18) {
            function f19(a20, a21, a22) {
                v15 |= a18;
            }
        },
    };
}
const v24 = f14();
const v25 = v24();
const v26 = Float64Array();
const v28 = /[\cA]?/d;
const v29 = /jU/vims;
const v30 = /a+b|c/gvdimsy;
function f31(a32, a33, a34) {
    const o39 = {
        set a(a36) {
            v24.g;
            super.toString();
        },
    };
}
const v40 = f31(v25, v29, v26);
const v41 = f31(v30, v30);
const v42 = f31(v29, v28, v40);
const v43 = /a\S/gudsy;
const v44 = /\u{12345}\u{23456}/vsy;
try {
    v41.fuck([v44,v42,v29,v43,-52627n], false);
} catch(e48) {
}
for (let v50 = 0; v50 < 5; v50++) {
    function f51() {
        const v53 = ("1073741824").constructor;
        return v53(f51, v50, v53, "1073741824", v53);
    }
    f51();
    %OptimizeFunctionOnNextCall(f51);
}
for (let v58 = 0; v58 < 100; v58++) {
    Math.random();
}
const v61 = [23795,8,259058917,-256,1,-36806,4096,-9,-1,-18943];
new Date(3287, v42, v61, v61, 3287);
("boolean")[6];
