const v1 = [];
const o3 = {
    __proto__: v1,
    [v1]() {
    },
};
function f5() {
    return 536870888;
}
6391 >>> -425087802;
new WeakMap();
[1.0,-2.1133704144450522,1000000.0,0.0,1000000000.0,7.456609869379548];
const v12 = [Infinity,-984084.769118349,526722.307642122,2.0,4.72594214408868,-311.8739443298184,-1.7976931348623157e+308,-1.0];
[-9.45511447481787e+307,0.0];
new Uint32Array();
function F20(a22, a23) {
    if (!new.target) { throw 'must be called with new'; }
    const v24 = o3?.constructor;
    try { new v24(0.29489550717955537, a22); } catch (e) {}
    try { this.constructor(0.6822080711934364, this); } catch (e) {}
    try {
        this.f = 3.0;
    } catch(e27) {
    }
}
new F20();
let v29 = 1073741824;
class C31 {
    constructor(a33) {
        const v36 = new BigInt64Array(3);
        try { Float32Array.from(v36); } catch (e) {}
        [C31,v29] = "boolean";
        const o39 = {
            "d": "boolean",
        };
        o39.e = o39;
        new Float32Array(false);
    }
}
new F20();
new v29(10);
new Uint8ClampedArray(7);
new Uint32Array(Uint32Array);
f5();
class C53 {
}
class C54 {
    static [v12] = v12;
    set e(a56) {
        const v58 = this.iterator;
        const o64 = {
            [v58]() {
                let v60 = 10;
                const o63 = {
                    next() {
                        v60--;
                        return 10;
                    },
                };
            },
        };
    }
}
("getBigInt64").normalize();
