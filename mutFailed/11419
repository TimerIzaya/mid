class C3 {
    constructor(a5) {
        const v8 = new Date();
        v8.toLocaleDateString(Date);
        new Int8Array(8);
        [this];
        function f14() {
            return f14;
        }
        const v15 = f14.arguments;
        function f16() {
            for (let v17 = 0; v17 < 5; v17++) {
                Array(36862, v15, v17 & v17);
            }
            return f14;
        }
        ("g")[Symbol.replace];
    }
    static n(a25, a26) {
        let v24 = this;
        try { a25.p(v24, a26, a26); } catch (e) {}
        v24 /= g;
        let v31 = 0;
        v31--;
        const v33 = v24--;
        +v24;
        Math.trunc(v33);
        return v31;
    }
}
const v36 = new C3("g");
const v37 = new C3(v36);
const v38 = new C3(v36);
const v39 = [2.412578955630149,2.7008822875610345,-2.220446049250313e-16,-1.0,-1000000000.0,-1.0,3.9002388983145044e+307,-Infinity,-1e-15,-4.2464820531165003e+307];
const v40 = [-1e-15,4.0,362.9742459010415,1.488212487511409e+308,3.0];
class C41 {
    constructor(a43, a44) {
        super[v40] = v39;
    }
    n(a46) {
        try { new a46(a46, a46, a46, 50697, 50697); } catch (e) {}
        const o49 = {
            "b": 256,
        };
        new gc();
        this[2] = 50697;
        const o54 = {
            "maxByteLength": 1024,
        };
        const v56 = new ArrayBuffer(1024, o54);
        new Int8Array(v56);
        return 50697;
    }
}
function f59(a60) {
    return C41;
}
const v62 = new Set();
class C63 extends Set {
    static #p(a65, a66) {
        new C3(a65);
        async function f68(a69, a70, a71) {
            this - a66;
            Symbol.matchAll;
            this[a71];
            await a65;
            return v38;
        }
        f68(this, v38, v37);
        return v39;
    }
    g = v36;
    static 2578;
}
const v78 = new Set();
const v79 = new C63();
const v80 = new C63();
[[["m","m",v80,v62,v78],"g",v79,v62,v79]];
const v84 = [];
function F85() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v87 = `
            for (let v88 = 0; v88 < 5; v88++) {
                class C89 {
                }
                const v90 = new C89();
                function f91(a92, a93) {
                    const o98 = {
                        [v90](a95, a96, a97) {
                        },
                    };
                }
            }
        `;
        const o107 = {
            set e(a106) {
            },
        };
        function f108(a109) {
            a109 === a109;
            a109 <= a109;
            const o115 = {
                ...a109,
                p(a113, a114) {
                },
            };
        }
    } catch(e116) {
    }
    try {
    } catch(e117) {
    }
    try {
    } catch(e118) {
    }
}
const v119 = new F85();
const v120 = new F85();
const v121 = new F85();
const v122 = [v84,v121];
const v123 = [1000000.0,4.0,877990.5497759602,-506457.5906391711,1.5877136832764825e+308,-5.0,0.37988723353754195];
const v124 = [-2.2250738585072014e-308,4.258971338651328e+307];
class C126 {
    #valueOf(a128, a129) {
    }
    static #a = v124;
    #g = 536870887n;
    static #f = v123;
    #b;
}
const v131 = [v119,v84,v120];
let v132 = undefined;
const v133 = v132++;
v133 + v133;
class C135 {
}
new C135();
const o137 = {
};
const t140 = "undefined";
t140["256"] <<= 4.0;
[v122,F85,v131,v84];
try { v122.flat(); } catch (e) {}
const v145 = new Int8Array(v132);
try { v145.find(v121); } catch (e) {}
new Uint8ClampedArray(268435440);
function f152(a153, a154, a155, a156) {
    Object.defineProperty(a153, a155.toPrimitive, { configurable: true, enumerable: true, value: f152 });
    new WeakMap();
    const v163 = new BigUint64Array(10);
    function F164() {
        if (!new.target) { throw 'must be called with new'; }
        try {
            Object.defineProperty(v163, 0, { writable: true, value: 4096 });
        } catch(e167) {
        }
    }
    new F164();
    const o173 = {
        toString(a170, a171) {
            new Date(a153);
        },
    };
}
