const v2 = new Uint8Array(1025);
const v4 = 10 - v2;
const v6 = new Float32Array(Uint8Array);
v4[8];
const v10 = new v2(3);
[Float32Array,v10,v2,v10];
const v12 = [1025,v6];
try { v12.fill(Float32Array); } catch (e) {}
[Float32Array,v10];
for (let v15 = 0; v15 < 5; v15++) {
    %OptimizeFunctionOnNextCall(v15);
}
