-47278 >>> -47278;
function F7(a9, a10, a11, a12) {
    if (!new.target) { throw 'must be called with new'; }
    const v13 = this?.constructor;
    try { new v13(F7, a11, this, this); } catch (e) {}
    a9 >> a9;
    try {
        this.a = -47278;
    } catch(e16) {
    }
    try {
        this.d = -1;
    } catch(e17) {
    }
}
new F7(1000, 536870888, 536870888, 1064504652);
const v19 = new F7(-1, -57194, -1, 1000);
new F7(536870888, -57194, 536870888, -1);
try { ("isNaN").search(1064504652); } catch (e) {}
const v25 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v27 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
v27[8] = v27;
const v28 = [601759695];
let v29;
try { v29 = v28.some(-1); } catch (e) {}
function f31(a32, a33, a34, a35) {
    function f36() {
        try {
            v25.forEach(a33);
        } catch(e40) {
            e40.stack;
            e40.f = e40;
        }
        const v42 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        let v43;
        try { v43 = v42.copyWithin(v28, -1); } catch (e) {}
        const o49 = {
            toString(a45, a46) {
                return (v27 && a33) <= v42;
            },
        };
        let v50;
        try { v50 = o49.toString(o49, "Vre"); } catch (e) {}
        let v51 = -268435456;
        v51++;
        const o71 = {
            "c": -4294967297n,
            [522675525n](a54, a55) {
            },
            "c": v28,
            valueOf(a57, a58) {
                return this;
            },
            [v43](a60, a61, a62, a63) {
            },
            "maxByteLength": -4294967295,
            "arguments": v27,
            ..."Vre",
            valueOf(a65, a66) {
                return a34;
            },
            4: "Vre",
            "type": "Vre",
            toString(a68, a69, a70) {
                return a70;
            },
            5: -4294967295,
            6: v51,
        };
        try { o71.toString(v25, a32, v42); } catch (e) {}
        return v50;
    }
    let v73;
    try { v73 = new f36(); } catch (e) {}
    v73();
    %OptimizeFunctionOnNextCall(f36);
    return v27;
}
try { f31(v19, v19, v29, v19); } catch (e) {}
for (let v76 = 0; v76 < 5; v76++) {
    f31();
}
