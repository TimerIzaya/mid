const v0 = [-2.2250738585072014e-308,0.20449247576278906,-2.220446049250313e-16,1.0,3.0];
const v1 = [759.3623448897238,-2.0,1000000000.0,1000000.0,-1000000000000.0,-740.7020929837356];
const v2 = [809242.9923058904,1e-15,2.0,1.757368543547682e+308,-404827.23111510195,803.1516787553935,3.0,-2.2250738585072014e-308,0.9755300529181734];
function f3(a4) {
    const v5 = a4?.constructor;
    try { new v5(f3); } catch (e) {}
    const v9 = Math.atan2(-0.0, -0.0);
    const v10 = [2.220446049250313e-16,-2.0,9.472378156545009,0.0,1e-15,0.3751557433004281,0.0,-474740.46049005154];
    const o16 = {
        set h(a12) {
        },
        __proto__: v10,
        o(a14, a15) {
            return this;
        },
    };
    for (const v17 of v5) {
        v0[v9] = v17;
    }
    try { new a4(a4, Math); } catch (e) {}
    const o22 = {
        "execution": "sync",
        "type": "minor",
    };
    gc(a4);
    const o61 = {
        "g": v0,
        2861: v1,
        get h() {
            const v28 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
            const v29 = [601759695];
            function f30(a31, a32, a33, a34) {
                function f36() {
                    const o48 = {
                        "c": -4294967297n,
                        [a32](a40, a41) {
                        },
                        "maxByteLength": -128,
                        valueOf(a43, a44) {
                            return -4294967297n;
                        },
                        "e": -4294967295,
                        "e": -268435456,
                        "maxByteLength": -4294967295,
                        "d": a32,
                        "a": v9,
                        __proto__: a32,
                        ...arguments,
                        [-268435456]: v9,
                        "arguments": v28,
                        ...v29,
                        valueOf(a46, a47) {
                            return -268435456;
                        },
                        "c": 54893,
                    };
                    return o48;
                }
                f30();
                %OptimizeFunctionOnNextCall(f36);
                return a33;
            }
            const v53 = new BigInt64Array();
            function f54(a55, a56) {
                let o58 = {
                    "d": a55,
                    ...a55,
                    get e() {
                        return a56;
                    },
                };
                [,...o58] = v53;
                return -4096;
            }
            return -1e-15;
        },
        [a4]: v2,
        ...v1,
    };
    return o61;
}
const v62 = f3(v0);
v62.e = v62;
const v63 = f3(v1);
v63.e = v63;
const v64 = f3(v2);
v64.e = v64;
-1889433468 * -1889433468;
class C71 {
    static toString(a73, a74) {
        super[a74];
        try {
            delete this[f3];
            this[C71];
        } catch(e79) {
        }
    }
}
C71.length;
const v81 = new C71();
const v82 = v81?.constructor;
try { new v82(); } catch (e) {}
const v85 = new Uint8ClampedArray(C71, C71, v62);
function f86() {
    function f87(a88, a89) {
        const v90 = v1.constructor;
        v90 + v90;
        return f87;
    }
    return f87(Uint8ClampedArray, Uint8ClampedArray);
}
Object.defineProperty(v85, "valueOf", { get: f86 });
try { new Int8Array(v1, v62, f86); } catch (e) {}
64 % 64;
try { v62.ReferenceError(-1889433468); } catch (e) {}
this.write();
const v105 = new Uint32Array(381);
const v106 = new Float32Array(v105);
try { v106.join(C71); } catch (e) {}
Int16Array.BYTES_PER_ELEMENT = Int16Array;
const o139 = {
    valueOf(a110, a111) {
        const v112 = (a113, a114, a115, a116) => {
            function F117(a119, a120, a121, a122) {
                if (!new.target) { throw 'must be called with new'; }
            }
            v1.constructor;
            new Uint32Array(5);
            for (let v127 = 0; v127 < 32; v127++) {
                v127 === v127;
                for (let v129 = 0; v129 < 50; v129++) {
                }
                new Int8Array(520);
                for (let v133 = 0; v133 < 5; v133++) {
                }
                0 || Int8Array;
                Math.tanh();
                function f138() {
                    return v2;
                }
            }
            return Int8Array;
        };
        return 155;
    },
};
