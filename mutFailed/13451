const v0 = [];
new Int16Array(840);
try { new Float32Array(840, Int16Array, v0); } catch (e) {}
new Float32Array(8);
const v10 = new Uint8Array(257);
v10[125];
let v12 = /a|b/vdy;
function f13(a14, a15) {
    new Uint16Array(16);
    new Uint8Array(4003);
    new Uint32Array(2857);
    return Uint16Array;
}
Object.defineProperty(v12, "valueOf", { writable: true, value: f13 });
let v25 = /7Z(?:a?)+/gudsy;
const v26 = /\coQ/gdy;
try { v26.test(257); } catch (e) {}
function F28(a30) {
    if (!new.target) { throw 'must be called with new'; }
    this[Symbol.toPrimitive] = f13;
    function f33() {
        return f13;
    }
    Object.defineProperty(a30, "toString", { writable: true, configurable: true, get: f33 });
    const v34 = this?.toLocaleString;
    try { new v34(); } catch (e) {}
    try {
        this.e = v12;
    } catch(e36) {
    }
    try {
        this.g = a30;
    } catch(e37) {
        v26.dotAll >>= e37;
        let v38;
        try { v38 = e37(e37, v25); } catch (e) {}
        v25 = v12;
        return e37;
        v12 = v38;
    }
}
F28.null = 840;
const v39 = new F28(v12);
const v40 = new F28(v25);
const v41 = new F28(v12);
class C42 extends F28 {
    static {
        super[v41] = v12;
        let v44;
        try { v44 = v25(F28); } catch (e) {}
        super.g |= v12;
        const v46 = super[v26.exec(v44)];
        try { v46(this, v46); } catch (e) {}
        v26[4];
        const v50 = v41 === v44 ? v41 : v44;
        try {
            v44.c = this;
        } catch(e51) {
            e51.h = e51;
            const o52 = {
                [e51]: this,
                "f": v50,
            };
            Symbol.d = f13;
            Symbol.matchAll;
            v40[Symbol.d];
        }
    }
    #h;
    static #g;
    g = v39;
    #b;
}
try { new C42(); } catch (e) {}
const v58 = new C42();
const v59 = new C42();
const v60 = new C42();
v60.g = v60;
const v61 = [-1077398797,2,1671415104,4294967297];
function f62(a63, a64, a65) {
    function f67(a68) {
        ++a68;
    }
    this.onmessage = f67;
    try {
        this.fuck(v41, a64);
    } catch(e71) {
    }
}
function f72(a73, a74) {
    const v76 = new Int8Array();
    try {
        v40.d = a74;
    } catch(e77) {
        for (let [v78,v79] of v76) {
        }
    }
    return v25;
}
f62[Symbol.toPrimitive] = f72;
"function" === "function";
const v85 = [C42,v40,v12];
const o86 = {
    "arguments": v85,
    "type": "function",
    [v26]: "function",
    "d": v59,
    __proto__: v59,
    [f62]: v58,
    "e": v61,
};
[-5,-65536,-65537,14311,14,255];
function f88(a89, a90) {
    a90[Symbol.toPrimitive] = f62;
    a89.iterator = a89;
    let v95 = a89 % a89;
    v95++;
    let v97 = Math.imul(3, v95);
    v97--;
    const v99 = Math.log(3);
    v99 + v99;
    a90.constructor(a90);
    return f88;
}
new Promise(f88);
