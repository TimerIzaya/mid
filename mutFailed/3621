const v0 = [-8603,-13649,268435456,65535,268435439,-2,-9007199254740992,42355];
[352671317,-684247125,-27384,-6,-9223372036854775808,-268435456,-147872492,16];
const v2 = [-1024,16];
class C6 {
    #g = "a";
    #n(a8, a9, a10) {
        for (let v11 = 0; v11 < 75; v11++) {
            ("e")["substring"](a10, v11);
        }
        try { a10(a9, v2); } catch (e) {}
        return this;
    }
    static ["a"] = v0;
    static #a = "undefined";
}
new C6();
new C6();
new C6();
[-0.0,0.4808419851382937,521.265446647358,1000.0,1000000000.0,0.342521651011362,100.12242715110574,-1000000.0];
[0.8522432448280726,-5.0];
[-8.570262147301584,1.0939289720137608e+308,NaN,2.0,-Infinity,-1.7413813199639528e+308];
function F21() {
    if (!new.target) { throw 'must be called with new'; }
    function f23(a24) {
        Object.defineProperty([256,-42684,-223632075,536870912,-9007199254740991,-1,256,0,536870912], 65537, { writable: true, value: [-4294967296,2147483649,-1024,9007199254740990,20477,-65536,536870887,16,-1073741824] });
    }
    Object.defineProperty(this, "b", { enumerable: true, set: f23 });
    let v27 = 1073741825;
    try {
        v27++;
        let v31 = 2.0;
        Math.atan2(v31++, -175950080);
        this.b = v27;
    } catch(e34) {
    }
}
let v35 = new F21();
let v36 = new F21();
({"a":v36,"b":v36,...v35} = v36);
const o41 = {
    "execution": "minor",
    "execution": "minor",
    get a() {
        return "minor";
    },
    "execution": "async",
    "type": "minor",
};
gc(o41);
new F21();
new Uint8ClampedArray(16);
function f48() {
    new Uint16Array();
    const v54 = new Uint32Array(-10);
    class C55 {
        constructor(a57, a58, a59, a60) {
            try { a59(); } catch (e) {}
            for (let i63 = 0; i63 < 9; i63++) {
                v54[i63] = a60;
            }
        }
        c;
    }
    new C55();
    new C55();
    new Int8Array(1073741823, Int8Array, o41);
    class C74 {
        #valueOf(a76, a77, a78, a79) {
        }
    }
    const o83 = {
        valueOf(a81, a82) {
        },
    };
}
f48();
%OptimizeFunctionOnNextCall(f48);
f48("async", f48);
