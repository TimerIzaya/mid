function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v5 = new Float32Array(10, 10, 10);
        function f6(a7) {
            function F8() {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.g = 3;
                } catch(e11) {
                }
            }
            return F0;
        }
        v5[Symbol.toPrimitive] = f6;
        const v15 = new Float64Array();
        v15[10] = v5;
        this.b = -12;
    } catch(e16) {
    }
    try {
        this.g = -12;
        function f20() {
            const o30 = {
                [-2147483649](a22, a23) {
                },
                valueOf(a25, a26) {
                    return 12;
                },
                valueOf(a28, a29) {
                    return a29;
                },
            };
            return -38329;
        }
    } catch(e31) {
    }
    try {
        this.h = -12;
    } catch(e32) {
    }
}
const v33 = new F0();
const v34 = new F0();
function f35(a36, a37) {
    let v40 = !a36;
    const v41 = !a36;
    Math.tanh(a36);
    a36 || v41;
    --a36;
    v40--;
    +v40;
    return v33;
}
v34.toString = f35;
const v47 = new F0();
let v48 = v47.g;
Math.log1p(v34);
const v54 = --v48;
Math.cosh(v54);
Math.max(13);
Math.fround(Function);
const v59 = new Date();
function f60(a61, a62, a63) {
    const o72 = {
        "h": Date,
        "d": a63,
        o(a65, a66, a67) {
            super.e = a67;
            delete Date?.prototype;
            const v69 = delete this[212];
            v47[F0] = F0;
            super.b = a67;
            return v69 === a67 ? v69 : a67;
        },
    };
    const v73 = async (a74, a75, a76, a77) => {
        v54 ** a77;
        try {
            const o79 = {
            };
            a74.fuck(o79, v59, f60, true);
        } catch(e82) {
        }
        return await a63;
    };
    return o72;
}
f60(Date, v33, v34);
f60(v33, f60, f60(v47, Date, Date));
[-57072,-9007199254740991,1073741824];
[128,1897947263,10000,-1048628916,-37750,-1024,65421];
[1073741824,268435439,13];
function f90() {
    for (const v93 of Array()) {
        const v94 = v93 | v93;
        v94 !== v94;
    }
    return f90;
}
%OptimizeFunctionOnNextCall(f90);
f90();
0 >> 0;
function F99(a101, a102, a103, a104) {
    if (!new.target) { throw 'must be called with new'; }
    const v105 = this.constructor;
    v105.prototype = v105;
}
