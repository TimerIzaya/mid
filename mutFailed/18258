let v5;
try {
const t0 = 2147483648;
v5 = new t0(10n, 10n, 4294967297, 65536n, -492058721);
} catch (e) {}
let v8 = 536870912;
v5.__proto__;
function f11(a12, a13, a14) {
    const o24 = {
        "b": 2147483648,
        [a12]: 2n,
        "c": a12,
        "g": 2n,
        [a14](a16, a17, a18, a19) {
            try {
                a12.valueOf = a19;
            } catch(e20) {
            }
            return -2147483647n;
        },
    };
    const v25 = new f11(a13, 2n, a14);
    try { new a13(); } catch (e) {}
    v8 = -24125;
    %VerifyType(v25);
    new Uint8ClampedArray(1143);
    new BigUint64Array(2);
    new Int32Array(1066);
    return o24;
}
f11(2n, 2n, 4294967297);
f11(65536n, 10n, 4294967297);
const v39 = [2147483648,2147483648,f11(65536n, 10n, 4294967297)];
[v39];
const v41 = [v39,2n,f11];
new Uint8Array(442);
1 >> 1;
const v47 = 1 - 1;
Int8Array.e = Int8Array;
const v49 = new Int8Array(1);
const v52 = Uint32Array.length;
Uint32Array.prototype = Uint32Array;
new Uint32Array(12, Uint32Array);
const v55 = [520126.03439582814,827116.4087908485,-3.0];
try { v55.groupToMap(v47); } catch (e) {}
try { Int16Array.of(); } catch (e) {}
const v59 = new Int16Array(442, Int16Array);
v59[32];
const v61 = v59.slice(v49, 1);
v61[0] = v61;
for (let v63 = 0; v63 < 25; v63++) {
    function f64(a65, a66, a67, a68) {
        a67.prototype = a67;
        const v69 = a67 != a67;
        v69 && v69;
        a68.d = a68;
        Int8Array.prototype = Int8Array;
        new Int8Array(v59);
        class C73 {
        }
        let v74;
        try { v74 = C73.toString(); } catch (e) {}
        C73.length;
        const v76 = [-1024];
        for (let v77 = 0; v77 < 5; v77++) {
            delete v76[v77];
        }
        0 <= 0;
        const v81 = new Int8Array(v55, v63, v63);
        v81[2] = v81;
        function f82(a83, a84) {
            return v74;
        }
        return f64;
    }
    for (let v85 = 0; v85 < 5; v85++) {
        f64(v55, v55, v63, Date);
    }
}
function f87(a88) {
}
function f90() {
    const o100 = {
        [-2147483649](a92, a93) {
        },
        valueOf(a95, a96) {
            return 12;
        },
        valueOf(a98, a99) {
            return a99;
        },
    };
    return -38329;
}
function F101() {
    if (!new.target) { throw 'must be called with new'; }
}
class C103 {
    e;
    static [-492058721];
    [v41];
    [f90] = v52;
    static b = 1;
    valueOf(a105, a106, a107, a108) {
    }
}
function F109(a111, a112) {
    if (!new.target) { throw 'must be called with new'; }
    const o113 = {
    };
    for (let v115 = 0; v115 < 5; v115++) {
        function f116() {
            const v117 = new Uint32Array();
            return v117.entries().next();
        }
        f116();
        %OptimizeFunctionOnNextCall(f116);
    }
    class C121 extends Int8Array {
        static 10000;
    }
    new C121();
    new C121();
    new C121();
}
class C125 {
}
if ("log1p") {
}
