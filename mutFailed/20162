const v0 = /[xyz]a\S/gudm;
const v1 = /5a{0,1}?L(?<!a)/udmy;
function f2() {
    function f3(a4, a5) {
        let v9 = 1;
        Math.asinh(1073741824);
        v0 & ~-6.161868866522836e+307;
        let v14 = Math.sqrt(a5);
        v9--;
        --v14;
        return d;
    }
    return f3;
}
const v18 = Symbol.toPrimitive;
Object.defineProperty(v1, v18, { enumerable: true, get: f2 });
const v19 = /va{12,?/ims;
f2.toString = Symbol;
let v20 = 1;
v20++;
v20 | v20;
const v24 = new Float32Array(v20);
v24[0];
~7;
new BigUint64Array(7);
let v30 = 16;
v30--;
const v33 = new Int16Array(v30);
try { v33.findLastIndex(v18); } catch (e) {}
v33[4];
const v37 = new Map();
Object.defineProperty(v37, Symbol.toPrimitive, { configurable: true, value: f2 });
try { new Symbol(); } catch (e) {}
v37[Symbol.toPrimitive] = Symbol;
function f43() {
    return v37;
}
const v44 = f43.arguments;
65536 & 65536;
function f48() {
    return Date;
}
function f49(a50) {
    class C53 extends Int8Array {
        [12];
    }
}
Object.defineProperty(Date, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f48, set: v19 });
function F56() {
    if (!new.target) { throw 'must be called with new'; }
    try { this.valueOf(); } catch (e) {}
}
const v59 = new F56();
const v60 = v59?.constructor;
try { new v60(); } catch (e) {}
v59.constructor = Date;
const v62 = v59.constructor;
v62.prototype = v62;
v62.valueOf = Symbol;
try { new v62(v19, v1, v19, v37, v37, v19, v62); } catch (e) {}
const v64 = new v62();
const v65 = v64?.setFullYear;
try { new v65(f2, f2, v44); } catch (e) {}
v64.valueOf = f48;
const v67 = v64?.setFullYear;
try { new v67(F56, F56, 65536); } catch (e) {}
let v69 = v64.setSeconds(v64, 65536);
v69 - v69;
v69--;
