function f3() {
    return 2720;
}
const v5 = Symbol.toPrimitive;
f3[v5] = f3;
f3.valueOf = f3;
function F6(a8, a9) {
    if (!new.target) { throw 'must be called with new'; }
    const v10 = this?.constructor;
    try { new v10(a8, 256); } catch (e) {}
    -a8;
    a9--;
    try {
        this.h = f3;
    } catch(e14) {
    }
}
let v15;
try { v15 = new F6(65537, f3); } catch (e) {}
v15.e = f3;
v15.e = v15;
new F6(2720, 256);
const v17 = new F6(256, 65537);
function f18() {
    return Symbol;
}
Object.defineProperty(v17, Symbol.toPrimitive, { writable: true, configurable: true, get: f18 });
v17.toString = f3;
new F6(65537, F6);
class C22 extends F6 {
    #h;
    3120 = F6;
    #g = v17;
    valueOf(a24, a25, a26) {
        return a24 = 256;
    }
    static e = v17;
    [v17] = 256;
    static [F6] = 2720;
}
C22.g = v5;
try { new C22(); } catch (e) {}
C22.g = F6;
C22.g = C22;
new C22();
const v32 = new C22();
v32[3120];
const v34 = new C22();
try { v34.h(); } catch (e) {}
const v36 = [2.220446049250313e-16,-2.2250738585072014e-308];
v36.toString = f18;
try { v36.toString(); } catch (e) {}
const v38 = [-1.7976931348623157e+308,-1.0,3.0,-5.0,838925.8634038218,1000000000000.0,1000.0];
v38[4] = v38;
const v39 = [5.842249892174177,8.910201123383516,1000000000.0,4.155626498177343,-0.0,-3.0,-Infinity,-2.0];
try { v39.fill(2720); } catch (e) {}
0.6146752851534484 + 0.6146752851534484;
function f44() {
    const o45 = {
    };
    return o45;
}
Math[Symbol.toPrimitive] = f44;
try { Math.acosh(Math); } catch (e) {}
Math.atan(0.6146752851534484);
