const v3 = [-2147483648n,-920835450n,-920835450n];
function f4(a5, a6) {
    try {
        a6.d = a5;
    } catch(e7) {
    }
    return a5;
}
v3.constructor = f4;
const v8 = [v3,-2147483648n,-920835450n,v3];
const v9 = [-2147483648n,v8,v3,v8,-2147483648n];
let v10 = f4(v8, v3);
let [,v11] = v3;
const v12 = v3[v9];
let v16;
try {
const t0 = 13n;
v16 = t0(v9, -2147483648n, v3, v3);
} catch (e) {}
Object.defineProperty(v9, "a", { writable: true, enumerable: true, value: 13n });
function f17() {
    return 13n;
}
function f18() {
    return 13n;
}
function f21(a22, a23) {
    let v24;
    try { v24 = v3.slice(v16, v16); } catch (e) {}
    return v24;
}
const v25 = f21(13n, 2117462140n);
Object.defineProperty(v9, v3, { writable: true, get: f21, set: f21 });
9 && 9;
Object.defineProperty(v9, v3, { configurable: true, enumerable: true, set: f18 });
const v28 = !f18;
Math.log1p(f18);
const v34 = f18 << v10++;
f18 ** -2147483648n;
v10 >> 1214473280;
function F37(a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.b = 1n;
    } catch(e41) {
    }
}
const v42 = new F37(2117462140n, -920835450n);
let v43 = new F37(-2147483648n, 1n);
v43 = v42;
try { f17(...13n, F37, ...f17, ...v8, F37, v25); } catch (e) {}
const v48 = Symbol.hasInstance;
v25[v48] = v16;
[v34,v9,f4];
[f4,2117462140n,f17,v48];
[13n,v28,v12,-920835450n];
new F37(-920835450n, -2147483648n);
const v56 = new Uint32Array(4);
new Float64Array(v56);
