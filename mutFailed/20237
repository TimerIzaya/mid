const v2 = new Uint8ClampedArray(1000);
const v5 = new BigInt64Array(15);
const v8 = new Uint32Array(9);
[-2.2250738585072014e-308,-2.220446049250313e-16];
const v10 = [1000000000000.0];
const v11 = [4.352858389693176e+307];
const v12 = [9,v11,Uint32Array];
const v13 = v12?.groupToMap;
try {
    v8.__proto__ = v13;
} catch(e14) {
}
try { v13(v13, v13); } catch (e) {}
try { new v13(Uint8ClampedArray); } catch (e) {}
[Uint8ClampedArray,v12,v11];
const v18 = [v10];
try { v18.includes(Uint8ClampedArray); } catch (e) {}
const v21 = new BigUint64Array();
const o31 = {
    [v21](a24, a25, a26) {
        class C28 {
            #d = 4096;
            static {
                this.#d;
            }
        }
    },
};
o31.h = o31;
for (let i34 = 0, i35 = 10; i34 < i35; i34++, i35--) {
    for (let v43 = 0; v43 < 32; v43++) {
        v13["p" + v43] = v43;
    }
}
function F47(a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = this.constructor;
    const v53 = /[a-zA-Z0-9]/gvisy;
    const v54 = /abc?/gvmy;
    v54.e = v54;
    v54[-2] ^= v53;
    const v55 = new F47(v54, v5);
    try {
        v55.__proto__ = v2;
    } catch(e56) {
    }
    v54.exec("Q8F");
    const v59 = new Int16Array();
    try { v59.copyWithin(this, v59); } catch (e) {}
    const v61 = v59.lastIndexOf(F47, a49);
    v61 % v61;
    v61 ^ v61;
    try { new v51(this, a49); } catch (e) {}
    new Uint32Array(127);
    for (let v68 = 0; v68 < 5; v68++) {
    }
}
const v69 = new F47();
const t58 = v69.constructor;
new t58();
