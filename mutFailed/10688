try { Set.toString(); } catch (e) {}
new Set();
new WeakSet();
WeakMap.delete = WeakMap;
const v12 = new WeakMap();
function F13(a15) {
    if (!new.target) { throw 'must be called with new'; }
    try { a15.delete("o"); } catch (e) {}
    const v17 = this?.constructor;
    ([1073741824,1073741823,1376142744,1073741825]).forEach();
    -2 | -2;
    for (let v22 = 0; v22 < 5; v22++) {
        function f23() {
            const v24 = [-1.5424212036356715e+308];
            try { v24.findIndex(); } catch (e) {}
            ~v24.shift();
            return v22;
        }
        f23();
        %OptimizeFunctionOnNextCall(f23);
    }
    try { new v17(v12); } catch (e) {}
    try {
        this.c = WeakMap;
        const v30 = [-349055.72992167494,-1000000000000.0,-8.263641716323854e+307,1.050616183420453e+308,1000.0,1000.0,6.087868782871141,-1.7976931348623157e+308,3.0];
        const v32 = new Int16Array(v30, v30, v30);
        const v34 = [1073741824,1073741823,1376142744,1073741825];
        function f35(a36, a37, a38, a39) {
            function f40() {
                new Int32Array(v30, a39, v32);
                try {
                    v34.forEach(a37);
                } catch(e44) {
                    const v46 = new Float32Array();
                    v46[2] = v46;
                    function f47() {
                        return Float32Array;
                    }
                }
                const o55 = {
                    [-4294967297n](a49, a50, a51, a52) {
                        eval();
                    },
                };
                return o55;
            }
            f40();
            eval();
            %OptimizeFunctionOnNextCall(f40);
            return -4294967297n;
        }
    } catch(e59) {
    }
}
try { new F13(WeakMap); } catch (e) {}
new F13(v12);
for (let v62 = 0; v62 < 25; v62++) {
}
