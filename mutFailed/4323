const v2 = new Array(7);
v2[4] = Array;
const v3 = [v2,v2,7];
try { v3.findLastIndex(v3); } catch (e) {}
[v3,v3,v2];
[Array];
let v9 = 129n;
v9 >= v9;
v9--;
Set.a = Set;
Set.g = Set;
const v13 = new Set();
try { v13.clear(); } catch (e) {}
const v15 = [-13,-9,1,529969044,1022331071,-15,1073741825];
const v16 = [-51943,-4294967297,-2680,127];
const v17 = [257,0,536870888,4924869,1073741823,-11381,-4096];
v17[3] = v17;
v17[0] = v17;
let v18 = 1473;
v18 & v18;
v18++;
Int32Array.BYTES_PER_ELEMENT;
const v23 = new Int32Array(v18);
v23.constructor = Array;
const v24 = v23?.constructor;
try { new v24(v2, v9, v9); } catch (e) {}
v23[580];
const v28 = 151 >>> 151;
v28 + v28;
function f31() {
    function f32(a33, a34) {
        const v37 = new Int16Array(7);
        v37["reverse"]();
        return a34;
    }
    return f32;
}
function f40(a41) {
    try {
        v16.length = 7;
    } catch(e43) {
    }
}
Object.defineProperty(Int8Array, Symbol.toPrimitive, { writable: true, get: f31, set: f40 });
const v46 = new Int8Array(v15);
const v47 = v46[2];
v47 < v47;
let v51;
try { v51 = new Uint16Array(v13, v2, v13); } catch (e) {}
try { v51.find(v13); } catch (e) {}
new Uint16Array(7);
let v56 = -1000000000.0;
v56--;
2.2250738585072014e-308 << 2.2250738585072014e-308;
135.68951961804942 / 135.68951961804942;
const v65 = new Int16Array(2183);
255 >> 255;
const v69 = new Uint8Array(255);
try { v69.slice(2827, v69); } catch (e) {}
Int16Array.prototype = Int16Array;
const v73 = new Int16Array(8);
v73[6] = v73;
async function f75(a76, a77, a78) {
    a77 >>> a77;
    a76 > a76;
    a78 + a78;
    delete v73[v56];
    let [v83,v84,...v85] = v65;
    v83 < v83;
    ~v84;
    v83 >>> v83;
    const v89 = v65[5];
    v89 >= v89;
    const v91 = await v84;
    v91 | v91;
    return v83;
}
f75(8, 8, 948737.12760097);
try { Math.round(Int8Array); } catch (e) {}
const v100 = +-36313 || (135.68951961804942 / (-36313 + 135.68951961804942));
v100 * v100;
