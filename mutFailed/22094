const v2 = Symbol.toPrimitive;
v2.description.constructor;
class C6 extends BigUint64Array {
}
class C9 {
    static {
        for (let v12 = 0; v12 < 32; v12++) {
            function f14() {
                return arguments;
            }
            f14(-7.240450934434956e+307);
        }
        function F20(a22, a23) {
            if (!new.target) { throw 'must be called with new'; }
            const v24 = C6.constructor;
            try { new v24(this, a23); } catch (e) {}
            this.c = a22;
        }
    }
    set g(a29) {
        let v30 = -8.625550804267679 % this;
        v30 >>= a29;
        const v33 = new Uint16Array(Uint16Array);
        new Int32Array(v33);
        return this < a29;
    }
}
new v2();
const v40 = new C9();
const t29 = -8.625550804267679;
new t29();
new Uint8ClampedArray(Symbol);
for (let v48 = 0; v48 < 25; v48++) {
    function f49() {
        return -4096;
    }
    const v50 = [601759695];
    const v51 = [1073741824,1073741823,1376142744,1073741825];
    function f52(a53, a54, a55, a56) {
        f49();
        try { v51["find"]("find", a56, v50); } catch (e) {}
    }
    for (let v60 = 0; v60 < 10; v60++) {
        f52(v60, v60, v51, f52);
    }
}
function f63(a64, a65) {
    a65?.__lookupGetter__;
    a65?.constructor;
    return f63;
}
const v70 = new Int8Array(7);
new BigUint64Array(3172);
new BigInt64Array(57);
new Float64Array(142);
new Uint32Array(v70);
function f84(a85, a86, a87, a88) {
    const o98 = {
        toString(a90, a91, a92) {
            BigUint64Array ** a87;
            super.b?.[1073741825];
            delete a90?.[1874];
            v40.g ||= 175867.31723978184;
            try { this.toString(); } catch (e) {}
            a87[a86] = a85;
        },
    };
    return o98;
}
