[2.5268322290918412,-1.4950034134159677e+308,-1.7976931348623157e+308,2.220446049250313e-16,1.6926378449061263e+308,1.0,448439.83030297444,1e-15];
const v1 = [-1.0];
const v2 = [-320491.58645217645,-1000000.0,-37319.07102996553,2.642595330366774e+307,2.1735422961930627e+307,0.9061789187232218,-3.417929137463882,1.7976931348623157e+308,-3.0,2.2250738585072014e-308];
class C3 {
    2147483647 = v2;
    static [v1] = v2;
    set d(a5) {
        %VerifyType(268435439);
    }
    #c;
    #h;
}
new C3();
const v11 = new C3();
new C3();
[56163,-65535,-2,-268435456];
const v14 = [128,-1401194057,-268435456,-35334,1];
const v15 = [-34788,28638];
new Uint16Array(3211);
new BigUint64Array(12);
new Float64Array(5);
let v25 = -2147483648n;
class C27 {
    static m(a29) {
        ({"a":C27,"h":v25,} = this);
    }
}
const v30 = new C27();
const v31 = new C27();
function f32() {
    new Int8Array(1073741823);
    return f32;
}
class C36 {
}
function f37() {
    return f32;
}
function f38(a39) {
    const v40 = [1,4294967296,-9007199254740992,4,-4294967295,-9,-4294967297,255,536870888,255];
    const v41 = [v40,v40,v40];
    Array(5).slice(v41, v40);
}
Object.defineProperty(C36, Symbol.iterator, { writable: true, configurable: true, enumerable: true, get: f37, set: f38 });
const o47 = {
};
o47.b = v15;
o47.b = v30;
const v50 = new Uint16Array(2);
new Uint32Array(v50);
const o53 = {
};
Object.defineProperty(o53, "b", { writable: true, value: v31 });
const v54 = new C36();
let v55;
try { v55 = v54.constructor(); } catch (e) {}
const v56 = new C36();
function F57(a59) {
    if (!new.target) { throw 'must be called with new'; }
    const o61 = {
        "b": 1e-15,
    };
    delete o61.b;
    const o65 = {
        [9007199254740992n]: -43292n,
    };
}
new F57(F57);
new F57();
const v68 = v56.__lookupGetter__;
new Uint16Array(3327);
const v73 = new WeakMap();
function f74(a75) {
    return v73;
}
let v76;
try { v76 = v68(); } catch (e) {}
const v77 = new C36();
function f78() {
    try {
        v14.findIndex(f74);
    } catch(e80) {
    }
    return v11;
}
v77.constructor = f78;
const v81 = v77.constructor;
function f82(a83) {
    const v85 = new Set();
    function F86(a88, a89) {
        if (!new.target) { throw 'must be called with new'; }
        this.h = v85;
        try {
            const v90 = v85[this];
            try {
                new F86(v90);
            } catch(e92) {
            }
        } catch(e93) {
        }
    }
    return v85;
}
v81[Symbol.iterator] = f82;
new v81(C27, v55, C36, o47);
const v99 = new Float32Array();
try { v99.forEach(v76, v31); } catch (e) {}
Math.atan2([], -40875);
const o108 = {
    __proto__: null,
    valueOf() {
        return null;
    },
};
const v110 = new BigUint64Array();
v110.constructor = Symbol;
let v111;
try { v111 = v110.filter(v81); } catch (e) {}
class C112 {
}
const v113 = new C112();
const v114 = v113.__lookupGetter__;
try { v114(); } catch (e) {}
function f116(a117) {
    return a117;
}
const v118 = v113.constructor;
new v118(v76);
const v120 = new C112();
const v122 = [9,1024,256,268435440,-1916992432,7,-2147483648,20126,-2,1645963617];
try { v122.group(BigInt64Array); } catch (e) {}
Symbol.species;
v120.propertyIsEnumerable(v118, v111, o53);
const v127 = new C112();
const t134 = v127.constructor;
const v129 = new t134();
const v130 = /[\11]/gm;
Object.defineProperty(v130, "e", { enumerable: true, value: Uint16Array });
v130.e = v130;
const v131 = /a(?!bbb|bb)c/vi;
Object.defineProperty(v131, "toString", { value: f116 });
const v132 = v131.toString;
const v133 = new v132(BigUint64Array, 246, C27, v131, v132);
const v134 = v133.__lookupGetter__;
try { v134(); } catch (e) {}
const v137 = new Uint16Array(C36);
const v138 = v137[1];
v138 & v138;
const v142 = new Int32Array(v129, 31, 560);
v142[30];
function f144() {
    return Int32Array;
}
const v145 = f144();
function f146(a147) {
    function F148(a150, a151) {
        if (!new.target) { throw 'must be called with new'; }
    }
}
Object.defineProperty(v145, "e", { set: f146 });
v145.e = v145;
const t161 = f144().e;
new t161();
