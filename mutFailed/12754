const v3 = [11,9,-56505,65537,1073741824,59621,2147483649,11];
const v4 = [536870889,-1098596564,2147483648,-14,10000,-1817957339,1455875331];
const v5 = [255,-4294967296,8,-9,2147483649,-146670013,6,-12,-4294967295,16];
const v9 = [51754,2147483647,4294967295,9007199254740990];
const v10 = [5,8,-260046973,268435441,-2147483647,16,6,-1738221870,1422369598];
try {
    v10.length = -15n;
} catch(e11) {
}
v3.length &&= 4294967297n;
[21598];
function f13(a14, a15, a16) {
    const o27 = {
        "c": "xA",
        "b": a14,
        __proto__: v9,
        "g": "valueOf",
        [a15]: "19796",
        "e": -15n,
        "h": a14,
        "a": v4,
        set d(a18) {
            const v21 = a15 - 268435441;
            const v22 = 268435441 | 268435441;
            (268435441 || 268435441) ** a15;
            Math.atanh(v21);
            a14 + v22;
        },
    };
    function f28() {
    }
    const v29 = f28();
    let v30 = -1024;
    function F31(a33, a34, a35, a36) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v37 = new F31();
    const v38 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    function F39(a41, a42) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C43 {
    }
    const v45 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    const v46 = [601759695];
    for (let v48 = 0; v48 < 5; v48++) {
        function f49() {
            try { ("Vre").strike(); } catch (e) {}
            try { Array.from(Array); } catch (e) {}
            const v57 = Array().unshift();
            const v59 = new Set();
            v4[6] = v48;
            try {
                new Array(v48);
            } catch(e61) {
            }
            try { v59.add(-4294967297n); } catch (e) {}
            function F63(a65, a66) {
                if (!new.target) { throw 'must be called with new'; }
                F63();
            }
            try {
                v38.forEach(Float64Array);
            } catch(e69) {
                e69.b = e69;
            }
            class C71 {
            }
            const v72 = new C71();
            try {
                v72.__proto__ = F39;
            } catch(e73) {
            }
            const v74 = Symbol.toPrimitive;
            const o78 = {
                toString(a76, a77) {
                },
            };
            try { o78.toString(v57, v29); } catch (e) {}
            let v80 = -268435456;
            v80--;
            const o101 = {
                [522675525n](a83, a84) {
                },
                "c": v46,
                valueOf(a86, a87) {
                },
                [-4294967297n](a89, a90, a91, a92) {
                },
                "e": v80,
                "maxByteLength": -4294967295,
                "arguments": v45,
                ...v37,
                [v74]() {
                },
                "type": C43,
                valueOf(a95, a96) {
                },
                4: "Vre",
                toString(a98, a99, a100) {
                },
            };
            o101[522675525];
            new Float32Array();
            const v107 = [272822757];
            try { v107.toLocaleString(); } catch (e) {}
            const v109 = [-2.0,272822757];
            const o110 = {
                __proto__: v109,
            };
            v30 %= v80;
            return v74;
        }
        f49();
        %OptimizeFunctionOnNextCall(f49);
    }
    return o27;
}
f13(v3, "19796", "xA");
f13(v5, "19796", "valueOf");
f13("xA", "valueOf", "valueOf");
function f116(a117, a118) {
    function f120(a121) {
        return a117 ^ a118;
    }
    this.onmessage = f120;
    return this;
}
const o125 = {
    "type": "function",
};
new Worker(f116, o125);
new BigInt64Array(2147483649);
