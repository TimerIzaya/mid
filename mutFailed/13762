const v0 = [];
[-Infinity,3.0,-6.519052481345707,4.198329800704895e+307,NaN,-1.4273390871071654e+308,-4.0];
const v2 = [7.240948116785933];
[63.92447617031576,-0.0,691.0762453966627,791.1987239880839];
2067036813 < 2067036813;
1073741825 - 1073741825;
function f9() {
    return v2;
}
function f10() {
    return f9;
}
let v12 = Int8Array;
const v13 = new v12(966);
let v14 = 2;
v14--;
const v17 = new Int16Array(v14);
Object.defineProperty(this, 4, { writable: true, enumerable: true, set: f9 });
const v21 = v13.byteOffset;
try {
    v0.e = v17;
} catch(e22) {
}
const v23 = new BigInt64Array(1024);
let v24;
try { v24 = v23.with(v12, v13); } catch (e) {}
function f25(a26, a27, a28, a29) {
    const v30 = /(?:a*)+q(?<a>.)/guds;
    for (let i33 = 0, i34 = 10;
        (() => {
            const v35 = i33 < i34;
            function f36(a37, a38) {
                return v35;
            }
            return v35;
        })();
        i34--) {
        i33 !== i33;
        for (let v45 = 0; v45 < 25; v45++) {
            v45 >>> v45;
            v30.hasIndices = v30;
        }
    }
    return f25;
}
for (let v47 = 0; v47 < 10; v47++) {
    ~v47;
    const v49 = f25();
    try { v49(v12, v12, 966, v49); } catch (e) {}
    let v51 = 0;
    while (v51 < 3) {
        let v55 = -1683770872;
        Math.trunc(v12);
        const v57 = ~v55;
        const v58 = v12--;
        v55--;
        v57 && v55;
        Math.floor(v55);
        v58 ^ v55;
        v51++;
    }
}
%OptimizeFunctionOnNextCall(f25);
const v65 = Symbol.toPrimitive;
const o68 = {
    [v65]() {
        this[10] += v0 - Symbol;
        Object.defineProperty(v24, this, { configurable: true, value: v21 });
        return v14;
    },
};
f25();
