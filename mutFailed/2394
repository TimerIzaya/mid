const v0 = [];
function f1(a2, a3) {
    function f4() {
        return f4;
    }
    return a3;
}
v0[Symbol.toPrimitive] = f1;
const v9 = new Int32Array(3);
v9.toString = Symbol;
BigUint64Array[Symbol.toPrimitive] = Symbol;
const v14 = new BigUint64Array(1);
function f15(a16) {
    typeof a16 === "function";
    return a16;
}
Object.defineProperty(v14, Symbol.toPrimitive, { enumerable: true, value: f15 });
const v24 = new Uint8ClampedArray(257);
function F25(a27, a28, a29, a30) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(a27, Symbol.toPrimitive, { writable: true, enumerable: true, value: Symbol });
    function f33() {
        function f34(a35, a36) {
            return v14;
        }
        return f34;
    }
    Object.defineProperty(a29, Symbol.toPrimitive, { get: f33 });
    function f42() {
        const v46 = ~f33;
        Math.pow(f33, f33);
        7 / v46;
        +v46;
        return --f33;
    }
    a30.toString = f42;
    const v51 = this?.propertyIsEnumerable;
    try { new v51(this); } catch (e) {}
    a29 - a29;
    a30 & a30;
    return Uint8ClampedArray;
    new Int32Array(3239);
    Math.tan(9007199254740992);
    try {
        this.e = a27;
    } catch(e61) {
    }
}
try { new F25(v0, Uint8ClampedArray, v14, v0); } catch (e) {}
const v63 = new F25(v24, 1, 1, 257);
v63.e = v63;
const v64 = new F25(1, 3, 1, 3);
v64.valueOf = f15;
const v65 = v64?.constructor;
try { new v65(Uint8ClampedArray, BigUint64Array, v64, v64); } catch (e) {}
new F25(v9, 3, 1, 257);
try { ("MIN_VALUE").link(BigUint64Array); } catch (e) {}
const o71 = {
    1073741825: "MIN_VALUE",
};
o71[1] = v14;
o71[1073741825] = o71;
function F72(a74, a75, a76, a77) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor = f1;
    let v78 = 268435439n;
    v78--;
    -4294967296n | -4294967296n;
    for (let v85 = 0; v85 < 100; v85++) {
        v85 != v85;
        const o91 = {
            968: undefined,
            "d": undefined,
            [v78]: 2105444095n,
            __proto__: o71,
            "g": a76,
            "b": -4294967296n,
            "f": this,
            valueOf(a90) {
                return v85;
            },
        };
        o91[1] = o91;
        o91[1] = o91;
    }
    try { Math.expm1(3); } catch (e) {}
    -9223372036854775808 >> -9223372036854775808;
}
gc();
class C109 {
    n(a111, a112) {
        function F113(a115, a116, a117) {
            if (!new.target) { throw 'must be called with new'; }
        }
        const v118 = new F113(a111, 35066, -65537);
        const v119 = new F113("fl", F113, v118);
        F113(v119);
    }
}
const v121 = new C109();
const v122 = v121?.n;
try { v122("fl", "fl"); } catch (e) {}
F72.name;
const v125 = new F72();
v125.constructor = f1;
try { v125.constructor(v24, v63, v63, 10000); } catch (e) {}
new Int8Array(1024);
gc();
const v135 = new Uint16Array(1024);
function f136(a137) {
    class C138 {
    }
    new C138();
    return v65;
}
v135.toString = f136;
v135[7] = v135;
const v142 = [];
try { v142.findLast(F25); } catch (e) {}
function* f144(a145, a146) {
    yield* v142;
    return a145;
}
try { Math.round(v9); } catch (e) {}
const v149 = [-3.0,4.0,1.7381830731777672e+308,-Infinity,0.053627216611518036];
function f151(a152, a153, a154, a155) {
    a153.g = a153;
    const o161 = {
        "maxByteLength": 1024,
        get c() {
        },
        ...v135,
        "d": F72,
        get c() {
            try {
                super.getOwnPropertyNames();
            } catch(e159) {
            }
            let [] = [];
        },
    };
    for (let v162 = 0; v162 < 25; v162++) {
        Math.cosh(v162);
    }
    ("aZ4O").normalize();
}
([f151(16, v149),...v149])[3];
0 * 0;
try { ("async").codePointAt(v63); } catch (e) {}
