class C3 {
    1879;
    8;
    static #toString(a5, a6) {
        ("-9223372036854775807")[9];
        ("-9223372036854775807")[1251];
        return 16;
    }
    static [16];
    #d;
    [0.6884389834626319];
    static #g = "-9223372036854775807";
}
C3.name = C3;
const v9 = new C3();
v9[1879];
const v11 = new C3();
v11[1879] = v11;
const v12 = new C3();
v12[1879] = v12;
function F13(a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    a15[10];
    a16[1879] = a16;
    try {
        this.c = a15;
    } catch(e18) {
    }
    try {
        this.e = "-9223372036854775807";
    } catch(e19) {
    }
    try {
        this.d = a15;
    } catch(e20) {
    }
}
try { F13.toString(); } catch (e) {}
const v22 = new F13(v11, v12);
v22.e;
const v24 = new F13(v11, v11);
new F13(v11, v24, v22);
function f26() {
    try { ("D").blink(); } catch (e) {}
    function F30() {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C32 {
        constructor(a34, a35, a36) {
            class C38 extends a35.b {
            }
            new C38();
        }
    }
    new C32(F30, C32);
    const o43 = {
        ..."D",
        ..."D",
        "c": "D",
        "h": "getHours",
        104: "D",
        get e() {
            return "getHours";
        },
        "d": "getHours",
        1: 4294967296,
        "g": "D",
    };
    return o43;
}
f26();
%PrepareFunctionForOptimization(f26);
f26();
function f46() {
    function f47(a48, a49) {
        a49(f47);
        return f47;
    }
    const v52 = new Promise(f47);
    try { v52.then(f46, f47); } catch (e) {}
    return f47;
}
%PrepareFunctionForOptimization(f46);
f46();
%OptimizeFunctionOnNextCall(f46);
const v55 = f46();
try { v55(v12, v12, v9); } catch (e) {}
%OptimizeFunctionOnNextCall(f26);
f26();
