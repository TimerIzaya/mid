class C3 {
    constructor(a5, a6) {
        this[1073741823] = this;
        a6[5] = a6;
        ~a5;
        let v10;
        try { v10 = ("vDUyG").toWellFormed(); } catch (e) {}
        try { v10.codePointAt(a6); } catch (e) {}
    }
    f = "1O6N";
    static {
        let v14;
        try { v14 = new this("bigint", "bigint"); } catch (e) {}
        v14.f = v14;
        ~-9;
        var b = "bigint";
        let v21;
        try { v21 = new C3(C3, 1423, v14, C3); } catch (e) {}
        this[10] = this;
        const v23 = Symbol.iterator;
        Symbol.for(v23.description);
        v21[v23] = C3;
        const v27 = new Int32Array(1423);
        v27.length = v27;
        const v28 = v27?.constructor;
        try { v28.from(-9); } catch (e) {}
        try { new v28("bigint", v27, 1423); } catch (e) {}
        1920 % 1920;
        const v34 = new Int8Array(1920);
        v34[1850] = v34;
        new Uint16Array(10);
    }
    static 8;
    #f;
    1073741823;
    static #g = -838703.2438934697;
    h;
}
try { C3.apply(C3, "bigint"); } catch (e) {}
C3.d = C3;
const v39 = new C3(-838703.2438934697, "1O6N");
const v40 = v39.__proto__;
const v41 = v40?.constructor;
try { new v41(C3, v40); } catch (e) {}
let v43;
try { v43 = ("1O6N").localeCompare("bigint", "1O6N"); } catch (e) {}
v39[128] = v40;
const v44 = -838703.2438934697 in v39;
v44 && v44;
try { v40(C3); } catch (e) {}
const v47 = new C3(v39, v39);
const v48 = new C3("1O6N", "bigint");
v48.f;
v48.f = v48;
1 | 1;
let v53;
try { v53 = new BigInt64Array(1, BigInt64Array, v47); } catch (e) {}
try { v53.find(v43); } catch (e) {}
const v55 = new BigInt64Array(1);
let v56;
try { v56 = v55.slice(C3, "1O6N"); } catch (e) {}
Uint8Array.b = Uint8Array;
const v59 = new Uint8Array(12);
v59[11];
7 >> 7;
const v64 = new Uint8ClampedArray(7);
v64[3] = v64;
function F65() {
    if (!new.target) { throw 'must be called with new'; }
    this.c = 5;
}
const v68 = new F65();
v68.c = v68;
const v69 = new F65();
const v70 = v69?.constructor;
try { new v70(); } catch (e) {}
function f72(a73, a74) {
    const o75 = {
        "h": a74,
        6: v69,
        128: a74,
        "e": v68,
        __proto__: a73,
        "a": F65,
        ...a74,
    };
    o75[128] = o75;
    return o75;
}
f72.h = f72;
const v76 = f72();
const v77 = f72();
v77[6] = v77;
f72(v68, v77);
function f79() {
    return f72;
}
const v82 = new Float32Array(218);
try { v82.toString(); } catch (e) {}
const v85 = new Uint8Array();
for (const v86 of v82) {
    v86 < v86;
    Object.defineProperty(v76, Float32Array, { configurable: true, enumerable: true, get: f72, set: f79 });
}
try { C3.n(Uint8Array, 218, C3, v59, Uint8ClampedArray); } catch (e) {}
const v89 = v47.f;
try { v89.split(-838703.2438934697, v56); } catch (e) {}
try {
    const v91 = /[2b{1z}tM(?:ab){4,7}5\8[\c~]]/gim;
    const v92 = v91?.toString;
    try { new v92(); } catch (e) {}
    v77.fuck(v91, v64);
} catch(e95) {
}
Object.defineProperty(v77, "e", { configurable: true, enumerable: true, set: f72 });
v85 instanceof f72;
