let v1 = new WeakSet();
class C2 extends WeakSet {
    constructor(a4, a5) {
        super(v1);
        v1++ & -2.994437182207788;
        +-2.994437182207788;
    }
    [WeakSet] = WeakSet;
    h;
}
const v12 = new C2(WeakSet, v1);
try {
    function f14(a15, a16, a17) {
        return a16;
    }
    const v20 = [10000n];
    const o21 = {
        "arguments": v20,
        "type": "function",
    };
    Worker(f14, o21);
} catch(e23) {
}
new C2(WeakSet, WeakSet);
new C2(v12, v1);
const v30 = new Int8Array(1024);
Reflect.construct(Uint8Array, [v30]);
const o36 = {
};
new Float64Array([-65536,-432658450,256]);
class C45 extends Array {
    10 = 134;
}
function F46() {
    if (!new.target) { throw 'must be called with new'; }
    for (let [v49,v50,v51,v52] of F46) {
    }
}
const v54 = new C45();
const o55 = {
    ...v54,
};
class C56 {
    static #n(a58, a59, a60, a61) {
        class C62 {
            4;
            static a;
        }
        C62();
        C62();
        C62();
    }
    7 = v54;
    #a = "sB6";
}
