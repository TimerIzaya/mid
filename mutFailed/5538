function f3() {
    const o8 = {
        ["8"](a6, a7) {
        },
    };
    return o8;
}
%OptimizeFunctionOnNextCall(f3);
function f9() {
    return 129;
}
const v12 = ("-4294967297")?.split;
try { new v12(129, "-4294967297"); } catch (e) {}
for (const v15 of "5") {
}
const t15 = "-4294967297";
t15["-4294967297"] = 129;
"5" & -1479896517;
try {
    const t19 = "5";
    t19.length = 2;
} catch(e22) {
}
new Map();
function f24() {
    return 32409;
}
const v25 = [-1000000000.0,-917.8585864513977,Infinity,3.864888511004816,-957015.8123040999];
const v26 = v25?.find;
try { new v26(v12); } catch (e) {}
let v28;
try { v28 = v25.pop(); } catch (e) {}
[-462756.8307083711];
[-2.0,-1.7976931348623157e+308,5.0,-2.2250738585072014e-308,328.7620475639958,Infinity,-7.02326956794472e+307,-1.2451018930762743e+308];
const v31 = [-3,2147483648,127,18127,7,5];
v31[5];
const v33 = v31.toLocaleString();
try { v33.codePointAt(v28); } catch (e) {}
parseFloat(parseFloat);
const o37 = {
};
([1073741824,1073741823,1376142744,1073741825]).forEach(Float64Array);
let v41;
try { v41 = v33.toLocaleLowerCase(); } catch (e) {}
function F42(a44) {
    if (!new.target) { throw 'must be called with new'; }
}
Math.tan(-1);
try { v41.strike(); } catch (e) {}
