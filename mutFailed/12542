const v4 = new Set();
function f5() {
    return v4;
}
class C9 extends f5 {
    #e = -962765963;
    #c = "256";
    constructor(a11, a12) {
        super();
        this["clear"]();
        for (let v15 = 0; v15 < 32; v15++) {
            const t11 = "5wMx";
            t11["p" + v15] = v15;
        }
    }
    [-962765963];
}
const v18 = new C9("bigint", v4);
const v19 = new C9("5wMx", v18);
new C9("5wMx", v19);
const o25 = {
    "maxByteLength": 679,
};
const v27 = new SharedArrayBuffer(679, o25);
new Uint8Array(v27);
new BigUint64Array(2864);
let v33 = 2549;
v33--;
new BigInt64Array(v33);
try { Float32Array(v33, v33, undefined); } catch (e) {}
new Float32Array(3);
const v41 = /(J5a{0,1}?)/y;
/u?/udms;
/bf/gvms;
32 >>> 32;
let v46 = 32 + 32;
v46--;
new Uint8ClampedArray(32);
4096 & 4096;
try { new Uint8Array(BigUint64Array, BigUint64Array, 3); } catch (e) {}
new Uint8Array(4096);
let v56 = 1582 >> 1582;
v56--;
new Int8Array(1582);
4 - 4;
-54813 - -54813;
8 & 8;
const v66 = [-54813,1582,-54813,8];
const v67 = [-54813];
const v68 = [-54813];
try { v68.map(4); } catch (e) {}
function f70(a71, a72, a73, a74) {
    try { a71.toString(); } catch (e) {}
    try { a72.groupToMap(a73); } catch (e) {}
    a73[0] = a73;
    try { a71.copyWithin(undefined, a72); } catch (e) {}
    const o86 = {
        n(a79, a80, a81, a82) {
            [-915680.8433526766,2.220446049250313e-16,-1.7976931348623157e+308,1.7976931348623157e+308];
            [-Infinity,7.850341802112235e+307,-3.29890257830787e+307,-5.846608304089251,1000000000000.0,-207756.69244479574];
            [3.0,-4.115780670234759e+307,-1.0,-3.0];
            return a74;
        },
        ...v68,
        "b": v66,
        ...a73,
        ...v68,
        129: 4,
        ...a71,
    };
    o86[2] = o86;
    return o86;
}
const v88 = f70(v67, 8, f70(v67, v68, v66, 4), 4);
v88[129] = v88;
const v89 = f70(v68, 4, 4, 4);
v89.d = v89;
-26206 - -26206;
try { new Map(); } catch (e) {}
/ND2/gds;
class C97 extends Map {
}
const v98 = new C97();
try { v98.get(Uint8Array); } catch (e) {}
const v100 = v98.isPrototypeOf();
v100 && v100;
v100 && v100;
Date.name;
let v106;
try { v106 = Date.parse(4); } catch (e) {}
-v106;
class C108 {
    static {
        for (let v110 = 0; v110 < 25; v110++) {
            v110 >>> v110;
            const v112 = [601759695];
            const v113 = [1073741824,1073741823,1376142744,1073741825];
            function f115(a116, a117, a118, a119) {
                try { new a116(); } catch (e) {}
                a117 & a117;
                ~a117;
                try { new a116(); } catch (e) {}
                const v124 = a118 << a118;
                v124 % v124;
                function f127() {
                }
                const v129 = new Int8Array();
                const v132 = BigUint64Array * 536870887;
                let v133 = v132 - v132;
                v133++;
                const v135 = v132 ** v132;
                try { Number.parseInt(v133, v133); } catch (e) {}
                let v138;
                try { v138 = new Number(v41); } catch (e) {}
                try { v138.valueOf(); } catch (e) {}
                Number.isNaN(v135);
                function f141(a142, a143) {
                    return Number;
                }
                try { f141(); } catch (e) {}
                v129.buffer.__defineGetter__;
                %OptimizeFunctionOnNextCall(f127);
                try { v113["find"](..."find", a119, ...v112); } catch (e) {}
                const o149 = {
                };
            }
            for (let v150 = 0; v150 < 5; v150++) {
                f115(this, v150, v150);
            }
        }
    }
}
