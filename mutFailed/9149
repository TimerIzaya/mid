function f2(a3) {
    try {
        a3.valueOf = a3;
    } catch(e4) {
    }
    return BigUint64Array;
}
BigUint64Array.toString = f2;
const v5 = new BigUint64Array(8);
const v8 = new BigInt64Array(6);
function f9() {
    return f2;
}
function f10(a11) {
    class C14 {
        constructor(a16, a17) {
            a17.__proto__;
        }
        f;
        set d(a20) {
            super.d;
            const o22 = {
            };
        }
    }
    new C14(-9340, 2147483649);
}
Object.defineProperty(v8, Symbol.toPrimitive, { writable: true, get: f9, set: f10 });
v8[2];
const v29 = new Uint32Array(12);
v29[1];
const v31 = [BigUint64Array,v8,8,v5];
const v32 = [v29,BigInt64Array];
const v33 = [BigInt64Array,v8,v8,8,12];
const v34 = v33?.every;
try { new v34(v5); } catch (e) {}
class C36 {
    constructor(a38, a39) {
        function f40(a41) {
            /[.ma\Sc]/vdimsy.exec(Int16Array);
            return a41;
        }
        this.constructor = f40;
        const v45 = this?.__lookupGetter__;
        try { new v45(8); } catch (e) {}
        let v47 = 0;
        do {
            const v50 = 6 || v8;
            v8 << 12;
            const v52 = 12 || 6;
            v52 >> v52;
            v50 * -2;
            const v55 = v47++;
            v55 >>> v55;
        } while (v47 < 7)
    }
}
try { C36.__proto__(); } catch (e) {}
const v60 = new C36(v32, 6);
const v61 = new C36(v60, 8);
const v62 = v61?.constructor;
try { new v62(v61, BigInt64Array); } catch (e) {}
const v64 = new C36(v33, 12);
function f66() {
    const o69 = {
        __proto__: 2,
        ...2,
    };
    o69.e = o69;
    o69.e = o69;
    const v70 = new Uint16Array(o69, 2, 2);
    v70[1] = v70;
    return 2;
}
try { f66.bind(8); } catch (e) {}
const v74 = new BigInt64Array(218);
const v75 = v74.sort(f66);
function f76() {
    v64 | v33;
    function f78() {
        class C79 {
            constructor(a81) {
                function f82() {
                    return a81;
                }
                Object.defineProperty(this, "length", { configurable: true, enumerable: true, get: f82 });
            }
        }
        new C79();
        const v84 = new C79(f78);
        v84.length;
        return f78;
    }
    f78();
    return f78;
}
v75.constructor = f76;
try { v75.slice(v75, v31); } catch (e) {}
