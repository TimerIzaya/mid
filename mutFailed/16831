class C3 {
    #e = -1024;
    [1000000000000.0];
    constructor(a5) {
        Reflect.construct(a5, [Reflect,-1024,"pow",-1024], a5);
        try {
            Reflect.#e;
        } catch(e10) {
            class C11 {
            }
            const o12 = {
            };
            const v16 = new Int8Array(770);
            new Uint8ClampedArray(v16);
        }
    }
    ["pow"] = 1000000000000.0;
    #c;
    [-1024];
    static b;
}
new C3("pow");
new C3(C3);
new C3(C3);
[-1000000.0,-Infinity,5.0,1.3887391962841088e+308];
[1e-15,-4.0,1000000.0,-2.2250738585072014e-308,-993.7122641218709];
[-1000000000.0,-1000000.0,-104.85090283620173,1000000.0];
class C24 {
    7;
    static [C3] = "pow";
    [C3];
    toString(a26, a27, a28) {
        new Float64Array(1701);
        new Int32Array(3094);
        new Uint16Array(255);
        return this;
    }
}
new C24();
new C24();
new C24();
new Int16Array(16);
const o50 = {
    [-352741132]: -352741132,
    set b(a49) {
    },
    "b": 2.220446049250313e-16,
};
new BigInt64Array(4096);
new Uint32Array(1783);
function f56(a57, a58) {
    const v62 = new Uint16Array(3225);
    const o64 = {
        ...this,
    };
    Symbol.toPrimitive;
    for (const v67 of v62) {
        const v69 = 9007199254740991 * v67;
        v69 | v69;
    }
}
BigUint64Array[Symbol.toPrimitive] = f56;
BigUint64Array * 536870887;
const o75 = {
    "execution": "pow",
};
class C77 {
    constructor(a79, a80) {
        for (let v81 = 0; v81 < 5; v81++) {
            const v83 = new Map();
            v83["p" + -7] = -7;
            const o86 = {
                ...v83,
            };
        }
    }
}
const v87 = new C77(C77, -7);
new C77(C77, v87);
function F89(a91, a92, a93, a94) {
    if (!new.target) { throw 'must be called with new'; }
}
const v95 = new F89();
v95.valueOf = f56;
"" >= v95;
