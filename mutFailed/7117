function f6(a7, a8, a9) {
    const o24 = {
        o(a11, a12, a13) {
            this[4294967296] = this;
            let v14;
            try { v14 = a13(a7, -1827048068, -1827048068, a7, a7); } catch (e) {}
            return v14;
        },
        "b": -8n,
        [a9]: -8n,
        set c(a16) {
            switch (a16?.[-1827048068]) {
                case a8:
                    a16[257n] = a7;
                    a16 | 1156417251;
                    Math.cbrt(-536870912);
                    a16 % 1156417251;
                    break;
            }
        },
    };
    const o25 = {
        "deleteProperty": f6,
        "get": f6,
        "getOwnPropertyDescriptor": a8,
        "has": f6,
        "ownKeys": a8,
        "preventExtensions": a8,
        "set": f6,
    };
    const v27 = new Proxy(o24, o25);
    return v27;
}
const v28 = f6(-1827048068, -8n, -1887863989n);
const v29 = f6(2147483649, -8n, -8n);
const v30 = f6(-1827048068, -1887863989n, 257n);
function F31(a33, a34, a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a35;
    } catch(e37) {
    }
    try {
        this.g = a35;
    } catch(e38) {
    }
    try {
        this.f = -8n;
    } catch(e39) {
    }
}
new F31(-8n, v29, 5, -8n);
const v41 = new F31(257n, v30, v28, f6);
const v42 = new F31(-1887863989n, v41, v41, F31);
class C43 extends F31 {
    [v29] = v41;
    static #g;
    b;
    727617116 = v42;
    [-8n] = -1887863989n;
    static b = v42;
    #e = -1827048068;
    get h() {
        this[8] = this;
        const o45 = {
            __proto__: this,
            [v41]: this,
            [v42]: this,
            ...v42,
        };
        return v42;
    }
    static #d;
    static #h;
    d;
}
const v46 = new C43();
new C43();
new C43();
function F49() {
    if (!new.target) { throw 'must be called with new'; }
}
const v51 = new v46();
[6.345269750596144e+307,1.5426121797865451e+308,-1.0,1.0763754168130034e+308,-1.0165609707268582e+308,-2.220446049250313e-16,4.1652134965708285,Infinity,8.22884515469082e+307,-1000000000.0];
try {
    new F31(4.0, v28, 4.0, true);
} catch(e56) {
}
const v57 = [-2.0];
function F59(a61, a62, a63) {
    if (!new.target) { throw 'must be called with new'; }
    this.constructor;
    try { new f6(v51); } catch (e) {}
    a61[3] = a61;
}
new F59(v29);
new F59(v57);
