function F1(a3) {
    if (!new.target) { throw 'must be called with new'; }
}
const v5 = new BigInt64Array();
v5.constructor();
const v9 = [-3,-3,1];
const v10 = [-3];
const v11 = [-24987];
class C12 {
    n(a14, a15, a16) {
        super[v10] = a14;
        [9007199254740990,-2,-65535,65535,-41799,51270,-15,-1979050704,1];
        [-2147483649,-4294967295,256,-256,-1931876358,83934533];
        const v19 = [-1003135232,536870912,-2147483649,-1,-178008657,31012];
        const o20 = {
            __proto__: v19,
            [a15]: a15,
            "h": a16,
        };
        return 1;
    }
    constructor(a22, a23, a24, a25) {
        try {
            v11.length = a24;
            super.c?.c;
            a24 <= super.b;
            super.c;
        } catch(e31) {
        }
    }
    static 4 = -3;
    [-24987];
}
const v32 = new C12(C12, -24987, -24987, v9);
new C12(v32, 1, -3, v11);
new C12(C12, -24987, -24987, v9);
[1000];
536870912n << 536870912n;
let v41 = ("Vre").codePointAt(1);
-9223372036854775807 * v41--;
[v9];
const v45 = [-24987,v9];
[-24987,v45,C12,v45,v32];
function F47(a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = this.constructor;
    try { new v51("Vre"); } catch (e) {}
    a49.prototype;
}
function F56(a58) {
    if (!new.target) { throw 'must be called with new'; }
}
const v59 = new F56();
const v61 = new Set();
function F62(a64, a65) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = a64;
    } catch(e66) {
        for (let [v67,v68] of a64) {
            try {
                v61.values();
            } catch(e70) {
            }
        }
    }
    try {
        this.h = v61;
    } catch(e71) {
    }
    try {
        const v72 = v61[this];
        try {
            new F62(v72, -268435456n);
        } catch(e75) {
        }
        this.b = Set;
    } catch(e76) {
    }
}
new F62(Set, F62);
const v78 = F56 >>> 536870887;
with (v59) {
    typeof v78;
}
new Uint8ClampedArray(2);
new Int32Array(15);
new Int16Array(253);
const v89 = new Map();
v89.clear();
