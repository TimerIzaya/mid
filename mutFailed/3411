function F0() {
    if (!new.target) { throw 'must be called with new'; }
    this.f = this;
    try {
        this.a = 15;
    } catch(e3) {
    }
    try {
        this.f = 15;
    } catch(e4) {
    }
}
new F0();
new F0();
const v7 = new F0();
new Int32Array(52);
new Uint8ClampedArray(1960);
Uint8ClampedArray.length = Uint8ClampedArray;
const v16 = new Uint8ClampedArray(2);
v16.p24 = v16;
const v17 = v16.BYTES_PER_ELEMENT;
function F18(a20, a21) {
    if (!new.target) { throw 'must be called with new'; }
    const v22 = this?.__lookupGetter__;
    try { new v22(a21); } catch (e) {}
    try {
        this.b = a21;
    } catch(e24) {
    }
    try {
        this.h = a20;
        639 >>> 639;
        Int8Array.prototype = Int8Array;
        const v28 = new Int8Array(639);
        let v29 = 4;
        const v32 = new Uint8ClampedArray(v29--);
        function f33(a34, a35) {
            new Int8Array(268435456);
            return v28;
        }
        v32.toString = f33;
        const v39 = v32?.toString;
        try { new v39(); } catch (e) {}
        new Uint16Array(240);
    } catch(e44) {
        v7[1960];
        a21 = e44;
    }
    try { a21(Uint8ClampedArray, a20, this, Uint8ClampedArray, this); } catch (e) {}
    for (let v50 = 0; v50 < 32; v50++) {
        v16[v22 + v50] = v50;
    }
}
new F18(52, v7);
const v54 = new F18(52, 2);
const v55 = v17?.constructor;
let v56;
try { v56 = new v55(Uint8ClampedArray, v54); } catch (e) {}
new v56(2, v54);
const t59 = [-24725,-9223372036854775807,268435439,-267077871,-63246,2147483647,-12];
t59.length = 99;
