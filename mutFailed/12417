const o3 = {
};
new Proxy("M6Uec", o3);
let v6 = 4096;
new Uint8Array(v6);
new Uint8ClampedArray(2);
new Int8Array(0);
function f15(a16) {
    const o30 = {
        m(a18, a19) {
            [16,1024,268435439,1002001837];
            const v21 = [-63803];
            [4294967297,606,-2,9,-4096,-41973];
            v21 <= a16 ? v21 : a16;
            [2.220446049250313e-16,-4.0,1000000000000.0,4.0,860364.586367755,-1000.0,3.0,0.3456537001766343];
            [275080.95537211164,818.2227584990299,8.787467088013457,-4.0,-1000000000.0,-5.611578407380495,-1.0,0.0];
            [131515.78840834508,612750.5344139519,2.249867143727421];
            return a16;
        },
        ["vvtzc"]: a16,
        "c": "M6Uec",
        ...a16,
        ..."ignoreCase",
        "a": a16,
        get e() {
            v6 ^= this % this;
            a16[a16] -= 0;
            return a16;
        },
    };
    return o30;
}
const v31 = f15("ignoreCase", "ignoreCase", "M6Uec", "vvtzc");
const v32 = f15("vvtzc");
f15("vvtzc");
function f34(a35, a36, a37) {
    const o44 = {
        __proto__: "M6Uec",
        [v32]: a37,
        [f15](a39, a40, a41) {
            super.h = a37;
            new f15(a35);
            a40[8] >>= v31;
            super.d;
            return a37;
        },
        "unicode": v32,
        "e": "ignoreCase",
    };
    return o44;
}
f34("vvtzc", "ignoreCase", "ignoreCase", f34("vvtzc", "vvtzc", "vvtzc"));
f34("ignoreCase", "ignoreCase", "ignoreCase");
const v49 = BigInt64Array.constructor;
Symbol.isConcatSpreadable.description.fontsize(Uint8Array).trimStart(Array);
const v58 = Array(670);
try { v58.groupToMap(v49); } catch (e) {}
