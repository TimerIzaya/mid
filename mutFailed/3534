function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = 16;
    } catch(e6) {
    }
    const v9 = new Uint8Array(4061);
    const v11 = [4061];
    Reflect.apply(v9.fill, v9, v11);
    try {
        this.e = 16;
    } catch(e14) {
    }
}
const v15 = new F3(F3);
const v16 = new F3(15302);
const v17 = new F3(v16);
class C21 extends 15302 {
    d;
    constructor(a23, a24, a25) {
        super(a25);
        super[a25] = 15302;
        a23 >> a24;
        const v27 = [a25,v16,a23];
        ["symbol",v27,"symbol",a24,"iterator"];
        [v27,"symbol",15302,a25];
    }
    9;
    static #c;
    ["symbol"];
}
function f30() {
    let v31 = 946.0676210033328;
    v31++;
    const o33 = {
        __proto__: v31,
    };
    return f30;
}
f30();
const v35 = new C21(F3, v17, 44815);
const v36 = new C21(v15, v17, 15302);
try {
    BigInt(BigInt);
} catch(e39) {
}
new C21(v36, v35, 15302);
class C42 {
    [-1] = -1.6777590795239637e+308;
}
new C42();
const v46 = new BigInt64Array(12);
const o47 = {
    ...v46,
};
function f48() {
    const o53 = {
        8: 0.043152456200264866,
        get a() {
            Math.acos(0.043152456200264866);
        },
    };
    return o53;
}
const v54 = f48();
const v56 = new C42(v54(), v54);
const v58 = [v56];
const o59 = {
    "arguments": v58,
    "type": "function",
};
