function f1() {
    return false;
}
new Float32Array(81);
const o9 = {
    set e(a7) {
    },
};
new Uint8ClampedArray(4);
const v13 = false & Uint8ClampedArray;
Uint8ClampedArray < v13 ? Uint8ClampedArray : v13;
const v18 = new Int16Array(16);
v18.length;
class C23 {
    constructor(a25, a26) {
        a26 - a26;
        let v28;
        try { v28 = new a25(-5.869943149384486, a26, a26, a26, ...0.2510089730549625, 512.29276402866); } catch (e) {}
        try {
            super.m(this);
        } catch(e30) {
        }
        a26 = 16;
        try { ("m").match(a25); } catch (e) {}
        try { v28["m"](v28, "m", a25, this, v28); } catch (e) {}
        Math.sign(0.8907211315752046);
        const v39 = -2 & 0.8907211315752046;
        Math.sqrt(0.8907211315752046);
        !-1;
        v39 + v39;
        ~0.8907211315752046;
    }
    [-5.869943149384486];
    c;
    static e;
    h = -5.869943149384486;
}
const v44 = new C23(512.29276402866, 512.29276402866);
const v46 = new WeakMap();
const v47 = [v44,v46,v44,C23];
let v49 = -256778047;
const v51 = C23.constructor;
try { new v51("dotAll"); } catch (e) {}
function F55(a57) {
    if (!new.target) { throw 'must be called with new'; }
    const v58 = this.constructor;
    try { new v58(); } catch (e) {}
    this.g = -1517929768;
    this.g = -1;
    this.h = a57;
}
const v60 = v49--;
const v62 = (v49 - v49) << v60;
new BigInt64Array(16);
~9007199254740990;
const v69 = (81).constructor;
function f70() {
    return 9007199254740990;
}
let v71 = 0;
v71++;
function F73() {
    if (!new.target) { throw 'must be called with new'; }
    v47.c = F73;
    this.c = -1;
}
new F73();
Object.defineProperty(v69, "toString", { configurable: true, value: f70 });
class C79 {
}
const v80 = [601759695];
const v81 = [1073741824,1073741823,1376142744,1073741825];
function f83(a84, a85, a86, a87) {
    function f88(a89, a90) {
        return 9007199254740990;
    }
    f88(v81, C79);
    try { v81["find"](...v80, a87, ...v80, ...v81, ...522675525n); } catch (e) {}
    const v95 = new v51();
    const v97 = new Set();
    v97.add(v95);
    let [v99,,...v100] = v97;
    return v99.setUTCMilliseconds();
}
const v102 = v18 >>> v18;
v102 >>> v102;
const v107 = Math.hypot(Symbol, 2.220446049250313e-16, 2.220446049250313e-16);
const o113 = {
    valueOf(a109, a110, a111, a112) {
        super.c **= v107;
        return a112;
    },
};
f83(16, f83, 9007199254740990, 16);
const v115 = -Infinity;
("dotAll")[6];
try { ("dotAll").toString(); } catch (e) {}
function F118(a120, a121) {
    if (!new.target) { throw 'must be called with new'; }
}
new Uint16Array(9);
Math.acosh(-14);
const v129 = Math.atanh("Vre");
v129 >> v129;
const v131 = !-1930759143;
-1930759143 << v62;
-v131;
-v115;
function f137() {
    const v139 = new Uint16Array();
    const v140 = v139.fill(f137, Uint16Array, f137);
    v140.entries(f137, v140, v139, v140, v139).next();
    return Uint16Array;
}
function f144(a145) {
    return f144;
}
for (let v146 = 0; v146 < 5; v146++) {
    function f147() {
        const v151 = ("Vre").fixed("Vre").codePointAt() * Math;
        v151 >= v151;
        return f70;
    }
    new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
    function F155() {
        if (!new.target) { throw 'must be called with new'; }
        ("getPrototypeOf").normalize();
    }
    f147();
    %OptimizeFunctionOnNextCall(f147);
}
new Int32Array(175);
const o165 = {
    "execution": "Vre",
    "arguments": v81,
    valueOf(a163, a164) {
    },
};
gc(o165);
