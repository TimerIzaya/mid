const v2 = new Array(256);
function f3() {
    return Array;
}
const v4 = [1073741824,1073741824,45612,1073741823,-2147483647,257,536870889,7];
const v5 = [4294967295,4,-45764,4,4096,-36275];
const v6 = [29192,64,-1275552996,9007199254740991,-65535,-9007199254740992,4294967297,2027];
function F7(a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    function f11(a12) {
        const v14 = new Int16Array();
        async function f15(a16, a17, a18) {
            function F19(a21, a22) {
                if (!new.target) { throw 'must be called with new'; }
            }
            const v23 = new F19();
            const o24 = {
                ...v23,
            };
            const v25 = v14[1];
            for (let v26 = 0; v26 < 500; v26++) {
                const v28 = new Int32Array(v26);
                let v30 = new Map();
                [...v30] = v28;
            }
            await v25;
            return v14;
        }
    }
    Object.defineProperty(this, "g", { writable: true, configurable: true, set: f11 });
    try {
        this.b = v4;
    } catch(e32) {
    }
    try {
        this.g = v6;
    } catch(e33) {
    }
}
new F7(v4, v2);
new F7(v2, v4);
new F7(v2, v5);
class C37 extends f3 {
    static d = v6;
    e = v5;
    1;
    [256] = v5;
    static #b;
    static #g;
    static [v6];
    [v4];
    static p(a39, a40, a41) {
        delete v5?.length;
        const v46 = v4 ^ f3;
        let v47 = ~F7;
        const v48 = Math.sign(f3);
        v47++;
        const v50 = ~f3;
        const v51 = [601759695];
        const v52 = [1073741824,1073741823,1376142744,1073741825];
        function f54(a55, a56, a57, a58) {
            let v61;
            try { v61 = v52["find"](..."find", a58, ...v51, ...v52, ...522675525n); } catch (e) {}
            v61 <= a57;
            return arguments;
        }
        v46 / 5;
        v4 / v50;
        return v48;
    }
}
new C37();
new C37();
new C37();
function f68() {
    const o90 = {
        toString(a70, a71) {
            function f72(a73) {
                const v75 = new Uint8Array(256);
                new Int8Array(v75);
                return a71;
            }
            Object.defineProperty(a71, Symbol.toPrimitive, { writable: true, value: f72 });
            function F80(a82, a83, a84, a85) {
                if (!new.target) { throw 'must be called with new'; }
                try {
                    this.f |= a71;
                    a71.c;
                } catch(e87) {
                    e87.stack;
                    Object.defineProperty(a70, 0, { writable: true, get: f68 });
                }
            }
            new F80(this, a70, this, f68);
            return F80;
        },
    };
    o90.valueOf = f68;
    return o90;
}
const v91 = f68();
function f92(a93) {
    const v96 = new Float64Array();
    const v100 = new Float32Array(4096);
    const v102 = [v100,Uint32Array,[v96,Uint32Array,v100]];
    v102[v102] >>= 1000;
    return 1000;
}
v91[Symbol.split] = f92;
const v105 = f68();
function f106(a107) {
    const o112 = {
        "execution": "sync",
        "type": "major",
    };
    return gc(o112);
}
Object.defineProperty(v105, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, value: f106 });
const v116 = f68();
try { v116.toString(f68, v105); } catch (e) {}
try { ("1p").split(v91); } catch (e) {}
