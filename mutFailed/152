const v2 = new BigInt64Array(6);
~1000;
const v12 = new Int32Array();
function f13() {
    return Int32Array;
}
Object.defineProperty(v12, Uint8ClampedArray, { get: f13, set: f13 });
const v14 = -15 >> 8798;
Math.pow(v14, -3.0);
new Int8Array(1000);
const v19 = [-48288,15,-63536,268435456];
class C20 extends Array {
    constructor(a22, a23, a24) {
        super(C20);
    }
}
const v25 = new C20();
const v26 = new C20();
v25[v19] = v26;
const v28 = new BigUint64Array(-15);
class C29 {
    get a() {
        try {
            try { v2.toReversed(); } catch (e) {}
        } catch(e32) {
            v28[629891938];
        }
        return this;
    }
    static 127;
    #c = v28;
    1024;
}
const v34 = new C29();
new v34();
function f40(a41, a42, a43) {
    const o45 = {
        [a43]: a42,
        "g": 65536n,
        get a() {
            return a41;
        },
        "a": a43,
    };
    return f40;
}
f40(42.50750683550177, 65536n, Infinity);
f40(4096n, 65536n);
new C29();
class C50 {
    constructor(a52, a53) {
        Date | a52;
    }
}
class C57 {
    constructor(a59, a60) {
        this[6] = C20;
        this[6] >>>= v14;
        for (let v61 = 0; v61 < 25; v61++) {
        }
    }
}
class C62 extends C57 {
    constructor(a64, a65, a66, a67) {
        super();
        -3.0 >= "0x2I";
    }
}
new Uint8Array();
Math.exp(1000);
const v74 = new Float64Array();
const v75 = v74.buffer;
try {
    v75.resize(Float64Array);
} catch(e77) {
}
new C62();
