const v3 = [-0.23549034038133065];
async function f4(a5, a6, a7, a8) {
    return await v3;
}
function f13(a14, a15, a16, a17) {
    "valueOf" | a15;
    a14 / a15;
    const v20 = a15 < a15;
    v20 >>> a16;
    const o25 = {
        n(a23, a24) {
            return v20;
        },
    };
}
[-10736,-23614,15,-16,7,1471463482,268435441,129,268435441];
[-1,-65537,-447596441,9223372036854775807,0,268435441,256,6];
[10,9,-9007199254740990,9007199254740991,1,166601916];
const v32 = new Uint32Array(3255);
new Uint32Array(1073741823);
new Float64Array(256);
const v41 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v42 = [601759695];
const v43 = [1073741824,1073741823,1376142744,1073741825];
function f45(a46, a47, a48, a49) {
    function f51() {
        const v55 = new Int8Array();
        function F57(a59, a60) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.byteOffset = a59;
            } catch(e61) {
                for (let [v62,v63] of v55) {
                }
            }
            try {
                (0)[this];
                const v65 = [WeakSet,WeakSet];
                v65[1];
                new F57(a59, v65, Int8Array);
            } catch(e68) {
            }
        }
        const o102 = {
            "c": -4294967297n,
            [522675525n](a72, a73) {
                try {
                } finally {
                }
            },
            ..."Vre",
            "maxByteLength": -128,
            "c": v42,
            valueOf(a75, a76) {
                function F77(a79) {
                    if (!new.target) { throw 'must be called with new'; }
                    const v80 = this.constructor;
                    v80.bind();
                    try { new v80(); } catch (e) {}
                }
                new F77();
                return a48;
            },
            "e": -4294967295,
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v41,
            ...v42,
            "type": "Vre",
            valueOf(a85, a86) {
                ("undefined").normalize("NFC");
                -a49;
                return a86;
            },
            get f() {
                return this;
            },
            ..."Vre",
            valueOf(a96, a97) {
                return a46;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            "replace": "Vre",
            "type": "Vre",
            toString(a99, a100, a101) {
                return a46;
            },
            5: -4294967295,
            "type": "valueOf",
            "c": Float64Array,
            6: -268435456,
        };
        return "Vre";
    }
    f51();
    const v105 = new Int8Array();
    const v106 = v105.buffer;
    v106.slice(2147483648);
    %OptimizeFunctionOnNextCall(f51);
    let v110;
    try { v110 = v43["find"](..."find", a49, ...v42, ...v43, ...522675525n); } catch (e) {}
    v110 <= a48;
    Object.defineProperty(v106, 64, { writable: true, get: f51 });
    v32.buffer;
    return arguments;
}
for (let v116 = 0; v116 < 5; v116++) {
    f45();
}
%PrepareFunctionForOptimization(f45);
f45();
%OptimizeFunctionOnNextCall(f45);
f45();
