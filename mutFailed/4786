function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        const v5 = new Float32Array([-13063,230037640,0,-1717935321,257,0,1073741825]);
        v5[4] = v5;
        class C6 {
            static valueOf(a8) {
                a8[5];
            }
        }
        new C6();
        this.g = -4294967296;
    } catch(e11) {
    }
}
new F0();
new F0();
class C16 {
    #c = "toUpperCase";
    get a() {
        const v18 = this << "toUpperCase";
        const v19 = v18 ^ v18;
        let v20;
        try { v20 = v19(v19, this, v19, v19, v18, this); } catch (e) {}
        v20[v19] <<= 1.1922093890401552e+308;
        return "Tx";
    }
    static b;
}
const v22 = new C16();
35530n ^ 35530n;
try { new Float64Array(v22, F0, 35530n); } catch (e) {}
try { Float64Array(35530n, v22); } catch (e) {}
const v28 = new F0();
-5.0 << -5.0;
const v33 = new Uint32Array(4);
v33.fill();
try { Math.imul(v28, v28); } catch (e) {}
Math.atan(0.6146752851534484);
let v39 = 0.2506692067884675;
try { ("preventExtensions").fontcolor(v22); } catch (e) {}
const o50 = {
    toString(a44, a45, a46, a47) {
        return "preventExtensions";
    },
    get e() {
        return "-1865512128";
    },
};
v39--;
const v53 = 0.19490174137124494 != 0.19490174137124494;
10000 | 10000;
let v58 = 3.0;
const v59 = v58--;
v59 ^ v59;
8.216363450113791e+307 | 8.216363450113791e+307;
class C66 {
    #e = 0.19490174137124494;
    static 8;
    static [v28] = v53;
    static 2147483647 = Float64Array;
    static g;
}
C66.prototype = C66;
const v67 = new C66();
const v68 = v67?.constructor;
try { new v68(); } catch (e) {}
try {
    v67.h = -2927;
} catch(e70) {
}
new BigUint64Array(2147483647);
function f75(a76, a77, a78, a79) {
    const v80 = [4294967297,-1648241970,9,3,-2,0,-4294967296,10];
    v80[7] = v80;
    with (v80) {
        length | length;
        f = 1.1922093890401552e+308;
        const v84 = [a77];
        Reflect.apply(v33.toSorted, length, v84);
        length | length;
    }
    const v89 = new Int8Array();
    try { v89.entries(); } catch (e) {}
    const v91 = new Int8Array();
    for (const v92 in v91) {
    }
    function F93(a95) {
        if (!new.target) { throw 'must be called with new'; }
        const v96 = this.b;
        try { v96(v91); } catch (e) {}
    }
    F93.prototype;
    const v99 = new F93();
    try { v99.toString(); } catch (e) {}
}
for (let v101 = 0; v101 < 10; v101++) {
    f75();
}
const v103 = new Uint16Array(10);
v103.indexOf(-2927);
