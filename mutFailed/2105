const v1 = new Map();
const v2 = [65536,15,21132,20013,-16842,2,18127];
[-15,-9007199254740991,-65535,0,1465,9007199254740991,0,4];
const v4 = [-65537,-2,8,51806,2147483647,4294967296];
class C11 extends Map {
    m(a13, a14) {
        super[a13] = Map;
        return v2;
    }
    static valueOf(a19, a20, a21) {
        function f22(a23, a24, a25) {
            try {
                v1.c = a19;
            } catch(e26) {
            }
            return v4;
        }
        f22(v2, 7, 8n);
        return Map;
    }
}
C11.prototype;
const v29 = new C11();
new C11();
new v29();
3 * 8n;
try { Uint8ClampedArray(v4, v4, -65536n); } catch (e) {}
let v38 = 59632;
v38++;
const v40 = /a\D[\cz]/giy;
v40.d = v40;
try { new Int32Array(16, C11, -4294967296); } catch (e) {}
Number.e = Number;
let v46 = 5;
v46--;
