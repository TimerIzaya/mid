const v4 = new Uint16Array(821);
new Uint8Array(v4);
const v8 = (-1529577309n).constructor;
function f9(a10, a11, a12, a13) {
    try { a11.some(v8); } catch (e) {}
    const o15 = {
        __proto__: a10,
        "a": Uint8Array,
    };
    try { o15.groupToMap(); } catch (e) {}
    return o15;
}
[12,92880277];
[-2147483647,536184488,8994,257,-1439844353,4294967297,4294967295,65537,-10390,-35441];
[65537,4294967297,43702];
function f20() {
    return f20;
}
const v21 = f20.arguments;
for (let v22 = 0; v22 < 5; v22++) {
    Array(36862, v21, v22 & v22, 36862);
}
function F33(a35, a36) {
    if (!new.target) { throw 'must be called with new'; }
    const v37 = this.constructor;
    let v38;
    try { v38 = new v37("a"); } catch (e) {}
    try { a35.valueOf(v38, this); } catch (e) {}
    const v42 = this[Symbol.match];
    try { new a35(-12739n, v42, 0.26500940538828155); } catch (e) {}
    try { ("-2147483648").trimRight(); } catch (e) {}
    try {
        this.f = "-2147483648";
        9n >> 9n;
    } catch(e47) {
    }
}
for (let v48 = 0; v48 < 32; v48++) {
    v21["p" + v48] = v48;
}
new F33();
-Infinity;
const v58 = /2a\sc/uds;
const o60 = {
    "size": "async",
};
function f61() {
    %VerifyType(80.5419255953741);
    const t48 = "e";
    t48[536870912] = v4;
    let v66 = !8 | 0.26500940538828155;
    ~8;
    v66++;
    delete arguments.callee;
    return arguments;
}
f61();
function f71() {
    try { v58.test(v58, f71); } catch (e) {}
}
v58[Symbol.toPrimitive] = f71;
const o77 = {
    [v58](a76) {
    },
};
