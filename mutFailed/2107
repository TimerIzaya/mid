new Uint8ClampedArray(10);
function f5(a6, a7) {
    class C9 {
        static {
            try { this(this, 3.866732047176795e+307, this, ...this); } catch (e) {}
        }
    }
    return a6;
}
const v13 = Symbol.toPrimitive;
Float64Array[v13] = f5;
new Uint8Array(10);
class C18 {
    constructor(a20) {
        ("valueOf").localeCompare(a20, "valueOf");
    }
}
new C18("c");
const v23 = new Float64Array(512);
new Uint16Array(6);
const v28 = [];
function f30(a31) {
    for (let v32 = 0; v32 < 32; v32++) {
        v13["p" + v32] = v32;
    }
    return "c";
}
Object.defineProperty(Array, Symbol.toPrimitive, { value: f30 });
const v38 = new Array(228);
class C39 {
    [Array] = v28;
    static {
        function F41(a43, a44) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.b = a44;
            } catch(e45) {
            }
        }
        const v46 = new F41(v38, this);
        new F41(Array, F41);
        new F41(v46, v38);
    }
}
const v49 = new C39();
const v50 = new C39();
let v53;
try { v53 = v49.o(C39, v50, -1n, v38); } catch (e) {}
try {
    const t49 = "7MU";
    t49.valueOf = v53;
} catch(e54) {
}
new Int8Array(3);
const v57 = [10];
const v63 = !(!-4294967296);
Math.atanh(27902);
-1000.0 % 27902;
(-1n) ** v63;
[v57,v23,10,v23,[512,v57]];
function f70() {
    return f70;
}
for (let v71 = 0; v71 < 10; v71++) {
    function* f72(a73, a74, a75) {
        return a74;
    }
    f72();
}
const v78 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
function f79(a80, a81) {
    return a81;
}
Object.defineProperty(v78, Symbol.toPrimitive, { configurable: true, value: f79 });
const v84 = [-1.0,1.0,-875790.5323034594,0.22501948637268132,-0.0,-0.0];
function f85(a86, a87, a88, a89) {
    const v90 = v57.toPrimitive;
    Object.defineProperty(a86, v90, { configurable: true, enumerable: true, value: f85 });
    const o112 = {
        toString(a92, a93) {
            function f94() {
                class C96 {
                }
                async function f97(a98, a99, a100, a101) {
                    (await C96).call();
                    return "source";
                }
                return "source";
            }
            a92.valueOf = f94;
            const v104 = a86 && Float64Array;
            function f105() {
                a92 *= v90;
                const v106 = [1840677197,-43868];
                const v109 = new Int8Array(6);
                for (const v110 in v109) {
                    Object.defineProperty(v106, v110, { configurable: true, value: v110 });
                }
                return Float64Array;
            }
            Object.defineProperty(v104, "valueOf", { value: f105 });
            v104 <= v78;
            return this;
        },
    };
    return o112;
}
f85[Symbol.toPrimitive] = f30;
f85(v84);
const v116 = f85(Date);
try { v116.toString(f85, v78); } catch (e) {}
