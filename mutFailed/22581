new Float32Array(115);
new BigInt64Array(128);
new Float64Array(555);
[5.0];
[0.2778729086001164,0.04567666645192592,4.0,851107.0814215029,-8.676858795659722];
const v11 = [-1000000000.0,-844312.2987488118];
const v12 = /(J5a{0,1}?)/y;
function f13() {
    function f14() {
        new Float32Array(6);
        new Int8Array(6);
        new Int16Array(12);
        return Int16Array;
    }
    return f14;
}
function f24(a25) {
    try { v11.flatMap(a25); } catch (e) {}
}
Object.defineProperty(v12, "valueOf", { writable: true, configurable: true, get: f13, set: f24 });
class C27 {
    static {
        for (let v29 = 0; v29 < 25; v29++) {
            const v30 = [601759695];
            const v31 = [1073741824,1073741823,1376142744,1073741825];
            function f32(a33, a34, a35, a36) {
                ~a34;
                try { a33(); } catch (e) {}
                const v39 = a35 << a35;
                v39 % v39;
                function f41() {
                    return a33;
                }
                const v43 = new Int8Array();
                BigUint64Array.length;
                const v47 = BigUint64Array * 536870887;
                let v48 = v47 - v47;
                v48++;
                const v50 = v47 ** v47;
                try { Number(v12); } catch (e) {}
                Number.isNaN(v50);
                const v55 = v43.buffer.__defineGetter__;
                try { v55(); } catch (e) {}
                %OptimizeFunctionOnNextCall(f41);
                let v58;
                try { v58 = v31["find"](..."find", a36, ...v30); } catch (e) {}
                return v58;
            }
            for (let v59 = 0; v59 < 5; v59++) {
                f32(this, v59);
            }
        }
    }
}
