const v5 = new Int16Array(128);
new Float32Array(127);
const v11 = new Int16Array(7);
new BigInt64Array(0);
new Int8Array(1754);
new Uint8ClampedArray(83);
const v23 = new BigInt64Array(205);
const v26 = new Uint16Array(256);
const v27 = v23[205];
const v31 = new Float64Array(255);
v31.b = 0;
function F32(a34, a35, a36, a37) {
    if (!new.target) { throw 'must be called with new'; }
    a35 >> a35;
    a37 | a37;
    v31.b = a35;
    for (const v40 of v26) {
        v27?.h;
    }
}
new F32(255, 205, 255);
const v43 = new F32(255, 256, 255);
const v44 = new F32(255, 205, 256, 255);
const v45 = [-1000000000.0,5.0,872297.1015869486,-1e-15,0.2087529151028652];
function f46() {
    const v47 = v27.__proto__;
    try {
        v11.byteOffset = v47;
    } catch(e48) {
    }
    return v47;
}
v45[Symbol.toPrimitive] = f46;
function f51(a52) {
    const o53 = {
    };
    return o53;
}
v45.valueOf = f51;
function f54(a55) {
    class C56 {
    }
    const v57 = new C56();
    const v58 = v57.g;
    try {
        v58.length = 1;
    } catch(e60) {
    }
    return v58;
}
Object.defineProperty(v45, "toString", { configurable: true, enumerable: true, value: f54 });
const v61 = /(x)(x)(x)(x)(x)(x)(x)(x)(x)(x)\10/u;
const v62 = [Infinity];
const v63 = [2.2250738585072014e-308,1.949684848262672,4.0];
v63[4] = 7;
Object.defineProperty(v63, 3, { writable: true, configurable: true, enumerable: true, value: Int16Array });
const v64 = v63.push(v61);
const v65 = [342.12300421344116,0.3998304334347528,-1.5569468467414895e+308,929110.7069466491,0.8403359879371063,928.8415619105033,5.0];
v65.toStringTag = v44;
const v66 = v65.toStringTag;
let v67;
try { v67 = v62.every(v66, v43); } catch (e) {}
const v68 = new F32(v66, v67, v67, v64);
v68.constructor = Symbol;
const t64 = v68.constructor;
new t64(-9007199254740991, v45, v63);
class C71 {
}
function f72(a73, a74) {
    const v76 = new Uint8Array();
    function f77(a78, a79, a80, a81) {
        a80++;
        const v83 = a80++;
        const v84 = a80 % a80;
        const o85 = {
            ...v76,
        };
        let v86;
        try { v86 = o85.n(v84, v83); } catch (e) {}
        return v86;
    }
    return v5;
}
C71.toString = f72;
const v87 = C71.toString;
try { v87(); } catch (e) {}
