const v2 = new Int16Array(1487);
new Int32Array(1000);
1 >>> 1;
try { new Uint16Array(Uint16Array, v2, Int32Array); } catch (e) {}
new Uint16Array(1);
/xyz{1,}?/udi;
/5j/gudim;
const v13 = /(?:a?)?/guimy;
const v16 = new Uint8Array();
try { v16.reduceRight(Int32Array); } catch (e) {}
const v19 = Symbol.isConcatSpreadable;
Uint16Array.for(BigInt64Array.description);
v16[v19] = BigInt64Array;
try { Array.isArray(1); } catch (e) {}
v13();
const v26 = Array();
Object.defineProperty(v26, "constructor", { value: Array });
const v28 = v26["concat"](Int16Array, v16);
try { v28.lastIndexOf(Symbol); } catch (e) {}
