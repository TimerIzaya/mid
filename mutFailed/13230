function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = 16;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
const v7 = [-4.0,1e-15,328678.8193587826,1000000000.0,2.0,3.183122282802781,-1.40758341264602e+308];
const v8 = [-372071.54012663674,776.056575822885,-0.6743259804854809,0.9665771180620516,0.6644363071944525,1000000000000.0];
const v9 = [289.4299478390951,954.1179256528833];
class C10 {
    8 = C10;
    5 = v8;
    static [v8] = v5;
    2485;
    static 65537 = v5;
    constructor(a12, a13, a14) {
        this[5] = this;
        let v15;
        try { v15 = this.valueOf(); } catch (e) {}
        v15[2485];
        try { a14.groupToMap(v9); } catch (e) {}
        const o18 = {
        };
        o18.c = o18;
        try {
            o18.c = v6;
        } catch(e19) {
        }
        try {
            const o20 = {
            };
            o20.c = o20;
            o20.c = o20;
            o20.c = v6;
            o20.g = this;
        } catch(e21) {
        }
        try {
            const o22 = {
            };
            o22.h = v4;
            o22.c = v6;
            o22.g = this;
            o22.h = a14;
        } catch(e23) {
        }
        try {
            const o24 = {
            };
            o24.c = o24;
            o24.c = v6;
            o24.g = this;
            o24.h = a12;
        } catch(e25) {
            v8[129] = C10;
            for (let v26 = 0; v26 < 32; v26++) {
                a12["p" + v26] = v26;
            }
        }
    }
}
try { C10.bind(F0); } catch (e) {}
let v30;
try { v30 = new C10(v8, v7, C10); } catch (e) {}
v30[2485] = v30;
const v31 = new C10(F0, v9, v7);
const v32 = v4?.constructor;
try { new v32(v7, v6, F0); } catch (e) {}
new C10(v6, v8, v7);
new C10(F0, v9, v9);
4 === v32;
new BigInt64Array(4);
-2;
const v43 = new Uint8ClampedArray(2);
const v44 = v43[1];
v43[1] = v31;
965 >> 965;
965 >>> 965;
Uint8Array.prototype = Uint8Array;
new Uint8Array(965);
v32.length = Uint8Array;
const v51 = new Uint8Array();
const v53 = -104;
104 & 104;
const v56 = v44.length;
new Uint32Array(v53);
for (const v58 in v56) {
    104 in v51;
    typeof Uint8Array;
}
