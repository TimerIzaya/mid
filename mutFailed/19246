function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -1073741824;
    } catch(e3) {
    }
    try {
        this.b = F0;
    } catch(e4) {
        const v5 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        function f6(a7, a8) {
            return a8;
        }
        Object.defineProperty(v5, Symbol.toPrimitive, { configurable: true, value: f6 });
    }
    try {
        this.e = -1073741824;
        try {
        } catch(e11) {
        }
        const o12 = {
        };
    } catch(e13) {
    }
}
const v14 = new F0();
const v15 = new F0();
const v16 = new F0();
const v17 = [v16,v14,v14,v14];
function F18() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        -0;
        for (let i = 0; i < 5; i++) {
            const v22 = F0++;
            const v24 = v22 ^ (v22 - v22);
            v24 / v24;
        }
        new F18();
    } catch(e27) {
    }
}
[F0,v15,v17,v14];
const v29 = [v14];
class C33 {
    [v15] = F18;
    set g(a35) {
        try { a35(a35, v14); } catch (e) {}
        const v38 = gc();
        const o39 = {
            [v38]: v29,
        };
        class C41 {
        }
        let v43 = 4096;
        v43--;
        const v46 = new Uint16Array(v43);
        v46.fill(-10);
        new Float32Array(135);
        new Uint16Array(218);
        function f55() {
        }
        f55();
        %OptimizeFunctionOnNextCall(f55);
        return -10;
        new Int8Array(1964);
    }
    static c = -2.220446049250313e-16;
    static #e = -1000.0;
}
new C33();
new C33();
new C33();
new Date();
function F63(a65, a66, a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
    const v71 = new F0(1);
    v71.reverse();
}
new F63(F63, F63, F63, F63);
