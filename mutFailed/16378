new Map();
const v2 = [-3.9322217505305637e+307,-5.0];
const v3 = [1000000.0,-723855.0039691033,1000.0,2.2250738585072014e-308];
const v4 = [1000.0,272701.3277263059,-135.80497493123084,1000000.0,0.04955810020334184,1e-15,-955393.7352750857];
function F5(a7) {
    if (!new.target) { throw 'must be called with new'; }
    function f8(a9, a10) {
        -v2;
        Reflect.construct(a9, [Map,a7], a7);
        return v4;
    }
    a7.toString = f8;
    try {
        this.b = v3;
    } catch(e15) {
    }
    try {
        this.e = v3;
    } catch(e16) {
    }
    try {
        Map.d = a7;
    } catch(e17) {
    }
}
const v18 = new F5(v4);
new F5(v18);
new F5(v2);
let v23;
try { v23 = Uint8Array(1087, 1087); } catch (e) {}
v23 **= v4;
var b = Map;
v4.length;
const o25 = {
};
new Proxy(v2, o25);
new Uint8Array(1087);
new Int8Array(4);
new Uint8ClampedArray(230);
const v39 = new Int8Array(3);
const v42 = new Int32Array(3, 114, 3);
v42["keys"](v39, ..."keys", ..."keys");
Math.pow(-2.220446049250313e-16, 9906);
