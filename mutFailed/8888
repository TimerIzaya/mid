function f0() {
}
new BigUint64Array(2147483647);
[Int32Array,Int32Array,Int32Array,Int32Array];
function f6() {
    return 256 < 256;
    return 256;
}
f0[Symbol.toPrimitive] = f6;
const v11 = [-58359.69399340567,-4.0,1e-15,-2.220446049250313e-16,1.495523422813279e+308];
const t10 = [Float64Array];
t10.length = 2;
for (let v15 = 0; v15 < 5; v15++) {
    Math.atan2(536870912, v15);
}
const v19 = [1.0,0.9959739555277063,508657.8015619607,8.02675332086914,2.2250738585072014e-308,5.0,-6.266537071120155,-1.7976931348623157e+308,-2.0];
("minor").valueOf();
class C23 {
    ["minor"] = 0.9009832213714677;
}
const v24 = new C23();
const v25 = v24.minor;
v19[Symbol.toPrimitive] = f6;
const v28 = [4.0];
function f29() {
    Symbol[v28] = v25;
    return Symbol[5];
}
v28[Symbol.toPrimitive] = f29;
class C33 {
    g = C33;
    static f = f0;
    d = v11;
    #o(a35) {
        class C40 {
            ["getPrototypeOf"] = -1.7976931348623157e+308;
        }
        class C41 extends C40 {
            ["getPrototypeOf"] = C40;
        }
        const v42 = new C41();
        v42.getPrototypeOf;
        Math.floor(f0) || -109600185;
        return Math.acosh(f0);
    }
    static #n(a48) {
        function f49(a50) {
            return a50;
        }
        class C51 extends f49 {
        }
    }
    [f0];
    [v19];
}
new C33();
new C33();
new C33();
function F55(a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
    const v60 = this.valueOf(this.propertyIsEnumerable(a57), v28, v28);
    v60.constructor = f6;
    const v61 = v60.constructor;
    let v62;
    try { v62 = new v61(a57); } catch (e) {}
    a57.lastIndexOf(v62, a57);
}
new F55(v28);
class C65 extends f0 {
    #toString(a67, a68, a69) {
        try {
            v19.#toString(C65, a68, a68);
        } catch(e71) {
        }
        f0 instanceof C33;
        return C65;
    }
    static [f0];
    static #f = v11;
    b;
    static h = v19;
    #h;
}
new C65();
const v74 = new C65();
const v75 = new C65();
[v74,v75,C65];
[[v28]];
Math.atan2(-0.0, -0.0);
const v85 = new Uint8Array();
const v87 = new Uint32Array();
function f88(a89, a90, a91, a92) {
    a89.g = v87;
    a89.g = a89;
    const o96 = {
        "b": a89,
        ...v85,
        n(a94, a95) {
            return Uint8Array;
        },
    };
    new Date(..."undefined");
    return -1;
}
for (let v100 = 0; v100 < 625; v100++) {
    f88(Uint8Array);
}
const v104 = new Uint8ClampedArray(9);
new Uint8Array(v104);
