function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 6;
    } catch(e3) {
    }
    try {
        this.c = 6;
    } catch(e4) {
    }
}
const v5 = new F0();
let v6 = new F0();
const v7 = new F0();
v7.b = v7;
function f8(a9) {
    const o10 = {
        "b": v5,
        "a": a9,
        "d": v7,
        "g": a9,
        ...a9,
        "c": v6,
        [v7]: v7,
        "h": v7,
        "f": v6,
        "e": a9,
        65537: f8,
        6: a9,
        __proto__: v7,
        [v6]: a9,
        /*
        __proto__: a9,
        */
        106: v6,
        "e": F0,
    };
    return o10;
}
const v11 = f8(v5);
const v12 = f8(v11);
const v13 = v12.h;
const v14 = f8(v12);
function f15(a16, a17, a18) {
    a16.e = a16;
    const o94 = {
        [f8]: v12,
        __proto__: v12,
        "a": a17,
        ...v7,
        "d": a16,
        "h": f8,
        set e(a20) {
            const v21 = a20;
            try {
                super[this];
                Object.defineProperty(v14, "e", { set: f15 });
                super[f15] = a18;
                try {
                    v12.length = 1;
                } catch(e24) {
                    function F25() {
                        if (!new.target) { throw 'must be called with new'; }
                        function f28() {
                            return -9007199254740992n;
                        }
                        class C29 {
                        }
                        new C29();
                        this.c = 1073741823;
                        const o32 = {
                        };
                        class C33 {
                        }
                        const v35 = new Set();
                        function F36(a38, a39) {
                            if (!new.target) { throw 'must be called with new'; }
                            try {
                                this.d = a38;
                            } catch(e40) {
                            }
                            v35[this];
                            try {
                                new F36(a39, v35);
                            } catch(e43) {
                            }
                        }
                    }
                    new F25();
                    new F25();
                    new F25();
                    try { a17(v7, 1, a20, this); } catch (e) {}
                    try { v14.deleteProperty(v11, 1, 1); } catch (e) {}
                    try {
                        f15(1, f15, v21);
                    } catch(e54) {
                    }
                    new Float32Array(4);
                    new Uint32Array(2);
                    function F60(a62, a63, a64, a65) {
                        if (!new.target) { throw 'must be called with new'; }
                    }
                    const v66 = new F60(F60, F60, F60, F60);
                    for (let v67 = 0; v67 < 25; v67++) {
                        v66["p" + v67] = v67;
                    }
                    class C70 {
                        constructor(a72, a73) {
                            for (let i = 0; i < 10; i++) {
                                this[this];
                            }
                        }
                    }
                    new C70();
                    function F76(a78, a79) {
                        if (!new.target) { throw 'must be called with new'; }
                        const t116 = Array(11);
                        t116[212] -= 3774;
                        const v84 = this.constructor;
                        try { new v84(this); } catch (e) {}
                        a79++;
                    }
                    const v87 = new F76();
                    const t123 = v87.constructor;
                    new t123();
                }
                v11.fuck([v21,a20,v7,a17,this], 10);
            } catch(e93) {
            }
        },
    };
    for (const v95 of a18) {
        v95 <= v13;
    }
    a18 = f8;
    v6--;
    return o94;
}
f15(v7, v14, v14);
f15(v5, v14, v12)[106];
f15(v12, v6, v11);
let v102 = 268435441;
v102++;
function f105(a106, a107) {
    const o108 = {
        "f": a107,
    };
    return o108;
}
try { f105(v12, v102); } catch (e) {}
f105(1096487296, 1096487296);
f105(v102, v102);
