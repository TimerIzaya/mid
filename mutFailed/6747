const v0 = [];
function f1() {
    return v0;
}
const v2 = [v0,f1];
const v3 = [v2];
const v4 = [v2,v3,v3];
class C5 {
    get f() {
        const v10 = -240219926 % f1();
        Math.sin(-240219926);
        const v12 = this * v10;
        v12 ** v10;
        const v14 = this ** this;
        this ** v4;
        return v12 || v14;
    }
}
const v17 = new f1();
const v18 = new C5();
const v19 = new C5();
[v19,v19,v3,v2,v17];
[v18,v19,v19];
[v2,v4];
function f23() {
}
const v28 = (a29, a30, a31, a32) => {
    function F33(a35, a36, a37, a38) {
        if (!new.target) { throw 'must be called with new'; }
    }
    return Int8Array;
};
const v40 = [79.96177673553052,958106.6774601368,-2.220446049250313e-16,1.3702264850190933e+308,-569.2238583910487,-643621.2280408698,-906.898552923642,-3.0];
const v41 = [9.199333489675116,1000000000000.0,-150.6078457913527];
function f42(a43, a44, a45, a46) {
    function f48() {
        return arguments;
    }
    const v50 = new Int8Array();
    v50.buffer;
    %OptimizeFunctionOnNextCall(f48);
    ("find").codePointAt(f42);
    return arguments;
}
function f54() {
    return f1;
}
Object.defineProperty(f42, "toString", { enumerable: true, get: f54 });
for (let v55 = 0; v55 < 10; v55++) {
    f42();
}
const v57 = [-4.0,Infinity,-3.0,-734447.1317172151,4.890954914084955e+307,437656.14753023814,-0.0,0.2276435365306908];
function F64(a66, a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = 2.0;
    } catch(e69) {
    }
}
const v70 = new F64(1.7543951832230255e+308, -441742.52960792976, 165226.0487593948, -5.256559838432566, v41, -1);
new F64(-5.256559838432566, v41, v70);
const v72 = new F64(-441742.52960792976, v40, -212.78589373566194);
Object.defineProperty(v57, 149, { configurable: true, enumerable: true, get: f23, set: f23 });
Object.defineProperty(v40, 599385888, { configurable: true, enumerable: true, value: v72 });
/tRa*?(?:a+){0,0}/gvis;
/[qa{12z}]/gd;
/a*b|c[foo(?=bar)baz]/udy;
for (let v76 = 0; v76 < 5; v76++) {
    -4294967295 << -12;
    const v80 = [-2.220446049250313e-16,-1000000000.0,-1e-15,1000000000.0,-1.0,1000000000.0,-1000.0];
    v80.fill([1000000000000.0,1e-15], v80);
    const o86 = {
        "execution": "number",
        "type": "minor",
    };
    gc(o86, -441742.52960792976, o86);
    const v88 = o86.type;
    %VerifyType(f23);
    %VerifyType(v76);
    const v90 = new Int32Array(Int32Array, Int32Array, Int32Array);
    ~v90;
    let v92 = 144;
    const v93 = v92++;
    function f94(a95) {
        a95[4];
        return v93;
    }
    v88?.[214];
    new Float64Array(128);
    new Uint8Array(1);
    new Uint16Array();
}
function F107(a109, a110, a111) {
    if (!new.target) { throw 'must be called with new'; }
    Reflect.construct(Int8Array, [1126838905], a109);
}
