const v0 = [];
function f1(a2, a3) {
    const v6 = new Uint8ClampedArray(4096);
    new Int8Array(512);
    new Uint8Array(1);
    return v6;
}
v0[Symbol.toPrimitive] = f1;
function f15() {
    return v0;
}
function f16(a17, a18) {
    const o39 = {
        "e": a17,
        [a18](a20) {
            const v21 = `
                Object.defineProperty(v0, v21, { writable: true, configurable: true, get: f15, set: f15 });
                this.hasOwnProperty(a17, this, a17);
                ([127,506635944,-9223372036854775808,5,-536870912,-12000821,2147483649]).toSpliced(-1148418937, -1148418937, 2.220446049250313e-16, 2.220446049250313e-16, "-4");
                new Float32Array(2);
                new Int32Array(512);
                new Uint16Array(44);
            `;
            return eval(v21);
        },
    };
    const v40 = [1000000000.0];
    function f41(a42) {
        v0[6] = Symbol;
    }
    Object.defineProperty(v40, "p5", { writable: true, enumerable: true, set: f41 });
    for (let v43 = 0; v43 < 25; v43++) {
        v40["p" + v43] = v43;
    }
    return o39;
}
f16.toString = f16;
f16(f16, f15);
function F47(a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    const v51 = this.constructor;
    try { new v51(); } catch (e) {}
    function f53() {
        return F47;
    }
    %PrepareFunctionForOptimization(f53);
    f53();
    %OptimizeFunctionOnNextCall(f53);
}
const v55 = f16(f16, f16);
const o59 = {
    p(a57, a58) {
        return this;
    },
};
f16(v55, v0);
new Uint16Array(1000);
new Uint8ClampedArray(128);
new Int8Array(4);
function f70() {
    const o80 = {
        ["8"](a73, a74) {
            function f75() {
                Number.isNaN(Math.fround(Math));
                return f75;
            }
        },
    };
    o80[8] = o80;
    return o80;
}
%PrepareFunctionForOptimization(f70);
f70();
f70();
%OptimizeFunctionOnNextCall(f70);
f70();
function f84(a85, a86, a87, a88) {
    try { a85.findIndex(f84, f84); } catch (e) {}
    a86.toLocaleString();
    return arguments;
}
