[-6,-9223372036854775808,257];
const v1 = [512,-27283,-9007199254740992,15];
v1.apply();
const v5 = new BigInt64Array([]);
class C7 {
    2147483647 = undefined;
}
const v8 = [65536,-16237,1,1000,90648344,4096,-1073741824,9223372036854775807,65536];
class C9 {
    static get g() {
        this[this] -= this;
        function F12(a14, a15, a16, a17) {
            if (!new.target) { throw 'must be called with new'; }
            function f18() {
                return ("Vre").constructor.raw();
            }
            try { f18(); } catch (e) {}
        }
        new F12();
        const o27 = {
            get h() {
            },
        };
        try {
            v5 << o27;
            [-0.0,0.35331453774891175,0.0,171.67492280642023,0.015915737133018082,-390268.7701156768,-1000000000000.0,-0.0,5.0,-2.220446049250313e-16];
            const v30 = [607.0076449847468,-818.8860494127688];
            v30[0];
            v30[2];
            v30[3];
        } catch(e34) {
        }
        return -2147483649;
    }
    [v1];
    #d = v1;
    static #c = v1;
}
new C9();
Uint8Array.toString(Uint8Array, Uint8Array, Uint8Array, Uint8Array).normalize();
[3.4890473589784586e+307 === Uint8Array];
new C9();
new C9();
function f45() {
    return v8;
}
Math.log(-23525);
const v51 = ([16,-1337814116,1282563165,-268435456,-256,58611,-4294967296,-10,-9223372036854775807,9]).keys();
function f52(a53, a54) {
    const o55 = {
        "g": v51,
    };
    return o55;
}
%PrepareFunctionForOptimization(f52);
new Map();
const v57 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
for (let v58 = 0; v58 < 5; v58++) {
    function f59() {
        try {
            v57.forEach();
        } catch(e61) {
            e61.a = e61;
        }
        Symbol.for();
        return v57;
    }
    function F64(a66, a67, a68, a69) {
        if (!new.target) { throw 'must be called with new'; }
    }
    const v70 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
    function F72(a74, a75) {
        if (!new.target) { throw 'must be called with new'; }
    }
    class C76 {
    }
    const v78 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
    function f80() {
        let v83 = Float64Array;
        const v85 = Array();
        function f86() {
            return v83;
        }
        function f87(a88) {
            return f80;
        }
        Object.defineProperty(v85, 0, { configurable: true, enumerable: true, get: f86, set: f87 });
        v85.unshift();
        new Set(v78);
        v83 = F64;
        const v92 = v70.length;
        try {
            v70.forEach();
        } catch(e94) {
        }
        [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        class C97 {
        }
        const v98 = new C97();
        v98.__proto__ = F72;
        ["Vre"];
        class C100 {
        }
        const v101 = Symbol.toPrimitive;
        Symbol.match;
        const o106 = {
            toString(a104, a105) {
                return a104;
            },
        };
        const o128 = {
            "c": -4294967297n,
            [522675525n](a109, a110) {
            },
            valueOf(a112, a113) {
                return f80;
            },
            [-4294967297n](a115, a116, a117, a118) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v78,
            [v101]() {
            },
            "type": C76,
            valueOf(a121, a122) {
                return F64;
            },
            get h() {
                return f80;
            },
            4: "Vre",
            toString(a125, a126, a127) {
                return C97;
            },
            5: -4294967295,
            6: -268435456,
        };
        new Float32Array(v98, v58, -23525);
        v58 %= -268435456;
        new Uint32Array(v92, -4294967295, -4294967295);
        new v83();
        new Uint16Array(Symbol);
        return f80;
    }
    f59();
    %OptimizeFunctionOnNextCall(f59);
}
