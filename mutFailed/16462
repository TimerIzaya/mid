function f0() {
    const o10 = {
        ...-9075,
        [0.506396061784576]: -9075,
        "g": -9075,
        valueOf(a5) {
            return -316229.53537248645 - -1000000000.0;
        },
        "c": 0.506396061784576,
        "h": 0.506396061784576,
        ...-458909.65592836763,
        "b": -458909.65592836763,
    };
    o10.b = o10;
    return o10;
}
f0();
const v12 = f0();
const v13 = f0();
v13.h = v13;
9.398664213750731 | 9.398664213750731;
NaN - NaN;
Uint8Array[1] = Uint8Array;
const v19 = new Uint8Array();
try { new Uint32Array(Uint8Array, Uint8Array, 9.398664213750731); } catch (e) {}
const v22 = new Uint32Array();
function f23(a24, a25, a26, a27) {
    a24.g = a24;
    a26 % a26;
    const o32 = {
        "b": a24,
        ...v19,
        n(a30, a31) {
            v22[a24] = v22;
            return Uint8Array;
        },
    };
    return Uint8Array;
}
function f34(a35, a36, a37) {
    try { a35.valueOf(a37); } catch (e) {}
    a37 === a37;
    const o45 = {
        3335669998: v12,
        set h(a41) {
            super[this] = 4.0;
            try {
                this.fuck(a36, -268435456, a41, -268435456);
            } catch(e44) {
            }
        },
        "g": a36,
        "a": a35,
        ...v12,
        "b": v12,
        [4.0]: 9.398664213750731,
    };
    let v46 = -4294967297n;
    v46--;
    for (let v48 = 0; v48 < 5; v48++) {
        v48 % v48;
        function f50() {
            const v52 = ("Vre").charAt(v48);
            v52[0];
            const v54 = v52.lastIndexOf();
            const v55 = v54 >>> v54;
            v55 < v55;
            const v58 = new Float32Array("Vre", v48, v48);
            Object.defineProperty(v58, Symbol.toPrimitive, { writable: true, configurable: true, enumerable: true, value: f34 });
            try { v58.at(f50); } catch (e) {}
            const v62 = v58;
            v62[1] = v62;
            const v64 = Math.exp(v48);
            let v65 = v64 << v64;
            v65++;
            const o74 = {
                [v46](a68, a69, a70, a71) {
                    eval();
                },
            };
            return v46;
        }
        f50.valueOf = f0;
        f50();
        %OptimizeFunctionOnNextCall(f50);
    }
    return o45;
}
f34(v12, 9.398664213750731, 4.0);
f34(v13, NaN, NaN);
f34(v13, 9.398664213750731, 9.398664213750731);
[-4294967296,-65535,-268435456];
[-17165,-7];
const v81 = [257,9,-5,-787748736,-65535,52411,-295820632];
v81[1] = v81;
for (let i85 = 0, i86 = 10;
    (() => {
        const v87 = i85 < i86;
        !v87;
        return v87;
    })();
    i85++) {
    i86 << i86;
}
try { ("number").strike(); } catch (e) {}
const v98 = ["number","number","number","number"];
v98[4] = f23;
const v99 = [v98,v98];
v99[2] = Uint32Array;
function F100(a102, a103, a104) {
    if (!new.target) { throw 'must be called with new'; }
    try { a102.toLocaleString(); } catch (e) {}
    const v106 = this.constructor;
    try { new v106(this, this); } catch (e) {}
    a102[1] = a102;
    a103[4] = a103;
    try {
    } catch(e108) {
    }
}
v99[4];
URIError(Float64Array);
function f113() {
    Int8Array.prototype = Int8Array;
    Int8Array.b = Int8Array;
    return f113;
}
f113();
const v116 = new F100(v81, v99);
v116[4] = v116;
const v117 = new F100(v99, v98);
v117[4];
