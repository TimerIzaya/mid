const t0 = "g";
t0[14] &&= 14;
function f7(a8, a9) {
    const o13 = {
        [122188848n](a11, a12) {
        },
    };
    return o13;
}
new Map();
function f17(a18) {
    return "g";
}
const o21 = {
    "type": "function",
};
o21.arguments = 14;
new Worker(f17, o21);
new Int32Array(189);
const t19 = 64;
t19.h = 64;
function F26(a28, a29) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e30) {
        for (let [v31,v32] of a28) {
        }
    }
    const v35 = ~(-256n >> -256n);
    const v37 = Symbol.toPrimitive;
    const o39 = {
        [v37]() {
        },
    };
    v35 + v35;
    try {
        new F26();
    } catch(e42) {
    }
}
new Uint8ClampedArray(64);
new Uint32Array(127);
function f48() {
    return 10000;
}
class C50 extends String {
    6 = String;
    5;
}
new C50();
const v54 = new BigUint64Array(10);
function F55() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        Object.defineProperty(v54, 0, { writable: true, value: 4096 });
    } catch(e58) {
    }
}
new F55();
