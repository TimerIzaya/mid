function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = -4294967295;
    } catch(e3) {
    }
    try {
        this.f = -4294967295;
    } catch(e4) {
    }
}
new F0();
const v6 = new F0();
const v7 = new F0();
new Int16Array(0);
v7.length;
const v14 = new Float64Array(228);
v14.byteLength;
const v17 = -127;
new Float32Array(127);
new Int8Array(4);
new BigInt64Array(222);
const o30 = {
    "maxByteLength": 11,
};
let v32 = new ArrayBuffer(11, o30);
const v34 = new v6(v32);
new Uint16Array(1072);
let v38 = 0;
v38 >> v38;
v38 < 4;
const v42 = v38++;
v42 >> v42;
function F44() {
    if (!new.target) { throw 'must be called with new'; }
    const v46 = this?.__defineGetter__;
    o30[v34] = this;
    const v47 = +this;
    Int8Array / 536870889;
    v32++;
    v32 || v47;
    try { new v46(Uint8Array, this); } catch (e) {}
    const o55 = {
    };
    o55.e = 19793;
    const o56 = {
    };
    o56.h = o56;
    o56.h = 58;
    const v58 = Array(19793);
    for (const v59 of v58) {
    }
    %VerifyType(v17);
    try {
        this.__proto__ = Array;
    } catch(e63) {
    }
    const v64 = [v58,v58,v58,v58,v58];
    const v66 = new BigUint64Array();
    const v68 = [v66];
    const v69 = v68?.filter;
    try { new v69(Float32Array); } catch (e) {}
    for (let v71 = 0; v71 < 50; v71++) {
        v71 - v71;
    }
    v68[65536] %= 256;
    const v73 = [v64,v64,v64];
    const v74 = v73?.groupToMap;
    try { new v74(19793); } catch (e) {}
    const v76 = [v73];
    try { v76.splice(256, 256); } catch (e) {}
    v76 >= Uint16Array;
}
const v80 = v7?.constructor;
try { new v80(); } catch (e) {}
let v83 = 626882448n;
v83--;
class C86 {
    #p(a88, a89) {
        const v91 = v6[this];
        try {
            super.toString(6n, a89, v91, v91);
        } catch(e93) {
        }
        return v6;
    }
    [v83] = v7;
    1073741823;
}
const v94 = new C86();
v94[1073741823] = v94;
new C86();
new C86();
try { new Float64Array(v94, v94, Float64Array); } catch (e) {}
const v100 = new Float64Array(65536, 65536, 65536);
v100.copyWithin(65536, 4294967297);
