class C3 {
    set c(a5) {
        new Uint8ClampedArray(257);
        0 < 15;
        const v14 = new BigInt64Array(0);
        function f15(a16, a17) {
            const v18 = a16++;
            const v19 = v18 >> v18;
            let o20 = {
            };
            [,...o20] = v14;
            return v19;
        }
        new Int16Array(15);
        new Int32Array(1024);
    }
}
new C3();
new C3();
const v27 = new C3();
function f28() {
    return v27;
}
const v29 = [-536870912,3,4294967296,4984,1000,826602670,4,4];
try { v29.reduceRight(f28); } catch (e) {}
for (let v31 = 0; v31 < 5; v31++) {
    v31--;
    const t26 = [0.8307152163010869,1.0,0.0];
    t26.length = v31;
}
try { new BigUint64Array(BigUint64Array, "boolean", BigUint64Array); } catch (e) {}
const v36 = new BigUint64Array();
const t32 = v36.__proto__;
t32[512] %= 9;
[127,-2098377474,-1657752806,-65537,0,0,8,-50838,15,-51885];
[1073741825,-9223372036854775807,9];
const v41 = [1.7976931348623157e+308,2.2250738585072014e-308,928419.7587767004,-279.06139374957183,1000.0];
for (let i44 = (() => {
        0 % 0;
        return 0;
    })();
    (() => {
        const v46 = i44 < 2;
        v46 || v46;
        return v46;
    })();
    i44++) {
    i44 + i44;
    try {
        v29.length = i44;
        const o54 = {
            get h() {
                return i44;
            },
            [i44]: 4,
            2778757984: i44,
            "h": 4,
        };
        o54[2778757984];
    } catch(e56) {
    }
}
v41[Symbol.isConcatSpreadable] = v41;
const o59 = {
    __proto__: v41,
};
try { o59.groupToMap(v27); } catch (e) {}
o59.concat();
for (let [i65, i66] = (() => {
        10 + 10;
        return [0, 10];
    })();
    (() => {
        i65 >>> i65;
        class C68 {
        }
        const v69 = new C68();
        const v70 = v69?.constructor;
        try { new v70(); } catch (e) {}
        function f72(a73, a74, a75) {
            const o77 = {
                get b() {
                    return C68;
                },
                127: v69,
            };
            return f72;
        }
        f72().name;
        const v80 = i65 < i66;
        v80 && v80;
        return v80;
    })();
    i66--) {
    i66 / i66;
}
