const v0 = /R/uimsy;
/(?:a?)+/dis;
const v2 = /(?:ab)|cde/u;
v2.isConcatSpreadable.description.fontsize(Array).trimStart(Array);
function f13() {
    class C15 {
        static {
            try {
            const t0 = 529940173;
            t0(this, this);
            } catch (e) {}
            Math.cos(1000);
            Math.tan(1000);
        }
    }
    new f13();
    return v0;
}
const v26 = [v2];
([5,5]).join(5);
const v30 = [1000.0,-1000000000000.0,-7.943810730626244,-1.7976931348623157e+308,1.0,4.0];
try {
    v30.length = "d";
} catch(e31) {
}
["string",v26];
["string",65537];
function f34(a35, a36, a37, a38) {
    const v39 = /(?:a*)+q(?<a>.)/guds;
    ([-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1]).pop();
    class C42 {
    }
    function F43(a45) {
        if (!new.target) { throw 'must be called with new'; }
        const v46 = a45.constructor;
        const v47 = v46.bind(F43, F43, F43);
        try { v47(); } catch (e) {}
        try { new v46(); } catch (e) {}
    }
    for (let [i60, i61] = (() => {
            function f51(a52) {
                return a52;
            }
            class C53 extends f51 {
            }
            const o59 = {
                [65537](a57, a58) {
                },
            };
            return [0, 10];
        })();
        (() => {
            const v62 = i60 < i61;
            function f63(a64, a65) {
                return v62;
            }
            return v62;
        })();
        i61--) {
        for (let v71 = 0; v71 < 25; v71++) {
            v39.hasIndices = v39;
        }
    }
    return f34;
}
for (let v72 = 0; v72 < 10; v72++) {
    const v74 = new Int32Array(Int32Array, Int32Array, Int32Array);
    Math.expm1(~v74);
    f34();
}
%OptimizeFunctionOnNextCall(v2);
f34();
