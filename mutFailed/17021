new Uint8Array(2);
class C4 extends Map {
}
const v5 = new C4();
const v6 = new C4();
const v7 = new C4();
const v11 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v13 = new Uint32Array(5);
let v14 = -4294967297n;
v14--;
const v16 = [601759695];
const v17 = [1073741824,1073741823,1376142744,1073741825];
function f19(a20, a21, a22, a23) {
    try { a20.toLocaleString(); } catch (e) {}
    const v25 = a20?.constructor;
    let v26;
    try { v26 = v25(); } catch (e) {}
    try { v25(); } catch (e) {}
    const v29 = arguments.length;
    Object.defineProperty(v5, "e", { configurable: true, enumerable: true, value: f19 });
    const v31 = v6["entries"](a22, ...v7, BigUint64Array, ..."entries", a21, v29);
    const v33 = Symbol.toStringTag;
    v6[v33] = v33;
    function f34() {
        let v36;
        try { v36 = ("Vre").charAt(4096); } catch (e) {}
        try { v36.lastIndexOf(f34); } catch (e) {}
        let v38;
        try { v38 = ("Vre").codePointAt(v11); } catch (e) {}
        v38 - v38;
        v38 ^ v38;
        let v41 = Float64Array;
        v41 = a21;
        let v42 = v11.length;
        v42++;
        try {
            v17.forEach(a21);
        } catch(e45) {
            e45.stack = e45;
        }
        const o56 = {
            "c": v14,
            "c": v16,
            valueOf(a47, a48) {
                return a48;
            },
            1073741824: v13,
            [v14](a50, a51, a52, a53) {
                eval(v26);
            },
            "arguments": 5,
            256: a23,
        };
        o56[256];
    }
    f34();
    const v60 = Array();
    let v61;
    try { v61 = v60.findLast(f19, v13); } catch (e) {}
    v60.unshift("entries", v31, "entries", v61);
    let v64;
    try { v64 = Int8Array.of(); } catch (e) {}
    try { v64.join(v25); } catch (e) {}
    const v66 = new Int8Array(v16);
    v66.c = v66;
    const v67 = v66.buffer;
    v67.maxByteLength;
    const v69 = v67.slice(v25);
    try { Int32Array(v69, arguments, v14); } catch (e) {}
    function f72(a73, a74, a75, a76) {
        return v5;
    }
    const v77 = new Int32Array();
    const v78 = v77[3];
    v78 + v78;
    for (let v80 = 0; v80 < 5; v80++) {
    }
    %OptimizeFunctionOnNextCall(f34);
    try { v17["find"](..."find", a23, ...v16, ...v17, ...522675525n); } catch (e) {}
    return v25;
}
new Uint8ClampedArray(1606);
new Int8Array(14);
function F93(a95, a96, a97, a98) {
    if (!new.target) { throw 'must be called with new'; }
    const v99 = this.constructor;
    try { new v99(this, a98, this); } catch (e) {}
    a97++;
    a97 >>>= F93;
    const v104 = Int32Array - 127;
    v104 / 127;
    Math.atan2(v104, v104);
}
class C107 {
    o(a109, a110, a111, a112) {
    }
    static 268435439;
    constructor(a114, a115, a116) {
        for (let v117 = 0; v117 < 32; v117++) {
            a114["p" + v117] = v117;
        }
    }
}
const v120 = new C107();
function f121() {
    return v120;
}
Object.defineProperty(v120, "b", { enumerable: true, get: f121 });
