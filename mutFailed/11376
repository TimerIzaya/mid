const v0 = [-3.5834043152193633,0.9358039441389655,1e-15,-1e-15];
const v1 = [-6.684149249887298e+307,0.6312370005753681,-1.7976931348623157e+308];
const v2 = [-5.0,-502.10957961804417,0.7265403185731781,-2.0,-3.0,Infinity,-376.9571651640771];
function F3(a5) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.h = v2;
    } catch(e6) {
    }
}
const v7 = new F3(v1);
const v8 = new F3(v1);
const v9 = new F3(v1);
class C10 {
    constructor(a12, a13) {
        [348459484,1073741825,8,268435439];
        [332468068,-4,536870912,-1,-1033198671,-27682];
        [-536870912,2];
    }
    get g() {
        try {
            this.g = this;
        } catch(e18) {
        }
        return v7;
    }
    static [v2] = v8;
    e = v9;
}
let v19 = new C10(v2, v8);
const v20 = new C10(v2, v9);
const v21 = new C10(v0, v7);
class C22 extends F3 {
    [v19];
    toString(a24, a25, a26) {
        let v27 = v2[2552307079];
        [a24,...v27] = a24;
        super.e = this;
        function f28() {
            return v27;
        }
        const v29 = C10 >= v0;
        Object.defineProperty(v1, "length", { enumerable: true, get: f28, set: f28 });
        v19 &= v21;
        [-1.7976931348623157e+308,7.50433519433059,4.4120420171513395,576.35867045284,2.2250738585072014e-308];
        [0.08764536249569355,1.0,-732229.4673361711,546.5851661214633,-995482.0571057965,-2.220446049250313e-16,-1000.0,-1000000000000.0,1000000.0];
        [-2.421327877654229];
        v29 ? C10 : v0;
        return this;
    }
    set d(a35) {
        super[this] = v8;
    }
    static 9 = v21;
    static f = F3;
    3899784921;
    static [-1] = v20;
}
new C22();
new C22();
new C22();
let v39 = -1024;
function F40(a42, a43, a44, a45) {
    if (!new.target) { throw 'must be called with new'; }
    const v49 = new Int16Array(2);
    v49.lastIndexOf(1.8023018568192065e+307);
}
const v51 = new F40(v39, v39, F40, F40);
const v52 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v53 = [2.0,7.10011887634696e+307,5.04629902085264,-235569.90430342825,1000000000000.0,426535.30541040236,-734908.2544538898,-780.4792630242589,NaN,0.9523787688077121];
function F55(a57, a58) {
    if (!new.target) { throw 'must be called with new'; }
}
const v59 = new F55();
class C60 {
}
const v62 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v63 = [601759695];
function f65(a66, a67, a68, a69) {
    const v71 = new WeakSet();
    v71.has(v71);
    new Float32Array(v39);
    function f75() {
        let v78 = Float64Array;
        v78 = a67;
        const v79 = v52.length;
        try {
            v52.forEach(v78);
        } catch(e81) {
        }
        const v82 = [-2.220446049250313e-16,0.9798105418016166,-4.830267035271884,-435.7279193107944,864333.2303131514,-3.553417885466287e+306,-1000000000000.0,-1000000000.0,990180.6241720289,-1000000.0];
        const v84 = Symbol.toPrimitive;
        const o93 = {
            toString(a86, a87) {
                try {
                    this.fuck(a68, 268435440);
                } catch(e90) {
                }
                const v91 = a69 && v78;
                a86 *= v84;
                v91 <= v82;
                return F55;
            },
        };
        const o114 = {
            "c": -4294967297n,
            [522675525n](a96, a97) {
            },
            "c": v63,
            valueOf(a99, a100) {
            },
            [-4294967297n](a102, a103, a104, a105) {
            },
            "e": -268435456,
            "maxByteLength": -4294967295,
            "arguments": v62,
            ...v51,
            [v84]() {
            },
            "type": C60,
            ..."Vre",
            valueOf(a108, a109) {
                return Symbol;
            },
            ..."Vre",
            4: "Vre",
            toString(a111, a112, a113) {
                return a111;
            },
            5: -4294967295,
            6: -268435456,
        };
        new Float32Array(1334);
        v39 %= -268435456;
        new Uint32Array(v53, v79, v84);
        v59 - f75;
        try {
            new Float64Array(127);
        } catch(e123) {
        }
        new Float64Array(3);
        new Uint16Array(2);
    }
    const v130 = f75();
    %OptimizeFunctionOnNextCall(f75);
    return v130;
}
for (let v131 = 0; v131 < 5; v131++) {
    f65(v59, F40, F55, v131);
}
