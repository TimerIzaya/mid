const v2 = new Float32Array(12);
Uint8Array.h = Uint8Array;
Uint8Array.h = Uint8Array;
const v5 = new Uint8Array(13);
function f6() {
    const o10 = {
        "execution": "async",
        "type": "minor",
    };
    gc(o10);
    return Uint8Array;
}
Object.defineProperty(v5, "toString", { value: f6 });
try { Int8Array.from(12); } catch (e) {}
const v15 = new Int8Array(256);
class C16 {
    n(a18, a19) {
        v15.__proto__;
        return this;
    }
    constructor(a22, a23) {
        this[256] = Uint8Array;
        a23[Symbol.toPrimitive] = f6;
        super.b;
        this[a23] = Int8Array;
        try {
            this.f = Int8Array;
        } catch(e27) {
        }
    }
}
const v28 = new C16(Int8Array, v5);
const v29 = new C16(v5, 256);
const v30 = new C16(v29, 256);
const v31 = v30?.hasOwnProperty;
try { new v31(12); } catch (e) {}
function f33() {
    return f33;
}
function f34(a35, a36) {
    new Uint8Array();
    return v28;
}
f33[Symbol.toPrimitive] = f34;
const v41 = f33?.apply;
try { new v41(v2, 13); } catch (e) {}
class C43 extends f33 {
}
try { C43.__proto__(); } catch (e) {}
const v45 = new C43();
v45.caller = v45;
const v47 = new Date(v45);
v47.setUTCMinutes(f33, v47, Date);
