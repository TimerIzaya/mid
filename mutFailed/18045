const v0 = [];
function f1() {
    return v0;
}
Uint8ClampedArray.d = Uint8ClampedArray;
new Uint8ClampedArray(13);
const v7 = new Uint8Array(524);
new Float64Array(43);
const v12 = 22223 ^ 22223;
26525 & 26525;
new Uint32Array(13);
const v21 = new Int32Array(1548);
const v22 = v21?.constructor;
try { new v22(v7, v7, v7); } catch (e) {}
new Int32Array(5);
-27118 & -27118;
new Float64Array(3609);
9 + 9;
try { Float32Array.from(22223); } catch (e) {}
function f40() {
}
[601759695];
const v42 = [1073741824,1073741823,1376142744,1073741825];
function f44(a45, a46, a47, a48) {
    a46 >>> a46;
    arguments[1] = arguments;
    function f51() {
    }
    try { f51(); } catch (e) {}
    a45();
    const v55 = new v12();
    1073741824 >> 1073741824;
    function f58(a59, a60) {
        const o64 = {
            p(a62, a63) {
            },
            10: 1073741824,
        };
        return a59;
    }
    v22();
    f58();
    const v68 = v55.buffer?.slice;
    try { new v68(Uint8ClampedArray, 43); } catch (e) {}
    let v70 = 2147483648;
    v70--;
    let v72 = 1000000000000.0;
    ~v72;
    const v74 = v72--;
    v74 * v74;
    const t49 = [];
    t49.length += 1.0;
    %OptimizeFunctionOnNextCall(f51);
    class C82 extends Date {
    }
    C82.d = C82;
    try { v42["find"](); } catch (e) {}
    for (const v85 in "1024") {
        try { a47.valueOf(); } catch (e) {}
    }
}
for (let v87 = 0; v87 < 10; v87++) {
    f44(v87, v87);
    522675525n & 522675525n;
}
%OptimizeFunctionOnNextCall(f44);
f44();
