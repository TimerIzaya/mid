[];
new Int32Array(5);
new BigUint64Array(431);
new BigUint64Array(16);
class C10 extends BigUint64Array {
    static get a() {
        this[9] = BigUint64Array;
        function f12() {
            return this;
        }
        return BigUint64Array;
    }
    constructor(a14, a15, a16) {
        super(a15);
        const o19 = {
            valueOf() {
                super.buffer &= 5;
                return C10;
            },
        };
    }
}
new C10(431, 431, 16);
new C10(5, 16, 16);
new C10(431, 5, 5);
const v23 = [5,4142,11,268435456,11,-30743,4096,268435440,1753297073];
function f24() {
    class C28 {
        static 3143;
        static ["-2"];
        #f = "4X";
        static #a;
        #c;
        #valueOf(a30, a31) {
            const v32 = a31 == a31;
            v32 ? a31 : v32;
            const v34 = ["-2",this,"setMonth",a30,"-2"];
            [v34,v34,this,this];
            [v32,"-2","4X",a30];
            return a30;
        }
        10 = "4X";
        #g = "-2";
    }
    const v37 = new C28();
    const v38 = new C28();
    new v37();
    try { new WeakSet(); } catch (e) {}
    new WeakSet();
    -536870912 ^ -536870912;
    [-256,-256,5,-9007199254740991,-128,1073741825,-11,-49255];
    const v48 = [35577,123452243,-2,65305,268435441,11,-58686];
    [1506147375,1598671956,64,-23009,-512929497,-1432178736,4];
    try { v23.sort("-2"); } catch (e) {}
    6 | 6;
    function F58(a60, a61) {
        if (!new.target) { throw 'must be called with new'; }
        Number.isFinite(Number);
        const v64 = this.constructor;
        try { new v64(); } catch (e) {}
    }
    new F58();
    new C10();
    class C69 {
        constructor(a71) {
            const v72 = this.constructor;
            v72.d = v72;
            try { new v72(); } catch (e) {}
            ("size").c;
            const v75 = ("size").g;
            ("size").length;
            let v77 = v75?.[7];
            [...v77] = v38;
            /a\bc/vd;
        }
    }
    function f79(a80, a81, a82) {
    }
    const o83 = {
    };
    class C84 {
        static #n(a86) {
        }
    }
    new C84();
    new v38();
    let v89 = Int16Array;
    try {
    } catch(e90) {
    }
    v89 = v89;
    Int8Array.b = Int8Array;
    Int8Array.b = Int8Array;
    gc();
    Object.defineProperty(v23, 1, { writable: true, enumerable: true, value: v48 });
    return Int8Array;
}
%PrepareFunctionForOptimization(f24);
f24();
%OptimizeFunctionOnNextCall(f24);
f24();
