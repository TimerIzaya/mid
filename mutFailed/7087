const v4 = new Set();
const v6 = Symbol.isConcatSpreadable;
v4[v6] = "-1562317219";
class C10 extends Set {
    constructor(a12, a13, a14, a15) {
        super(a15);
        ("-1562317219")[-9];
        v4[Symbol.isConcatSpreadable];
    }
    static valueOf(a21, a22, a23) {
        super.size = a22;
        return a23;
    }
    [-9] = -29979;
    static #f = "Bt";
    c = "Bt";
}
const v24 = new C10(-29979, v4, -29979, 9007199254740990);
const v25 = new C10(9007199254740990, v24, -9, 9007199254740990);
class C28 extends Uint8Array {
    constructor(a30, a31) {
        a30[1] = Float64Array;
        super(a30);
    }
}
new C10(-9, v25, 9007199254740990, 9007199254740990);
new BigUint64Array(58);
new Int32Array(8);
new Int16Array(1780);
class C48 {
    set h(a50) {
        a50[-12] = -9200;
        0 instanceof a50;
        129 !== this;
        let v53 = ~-9200;
        v53 = -12;
        const t35 = this[5];
        const v55 = delete t35?.[12];
        try {
        } catch(e56) {
        }
        const v59 = new Int8Array(520);
        for (let v60 = 0; v60 < 5; v60++) {
            v59.indexOf(v60);
        }
        super.g = v55;
    }
    h;
    6;
    #a;
    f = -4;
    8;
    [-12];
}
new v6();
new C48();
new C48();
const v65 = C28.constructor;
class C67 extends WeakSet {
    m(a69) {
        Object.defineProperty(this, 10, { writable: true, enumerable: true, value: a69 });
    }
    129;
}
gc();
function F72(a74, a75) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e76) {
    }
}
const v78 = new Int32Array(Int32Array, Int32Array, Int32Array);
function F79(a81, a82) {
    if (!new.target) { throw 'must be called with new'; }
}
const v83 = new F79(Int32Array, v78);
function f84(a85) {
    let v86;
    try { v86 = v83.resize(a85, F79, Int32Array, a85); } catch (e) {}
    v78.length |= v86;
    return v86;
}
class C87 extends C48 {
    static {
    }
}
const o89 = {
};
for (let i = 0; i < 10; i++) {
    /[xyz{1,}(O)]/udis;
}
try {
    function f93() {
    }
} catch(e94) {
}
const o95 = {
};
try {
    const o96 = {
    };
} catch(e97) {
    new Date(v65, 1000.0);
    for (let v102 = 0; v102 < 25; v102++) {
        const v103 = [601759695];
        const v104 = [1073741824,1073741823,1376142744,1073741825];
        function f105(a106, a107, a108, a109) {
            try { v103["find"](..."find", a109, ...v103, ...v104); } catch (e) {}
            const v114 = Symbol.isConcatSpreadable;
            const v115 = v114.description;
            const v116 = Array(f84);
            try { v116.groupToMap(v114, v115, f105, v116, v114); } catch (e) {}
            return v103;
        }
        for (let v118 = 0; v118 < 5; v118++) {
            f105();
        }
    }
    function f120(a121, a122, a123, a124) {
        const o128 = {
            n(a126, a127) {
            },
        };
    }
}
try {
    const o129 = {
    };
} catch(e130) {
}
try {
} catch(e131) {
    function f132(a133, a134, a135, a136) {
    }
}
