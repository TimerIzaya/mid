("b").localeCompare;
const v3 = [];
class C4 {
}
C4.f = C4;
const v5 = new C4();
function f6() {
    new Uint8ClampedArray(16);
    return 16;
}
v5.constructor = f6;
try { v5.constructor(); } catch (e) {}
function F11(a13, a14) {
    if (!new.target) { throw 'must be called with new'; }
    function f15() {
        return a13;
    }
    function f16(a17) {
        class C19 {
        }
        const v20 = new C19();
        v20.p("m");
    }
    Object.defineProperty(this, "c", { configurable: true, enumerable: true, get: f15, set: f16 });
    const v22 = this?.__defineSetter__;
    try { new v22(a14, a14); } catch (e) {}
    try { a14.findLast(this); } catch (e) {}
    this.c = a14;
}
const v25 = new F11(v5, v3);
const v27 = [v25];
const o28 = {
    "arguments": v27,
    "type": "function",
};
13n << 13n;
("asyncIterator")[2];
try { Float32Array(v5, Float32Array, v3); } catch (e) {}
const v38 = new Float32Array(255);
v38 instanceof Float32Array;
const v41 = new Uint8ClampedArray();
const v42 = v41?.entries;
try { new v42(); } catch (e) {}
const v44 = v41.reverse();
try { v44.find(255); } catch (e) {}
function F47(a49, a50) {
    if (!new.target) { throw 'must be called with new'; }
    this.toString = f6;
    try {
        this.b = "asyncIterator";
    } catch(e51) {
    }
}
new F47(-49320n, 13n);
new F47(-49320n, -49320n);
(~9007199254740990).constructor;
const v57 = [-1e-15,-2.0,4.0];
const v58 = [795.4751676913663,916.0660535964746,692.8569144836281,9.930092247719177,0.13324776174156971];
v58[3];
const v60 = [-5.0,-2.0,-1.5942587568933252e+308,1.0730723170600494e+307,0.0,-2.2250738585072014e-308,-446.9921213911738];
class C61 {
    [v60] = v58;
    static #c;
    #o(a63, a64) {
        Symbol.search;
    }
    set e(a68) {
        this[this] = v57;
        SharedArrayBuffer();
        Uint8ClampedArray();
    }
}
const v75 = C61?.apply;
try { new v75(-4n, Float32Array); } catch (e) {}
new C61();
const v78 = new F47(-49320n, -49320n);
function f79(a80, a81) {
    const o84 = {
        "maxByteLength": 6,
    };
    const v86 = new SharedArrayBuffer(4, o84);
    const v88 = new Float64Array(v86);
    return v88;
}
v78.toString = f79;
try { v78.toLocaleString(); } catch (e) {}
9007199254740990 & 9007199254740990;
const v93 = (~9007199254740990).constructor;
try { v93.toString(); } catch (e) {}
const v97 = v93(v93).toFixed()?.toLocaleUpperCase;
try { new v97(); } catch (e) {}
