class C3 {
    constructor(a5) {
        const v6 = [34352,4,-9223372036854775808,1092764849,-2147483647,-1162070362,-4294967297,8,-591755449];
        const v9 = new Float64Array(64);
        v9[5] = v6;
        [v9,v6];
        const o11 = {
        };
        new Proxy("m", o11);
    }
    set e(a15) {
        const v16 = a15 ** 2.0;
        const v17 = ["-50679"];
        ["m","m",this,v17,v17];
        [2.0,this,v16];
    }
    static e = "m";
    #d;
}
const v20 = new C3("m");
new C3(v20);
new C3(v20);
[-1000000000000.0,-2.2250738585072014e-308,1.7976931348623157e+308,767292.8665979742,626714.456021969];
[-1000000.0,0.6778128659238791];
[1.7976931348623157e+308,-441.51358890416566,-Infinity,-2.0,-637805.2601193924,4.564811610708684,-1.4063297138391294e+308,9.90910647420134,-Infinity];
const v33 = [1.065613492561098e+308];
function f34() {
    const o76 = {
        m(a37) {
            a37.f = a37;
            try { a37.next(f34); } catch (e) {}
            a37.c = a37;
            a37.h = a37;
            const o39 = {
            };
            o39.h = o39;
            function f40(a41, a42, a43) {
            }
            f40.caller = f40;
            try {
                o39.split = -65535;
            } catch(e45) {
                const v49 = new Uint8ClampedArray(512);
                new Uint8ClampedArray(798, ...v49, o39, ...v33, ...v49);
            }
            try {
                const o51 = {
                };
            } catch(e52) {
            }
            Math?.expm1;
            let v55 = -9007199254740991;
            v55++;
            const v57 = v55 >> v55;
            for (let v58 = 0; v58 < 5; v58++) {
            }
            v57 && v57;
            class C60 {
                o(a62, a63, a64, a65) {
                }
            }
            new Float64Array();
            const o68 = {
            };
            const v69 = [];
            function f70() {
                -v69;
                return f70;
            }
            %OptimizeFunctionOnNextCall(f70);
            const v74 = new Int8Array(3938);
            let v75 = 3;
            for (let i = 0; i < 5; i++) {
                [...v75] = v74;
            }
        },
    };
    o76.m(o76);
}
function F78() {
    if (!new.target) { throw 'must be called with new'; }
}
class C80 {
}
f34();
f34(f34);
