[];
function f3() {
}
const v4 = [601759695];
const v5 = [1073741824,1073741823,1376142744,1073741825];
function f7(a8, a9, a10, a11) {
    function f13() {
        return 522675525n;
    }
    f3();
    const v16 = new Int8Array();
    v16.buffer.slice(2147483648);
    %OptimizeFunctionOnNextCall(f13);
    let v21;
    try { v21 = v5["find"](..."find", a11, ...v4, ...v5, ...522675525n); } catch (e) {}
    v21 <= a10;
    return arguments;
}
new Float64Array(1024);
const v26 = new Uint8Array(9);
const v28 = [-5,2147483649,-4294967295,1,8,-4331,52354,15231];
v28["unshift"]();
try { new SharedArrayBuffer(Uint8Array); } catch (e) {}
new SharedArrayBuffer();
new Int16Array(3626);
const v39 = Math.sinh(128);
v39 !== v39;
class C41 {
}
Int32Array.BYTES_PER_ELEMENT = Int32Array;
new Int32Array(1632);
let v44 = 4;
v44--;
v26.log1p(268435456);
-7 - -7;
const v52 = ("-9223372036854775807").lastIndexOf(-7);
v52 - v52;
new BigUint64Array(v44);
try {
    v28.a = 1191742690;
} catch(e57) {
}
new Float64Array(256);
Int8Array.name;
const v63 = new Int8Array(Int8Array, Int8Array);
function f64(a65, a66) {
    return a66;
}
Symbol.iterator = Symbol;
const v68 = Symbol.toPrimitive;
Symbol.for(v68.description);
Object.defineProperty(v63, v68, { configurable: true, enumerable: true, value: f64 });
const v72 = [];
class C73 {
}
C73.length = C73;
const v74 = new C73();
v74.constructor = v74;
const v75 = v74.constructor;
v75.prototype;
v75(v72, Int8Array);
