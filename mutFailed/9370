const v0 = [];
const v1 = [-7,-536870912,-15311,10776,-1972327749,-15530,1371];
const v2 = [-4,-60759,-6];
let v3 = [14568,-2,-55463,9];
const v4 = [65537,-394437415,-268435456];
v4[2] = v4;
const v5 = [-4294967296,10000,-1623322604,-1607303741,-9223372036854775807,61069,16];
const v6 = v5?.constructor;
try { new v6(v5); } catch (e) {}
const v8 = delete v0?.length;
v8 && v8;
v3 >>>= v4;
const o12 = {
    "maxByteLength": 2147483648,
};
o12.maxByteLength;
const v15 = new SharedArrayBuffer(14, o12);
new Int16Array(v15);
const v18 = [9007199254740990,256,0,-1073741824,4294967295,-6624,9];
[1e-15,-1000000000.0,-6.994063219458364,3.0];
const v20 = [1.1006679411286852e+308,17.325936255386978];
const v21 = [5.203764323549704,-1000.0,-1000.0,3.0,1.0,-1000000000000.0,-2.0,2.2250738585072014e-308];
v21.length = v21;
const v22 = [v20,v2,v21];
const v23 = [v4];
const v24 = [v22,v20,v21,v5,v23];
try { v24.toSpliced(SharedArrayBuffer, v24); } catch (e) {}
/58\118/ds;
const v27 = /a[\cZ]((((.).).).)/udmsy;
const v28 = /JnP(?<a>.)\k<a>\P{Decimal_Number}/gvmsy;
try { v28.compile(v0, v23); } catch (e) {}
const o30 = {
    "b": v28,
};
v27.exec(2147483648, v27, Math, v28);
let {"c":v35,"h":v36,"length":v37,} = v18;
v37 >>> v37;
const o39 = {
};
o39.e = o39;
try {
    o39.d = Int16Array;
} catch(e40) {
}
try {
    const o41 = {
    };
    o41.h = o41;
    o41.d = Int16Array;
    o41.h = Math;
} catch(e42) {
}
try {
    const o43 = {
    };
    o43.d = Int16Array;
    o43.h = Math;
    o43.b = Int16Array;
} catch(e44) {
}
try {
    const o45 = {
    };
    o45.d = Int16Array;
    o45.h = Math;
    o45.b = v1;
} catch(e46) {
}
const v47 = Math.max(-8);
v47 >>> v47;
~1;
const v50 = !v18;
v50 || v50;
-Math.log(v21);
const v54 = v50 >> v18;
v54 - v54;
Math.log(v18);
Math.tan(-1);
