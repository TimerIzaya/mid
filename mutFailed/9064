const v2 = new Float32Array(3821);
let v4;
try { v4 = v2.at(3821); } catch (e) {}
const o5 = {
};
new Proxy(v2, o5);
const v9 = new Uint8ClampedArray(11);
function f13(a14, a15, a16, a17) {
    for (let v18 = 0; v18 < 5; v18++) {
        break;
        try { v9.findLast(v4); } catch (e) {}
        a16 >> Float32Array;
        7800 << a16;
        Math.tanh(29227);
        0 == 5n;
    }
    const v28 = a14?.[3083];
    try { a14(Float32Array, ...15, a15, v28, 15, ...a17); } catch (e) {}
    f13 ^= a16;
    try {
        a15.__proto__ = a17;
    } catch(e30) {
    }
    return a16;
}
f13(3821, 3821, 5n, f13);
new BigInt64Array(15);
[4294967297,4096];
[-11];
[536870912,257,-2071120806,536870887,43302,1024,9007199254740990,10,-8];
const v36 = [-882453.1668433619,-2.0];
const v39 = new BigInt64Array(9);
try { v36.toLocaleString(v39); } catch (e) {}
