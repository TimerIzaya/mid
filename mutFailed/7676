function f0() {
}
const v6 = new Int8Array(1);
function f7() {
    return f0;
}
function f8(a9) {
    a9 >= a9;
}
Object.defineProperty(v6, Symbol.toPrimitive, { configurable: true, enumerable: true, get: f7, set: f8 });
new BigUint64Array(256);
const v16 = [];
function f17() {
    return f7;
}
function f18(a19) {
    new Uint8Array([2,-10]);
}
Object.defineProperty(v16, "toString", { writable: true, configurable: true, enumerable: true, get: f17, set: f18 });
"-1210238113" - v16;
const o25 = {
    [v6]: v16,
};
new Float64Array(1975);
/[vC[\cz]]/gvdims;
function f34(a35, a36, a37, a38) {
    const o43 = {
        p(a41, a42) {
        },
        10: 1073741824,
    };
    for (const v45 in "1024") {
    }
}
%OptimizeFunctionOnNextCall(f34);
function f47() {
}
function F48(a50) {
    if (!new.target) { throw 'must be called with new'; }
}
const v51 = new F48();
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    Object.defineProperty(this, "f", { writable: true, enumerable: true, value: a56 });
    this.f = a56;
    try {
        const v57 = [];
        class C58 {
            constructor(a60, a61, a62) {
                function f63(a64, a65, a66) {
                    v57.copyWithin();
                    let v69 = 0;
                    do {
                        const o70 = {
                        };
                        try {
                            o70.h = v51;
                        } catch(e71) {
                        }
                        try {
                            const o72 = {
                            };
                            o72.h = v51;
                            o72.e = 4096;
                        } catch(e73) {
                        }
                        const o74 = {
                        };
                        o74.h = v51;
                        o74.e = 4096;
                        o74.c = WeakSet;
                        v69++;
                    } while (v69 < 7)
                    f63(-268435456, 0.6683462416314783, [-268435456]);
                    const v81 = this >> -268435456;
                    v81 >> this;
                    return -v81;
                }
                f63();
            }
        }
        class C85 extends C58 {
        }
        new C85();
    } catch(e87) {
    }
}
-63367 < 10;
const v92 = new BigInt64Array();
class C93 {
    constructor(a95, a96) {
        for (let v97 = 0; v97 < 10; v97++) {
            v92[-1];
            try {
                super.o();
            } catch(e100) {
            }
        }
    }
}
const v103 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v104 = [601759695];
const v105 = [1073741824,1073741823,1376142744,1073741825];
function f107(a108, a109, a110, a111) {
    function f113() {
        const o120 = {
            "e": -4294967295,
            ...v103,
            ..."Vre",
            "c": a111,
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a118, a119) {
                return v105;
            },
            ..."Vre",
            4: "Vre",
            "c": -268435456,
            5: -4294967295,
            6: -268435456,
        };
    }
    f113();
    %OptimizeFunctionOnNextCall(arguments);
    let v123;
    try { v123 = v105["find"](..."find", a111, ...v104, ...v105, ...522675525n); } catch (e) {}
    v123 <= a110;
    return arguments;
}
f107(v103, v105, "-1073741824", 522675525n);
const v132 = new Uint8ClampedArray();
[v132,v132];
new Uint8Array(0);
const v142 = new Uint8ClampedArray(4);
new Int8Array(v142);
