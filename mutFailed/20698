class C3 {
    static #toString(a5, a6) {
        let {"d":v7,"e":v8,"h":v9,...v10} = this;
        a5[1] = v7;
        v10 = this;
        const o11 = {
        };
        try {
            o11.d = this;
        } catch(e12) {
        }
        try {
            const o13 = {
            };
            o13.d = this;
            o13.f = "h";
        } catch(e14) {
        }
        try {
            const o15 = {
            };
            o15.d = this;
            o15.f = "h";
            o15.h = a5;
        } catch(e16) {
        }
        try {
            const o17 = {
            };
            o17.d = this;
            o17.f = "h";
            o17.h = this;
        } catch(e18) {
        }
        return o11;
    }
}
try { new C3(); } catch (e) {}
function F20() {
    if (!new.target) { throw 'must be called with new'; }
}
const v24 = new Float32Array(7);
const v25 = v24.join(F20);
v25.matchAll(v25);
const v27 = new C3();
new C3();
new C3();
-15 % -15;
class C34 {
    #m(a36, a37) {
        try {
            v27.length = 1;
        } catch(e39) {
        }
        return 536870888;
    }
    m(a41, a42, a43, a44) {
        new BigUint64Array(4);
        new Float32Array(1172);
        new Int8Array(10);
        return 1850135143;
    }
}
new C34();
new C34();
const v56 = new v27();
const v57 = v56?.constructor;
try { new v57(); } catch (e) {}
function f59(a60, a61, a62, a63) {
    ("HEkWL").localeCompare("isArray", "isArray");
    for (let v67 = 0; v67 < 5; v67++) {
        v67 * v67;
    }
    return a63;
}
for (let v69 = 0; v69 < 5; v69++) {
    v69 >>> v69;
    f59();
}
%OptimizeFunctionOnNextCall(f59);
f59();
