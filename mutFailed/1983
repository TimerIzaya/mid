function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -1073741824;
    } catch(e3) {
    }
    try {
        this.h = -1073741824;
    } catch(e4) {
    }
    try {
        this.g = -1073741824;
    } catch(e5) {
    }
}
const v6 = new F0();
const v7 = new F0();
const v8 = new F0();
const v11 = new Array(4);
class C12 {
    constructor(a14, a15) {
        const v16 = this.b;
        try {
            a14.__proto__ = v16;
        } catch(e17) {
        }
        try { v8.slice(v16, 4, v11); } catch (e) {}
    }
    get h() {
        this.a >>>= C12;
        try { new C12(...v11, this, 4, ...this, this, ...this); } catch (e) {}
        const v24 = /8?/gvisy;
        /a+[^123](?:ab)+(ab)\1a(?=bbb|bb)c(?: foo )sR*/gvdim;
        /(?:foo)(\x01)/gvdim;
        return v24;
    }
    h;
    static d;
    [4];
    static #h = v6;
}
new C12(v6, v8);
new C12(v7, v8);
new C12(v7, v6);
new Uint32Array(2);
new Uint8ClampedArray(10);
v7[3438302599] = F0;
try {
    v7.valueOf = Array;
} catch(e41) {
}
new Uint32Array(248);
function F46(a48) {
    if (!new.target) { throw 'must be called with new'; }
    a48 ^ a48;
    const v50 = this?.constructor;
    try { new v50(3n); } catch (e) {}
    const o54 = {
        "maxByteLength": 4037,
    };
    const v56 = new ArrayBuffer(4037, o54);
    new BigInt64Array(v56);
}
new F46(349865170n);
