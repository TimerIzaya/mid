const v0 = [10,127,-2147483648,-7,-9223372036854775807,4096,2147483649,-474988389,-65535,-4294967297];
const v1 = [4294967297,23449,40473,-9007199254740991,-990223175,268435440,7];
[4294967296,-2147483649,268435441,9007199254740992,268435456,6,-985503532];
function f3() {
    return v1;
}
class C7 extends f3 {
    constructor(a9, a10) {
        super();
        this <= "boolean";
        for (let v15 = 0; v15 < 5; v15++) {
            f3();
            %OptimizeFunctionOnNextCall(f3);
        }
        const v18 = new BigUint64Array();
        v18[3408] = v0;
    }
    static get h() {
    }
    /*
    constructor(a21, a22) {
        super(v1);
    }
    */
    static #d = "shift";
    static [f3] = v0;
    7 = "boolean";
    static b;
}
const v25 = new Map();
function f26(a27) {
    const v28 = a27.toString(v25);
    class C29 extends Map {
        [v28] = f26;
    }
    const v30 = new C29();
    const o31 = {
        ...v25,
        "f": Map,
        "h": a27,
        [-2]: v25,
        ...v30,
    };
    return o31;
}
Uint8ClampedArray[1] = 14;
new Float32Array(Uint8ClampedArray);
const v38 = new Int8Array(3663);
v38[14n];
new C7("shift", "shift");
new C7("boolean", "boolean");
new C7("shift", v0);
const v45 = new Int8Array(7);
v45.fill();
const v48 = new Float64Array(Float64Array);
v48.indexOf(Int8Array, 7);
