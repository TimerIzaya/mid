const v1 = -Infinity;
class C3 {
    constructor(a5) {
        %VerifyType(C3);
    }
    65535 = C3;
    4;
    get f() {
        let v8;
        try { v8 = this["getUTCMonth"](this, 19201, -4.0); } catch (e) {}
        const o9 = {
        };
        try {
            o9.h = v1;
        } catch(e10) {
        }
        try {
            const o11 = {
            };
            o11.h = v1;
            o11.c = v8;
        } catch(e12) {
        }
        try {
            const o13 = {
            };
            o13.h = v1;
            o13.c = v8;
            o13.f = -4.0;
        } catch(e14) {
        }
        try {
            const o15 = {
            };
            o15.h = v1;
            o15.c = v8;
            o15.f = this;
        } catch(e16) {
        }
        return 19201;
    }
}
C3.b = C3;
const v17 = new C3();
const v18 = v17?.constructor;
try { new v18(); } catch (e) {}
const v20 = new C3();
const v21 = new C3();
const v23 = Date?.UTC;
try { new v23(v21, v21, v17, v17, v21, -4.0, Date); } catch (e) {}
const v25 = new Date();
const v26 = v25?.setFullYear;
try { new v26(Date, -4.0, v25); } catch (e) {}
new Uint8Array(3153);
try { new Float32Array(Uint8Array, Uint8Array, v1); } catch (e) {}
new Float32Array(1);
const v37 = new BigUint64Array(2865);
BigUint64Array.length;
const v40 = new BigUint64Array();
function F41(a43, a44) {
    if (!new.target) { throw 'must be called with new'; }
    function f45() {
        try { v40.toLocaleLowerCase(this, "NFKD", BigUint64Array, BigUint64Array); } catch (e) {}
        try { ("NFKD").localeCompare(this); } catch (e) {}
        return a43;
    }
    const v50 = Symbol.toPrimitive;
    Object.defineProperty(this, v50, { writable: true, value: f45 });
    +(v20[1073741824] / f45);
    v37[7] = Symbol;
    try { this.p(v17, 2865, v21, v50); } catch (e) {}
}
const v55 = F41?.__lookupSetter__;
try { new v55(19201); } catch (e) {}
const v57 = new F41();
const v58 = v57?.constructor;
try { new v58(3153, v37); } catch (e) {}
class C60 {
    static [v57];
}
