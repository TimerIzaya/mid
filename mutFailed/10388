function f0() {
    const o12 = {
        __proto__: f0,
        "b": Infinity,
        2: 16,
        [16](a5) {
            try {
                this.fuck(16, Infinity, a5);
            } catch(e7) {
            }
            let v8;
            try { v8 = new a5(this, 16, a5, this); } catch (e) {}
            let v9;
            try { v9 = new v8(v8, a5); } catch (e) {}
            try {
                super.valueOf(v9, 16);
            } catch(e11) {
            }
            return -9.403183864384134e+307;
        },
    };
    o12[16];
    return o12;
}
f0();
const v15 = f0();
f0();
/xyz{1,}?/gvdis;
/(g?)/um;
/T[-\xf0\x9f\x92\xa9]+/gy;
let v24 = -1024n;
v24--;
const v27 = [-824583385,1073741825,-1612262553,15,-2147483649,-65537];
try { v27.group(v15); } catch (e) {}
[42802,-9223372036854775807,420837246,4,-57970,1331729271,7,1];
([136767814,-1127179860])[1];
function f32() {
    const o41 = {
        toString(a37, a38) {
            try {
                super.getMinutes();
            } catch(e40) {
            }
            return "object";
        },
        "b": "boolean",
        "g": "object",
        128: "boolean",
        "a": 1000000000000.0,
        "c": "boolean",
        __proto__: "boolean",
        "h": 1000000000000.0,
    };
    return o41;
}
const v42 = f32();
const v43 = v42();
const v44 = f32();
v44[128];
const v46 = v44[128];
try { v46.fontsize(v24); } catch (e) {}
function F49(a51) {
    if (!new.target) { throw 'must be called with new'; }
    a51[128] = a51;
    try {
        this.f = a51;
    } catch(e52) {
    }
    try {
    } catch(e53) {
    }
    try {
    } catch(e54) {
    }
}
F49.e = F49;
new F49(v43);
new F49(v44);
const v57 = new F49(v43);
function f58(a59, a60, a61) {
    a60.d = a60;
    const o68 = {
        get a() {
            const o66 = {
                "execution": "async",
                "type": "major",
            };
            gc(v44);
        },
    };
    o68[2074850330] = o68;
    return o68;
}
const v69 = f58(v44, v44, v42);
f58(v69, f58(v43, v43, v69), v43)[2074850330];
function F73(a75, a76, a77) {
    if (!new.target) { throw 'must be called with new'; }
    a77.f = a77;
    const v78 = this?.constructor;
    try { new v78(F73, F73, f32); } catch (e) {}
    a76.g = a76;
    try {
        this.d = a77;
    } catch(e80) {
    }
    try {
    } catch(e81) {
    }
}
const v82 = new F73(v44, v42, v57);
new F73(v44, v69, v82);
try { Uint32Array.bind(F49); } catch (e) {}
