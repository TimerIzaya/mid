[-1,4,-65536,6,1321431045,51479,1073741824];
[536870912,-9,-303039580,1073741823,28965,-4096];
const v2 = [1000,-1832574041];
13 / 13;
try { Array(v2); } catch (e) {}
127 | 127;
new Array(127);
const v12 = [-2.0,-1000000.0,0.8913444454077428,2.220446049250313e-16,305471.6846288657,1000.0];
try { v12.entries(); } catch (e) {}
[-5.277802853980008e+307,-6.630538641687236,-8.593610138381385,-1000.0];
const v15 = [-1000000000000.0,3.0,-2.2250738585072014e-308,1.0,-1.3235270613420255e+308,5.0,-3.0];
let v16;
try { v16 = v15.find(Array); } catch (e) {}
v16 / v16;
const t13 = "a";
t13[0] = "a";
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    a24[6];
    let v26;
    try { v26 = a23.trimLeft(); } catch (e) {}
    try { v26.strike(); } catch (e) {}
    try { a24.italics(); } catch (e) {}
    const v29 = this?.name;
    v29.MAX_VALUE = v29;
    try { new v29("a", "a"); } catch (e) {}
    try {
    } catch(e31) {
    }
    try {
    } catch(e32) {
    }
    try {
    } catch(e33) {
    }
}
F21.byteOffset = F21;
const v34 = new F21("a", "-2147483648");
const v35 = v34?.__lookupSetter__;
try { new v35(v12); } catch (e) {}
new F21("-2147483648", "yRMy");
function F38(a40, a41, a42) {
    if (!new.target) { throw 'must be called with new'; }
    try {
    } catch(e43) {
    }
}
function F44(a46, a47) {
    if (!new.target) { throw 'must be called with new'; }
}
