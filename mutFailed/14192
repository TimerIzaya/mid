const v0 = [];
function f4(a5) {
    const o12 = {
        "a": a5,
        ...v0,
        toString(a7) {
            const v8 = a7 instanceof this;
            let v10;
            try { v10 = this["Zu"](v8); } catch (e) {}
            try { ("3").replace(a7, v10); } catch (e) {}
            return a5;
        },
        "b": v0,
        ...a5,
        "e": a5,
    };
    return o12;
}
f4("3");
f4("3");
f4("ceil");
for (let v18 = 0; v18 < 5; v18++) {
    function f19() {
        for (let i21 = 0, i22 = 3;
            (() => {
                class C23 extends f19 {
                }
                return i21 < 3;
            })();
            i21 % i21, i21++) {
        }
        return f19;
    }
    f19();
    %OptimizeFunctionOnNextCall(f19);
}
class C33 {
}
class C34 {
}
new C34();
new BigUint64Array(8);
const v39 = [-207.12380510118123,-982114.0356244294,0.9612192807513333,-3.0,-1000.0,1.0];
const v41 = new Uint32Array();
let v42 = -4294967297n;
v42--;
const v44 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v45 = [601759695];
const v46 = [1073741824,1073741823,1376142744,1073741825];
function f48(a49, a50, a51, a52) {
    arguments.length;
    function f55() {
        try { ("Vre").codePointAt("Vre"); } catch (e) {}
        let v58 = Float64Array;
        v58 = a50;
        b = v45;
        v39.length;
        try {
            v46.forEach(a50);
        } catch(e61) {
        }
        const o75 = {
            "c": v42,
            "c": v45,
            valueOf(a63, a64) {
            },
            1073741824: v41,
            [v42](a66, a67, a68, a69) {
                class C71 extends Date {
                    static get c() {
                    }
                }
                eval();
            },
            "arguments": v44,
            256: a52,
        };
    }
    f55();
    try { Int8Array.of(); } catch (e) {}
    const v79 = new Int8Array();
    v79.buffer.slice(2147483648);
    const v85 = new Int32Array(1024);
    const v86 = v85[3];
    v86 * v86;
    for (let v88 = 0; v88 < 5; v88++) {
    }
    %OptimizeFunctionOnNextCall(f55);
    try { v46["find"](..."find", a52, ...v45, ...v46, ...522675525n); } catch (e) {}
    return arguments;
}
for (let v91 = 0; v91 < 10; v91++) {
    f48(v41, v91, v91, v91);
}
f48(Uint32Array, v41, Uint32Array, v41);
new Uint32Array(2);
let v96 = Uint16Array;
new v96(8);
for (let v98 = 0; v98 < 50; v98++) {
}
function F99() {
    if (!new.target) { throw 'must be called with new'; }
}
function f101() {
    v96 = C34;
    const o103 = {
        "b": 256,
    };
    return o103;
}
F99[Symbol.toPrimitive] = f101;
function f106(a107, a108) {
    return 3521;
}
F99.toString = f106;
const v111 = new Date();
v111.setDate(F99);
class C113 {
}
const v114 = new C113();
const v116 = delete v114.g;
let v117;
try { v117 = v116(); } catch (e) {}
const t123 = "o";
t123.length = v117;
