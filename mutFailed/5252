class C3 {
    static #f;
    #a = 583856.6950860023;
    constructor(a5) {
        let v7 = -128n;
        v7--;
        for (let v10 = 0; v10 < 10; v10++) {
            class C12 {
                4294967296 = 996195971n;
            }
            C12.length;
            const v14 = new C12();
            v14[4294967296] = v14;
        }
    }
    #c;
    static #h;
    static 2324201619;
}
const v15 = new C3(C3);
const v16 = v15?.constructor;
try { new v16(583856.6950860023); } catch (e) {}
const v18 = new C3(583856.6950860023);
try { v18.constructor(v15); } catch (e) {}
const v20 = new C3(-1956778660);
class C21 extends C3 {
    [-1956778660];
    static d;
    static m(a23, a24, a25, a26) {
        this[1882180277] = v20;
        new Map();
        return a24;
    }
    static e;
    [v20];
}
C21[2324201619];
new C21();
new C21();
const v32 = new C21();
try { v32.propertyIsEnumerable(v32); } catch (e) {}
const v34 = [536870887,-42204,-17288903,-3,9007199254740991,7];
try { v34.toString(); } catch (e) {}
const v36 = [6,268435440,13,1073741825];
try { v36.copyWithin(-1956778660, -1956778660); } catch (e) {}
const v38 = [-15,-2147483649,-899333997,3,1455560807,-1024,-4294967297,2098301778];
v38.reverse();
class C40 {
    constructor(a42) {
        const v43 = this?.constructor;
        try { new v43(this); } catch (e) {}
        a42[3];
        function f46(a47, a48) {
            let v49 = a47[5];
            v49++;
        }
        f46(v38);
        f46(v34);
        f46(a42);
    }
}
C40.prototype = C40;
const v54 = C40.constructor;
const v55 = new C40(v36);
const v56 = new C40(v34);
const v57 = v56.constructor;
const v58 = v57?.bind;
try { new v58(v36); } catch (e) {}
new v57(v55);
const v61 = new C40(C40);
v61.length;
try { v61.__defineGetter__(); } catch (e) {}
function f64(a65, a66, a67, a68) {
    try { a66.some(v54); } catch (e) {}
    const o70 = {
        __proto__: a65,
    };
    try { o70.groupToMap(); } catch (e) {}
    new Uint32Array([1524942359,268435439,8,1,256,-11]);
    class C75 {
    }
    for (let i78 = 0, i79 = 10;
        i78++, i78 < i79;
        (() => {
            const v84 = [601759695];
            const v85 = [1073741824,1073741823,1376142744,1073741825];
            function f86(a87, a88, a89, a90) {
                a90 - a90;
                function f92() {
                    return a87;
                }
                function f93(a94, a95) {
                    return a94;
                }
                try { f93(); } catch (e) {}
                f93(v85, C75);
                try { v85["find"](..."find", a90, ...v84, ...v85); } catch (e) {}
                return C75;
            }
            for (let v100 = 0; v100 < 10; v100++) {
                f86(v100, f86, i78, v100);
            }
        })()) {
    }
    return o70;
}
const v104 = f64(v36);
v104[3] = v104;
const v105 = v104.indexOf();
const v106 = new v32();
function f108(a109, a110, a111, a112) {
    const o113 = {
        [a110]: a112,
        ...a112,
    };
    return a111;
}
f108(3706, 3706, v32, v106);
const v115 = f64(v38, v34);
const v116 = v115?.filter;
try { new v116(v32); } catch (e) {}
try { v115.groupToMap(v105); } catch (e) {}
const v120 = f64(v38, v38)?.find;
try { new v120(v104); } catch (e) {}
const o123 = {
};
o123.c = o123;
gc(o123);
