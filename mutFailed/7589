const v2 = new Array(256);
class C3 extends Array {
    static 4096;
    static #c;
    constructor(a5) {
        super(256);
        const v6 = this instanceof a5;
        super[256] = v6;
        new Uint8Array(9);
        const v12 = new Uint16Array();
        v12.length <<= 1439;
        const v13 = new Array(256);
        [v6,256];
        [[v13,Array,v13,v2],a5];
    }
    #d = Array;
    [256] = Array;
}
Math.exp(-359.60295377780096);
const v22 = new String();
Object.defineProperty(v22, 7, { writable: true, configurable: true, enumerable: true, value: Int8Array });
const v23 = new C3(v2);
const v24 = new C3(Array);
let v25 = new C3(C3);
function f26(a27, a28) {
    const o51 = {
        "c": C3,
        [-359.60295377780096](a30) {
            0 < 10;
        },
        "d": a27,
        [a27](a35, a36, a37) {
            v25 = v24;
            for (let v38 = 0; v38 < 100; v38++) {
                class C41 {
                    #c = "toUpperCase";
                    get a() {
                        const v43 = this << "toUpperCase";
                        const v44 = v43 ^ v43;
                        let v45;
                        try { v45 = v44(v44, this, v44, v44, v43, this); } catch (e) {}
                        v45[v44] <<= 1.1922093890401552e+308;
                        return "Tx";
                    }
                    static b;
                }
                new C41();
                Array(256);
            }
            try {
                super.catch(a36, a28);
            } catch(e50) {
            }
            return a28;
        },
    };
    return o51;
}
f26(v23, C3);
f26(v24, 256);
f26(v25, v23);
const v57 = [];
class C58 {
}
const v59 = new C58();
const v60 = /\xf0\x9f\x92\xa9a*/us;
function F63(a65, a66, a67, a68) {
    if (!new.target) { throw 'must be called with new'; }
    const v69 = this?.constructor;
    try { new v69(a66, v57, -1263139894, a66); } catch (e) {}
    const v71 = a68?.constructor;
    try { new v71(v59); } catch (e) {}
}
new F63(v60, 1, -1263139894, F63);
function f75() {
    ("D")[0];
    for (const v81 of Array(4087)) {
    }
}
function f82() {
    for (const v86 of Array(4087, Array, Array)) {
    }
    return f82;
}
%PrepareFunctionForOptimization(f82);
f82();
%OptimizeFunctionOnNextCall(f82);
f82();
