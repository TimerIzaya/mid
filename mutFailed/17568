function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a5;
    } catch(e7) {
    }
}
new F3(536870912, -51296);
const v9 = new F3(-51296, -51296);
new F3(536870912, 536870912);
const v13 = new Set();
class C14 {
    e;
    constructor(a16, a17, a18) {
        for (const v19 in this) {
            let v20;
            try { v20 = this.valueOf(a16, Set, -24966, v19, this); } catch (e) {}
            this & v20;
        }
    }
    [v9] = v13;
    static [-24966] = Set;
    static 14 = v9;
}
const v25 = new C14(-24966, 536870912, 536870912);
const v26 = new C14(-24966, -24966, v13);
new C14(536870912, -24966, null);
F3 instanceof C14;
v25[2712034435];
Math.hypot(2);
const v37 = v26 / C14;
const v38 = Math.ceil(v37);
const v39 = -(-1.0);
~v26;
const v42 = v37 ^ -v39;
const v43 = new Uint8Array(891);
function F44() {
    if (!new.target) { throw 'must be called with new'; }
    for (let v46 = 0; v46 < 50; v46++) {
        v46 << v46;
        for (let v48 = 0; v48 < 25; v48++) {
            this["p" + v48] = v48;
        }
    }
}
new F44();
new F44();
let v53 = 3;
new v42(v53);
let v57 = Float32Array;
const v58 = new v57(129);
class C59 extends v57 {
    [v43];
    n(a61, a62, a63) {
        function F64(a66, a67, a68, a69) {
            if (!new.target) { throw 'must be called with new'; }
            try {
                this.h = a69;
            } catch(e70) {
            }
            try {
                const v71 = v58[v38];
                v57 = a67;
                v53 = a67;
                Math.sign(-65535);
                let v76 = Math.cosh(v71);
                +v71;
                ++v76;
                this.e = a67;
            } catch(e79) {
            }
            try {
                this.g = v13;
            } catch(e80) {
            }
        }
        new F64(a63, a63, v53, 129);
        new F64(129, a62, a62, v53);
        new F64(v53, a62, v53, 891);
        return a63;
    }
}
new C59();
new C59();
new C59();
const v88 = new Float32Array(Float32Array);
for (let v89 = 0; v89 < 25; v89++) {
    function f90(a91, a92, a93, a94) {
        a91[1];
        for (let v97 = 0; v97 < 5; v97++) {
        }
        const v99 = arguments.__lookupGetter__;
        try { v99.constructor(); } catch (e) {}
    }
    for (let v101 = 0; v101 < 10; v101++) {
        f90(v88);
    }
}
