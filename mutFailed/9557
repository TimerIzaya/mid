new Date();
new Uint8Array(2717);
new Float64Array(3);
const v16 = new Float64Array(86);
const v18 = [155533.8602852358,2.0];
function F20() {
    if (!new.target) { throw 'must be called with new'; }
    function f22() {
        const v25 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
        const v26 = [601759695];
        try { v26.sort(v26); } catch (e) {}
        function f29() {
            const v31 = ("Vre")?.toLocaleUpperCase;
            try { new v31(); } catch (e) {}
            try { ("Vre").fixed(); } catch (e) {}
            let v35 = -268435456;
            v35--;
            -(v35 + v35);
            const o52 = {
                "c": -4294967297n,
                [522675525n](a40, a41) {
                },
                ..."Vre",
                "maxByteLength": -128,
                "c": v26,
                valueOf(a43, a44) {
                },
                "e": -4294967295,
                "e": v35,
                "maxByteLength": -4294967295,
                "arguments": v25,
                ...v26,
                "type": "Vre",
                ..."Vre",
                valueOf(a46, a47) {
                },
                ..."Vre",
                4: "Vre",
                "c": v35,
                "type": "Vre",
                toString(a49, a50, a51) {
                },
                6: v35,
            };
            try { o52.valueOf(o52, -128); } catch (e) {}
            return "Vre";
        }
        return v26;
    }
    this.constructor = f22;
    this.__lookupGetter__.bind();
    const v58 = Array(19793);
    function f59() {
        return Uint8Array;
    }
    function f60(a61) {
        v16[0.30198955894807233];
    }
    Object.defineProperty(v58, 16186, { writable: true, configurable: true, get: f59, set: f60 });
    for (const v63 of v58) {
        v18[658291203] = null;
    }
}
const v64 = new F20();
v64.constructor = Date;
const t65 = v64.constructor;
new t65();
