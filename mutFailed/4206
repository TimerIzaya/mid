const v9 = new Uint8Array(1000);
Object.defineProperty([], "h", { configurable: true, enumerable: true, set: Date });
const v13 = [];
/9f8\xf0\x9f\x92\xa9/diy["compile"]();
class C19 extends Set {
    #m(a21, a22) {
        let [v24,v25,,v26] = this;
    }
}
("minor").fontcolor(v13);
new Int8Array(233);
new Float64Array(2159);
const v36 = new Date();
v36.toJSON();
const o38 = {
};
const v39 = new BigUint64Array(4);
[-34,536870887,268435440,14525];
const v42 = [6,127,-128,13,65537,-13];
const v43 = [-536870912,-4608,-9223372036854775808,15];
try { ("object").substring(v42, v43); } catch (e) {}
try { ("has").matchAll("object"); } catch (e) {}
const v51 = new Int8Array(2);
const o52 = {
};
function f53() {
}
const v55 = new Uint32Array(Uint32Array);
new Int16Array(v55);
8 & 8;
const v61 = new Int16Array(8);
const v65 = new Uint16Array(3225);
v65[877];
for (const v67 of v65) {
    v67 ^ v67;
    v67[3] = 5n;
    const v70 = 9007199254740991 * v67;
    v70 | v70;
}
const v74 = new Int32Array(23);
v74[1];
const v79 = 1000000.0 >>> 1000000.0;
const v80 = [7,128];
const v81 = [13,-2103725161,15240,-9223372036854775807,1077763702,256,-1024,9,1073741823,-2];
v81[4];
class C83 {
    static a;
    static {
        this >> this;
        this[6];
    }
    static m(a88) {
        gc();
    }
}
try {
    C83();
} catch(e92) {
}
const v93 = v81[4];
const v94 = v93 | v93;
function f95() {
    return f95;
}
class C96 {
    constructor(a98, a99) {
        const v100 = this.constructor;
        try { new v100(this, v100, a98, a98); } catch (e) {}
        (f95 >= a98) instanceof f95;
    }
}
new C96(f95, f95);
v94 / v94;
const v106 = [40213,422333454,47387,65536,-51830];
const v108 = new Date();
v108["getUTCMilliseconds"]();
new v9([-1235077344,-4096,50383815,-8476,-9007199254740991]);
v106[2] = v106;
0 - 0;
0 - 0;
let v116 = 15135;
v116--;
new BigUint64Array(255);
Symbol.for(Symbol);
try { gc(); } catch (e) {}
gc();
const v130 = new BigInt64Array();
try { v130.entries(); } catch (e) {}
class C133 {
}
const v135 = new BigInt64Array();
for (const v136 in v135) {
}
function f137() {
    const v138 = [];
    v138[6] = v138;
    const o141 = {
        set b(a140) {
        },
    };
    return v39;
}
for (let v142 = 0; v142 < 5; v142++) {
    f137();
    %OptimizeFunctionOnNextCall(f137);
}
new Uint32Array(Uint32Array, Uint32Array, Uint32Array);
new Int8Array(4);
try { ("boolean").slice(v65, v51); } catch (e) {}
new BigInt64Array();
for (let v152 = 0; v152 < 5; v152++) {
    v79.f = -4n;
}
let v153;
try { v153 = ("boolean").repeat(1000000.0); } catch (e) {}
v153[1322328];
const t115 = "toString";
t115[6] = "toString";
"toString" == "toString";
("boolean").split("toString");
const v159 = -256 >> -256;
v159 ^ v159;
function f161(a162, a163) {
    a163++;
    const v165 = a163--;
    v165 | v165;
    a162 | a162;
    const o185 = {
        "c": v116,
        "a": v116,
        "maxByteLength": 233,
        p(a169, a170) {
            return this;
        },
        get d() {
            return v61;
        },
        "d": a162,
        __proto__: a163,
        "g": -1628878962,
        "type": "boolean",
        "a": a162,
        set b(a173) {
        },
        "g": v116,
        "b": a163,
        get f() {
            super[1000000.0] = this;
            try {
                new Int8Array(9);
                function f178() {
                    return f178;
                }
                const o180 = {
                    [f178]() {
                    },
                };
                [o180];
                v81.copyWithin(8, -268435456, -256);
            } catch(e184) {
            }
            return this;
        },
    };
    o185.g = o185;
    return o185;
}
let v186;
try { v186 = f161(v116, v116); } catch (e) {}
v186[1000000];
f161(925.1427495594241, v80);
f161(317008.8127941969, -4);
f161(1000000.0, v81);
268435441n ^ 268435441n;
268435441n - 268435441n;
const v195 = new BigUint64Array();
v195[2445191368] = 268435441n;
Reflect.construct(BigInt64Array, [v39]);
