const v3 = [-1.7976931348623157e+308,1.567547754457685];
const v5 = new Uint32Array(v3, v3, Uint32Array);
const v6 = v5.constructor;
let v8 = 1829;
v8 = 209;
const v10 = [-321.520875904318,[68.93909967167178],-321.520875904318,0.25259899026787624];
const v11 = [68.93909967167178,v10,68.93909967167178,0.25259899026787624,v10];
const v14 = new Uint8ClampedArray(8);
let v15 = 0;
do {
    v15++;
} while (v15 < 2)
const v22 = v14.length;
v22.length ||= v22;
v14.byteLength >>>= 68.93909967167178;
const v23 = [8];
[v23,8,v23,v14,v23];
[v14,v10,0.25259899026787624,v14];
let v28 = new Int32Array(2);
function F30() {
    if (!new.target) { throw 'must be called with new'; }
    for (let i33 = 0; i33 < 3; v28++) {
        break;
        try {
            v11.b = i33;
        } catch(e39) {
        }
    }
    try {
        const v42 = Array(19793);
        for (const v43 of v42) {
        }
        const v44 = [v42,v42,v42,v42,v42];
        [[v44,v44,v44]];
        209 >= Uint16Array;
    } catch(e49) {
    }
}
const t38 = 0.25259899026787624;
new t38();
v28[1];
const v53 = v6[0];
try { v23.map(v53, v28); } catch (e) {}
[-4.0];
[-1.4473047651759704e+307,-2.0,-1000000000000.0,-1.7976931348623157e+308];
[3.0,-1000000.0,-2.0,-1.0];
new Float32Array(1070);
[-2.2250738585072014e-308,1.495488589540535e+308,-2.220446049250313e-16,-380589.47975724796,-1000000000000.0,0.17439972014232763,-1e-15,-1.1453575706813871e+308,1.1329654920184495];
const v60 = [0.5690334337241484,-1.0,-Infinity,-6.831251836501173,-5.039519767346096,-2.0,0.6826335106801482,1000000000000.0];
try { v60(); } catch (e) {}
