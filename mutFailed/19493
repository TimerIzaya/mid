class C3 {
    c;
    constructor(a5, a6) {
        a5 >>> a5;
        a6 - a6;
        Uint32Array.length = Uint32Array;
        new Uint32Array(2);
        BigUint64Array.BYTES_PER_ELEMENT = BigUint64Array;
        new BigUint64Array(512);
        37 | 37;
        new Int32Array(37);
    }
    h;
}
new C3(483.08803065022107, 483.08803065022107);
const v20 = new C3(571.0638518936341, C3);
const v21 = v20?.constructor;
try { new v21(C3, 571.0638518936341); } catch (e) {}
const v23 = new C3(v20, C3);
v23.c = v23;
512 << 512;
function f28() {
    return 571.0638518936341;
}
[-1000000000.0,v23,571.0638518936341,-1000000000.0,483.08803065022107];
const v31 = [[483.08803065022107,-1000000000.0]];
try { v31.with(2147483648, 2147483648); } catch (e) {}
const v34 = [-8,-9007199254740991,-2,5,-710979536,-16743,-722516666,-14817,1352913669,1];
const v35 = [601759695];
const v36 = [1073741824,1073741823,1376142744,1073741825];
function f38(a39, a40, a41, a42) {
    const v44 = new Map();
    const v45 = v44.values();
    try { v45.next(); } catch (e) {}
    try { v45.next(); } catch (e) {}
    new Uint8Array(268435440);
    function f52() {
        let v54 = -4294967295;
        v54--;
        const o60 = {
            "e": v54,
            ...v34,
            ..."Vre",
            "c": a42,
            "f": "-1073741824",
            84: arguments,
            ..."Vre",
            valueOf(a58, a59) {
                return a59;
            },
            ..."Vre",
            4: "Vre",
            5: v54,
            6: -268435456,
        };
        const v61 = o60?.__lookupSetter__;
        try { new v61(f52); } catch (e) {}
        return v35;
    }
    f52();
    %OptimizeFunctionOnNextCall(f52);
    let v65;
    try { v65 = v36[a41](..."find", a42, ...v35, ...v36, ...522675525n); } catch (e) {}
    const v66 = v65 <= a41;
    v66 || v66;
    return arguments;
}
for (let v68 = 0; v68 < 10; v68++) {
    const v69 = f38();
    v69.length = v69;
}
%OptimizeFunctionOnNextCall(f38);
f38(v36, f38, 522675525n);
