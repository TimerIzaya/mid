const v0 = [1073741825,-1073741824,-2,-15,857901258,39004,1073741825];
[-4294967296,6];
const v2 = [-16284,-14];
class C3 {
    get f() {
        try { this.o(v2, this, this, this); } catch (e) {}
        this[this];
        return v0;
    }
    5 = v2;
    c;
    static m(a8, a9) {
        const v10 = a9 & v2;
        const o13 = {
            "maxByteLength": 141,
        };
        const v15 = new SharedArrayBuffer(10000, o13);
        new Int16Array(v15);
        return v10;
    }
}
try { new C3(v0); } catch (e) {}
const v19 = new C3();
const v20 = new C3();
v20[5] = v20;
new C3();
class C22 extends C3 {
    toString(a24, a25) {
        delete a24[v19];
        const v27 = v2 >> a25;
        try {
            v0.valueOf = v20;
        } catch(e28) {
        }
        return v27;
    }
    h;
}
new C22();
new C22();
new C22();
new Map(Map);
const v40 = new Float32Array(6);
try { v40.sort(Map); } catch (e) {}
v40.fill();
