const v3 = [-60683n,-604894476n];
const v4 = [-60683n,v3,v3,-604894476n,v3];
function f5(a6, a7) {
    try { a6(v4, -604894476n, a7); } catch (e) {}
    const v9 = /(?<a>.)\k<a>?/vdimsy;
    let v10;
    try { v10 = v9(v9); } catch (e) {}
    const v11 = [v10,v10,v10,v10,v10];
    function f12() {
        const v13 = -v11;
        const t10 = v13 && v11;
        t10[v13] &= v10;
        return v13;
    }
    return v9;
}
v4.toString = f5;
const v15 = [v4,v3];
try { v15.map(-60683n); } catch (e) {}
class C17 {
    3 = v4;
    f;
    static #e = -1820128352n;
    constructor(a19, a20, a21) {
        function f22(a23) {
            try { new a23(a23, this, -1820128352n, a23); } catch (e) {}
            const v26 = Symbol.iterator;
            const o35 = {
                [v26]() {
                    let v28 = 10;
                    const o34 = {
                        next() {
                            v28--;
                            const v32 = v28 == 0;
                            const o33 = {
                                "done": v32,
                                "value": v28,
                            };
                            return o33;
                        },
                    };
                    return o34;
                },
            };
            return o35;
        }
        Object.defineProperty(a20, "toString", { writable: true, configurable: true, value: f22 });
        this[3] = this;
        a19[1] = a19;
        let v36;
        try { v36 = a20.findLastIndex(a20); } catch (e) {}
        a21[4] = a21;
        -60683n == a19;
        try { a21(v36, v3); } catch (e) {}
        try {
            super.m();
        } catch(e40) {
        }
    }
    [v3] = v4;
    static #g = v4;
    [-60683n] = -60683n;
}
const v41 = new C17(v3, v3, v4);
function f42(a43) {
    const o45 = {
    };
    const t67 = o45.constructor;
    t67(128);
    return -1820128352n;
}
v41.constructor = f42;
v41[3] = v41;
const v48 = new C17(v4, v41, v3);
v48.constructor = f42;
const v49 = new C17(v3, v15, v41);
Array[1] = v3;
new Array(6);
function F53(a55, a56) {
    if (!new.target) { throw 'must be called with new'; }
    const v57 = a56?.constructor;
    try { new v57(Array, -604894476n, Array); } catch (e) {}
    try {
        this.b = C17;
    } catch(e59) {
    }
    try {
        this.f = a55;
    } catch(e60) {
    }
}
F53.arguments = F53;
new F53(-60683n, v49);
new F53(-1820128352n, v41);
new F53(-604894476n, v48);
const v65 = ("entries")?.trimRight;
try { new v65(); } catch (e) {}
("entries").toUpperCase();
