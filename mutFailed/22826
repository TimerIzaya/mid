let v2 = -61082n;
class C3 {
    c;
    static #n(a5) {
        v2 = a5;
        return 58084n;
    }
    static #o(a7) {
        new BigInt64Array();
        const v12 = new BigInt64Array(4046);
        function f13(a14, a15) {
            a14++;
            const v17 = a14++;
            v17 >> v17;
            let o19 = {
                "d": a14,
                ...a14,
            };
            [,...o19] = v12;
        }
        typeof 10n === "bigint";
        return 58084n;
    }
    static #e = v2;
    static #c;
}
new C3();
const v24 = new C3();
const v25 = new C3();
class C26 {
    constructor(a28, a29) {
        try {
            a28.fuck(10n, v25, a28);
        } catch(e31) {
        }
    }
    n(a33, a34, a35) {
        [-65537,6,-38153,127,-791047225,64,-2147483648,65537,-4];
        const v37 = [7,536870889,-1228800434,10938,512,1,-1,1073741824,-1553040654];
        [9,2077,9007199254740992,-10,-8,9,32266,9007199254740991,-997065452,7];
        try {
            super.seal();
        } catch(e40) {
        }
        return v37;
    }
}
const v41 = new C26(v25, v2);
v41.fuck = v41;
new C26(v24, v2);
new C26(v41, 10n);
function F48() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = -65535;
    } catch(e51) {
        30895 ** -7;
        function F55(a57, a58, a59, a60) {
            if (!new.target) { throw 'must be called with new'; }
            ~a58;
            a60 | a60;
            const v63 = this.constructor;
            try { new v63(); } catch (e) {}
            const v68 = new BigInt64Array(4046);
            let o69 = {
            };
            [,...o69] = v68;
            typeof Float32Array;
        }
    }
    try {
        this.a = -65535;
    } catch(e71) {
    }
}
function f72() {
    let v73 = -9223372036854775808n;
    v73 %= 45725n;
    return 45725n;
}
for (let v75 = 0; v75 < 5; v75++) {
    f72();
    %OptimizeFunctionOnNextCall(f72);
}
const v77 = new F48();
v77.p14 = f72;
const v78 = new F48();
const v79 = new F48();
v79.length = -776.5490879399802;
try {
    Int8Array();
} catch(e82) {
    e82.name;
}
v79.length = F48;
const v85 = new Map();
const v89 = [F48,v79,64n,v85];
const v90 = [v89,v77,Map,Map];
const v91 = [255n,v90,v78,v90,F48];
("string").normalize("NFKD");
new WeakSet();
let v97 = 1386429407;
new Float64Array(1073741824);
function f103() {
    return f103;
}
const t106 = 5;
t106.constructor = f103;
new Int16Array();
for (let v105 = 0; v105 < 32; v105++) {
    v77["p" + v105] = v105;
}
const v112 = new Int8Array(628786973);
new BigInt64Array(257);
const v114 = v112.__defineGetter__;
v97--;
const o120 = {
};
!o120;
class C122 {
}
const v123 = new C122();
const v124 = [-2,257,-107178159,-35269,9223372036854775807,1203530861,-32678];
v124[8] = v123;
const o125 = {
};
o125.getOwnPropertyDescriptor = WeakSet;
const v127 = new Proxy(v124, o125);
v127[8] = v79;
v127.unshift(v123, C122);
class C129 {
}
new C129();
(2136873598).constructor;
const v134 = [v114,v85];
const v136 = Reflect.apply(v89.find, v79, v134);
function f137() {
    "p" + -13;
}
%PrepareFunctionForOptimization(f137);
f137();
("h").split(65535);
const o145 = {
    __proto__: v91,
    /*
    __proto__: BigInt64Array,
    */
    2147483647: undefined,
    "execution": "async",
};
let v146 = 0;
do {
    try { new v136(v90); } catch (e) {}
    new F48();
    v146++;
} while (v146 < 1)
%OptimizeFunctionOnNextCall(f137);
class C152 {
}
for (let v153 = 0; v153 < 500; v153++) {
}
function f154() {
    return f154;
}
function f155(a156, a157) {
    a157.then = f137;
    a157.then = f154;
    a157.then = f154;
    return a157;
}
new Promise(f155);
f137();
