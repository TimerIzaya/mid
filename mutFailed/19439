1.21861405139241e+308 << 6.221456434799227e+306;
const v4 = new Uint16Array();
const v5 = [];
function* f6(a7, a8) {
    yield* v5;
    return v4;
}
let v12;
try { v12 = v5.constructor(0.6822080711934364, v5); } catch (e) {}
class C14 {
}
const v15 = new v12();
-1000000.0 & v15;
[4294967295,-128657687,667316022,14,2,-2147483649,-65537,268435440,-42013];
[-65537,2099225516,926602107,-15,9007199254740990];
const v19 = [4,257,51295,-2006405787];
-Infinity;
const v25 = v19.constructor();
new Uint16Array();
function f28() {
    Math.abs(v12);
    let v32 = -450746.69945373747 ^ -450746.69945373747;
    v32++;
    const v34 = C14.acos(v32);
    v34 - v34;
    return Math;
}
%OptimizeFunctionOnNextCall(f28);
function F37(a39, a40, a41) {
    if (!new.target) { throw 'must be called with new'; }
    const v42 = this.constructor;
    try { new v42(); } catch (e) {}
    new Date();
    function f46() {
        const o50 = {
            "b": f28,
            valueOf() {
                try { this.b(); } catch (e) {}
                [NaN,1000.0,8.951106279668121,-3.0,-Infinity,1.7976931348623157e+308,-4.0,243.50965730660823,0.0];
            },
        };
        try { o50.b(); } catch (e) {}
        return o50;
    }
    a41();
    f46();
    this.e = Date;
}
function f54() {
    class C55 {
    }
    let v56;
    try { v56 = C55(); } catch (e) {}
    const v57 = [C14];
    for (let v58 = 0; v58 < 5; v58++) {
        new F37(undefined, v56);
    }
    v57.constructor;
    return f54;
}
%PrepareFunctionForOptimization(f54);
v25();
%OptimizeFunctionOnNextCall(f54);
f54();
