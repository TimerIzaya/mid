new Uint16Array(64);
const v4 = [];
const v5 = [v4,v4,v4,v4];
v5.strike();
function f7(a8, a9, a10, a11) {
}
class C13 {
    static {
        for (let v15 = 0; v15 < 25; v15++) {
            const v16 = [601759695];
            const v17 = [1073741824,1073741823,1376142744,1073741825];
            function f18(a19, a20, a21, a22) {
                try { v17.toSorted(f7); } catch (e) {}
                const v27 = new Float32Array(this, a22, a19);
                function f29() {
                    return a19;
                }
                class C31 extends v27.constructor {
                    #c = 84;
                }
                function f32(a33, a34) {
                    return C13;
                }
                try { f32(f18, a22); } catch (e) {}
                %OptimizeFunctionOnNextCall(f29);
                try { v17["find"](..."find", a22, ...v16); } catch (e) {}
                const o38 = {
                    [Date]: 128,
                    __proto__: arguments,
                };
                return f29;
            }
            for (let v39 = 0; v39 < 5; v39++) {
                f18();
            }
        }
    }
}
function f43() {
    return 4n;
}
function f44() {
    return v5;
}
function f45(a46) {
    return f45;
}
Object.defineProperty(v5, 256, { configurable: true, get: f44, set: f45 });
const v47 = new Int16Array(119);
v47 - v47;
const o52 = {
    valueOf() {
        return this;
    },
};
new Float64Array(4);
for (let i57 = 0, i58 = 10; i57 < i58;) {
}
new Int32Array();
const v71 = (~0).constructor;
function f72(a73, a74) {
    return -1.2306990069287131;
}
v71.valueOf = f72;
v71(v71).toFixed();
const o81 = {
};
function f83() {
    const t68 = ("1073741824").constructor;
    t68().replaceAll().toLowerCase().slice(gc);
    return f83;
}
f83();
gc(o81);
