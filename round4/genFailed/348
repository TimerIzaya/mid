try {
    new Uint8ClampedArray(129);
} catch(e3) {
}
try {
    new Float64Array(3208);
} catch(e7) {
}
try {
    new Uint32Array(1000);
} catch(e11) {
}
class C12 extends Uint32Array {
    constructor(a14, a15) {
        let v13 = this;
        super(a14, 1000, a14);
        try {
            Math.floor(-1073741824);
        } catch(e21) {
        }
        --a14;
        --v13;
    }
}
let v24 = new C12(C12, 129);
const v25 = new C12(v24, 129);
const v26 = new C12(Float64Array, 1000);
const v28 = [Float64Array,[129,1000,1000],1000,Float64Array];
[v28,v28,v28,v28];
let v30;
try { v30 = v25.lastIndexOf(v24, 129); } catch (e) {}
try {
    v24 = v26;
} catch(e31) {
}
v25?.byteOffset;
try {
    v30 % Float64Array;
} catch(e34) {
}
