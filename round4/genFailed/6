let v0 = Map;
const v1 = new v0();
class C2 {
    constructor(a4, a5) {
        let v3 = this;
        [v0,v3,a5] = v1;
        let v6;
        try { v6 = new a5(); } catch (e) {}
        Reflect.construct(v6, [Reflect,a5,Reflect], a5);
    }
    #d;
    e;
    static [v0] = v0;
    static #b = v0;
    static [v1] = v0;
}
const v10 = new C2(C2, v0);
const v11 = new C2(v1, v0);
const v12 = new C2(v11, v1);
const v14 = new WeakSet();
const v15 = [v10,v14,v14,v14,v0];
[v12];
[WeakSet,v12,v1,v10];
-Infinity;
for (let v21 = 0; v21 < 32; v21++) {
    v15["p" + v21] = v21;
}
v15?.[4];
try {
    new BigInt64Array(2);
} catch(e28) {
}
try {
    new Int16Array(129);
} catch(e32) {
}
try {
    new BigInt64Array(2);
} catch(e36) {
}
