try {
    new Float32Array(257);
} catch(e3) {
}
try {
    new Float32Array(10);
} catch(e7) {
}
try {
    new Int16Array(2);
} catch(e11) {
}
const v12 = /h\x01/imdv;
/[^abc|def3+]/igmvs;
const v14 = /8N\P{scx=Greek}*/uymd;
class C15 {
    #valueOf(a17, a18, a19) {
        try {
            super.e = Float32Array;
        } catch(e20) {
        }
        return a17;
    }
    static 129 = 2;
    static [Float32Array] = 2;
    static #f;
    static #d = v14;
}
new C15();
new C15();
new C15();
const o24 = {
    "b": v12,
    "h": C15,
};
let v26 = 2147483649;
v26--;
try {
    Math.acosh(1.1990493757284373e+308);
} catch(e31) {
}
v26 | 1.1990493757284373e+308;
+1.1990493757284373e+308;
