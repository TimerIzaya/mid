const v0 = /[[\11]]/igd;
const v1 = /\w|\d\u{12345}\u{23456}+/igm;
const v2 = /\p{Nd}SS/imds;
const v3 = [4.4138912093904296e+306,-97611.89954279037,-801120.1475306072,-1000000000.0,4.903738672881081,-0.0,-1000.0,-0.0,0.9759597434509456];
const v4 = [-4.0,Infinity,-3.0,-4.909146931927506,1.5630674565535323e+308,82.40507406605707];
const v5 = [-1000000.0,1.3399774190860641e+308,5.662660212123245e+307];
try {
    new Int8Array(15);
} catch(e10) {
}
try {
    new Float32Array(5);
} catch(e14) {
}
try {
    new Uint8ClampedArray(130);
} catch(e18) {
}
[1880049183,1205332993,-9223372036854775808,272773214,-1047420839,17222,1073741823,18741];
const v20 = [9007199254740991,-10,268435440];
const v21 = [9,3,-9223372036854775807,-65536,7,65536,-1024,129];
try {
    v21.flatMap(v2);
} catch(e23) {
}
try {
    v3 || v20;
} catch(e25) {
}
function F26(a28, a29, a30, a31) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = Uint8ClampedArray;
    } catch(e32) {
    }
    try {
        this.c = v2;
    } catch(e33) {
    }
    try {
        this.g = 5;
    } catch(e34) {
    }
}
new F26(5, v4, F26, v1);
const v36 = new F26(5, v5, F26, v1);
new F26(15, v21, v36, v0);
