class C3 {
    b = "number";
    #h;
    static n(a5, a6) {
        const v7 = [-59169,-1526138187,7,-4,-2667,-2147483648,10000,-38722,-65535,536870887];
        [-1128237053,27761,-1978192474,1970479607,12];
        [-601595990,295268088,-4294967296,536870912,268435456,-12,-4294967297];
        v7 && 43962;
        (-2147483649) ** -2147483649;
        try {
            Math.max(43962);
        } catch(e17) {
        }
        return a6;
    }
}
const v18 = new C3();
const v19 = new C3();
const v20 = new C3();
new Map();
function F23(a25, a26, a27, a28) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.c = a27;
    } catch(e29) {
    }
}
new F23(v18, v19, v18, v18);
new F23(v19, C3, C3, v20);
const v32 = new F23(v19, C3, v19, v19);
let v33;
try { v33 = v20.m(v32, v32); } catch (e) {}
Object.defineProperty("m", 10, { writable: true, enumerable: true, value: v20 });
try {
    C3 = v33;
} catch(e34) {
}
try { v33(v33, F23, v32, NaN, NaN); } catch (e) {}
