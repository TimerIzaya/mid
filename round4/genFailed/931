let v0 = [2147483648,65535,536870912,1,-65535,3,3,-60627];
const v1 = [-65536,-4294967296,-1219074599,-4294967295];
const v2 = [1024,1073741824,55842,-495048484,1565604245,64];
try {
    new Float32Array(240);
} catch(e6) {
}
try {
    new Uint16Array(256);
} catch(e10) {
}
try {
    new BigInt64Array(64);
} catch(e14) {
}
class C15 extends BigInt64Array {
    static set c(a17) {
        Uint16Array instanceof a17;
        v2?.length;
        v1?.__proto__;
    }
    h = Float32Array;
    constructor(a22, a23, a24) {
        super(v2, 240, 64);
        typeof a23 === "bigint";
    }
    c;
    static b;
}
new C15(240, 64, v1);
new C15(64, 256, v2);
new C15(256, 240, v0);
[-64673,-53800,-1667526575,-256,-2,268435441,-821192618];
[-1093423454,42678];
[-14,65537,12,257];
try {
    C15.fuck(true, true);
} catch(e36) {
}
new WeakMap();
try {
    v0 ^= v2;
} catch(e39) {
}
