try {
    new Uint8ClampedArray(127);
} catch(e3) {
}
try {
    new Uint8ClampedArray(737);
} catch(e7) {
}
try {
    new Int32Array(1986);
} catch(e11) {
}
try {
    new Uint16Array(128);
} catch(e15) {
}
try {
    new Uint8Array(255);
} catch(e19) {
}
try {
    new Int16Array(16);
} catch(e23) {
}
class C24 extends Uint8ClampedArray {
    static #p(a26, a27, a28, a29) {
        a26?.[-1];
        try {
            this.#p(a28, Uint8Array, a28, a28);
        } catch(e32) {
        }
        return a29;
    }
    5 = 255;
    h;
    #g;
    static [Uint8Array] = 255;
    #h;
}
const v33 = new C24();
const v34 = new C24();
const v35 = new C24();
const v36 = v34?.byteOffset;
new WeakMap();
try {
    C24[Uint8ClampedArray] ||= 737;
} catch(e39) {
}
const v41 = [v36,v33];
Reflect.apply(v33?.findIndex, v35, v41);
