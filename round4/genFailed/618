try {
    new Uint8ClampedArray(2702);
} catch(e3) {
}
try {
    new Int32Array(122);
} catch(e7) {
}
try {
    new BigUint64Array(257);
} catch(e11) {
}
class C12 extends Uint8ClampedArray {
    [-1] = BigUint64Array;
    c;
    static 1000;
    set b(a14) {
        const o18 = {
            "execution": "sync",
            "type": "major",
        };
        gc(o18);
    }
    static #c = Uint8ClampedArray;
    7 = Uint8ClampedArray;
}
new C12();
const v21 = new C12();
const v22 = new C12();
const v23 = [536870912,-9223372036854775808,-6478,17241];
const v24 = [2147483649,15258,-7,268435456,-1338687965,2,-65536,-15];
const v25 = [268435440,8,-268435456,-256,-13490,256,-536870912,-8,-65537,1470744818];
class C26 extends Uint8ClampedArray {
    6;
    get c() {
        try {
        const t0 = 122;
        t0(Function, 122, ...v24, Function, ...this);
        } catch (e) {}
        const v30 = delete v22?.byteLength;
        try {
            this.includes(Int32Array);
        } catch(e32) {
        }
        return v30;
    }
    2147483647 = v25;
    [-2] = BigUint64Array;
    static #d;
    static #e;
}
new C26();
new C26();
const v35 = new C26();
const o36 = {
};
try {
    o36.d = Int32Array;
} catch(e37) {
}
try {
    const o38 = {
    };
    o38.d = Int32Array;
    o38.a = v23;
} catch(e39) {
}
try {
    const o40 = {
    };
    o40.d = Int32Array;
    o40.a = v23;
    o40.f = v35;
} catch(e41) {
}
try {
    const o42 = {
    };
    o42.d = Int32Array;
    o42.a = v23;
    o42.f = v21;
} catch(e43) {
}
