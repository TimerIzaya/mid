class C3 {
    static c = "10000";
    712 = -483.1385835855988;
    static {
        try {
            this.toString = this;
        } catch(e5) {
        }
        const t8 = "10000";
        let v6 = delete t8[this];
        try {
            Math.sinh(-369797710);
        } catch(e10) {
        }
        try {
            Math.tanh("10000");
        } catch(e12) {
        }
        const v13 = --v6;
        try {
            Math.tanh(v6);
        } catch(e15) {
        }
        v6 - this;
        v13 << v13;
    }
}
const v18 = new C3();
const v19 = new C3();
const v20 = new C3();
class C21 extends C3 {
    constructor(a23, a24) {
        super();
        try { ("10000").matchAll(C3); } catch (e) {}
        const v26 = C3[a23];
        a23?.d;
        try {
            a24.d = v26;
        } catch(e28) {
        }
    }
    static [v20];
    static [v18] = v19;
    #e = v18;
    static [C3];
    5 = v18;
}
const v29 = new C21(C3, v19);
const v30 = new C21(C3, C21);
const v31 = new C21(v29, "10000");
const v32 = [NaN,-2.220446049250313e-16,1000.0,2.2250738585072014e-308,-1000000000000.0];
const v33 = [9.498214319084923e+307,5.026570814144907e+307,5.0,-8.415958058535576,127.74433536012361,1000000000000.0,0.19382091229015863];
const v34 = [1000000000.0,1.7976931348623157e+308,-2.2250738585072014e-308,-5.0,-2.0,1.43253091791922e+308,-1.0,-0.0,Infinity];
function F35(a37, a38, a39, a40) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a40;
    } catch(e41) {
    }
}
const v42 = new F35(v18, v30, v32, v34);
new F35(v33, v30, v19, v19);
const v44 = new F35(v18, v30, v31, v34);
let v45;
try { v45 = v42.toJSON(C3, v29, v44, v44); } catch (e) {}
try {
    const t66 = "sin";
    t66.a = v45;
} catch(e49) {
}
try {
    v45[3] &= v45;
} catch(e50) {
}
