let v0 = Set;
const v1 = new v0();
class C2 {
    static 127;
    static #d;
    #f = v0;
    toString(a4) {
        const o5 = {
        };
        try {
            new Proxy(this, o5);
        } catch(e8) {
        }
        return o5;
    }
    [v1] = v1;
}
const v9 = new C2();
const v10 = new C2();
const v11 = new C2();
class C12 extends v0 {
    [v10];
    #m(a14, a15, a16, a17) {
        for (const v18 of this) {
            try {
                v0 ^= a17;
            } catch(e19) {
            }
        }
        try {
            new Float32Array(255);
        } catch(e23) {
        }
        try {
            new Int32Array(9);
        } catch(e27) {
        }
        try {
            new Uint32Array(99);
        } catch(e31) {
        }
        return v0;
    }
}
const v32 = new C12();
const v33 = new C12();
const v34 = new C12();
class C35 {
    static 11 = v1;
    static #f;
    constructor(a37, a38, a39, a40) {
        try {
            a40.__proto__ = a39;
        } catch(e41) {
        }
    }
    g;
    set a(a43) {
        v9[v32];
        try {
            v10 | a43;
        } catch(e46) {
        }
    }
}
const v47 = new C35(v32, C2, C2, v11);
const v48 = new C35(v33, v47, v9, C2);
new C35(v1, v1, C35, v11);
v1?.[110];
v48?.__proto__;
const v52 = (a53, a54, a55) => {
    'use strict';
    v34["forEach"](a55, "forEach");
    return v10;
};
try { C2.p(v11, v33); } catch (e) {}
