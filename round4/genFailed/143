const v1 = new Set();
function f5() {
    return -43375;
}
function f6(a7, a8, a9) {
    const o21 = {
        [a8](a11, a12) {
            super.d;
            return a12;
        },
        "f": a7,
        "c": a8,
        "g": f5,
        o(a15, a16) {
            try {
                -v1;
            } catch(e18) {
            }
            const v19 = delete v1[a8];
            try {
                a9 /= a9;
            } catch(e20) {
            }
            return v19;
        },
    };
    return o21;
}
f6(-43375, -6, 6);
f6(6, -6, -6);
const v24 = f6(6, 6, -43375);
[4096,4,-9,9223372036854775807];
const v29 = [1];
const v30 = [-36221,-1,-1432310295,920049424,774271360,2147483649];
try {
    v1.size = -6;
} catch(e31) {
}
Object.defineProperty("We", -2, { writable: true, enumerable: true, value: "We" });
function* f32(a33, a34) {
    f6(-6, a33, -43375);
    const o36 = {
        "apply": f6,
        "isExtensible": f5,
    };
    try {
        new Proxy(v24, o36);
    } catch(e39) {
    }
    yield* "g";
    return Set;
}
f32(v30, v29);
