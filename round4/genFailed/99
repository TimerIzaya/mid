try {
    new Uint8Array(512);
} catch(e3) {
}
try {
    new Uint32Array(202);
} catch(e7) {
}
try {
    new Float32Array(1000);
} catch(e11) {
}
class C12 extends Uint8Array {
    #b;
    set a(a14) {
        const o15 = {
        };
        try {
            new Proxy(this, o15);
        } catch(e18) {
        }
    }
    7 = 512;
    a;
}
const v19 = new C12();
const v20 = new C12();
const v21 = new C12();
try {
    new Float32Array(64);
} catch(e25) {
}
try {
    new Float32Array(10);
} catch(e29) {
}
try {
    new BigUint64Array(5);
} catch(e33) {
}
try {
    v20.toReversed();
} catch(e35) {
}
for (const v36 in v20) {
    try { v21.filter(v20); } catch (e) {}
    delete C12[Uint32Array];
    const v40 = v19?.a?.[4294967295];
    const v42 = [v40,v40,5];
    Reflect.apply(v19?.copyWithin, v19, v42);
}
