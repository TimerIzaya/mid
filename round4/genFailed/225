const v0 = /]a5/iyds;
const v1 = /La{1,2}?/guymds;
/a(?=b)cS\p{Nd}/gus;
try {
    new Float32Array(256);
} catch(e6) {
}
try {
    new Float64Array(298);
} catch(e10) {
}
try {
    new BigUint64Array(4029);
} catch(e14) {
}
class C15 {
    static d;
    g;
    constructor(a17, a18, a19, a20) {
        class C21 extends Float32Array {
            c = v0;
            10 = 256;
            static #g = this;
        }
        new C21();
        new C21();
        new C21();
    }
    static #g = 256;
    static [256];
    #d = v0;
}
const v25 = new C15(256, v0, 256, 4029);
new C15(298, v0, 298, 256);
new C15(256, v0, 4029, 298);
try {
    v25[5] = 3;
} catch(e31) {
}
const o32 = {
};
try {
    o32.a = BigUint64Array;
} catch(e33) {
}
try {
    const o34 = {
    };
    o34.a = BigUint64Array;
    o34.c = v1;
} catch(e35) {
}
try {
    const o36 = {
    };
    o36.a = BigUint64Array;
    o36.c = v1;
    o36.e = 256;
} catch(e37) {
}
try {
    const o38 = {
    };
    o38.a = BigUint64Array;
    o38.c = v1;
    o38.f = -256;
} catch(e39) {
}
