let v2 = "includes";
class C3 {
    constructor(a5, a6) {
        const v8 = Symbol?.match;
        a5[v8] = v8;
    }
    o(a10, a11) {
        for (const v12 of "string") {
            try {
                4 === v12 ? 4 : v12;
            } catch(e15) {
            }
        }
        return v2;
    }
}
const v16 = new C3(C3, C3);
const v17 = new C3(v16, v2);
const v18 = new C3(4, 4);
class C19 {
    o(a21, a22, a23, a24) {
        ("64819").normalize("NFKD");
        const v28 = v18?.[566277899];
        return Reflect.construct(v28, [a23,Reflect,v17,Reflect,"string"], v28);
    }
    [C3] = v18;
    static #a;
    2 = 4;
}
new C19();
const v33 = new C19();
new C19();
try {
    new Int32Array(257);
} catch(e38) {
}
try {
    new Float64Array(2);
} catch(e42) {
}
try {
    new BigUint64Array(1717);
} catch(e46) {
}
try {
    v2 %= "string";
} catch(e47) {
}
try {
    ~BigUint64Array;
} catch(e49) {
}
+-1807413233;
const v55 = 2147483649 / 2147483649;
2.2250738585072014e-308 % 2.2250738585072014e-308;
v33 >>> v55;
