const v0 = [9007199254740992,-268435456,1467930037];
const v1 = [-2015530892,-3001];
const v2 = [16,11415,1,6,-9,-1675962164,10000];
class C3 {
    static #toString(a5, a6) {
        new Set();
        super[v1];
        try {
            new Int32Array(135);
        } catch(e13) {
        }
        try {
            new Float32Array(6);
        } catch(e17) {
        }
        try {
            new Uint8Array(16);
        } catch(e21) {
        }
        return v2;
    }
}
const v22 = new C3();
const v23 = new C3();
const v24 = new C3();
const v25 = [0.8178134319764074,-6.318357463305646,-3.0,1e-15,27406.422371186316,2.220446049250313e-16,-2.0,-2.2051153140752297e+307,-693.4197321962781];
[-1000000000.0,0.6222876552509234,5.809924090935268e+306,-1.2647142666195357e+308,581.6427085559396,-8.983447455154197,-380618.60210840567,-895.2789728254648,Infinity,-Infinity];
let v27 = [1000.0,147889.91055391822];
class C28 extends C3 {
    static toString(a30, a31) {
        try {
            super.fill(v25, a30, a30, v0);
        } catch(e33) {
        }
        return this;
    }
    toString(a35, a36) {
        try {
            ++v27;
        } catch(e38) {
        }
        [this,a36,[a36,v24,[v0],v23,v24]];
        this?.b;
        return a35;
    }
}
const v43 = new C28();
new C28();
new C28();
const v50 = [1e-15];
const v51 = v2?.filter;
Reflect.apply(v51, v22, v50);
Reflect?.[-1];
v51 in v23;
v43?.e;
