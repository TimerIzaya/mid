let v1 = 512n;
class C3 {
    #valueOf(a5, a6) {
        try { new a5(1n, 1n, 35228n); } catch (e) {}
        try {
            v1 = 35228n;
        } catch(e9) {
        }
        return 1n;
    }
    static f;
    [1n];
    #a = 1n;
    #b = 35228n;
}
new C3();
new C3();
const v12 = new C3();
class C16 extends C3 {
    [-1.2183900464277504e+308];
    #o(a18, a19, a20, a21) {
        try {
            a21 != 747327.1253411812 ? a21 : 747327.1253411812;
        } catch(e24) {
        }
        return v12;
    }
    static a;
    static [35228n];
    static 2969 = 1n;
    [35228n];
}
const v25 = new C16();
new C16();
new C16();
try {
    v25 && 747327.1253411812;
} catch(e29) {
}
for (let [v30,v31,v32] of 1n) {
    try {
        new BigUint64Array(2);
    } catch(e36) {
    }
    try {
        new Int8Array(128);
    } catch(e40) {
    }
    try {
        new Uint8ClampedArray(2367);
    } catch(e44) {
    }
}
