const v0 = [-1000.0,-0.9286067554826953];
[-1000000000000.0,0.0,-7.1386349468786285,-1.7976931348623157e+308];
const v2 = [657.1936788085277,0.4717756939919633,713130.9173122172,-8.484943715959287e+307,NaN,-7.444584025636953,0.22161769825772415];
try {
    new BigInt64Array(7);
} catch(e6) {
}
try {
    new BigUint64Array(2);
} catch(e10) {
}
try {
    new Float64Array(56);
} catch(e14) {
}
const v19 = new Map();
class C20 extends Float64Array {
    static a = 7;
    static get b() {
        let v23;
        try { v23 = v2.pop(); } catch (e) {}
        try { v23(56, v23, "9223372036854775807"); } catch (e) {}
        v19[Symbol?.unscopables] = Map;
        return v0;
    }
    static #m(a28, a29, a30) {
        const t26 = "symbol";
        delete t26[1073741824];
        try {
            a30.#m(a29, BigInt64Array, a29, v2);
        } catch(e33) {
        }
        return a29;
    }
}
new C20();
new C20();
const v36 = new C20();
try {
    "p" ** Map;
} catch(e38) {
}
const v40 = [];
Reflect.apply(v36?.values, "p", v40);
