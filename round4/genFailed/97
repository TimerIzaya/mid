function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = -60230;
    } catch(e3) {
    }
    try {
        this.d = -60230;
    } catch(e4) {
    }
}
const v5 = new F0();
const v6 = new F0();
new F0();
class C8 extends F0 {
    get h() {
        try {
            this[2312209363] **= v5;
        } catch(e10) {
        }
        return this;
    }
    static #c = v6;
    valueOf(a12, a13) {
        const v14 = [this,this,this,a12];
        const v15 = [v14,a13,F0,F0,a13];
        const v16 = [v15,v6,this,a12,v14];
        try {
            v16[this] = v16;
        } catch(e17) {
        }
        return v15;
    }
}
const v18 = new C8();
const v19 = new C8();
const v20 = new C8();
function F21(a23, a24) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = a23;
    } catch(e25) {
    }
    try {
        this.c = a23;
    } catch(e26) {
    }
}
new F21(v19, v20);
new F21(v18, v20);
new F21(v19, v19);
try {
    new Uint32Array(39);
} catch(e33) {
}
try {
    new Uint32Array(4096);
} catch(e37) {
}
try {
    new Uint8ClampedArray(512);
} catch(e41) {
}
for (const v42 of v6) {
    try {
        C8[512] = v42;
    } catch(e43) {
    }
}
try {
    v18[v19] = v19;
} catch(e44) {
}
