const v0 = /(?:ab)+/igymd;
const v1 = /z/iymdvs;
const v2 = /2m[\1111]/igys;
class C3 {
    static get b() {
        /dxyz{0,1}/igd;
        /A(?:ab)?[]/iuyd;
        /foo[z]*a\S/uyms;
        return v1;
    }
    valueOf(a9) {
        switch (a9) {
            case a9:
                try {
                    v2[4237120953] = this;
                } catch(e10) {
                }
                break;
        }
        return a9;
    }
}
const v11 = new C3();
const v12 = new C3();
const v13 = new C3();
let v17 = new Array(5);
const v19 = new Map();
function f20() {
    return v19;
}
function f21(a22, a23, a24) {
    const o36 = {
        [a23]: a22,
        m(a26, a27) {
            super[a24?.global];
            new Set();
            return a22;
        },
        set d(a33) {
            try {
                f20 >>> a22;
            } catch(e35) {
            }
        },
        __proto__: v2,
    };
    return o36;
}
const v37 = f21(C3, v12, v0);
f21(v19, v13, v1);
f21(v12, v13, v2);
Reflect.construct(Map, [v11], f20);
try {
    ({"d":v17,"e":f21,"h":f21,} = Reflect);
} finally {
    try { new f21(v1, Array, Reflect, v37); } catch (e) {}
}
try { v13.valueOf(v11, 5, v37, f20, v0); } catch (e) {}
const o47 = {
    "maxByteLength": 1542,
};
const v49 = new ArrayBuffer(3, o47);
try {
    new DataView(v49);
} catch(e52) {
}
