try {
    new Int16Array(128);
} catch(e3) {
}
try {
    new Int32Array(903);
} catch(e7) {
}
try {
    new Uint8ClampedArray(11);
} catch(e11) {
}
[2.0,-1.7976931348623157e+308,-8.82647916611611,0.8994128997282598,0.0,-5.949129308138594e+307,1.1659991806898606,4.0];
const v13 = [-1.3644990806633266e+308,1.0,135865.77800131752,-1.2319631186327334e+308,0.4150656169933189,-2.0,1.1111350587464031e+308,0.557107411261036,0.750932323711391,-748999.5582193008];
const v14 = [0.22125195571043033,553370.6290658778];
class C18 extends Int16Array {
    [-1] = v13;
    static get g() {
        let v21;
        try { v21 = this["push"](v14, 128, 11, Uint8ClampedArray, "push"); } catch (e) {}
        return v21;
    }
    m(a23, a24) {
        try {
            super[a24];
            try {
                a23.h %= a24;
            } catch(e26) {
            }
        } finally {
            let [v27,v28] = v13;
        }
        return v14;
    }
}
new C18();
const v33 = new C18();
new C18();
for (let v38 = 0; v38 < 32; v38++) {
    v33["p" + v38] = v38;
}
try {
    Math.log1p(589320387);
} catch(e44) {
}
try {
    Math.atanh(Uint8ClampedArray);
} catch(e46) {
}
const v47 = ~589320387;
const v48 = Uint8ClampedArray >> 589320387;
let v49 = v47 ^ v47;
++v49;
v48 << Uint8ClampedArray;
