const v0 = [3.0,-732.9589656344433,-845723.2537521289,1e-15,4.0,-883108.1127814357,1000.0,-3.191316568679503];
[1.3104382175523123e+308,0.0,2.220446049250313e-16,-1.3068145645142266,1000000.0];
const v2 = [-795.2160387993255,0.015588000378261468];
class C3 {
    toString(a5, a6) {
        this < v0;
        try {
            super.e = v0;
        } catch(e8) {
        }
        return v2;
    }
    static [v2] = v2;
    constructor(a10) {
        try {
            super.at(this, v2);
        } catch(e12) {
        }
        try {
            a10 | a10;
        } catch(e14) {
        }
    }
}
const v15 = new C3(v2);
const v16 = new C3(v2);
new C3(v15);
class C21 {
    set c(a23) {
        let v22 = this;
        try {
            v22 = C3;
        } catch(e24) {
        }
        try {
            v0[v15] = C3;
        } catch(e25) {
        }
    }
    valueOf(a27, a28) {
        let v32 = 3.0;
        try {
            Math.sinh(v32);
        } catch(e34) {
        }
        try {
            Math.trunc(v32);
        } catch(e36) {
        }
        C3 ** C3;
        const v38 = v32--;
        try {
            Math.log1p(v32);
        } catch(e40) {
        }
        try {
            Math.clz32(v38);
        } catch(e42) {
        }
        try {
            Math.cosh(a28);
        } catch(e44) {
        }
        return a28;
    }
}
const v45 = new C21();
new C21();
new C21();
try {
    new Uint32Array(4096);
} catch(e51) {
}
try {
    new Int8Array(129);
} catch(e55) {
}
try {
    new Uint32Array(10);
} catch(e59) {
}
try {
    v2[2467] = v0;
} catch(e60) {
}
let v61;
try { v61 = v45.valueOf(v16); } catch (e) {}
new Uint32Array(v61, 129, 4096);
v15 > this;
[-5,-55443,268435441,10,-65537,371005962,65537];
[-44837,3,-265771427,53077,5,-48115,7,-10,-55767,8];
[-256,8,-10,1,-36233,10,268435440,-477829840];
