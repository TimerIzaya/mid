try {
    new Uint8ClampedArray(472);
} catch(e3) {
}
try {
    new Uint8ClampedArray(3);
} catch(e7) {
}
try {
    new Float32Array(14);
} catch(e11) {
}
class C12 extends Uint8ClampedArray {
    static #d = 472;
    #f = 472;
    0 = Uint8ClampedArray;
    static #valueOf(a14, a15, a16) {
        [0.6818813605523498,1.5922178318711553e+308];
        [-1000.0,-6.703424372711362e+307];
        [-0.0,-282.8020783820009,-4.443938199134991,0.06422138128600918,2.220446049250313e-16,-2.220446049250313e-16,-Infinity];
        super.length;
        super.at(472);
        return Float32Array;
    }
    static #c;
    static 2407;
}
new C12();
new C12();
new C12();
-Infinity;
function f28() {
    return Uint8ClampedArray;
}
const v30 = Symbol?.toPrimitive;
const o36 = {
    [v30]() {
        Symbol(v30);
        %PrepareFunctionForOptimization(Symbol);
        Symbol(v30);
        Symbol(v30);
        %OptimizeMaglevOnNextCall(Symbol);
        Symbol(v30);
        return 472;
    },
};
