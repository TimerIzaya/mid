try {
    new Float32Array(151);
} catch(e3) {
}
try {
    new Float64Array(1256);
} catch(e7) {
}
try {
    new Int32Array(9);
} catch(e11) {
}
function f12() {
    return 151;
}
let v13 = [-1820021864,9007199254740992,-4294967297,1312036333,-2,-12];
[4294967295,129,-4096,8];
const v15 = [512,255,-256,-44415,4096];
let v17 = 16;
class C20 extends Float64Array {
    m(a22, a23) {
        try {
            v17 >>>= 268435441;
        } catch(e24) {
        }
        return a23;
    }
    static get e() {
        try {
            v15.length = -4294967295;
        } catch(e26) {
        }
        return f12;
    }
    #d;
}
new C20();
const v28 = new C20();
new C20();
throw v15;
try {
    v13 = v15;
} catch(e30) {
}
try {
    v15[v28] -= -4294967295;
} catch(e31) {
}
v13?.[2147483647];
