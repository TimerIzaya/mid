class C3 {
    n(a5) {
        let v4 = this;
        try {
            v4 &= v4;
        } catch(e6) {
        }
        return "6yh";
    }
    ["undefined"] = "6yh";
    64 = "6yh";
    constructor(a8, a9) {
        function f10(a11, a12, a13, a14) {
            try {
                a12[a13] = a12;
            } catch(e15) {
            }
            return a12;
        }
        f10(a9, "6yh", f10, a8);
    }
}
const v17 = new C3("undefined", "6yh");
const v18 = new C3("6yh", "toString");
const v19 = new C3("toString", "undefined");
try {
    new Int16Array(255);
} catch(e23) {
}
try {
    new Uint32Array(1429);
} catch(e27) {
}
try {
    new Float64Array(457);
} catch(e31) {
}
class C32 extends Float64Array {
    static #a = 457;
    #valueOf(a34, a35) {
        for (const v36 in this) {
            try {
                v19[716] = "6yh";
            } catch(e37) {
            }
        }
        try { this.copyWithin(a34, a34, a35); } catch (e) {}
        return this;
    }
    static #f;
    static 0 = v18;
    ["undefined"] = 1429;
    [255] = v19;
}
new C32();
const v40 = new C32();
new C32();
try { v40.sort(v17); } catch (e) {}
try {
    457 && Uint32Array;
} catch(e44) {
}
for (let v45 = 0; v45 < 32; v45++) {
    const t63 = "undefined";
    t63["p" + v45] = v45;
}
