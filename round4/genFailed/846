function f0() {
    let v3 = "D5";
    const o10 = {
        "f": v3,
        "e": "268435439",
        ..."268435439",
        "b": "268435439",
        [v3](a5, a6) {
            for (let v7 = 0; v7 < 85; v7++) {
                try {
                    v3 = "268435439";
                } catch(e8) {
                }
            }
            try {
                a6 |= 6.452220652678744;
            } catch(e9) {
            }
            return v3;
        },
    };
    return o10;
}
let v11 = f0();
const v12 = f0();
const v13 = f0();
class C14 extends f0 {
    g = v13;
    constructor(a16, a17) {
        super();
        try {
            Object.defineProperty(a17, "e", { writable: true, configurable: true, enumerable: true, value: a17 });
        } catch(e18) {
        }
    }
    #p(a20, a21) {
        try {
            v11 = a21;
        } catch(e22) {
        }
        new Map();
        try {
            f0 != v11 ? f0 : v11;
        } catch(e27) {
        }
        return a20;
    }
}
new C14(v11, v11);
const v29 = new C14(v12, v11);
new C14(v29, v11);
const v34 = [387.8486280144125];
const v35 = [-1000.0,v34,v34,387.8486280144125];
const v36 = [-3.439984860029064];
try {
    v29.b = v36;
} catch(e37) {
}
function f38(a39, a40) {
    function f42(a43) {
        const v44 = v35?.[515];
        const o45 = {
        };
        try {
            o45.d = v44;
        } catch(e46) {
        }
        try {
            const o47 = {
            };
            o47.d = v44;
            o47.g = v44;
        } catch(e48) {
        }
        try {
            const o49 = {
            };
            o49.d = v44;
            o49.g = v44;
            o49.e = v44;
        } catch(e50) {
        }
        try {
            const o51 = {
            };
            o51.d = v44;
            o51.g = v44;
            o51.e = v44;
        } catch(e52) {
        }
    }
    this.onmessage = f42;
    Object.defineProperty(v35, -3.439984860029064, { configurable: true, set: f42 });
    try {
        new Uint8Array(64);
    } catch(e56) {
    }
    try {
        new Float64Array(1);
    } catch(e60) {
    }
    try {
        new BigUint64Array(256);
    } catch(e64) {
    }
}
const v67 = ["function",v11];
const o68 = {
    "arguments": v67,
    "type": "function",
};
new Worker(f38, o68);
