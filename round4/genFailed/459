try {
    new Uint8Array(2062);
} catch(e3) {
}
try {
    new Int8Array(1024);
} catch(e7) {
}
try {
    new Float64Array(2);
} catch(e11) {
}
function f12(a13, a14, a15) {
    const o31 = {
        valueOf(a17, a18) {
            let v16 = this;
            try {
                a17 >> a18;
            } catch(e20) {
            }
            ({"c":a17,"f":v16,} = v16);
            super[Float64Array];
            return a18;
        },
        p(a23, a24, a25, a26) {
            super[a23];
            function f28(a29) {
                return 1024;
            }
            class C30 extends f28 {
                static 2 = 1024;
                static 0;
                static #b;
            }
            return a14;
        },
    };
    return o31;
}
const v32 = f12(1024, 2062, 2062);
const v33 = f12(1024, 2, 1024);
const v34 = f12(1024, 1024, 1024);
function f35(a36, a37) {
    const o46 = {
        "b": a37,
        "c": a36,
        "d": f12,
        ...v33,
        "a": v34,
        __proto__: v34,
        p(a39, a40, a41, a42) {
            return a36;
        },
        "g": 2062,
        "f": f12,
        "e": a37,
    };
    return o46;
}
const v47 = f35(v33, v33);
f35(v34, v33);
const v49 = f35(v33, v34);
try {
    new Int16Array(15);
} catch(e53) {
}
try {
    new Int16Array(6);
} catch(e57) {
}
try {
    new BigUint64Array(1699);
} catch(e61) {
}
for (const v62 of v32) {
    try { v62(6, v62); } catch (e) {}
}
function F67(a69, a70, a71, a72) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.d = 2;
    } catch(e73) {
    }
}
new F67(15, v49, v34, 1699);
const v75 = new F67(Int16Array, v47, v32, 1024);
new F67(v75, v75, v34, 15);
