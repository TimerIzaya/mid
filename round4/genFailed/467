class C3 {
    static f;
    constructor(a5, a6) {
        try {
            super.b <<= a5;
        } catch(e7) {
        }
    }
    static #valueOf(a9, a10) {
        let v11;
        try { v11 = a9(a10, 60600); } catch (e) {}
        try {
            -9223372036854775807 + -2.0;
        } catch(e13) {
        }
        try {
            const v14 = [60600,a10,-9223372036854775807,-2.0,v11];
            const v15 = /q/igymvs;
            this.fuck(v14, v11, v15, v15);
        } catch(e17) {
        }
        return v11;
    }
}
const v18 = new C3(-2.0, 60600);
const v19 = new C3(-9223372036854775807, 60600);
const v20 = new C3(v19, v19);
function F21(a23, a24, a25) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.e = a23;
    } catch(e26) {
    }
}
const v27 = new F21(v18, v19, v20);
const v28 = new F21(v20, v19, v27);
const v29 = new F21(v20, v28, v20);
function F33(a35, a36, a37, a38) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.f = -9223372036854775807;
    } catch(e39) {
    }
    try {
        this.a = v29;
    } catch(e40) {
    }
}
const v41 = new F33(v20, C3, v19, -65536n);
const v42 = new F33(v41, v41, v18, -2147483649n);
new F33(v28, v42, v27, -2147483649n);
for (const v44 of C3) {
    try {
        new Int16Array(1024);
    } catch(e48) {
    }
    try {
        new Uint8Array(3520);
    } catch(e52) {
    }
    try {
        new Uint16Array(64);
    } catch(e56) {
    }
}
