try {
    new Int32Array(512);
} catch(e3) {
}
try {
    new Uint32Array(0);
} catch(e7) {
}
try {
    new Uint16Array(129);
} catch(e11) {
}
new Set();
class C14 extends Uint32Array {
    valueOf(a16, a17) {
        try {
            a17 << this;
        } catch(e19) {
        }
        try {
            ~Int32Array;
        } catch(e21) {
        }
        return a16;
    }
    static h;
    3 = 129;
}
new C14();
const v23 = new C14();
new C14();
[0.9405078682636784,-304098.4964377014,9.901344597454853e+307,-2.2250738585072014e-308,7.636518026926818e+307,-356.52951371558595,1.7976931348623157e+308,1.7976931348623157e+308,-5.0,-3.3437952494404736e+307];
[-1.0,-4.0,-1000000000.0,-858.2320694091161,0.45169324469474437,2.0677798578143403,318826.7342891933,1.1854933219289072e+308,-968933.5168629985];
[-1.7464434343795402e+308,5.0,-711480.3872106026,-5.0,220822.30253081582,0.5991151806296604,-1.0348468081665036e+308];
let v28 = 0;
while (v28 < 4) {
    try {
        v23[Symbol] = Symbol;
    } catch(e32) {
    }
    v28++;
}
