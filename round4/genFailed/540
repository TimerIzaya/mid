try {
    new Float64Array(1000);
} catch(e3) {
}
try {
    new Int16Array(11);
} catch(e7) {
}
try {
    new Int16Array(36);
} catch(e11) {
}
try {
    new Int32Array(255);
} catch(e18) {
}
try {
    new Uint8Array(16);
} catch(e22) {
}
try {
    new Uint8Array(129);
} catch(e26) {
}
class C27 extends Uint8Array {
    static [-3n] = 255;
    256 = 129;
    5 = Int16Array;
    1;
}
new C27();
new C27();
const v30 = new C27();
try {
    v30 * Int16Array;
} catch(e32) {
}
