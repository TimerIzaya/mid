function F0() {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = -1;
    } catch(e3) {
    }
}
const v4 = new F0();
const v5 = new F0();
const v6 = new F0();
function F7(a9, a10) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.g = a9;
    } catch(e11) {
    }
    try {
        this.b = v5;
    } catch(e12) {
    }
}
const v13 = new F7(F7, v6);
const v14 = new F7(F7, v13);
const v15 = new F7(F7, v14);
function f16(a17, a18) {
    const o21 = {
        __proto__: v13,
        get a() {
            delete v6[this];
            return v13;
        },
        "g": a17,
        11: v4,
        "h": F7,
        [a18]: a17,
        "f": v5,
        "e": a18,
        "d": v14,
        "b": a17,
    };
    return o21;
}
f16(v14, v14);
const v23 = f16(v13, v4);
const v24 = f16(v23, v4);
class C25 {
    #h;
    constructor(a27, a28, a29) {
        let v26 = this;
        try {
            v26 = a29;
        } catch(e30) {
        }
        Object.defineProperty(v13, v4, { configurable: true, enumerable: true, value: v24 });
        try { v6.log1p(); } catch (e) {}
        try {
            f16(v26, v4);
        } catch(e33) {
        }
    }
}
new C25(v23, v6, v13);
let v35 = new C25(v23, v23, v15);
new C25(v24, v13, v35);
try {
    v35 ^= C25;
} catch(e37) {
}
for (const v38 of F7) {
    [1000,-128,1073741824,-8];
    [-65536,65537,1300043147,-256];
    let v41 = [-4096,4294967296];
    try {
        v41 /= v41;
    } catch(e42) {
    }
}
