function F3(a5, a6) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = -9223372036854775808n;
    } catch(e7) {
    }
    try {
        this.c = -9223372036854775807n;
    } catch(e8) {
    }
}
const v9 = new F3(-9223372036854775808n, -728342804n);
const v10 = new F3(-9223372036854775808n, -728342804n);
const v11 = new F3(-9223372036854775808n, -728342804n);
function F12(a14, a15, a16) {
    if (!new.target) { throw 'must be called with new'; }
    try {
        this.a = a15;
    } catch(e17) {
    }
}
new F12(v9, F12, -9223372036854775807n);
const v19 = new F12(v9, -9223372036854775807n, -9223372036854775807n);
const v20 = new F12(v11, F12, -9223372036854775808n);
try { v9(v10, v19, v20); } catch (e) {}
const v23 = Symbol?.asyncIterator;
v11[v23];
for (const v25 of v23) {
    try {
        v10[-1] = v25;
    } catch(e26) {
    }
}
