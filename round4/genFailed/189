let v0 = [];
let v4 = 727;
try {
    new Uint32Array(v4);
} catch(e7) {
}
try {
    new Float32Array(67);
} catch(e11) {
}
try {
    new Int32Array(2);
} catch(e15) {
}
class C16 extends Float32Array {
    m(a18, a19) {
        const t16 = "10000";
        const v20 = delete t16[9];
        try { v20("-12", v20); } catch (e) {}
        return "10000";
    }
    g;
    static set f(a23) {
        try {
            v0 <<= this;
        } catch(e24) {
        }
        super.keys();
        [256,4096,9223372036854775807,9223372036854775807,2346,9007199254740991,1955584954,255,-16,1059117491];
        [12,1073741824,-5,9223372036854775807,23332,1957328199,1260536496,5,-536870912];
        [-1399774543,2147483648,562950255,-4,268435441,-1073741824,-9223372036854775807,-1,13];
    }
}
const v29 = new C16();
const v30 = new C16();
new C16();
class C32 extends C16 {
    constructor(a34, a35, a36) {
        super();
        const t39 = "-12";
        t39[3] = a35;
        try {
            v4 = a34;
        } catch(e37) {
        }
    }
    static m(a39, a40) {
        `string${a40}-884216465${this}HIg`;
        try {
            v0[a39] = v30;
        } catch(e42) {
        }
        return this;
    }
}
new C32(67, v30, "-12");
new C32(v0, v29, C16);
new C32(67, v29, 2);
for (let i48 = 0, i49 = 10; i48 < i49; i48++, i49--) {
    let v59 = -413.9053929810241;
    2 + v59;
    2 * 2;
    --v59;
}
