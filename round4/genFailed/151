try {
    new Uint8ClampedArray(3232);
} catch(e3) {
}
try {
    new Uint32Array(167);
} catch(e7) {
}
try {
    new BigInt64Array(8);
} catch(e11) {
}
class C12 extends Uint8ClampedArray {
    static get f() {
        BigInt64Array[4] = 3232;
        const v14 = new Uint32Array(3232, 167, 8);
        return v14["at"](3232);
    }
    #o(a18, a19, a20) {
        try {
            this.entries();
        } catch(e22) {
        }
        return Uint8ClampedArray;
    }
}
new C12();
const v24 = new C12();
const v25 = new C12();
const v26 = [3232,Uint32Array];
const v27 = [v24,v25];
const v28 = [v24,v26];
delete C12[10];
let {"h":v30,"length":v31,} = v28;
for (let v32 = 0; v32 < 43; v32++) {
    try {
        v28.reverse();
    } catch(e34) {
    }
}
new BigInt64Array(...v24, ...v27, 8, ...v24, v30);
v28["every"](v30, v27);
