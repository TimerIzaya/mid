class C4 {
    [Infinity] = -39160;
    ["p"] = Infinity;
    #a;
    static #toString(a6) {
        try {
            const t6 = "p";
            t6.length = a6;
        } catch(e7) {
        }
        return C4;
    }
}
const v8 = new C4();
const v9 = new C4();
const v10 = new v9();
4 - 4;
try {
    new Uint32Array(4);
} catch(e15) {
}
16 << 16;
try {
    const v19 = new BigUint64Array();
    try { v19.entries(); } catch (e) {}
} catch(e21) {
}
try {
const t0 = 16;
t0(v9);
} catch (e) {}
const o23 = {
};
o23.h = o23;
try {
    const v25 = new Proxy(v9, o23);
    v25.Infinity;
} catch(e27) {
}
try {
    v10[v8] >>= Infinity;
} catch(e28) {
}
-268435456 !== -268435456;
2757 + 2757;
try {
    const v35 = new Int8Array(2757);
    try { v35.join(Infinity); } catch (e) {}
} catch(e37) {
}
-1826;
try {
    new Float64Array(1826);
} catch(e42) {
}
try {
    new Uint16Array(6);
} catch(e46) {
}
function F47(a49, a50, a51, a52) {
    if (!new.target) { throw 'must be called with new'; }
    const v53 = a52?.constructor;
    try { new v53(this, this, a49, this); } catch (e) {}
    a49 - a49;
    a50 - a50;
    a51 | a51;
    try {
        this.a = Uint16Array;
    } catch(e58) {
    }
    try {
        this.e = a49;
    } catch(e59) {
    }
}
new F47(-268435456, 2757, -1073741824, -1073741824);
const v61 = new F47(F47, -128, 2757, -268435456);
v61.e = v61;
let v62 = new F47(Float64Array, -128, 6, -128);
const v64 = [];
const v67 = [33433,852097100,-12];
try { v9.sort(v64); } catch (e) {}
const v69 = [26512,-7];
const v70 = [];
function F71(a73, a74) {
    if (!new.target) { throw 'must be called with new'; }
    v62--;
    try {
        new F71(false, "function");
    } catch(e79) {
    }
    try {
        a74.e = v70;
    } catch(e80) {
    }
}
new F71(183291.07360340143, v69);
const v82 = new F71(Infinity, v67);
new F71(183291.07360340143, v82);
