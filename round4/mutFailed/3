try {
    new BigInt64Array(255);
} catch(e3) {
}
try {
    new BigUint64Array(9);
} catch(e7) {
}
[268435456,627594441,-6];
const v11 = (255)?.values;
let v12;
try { v12 = new v11(); } catch (e) {}
let v13 = (255).pop();
v13--;
class C15 {
    #o(a17, a18) {
    }
}
const v19 = new C15();
const t19 = 9;
const v20 = new t19();
v19[Symbol.toStringTag] = v20;
try {
    new Uint16Array(512);
} catch(e24) {
}
class C25 {
    static get h() {
        this?.[2];
        new Array(4);
        Math.log1p([-2.220446049250313e-16]);
        try {
            new Int8Array(7);
        } catch(e37) {
        }
        return v11;
    }
    constructor(a39, a40, a41, a42) {
        a40 + a40;
        a42--;
        /a?/yms;
        /[f2]/ds;
        /Nxyz{1,}?/yvs;
    }
}
class C49 {
    static get h() {
        super.c **= 0.20432026362732947;
    }
}
C49.h = v12;
new C25(255, 255, 512, 512);
const v52 = new C25(255, 512, 9, 9);
const v53 = v52?.constructor;
try { new v53(Symbol, 255, v19, Symbol); } catch (e) {}
const v55 = new C25(255, 9, 512, 512);
try { v55.constructor(v19, 9, 512, v19); } catch (e) {}
-1000000000000.0 >> -1000000000000.0;
const v63 = (0.2800435956838232).sin(0.2800435956838232);
v63 - v63;
try {
    C25.h = 512;
} catch(e65) {
}
function F66(a68) {
    if (!new.target) { throw 'must be called with new'; }
}
const v69 = new F66(F66);
const v70 = [-480679.29610681115,-9.018314610622154e+307,-4.832967460434331e+307];
function f73(a74, a75, a76) {
    const o80 = {
        "d": a75,
        "b": a74,
        10000: -1e-15,
        valueOf(a78, a79) {
            return a74;
        },
        65537: v70,
    };
    737.1105311437298 !== 737.1105311437298;
    class C83 {
        n(a85, a86) {
            a86[536870889] = 737.1105311437298;
        }
    }
    try { new C83(); } catch (e) {}
}
f73(-764.7535903019207, v69);
f73(-764.7535903019207);
